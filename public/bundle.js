
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.efimera = {}));
}(this, (function (exports) { 'use strict';

	/**
	 * A function that always returns `false`. Any passed in parameters are ignored.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Function
	 * @sig * -> Boolean
	 * @param {*}
	 * @return {Boolean}
	 * @see R.T
	 * @example
	 *
	 *      R.F(); //=> false
	 */
	var F = function () {
	  return false;
	};

	/**
	 * A function that always returns `true`. Any passed in parameters are ignored.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Function
	 * @sig * -> Boolean
	 * @param {*}
	 * @return {Boolean}
	 * @see R.F
	 * @example
	 *
	 *      R.T(); //=> true
	 */
	var T = function () {
	  return true;
	};

	/**
	 * A special placeholder value used to specify "gaps" within curried functions,
	 * allowing partial application of any combination of arguments, regardless of
	 * their positions.
	 *
	 * If `g` is a curried ternary function and `_` is `R.__`, the following are
	 * equivalent:
	 *
	 *   - `g(1, 2, 3)`
	 *   - `g(_, 2, 3)(1)`
	 *   - `g(_, _, 3)(1)(2)`
	 *   - `g(_, _, 3)(1, 2)`
	 *   - `g(_, 2, _)(1, 3)`
	 *   - `g(_, 2)(1)(3)`
	 *   - `g(_, 2)(1, 3)`
	 *   - `g(_, 2)(_, 3)(1)`
	 *
	 * @name __
	 * @constant
	 * @memberOf R
	 * @since v0.6.0
	 * @category Function
	 * @example
	 *
	 *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');
	 *      greet('Alice'); //=> 'Hello, Alice!'
	 */
	var __ = {
	  '@@functional/placeholder': true
	};

	function _isPlaceholder(a) {
	  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
	}

	/**
	 * Optimized internal one-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */

	function _curry1(fn) {
	  return function f1(a) {
	    if (arguments.length === 0 || _isPlaceholder(a)) {
	      return f1;
	    } else {
	      return fn.apply(this, arguments);
	    }
	  };
	}

	/**
	 * Optimized internal two-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */

	function _curry2(fn) {
	  return function f2(a, b) {
	    switch (arguments.length) {
	      case 0:
	        return f2;

	      case 1:
	        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
	          return fn(a, _b);
	        });

	      default:
	        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
	          return fn(_a, b);
	        }) : _isPlaceholder(b) ? _curry1(function (_b) {
	          return fn(a, _b);
	        }) : fn(a, b);
	    }
	  };
	}

	/**
	 * Adds two values.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Math
	 * @sig Number -> Number -> Number
	 * @param {Number} a
	 * @param {Number} b
	 * @return {Number}
	 * @see R.subtract
	 * @example
	 *
	 *      R.add(2, 3);       //=>  5
	 *      R.add(7)(10);      //=> 17
	 */

	var add =
	/*#__PURE__*/
	_curry2(function add(a, b) {
	  return Number(a) + Number(b);
	});

	/**
	 * Private `concat` function to merge two array-like objects.
	 *
	 * @private
	 * @param {Array|Arguments} [set1=[]] An array-like object.
	 * @param {Array|Arguments} [set2=[]] An array-like object.
	 * @return {Array} A new, merged array.
	 * @example
	 *
	 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	 */
	function _concat(set1, set2) {
	  set1 = set1 || [];
	  set2 = set2 || [];
	  var idx;
	  var len1 = set1.length;
	  var len2 = set2.length;
	  var result = [];
	  idx = 0;

	  while (idx < len1) {
	    result[result.length] = set1[idx];
	    idx += 1;
	  }

	  idx = 0;

	  while (idx < len2) {
	    result[result.length] = set2[idx];
	    idx += 1;
	  }

	  return result;
	}

	function _arity(n, fn) {
	  /* eslint-disable no-unused-vars */
	  switch (n) {
	    case 0:
	      return function () {
	        return fn.apply(this, arguments);
	      };

	    case 1:
	      return function (a0) {
	        return fn.apply(this, arguments);
	      };

	    case 2:
	      return function (a0, a1) {
	        return fn.apply(this, arguments);
	      };

	    case 3:
	      return function (a0, a1, a2) {
	        return fn.apply(this, arguments);
	      };

	    case 4:
	      return function (a0, a1, a2, a3) {
	        return fn.apply(this, arguments);
	      };

	    case 5:
	      return function (a0, a1, a2, a3, a4) {
	        return fn.apply(this, arguments);
	      };

	    case 6:
	      return function (a0, a1, a2, a3, a4, a5) {
	        return fn.apply(this, arguments);
	      };

	    case 7:
	      return function (a0, a1, a2, a3, a4, a5, a6) {
	        return fn.apply(this, arguments);
	      };

	    case 8:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	        return fn.apply(this, arguments);
	      };

	    case 9:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	        return fn.apply(this, arguments);
	      };

	    case 10:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return fn.apply(this, arguments);
	      };

	    default:
	      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
	  }
	}

	/**
	 * Internal curryN function.
	 *
	 * @private
	 * @category Function
	 * @param {Number} length The arity of the curried function.
	 * @param {Array} received An array of arguments received thus far.
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */

	function _curryN(length, received, fn) {
	  return function () {
	    var combined = [];
	    var argsIdx = 0;
	    var left = length;
	    var combinedIdx = 0;

	    while (combinedIdx < received.length || argsIdx < arguments.length) {
	      var result;

	      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
	        result = received[combinedIdx];
	      } else {
	        result = arguments[argsIdx];
	        argsIdx += 1;
	      }

	      combined[combinedIdx] = result;

	      if (!_isPlaceholder(result)) {
	        left -= 1;
	      }

	      combinedIdx += 1;
	    }

	    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
	  };
	}

	/**
	 * Returns a curried equivalent of the provided function, with the specified
	 * arity. The curried function has two unusual capabilities. First, its
	 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
	 * following are equivalent:
	 *
	 *   - `g(1)(2)(3)`
	 *   - `g(1)(2, 3)`
	 *   - `g(1, 2)(3)`
	 *   - `g(1, 2, 3)`
	 *
	 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
	 * "gaps", allowing partial application of any combination of arguments,
	 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
	 * the following are equivalent:
	 *
	 *   - `g(1, 2, 3)`
	 *   - `g(_, 2, 3)(1)`
	 *   - `g(_, _, 3)(1)(2)`
	 *   - `g(_, _, 3)(1, 2)`
	 *   - `g(_, 2)(1)(3)`
	 *   - `g(_, 2)(1, 3)`
	 *   - `g(_, 2)(_, 3)(1)`
	 *
	 * @func
	 * @memberOf R
	 * @since v0.5.0
	 * @category Function
	 * @sig Number -> (* -> a) -> (* -> a)
	 * @param {Number} length The arity for the returned function.
	 * @param {Function} fn The function to curry.
	 * @return {Function} A new, curried function.
	 * @see R.curry
	 * @example
	 *
	 *      const sumArgs = (...args) => R.sum(args);
	 *
	 *      const curriedAddFourNumbers = R.curryN(4, sumArgs);
	 *      const f = curriedAddFourNumbers(1, 2);
	 *      const g = f(3);
	 *      g(4); //=> 10
	 */

	var curryN =
	/*#__PURE__*/
	_curry2(function curryN(length, fn) {
	  if (length === 1) {
	    return _curry1(fn);
	  }

	  return _arity(length, _curryN(length, [], fn));
	});

	/**
	 * Creates a new list iteration function from an existing one by adding two new
	 * parameters to its callback function: the current index, and the entire list.
	 *
	 * This would turn, for instance, [`R.map`](#map) function into one that
	 * more closely resembles `Array.prototype.map`. Note that this will only work
	 * for functions in which the iteration callback function is the first
	 * parameter, and where the list is the last parameter. (This latter might be
	 * unimportant if the list parameter is not used.)
	 *
	 * @func
	 * @memberOf R
	 * @since v0.15.0
	 * @category Function
	 * @category List
	 * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)
	 * @param {Function} fn A list iteration function that does not pass index or list to its callback
	 * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
	 * @example
	 *
	 *      const mapIndexed = R.addIndex(R.map);
	 *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
	 *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
	 */

	var addIndex$1 =
	/*#__PURE__*/
	_curry1(function addIndex(fn) {
	  return curryN(fn.length, function () {
	    var idx = 0;
	    var origFn = arguments[0];
	    var list = arguments[arguments.length - 1];
	    var args = Array.prototype.slice.call(arguments, 0);

	    args[0] = function () {
	      var result = origFn.apply(this, _concat(arguments, [idx, list]));
	      idx += 1;
	      return result;
	    };

	    return fn.apply(this, args);
	  });
	});

	/**
	 * Optimized internal three-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */

	function _curry3(fn) {
	  return function f3(a, b, c) {
	    switch (arguments.length) {
	      case 0:
	        return f3;

	      case 1:
	        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
	          return fn(a, _b, _c);
	        });

	      case 2:
	        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
	          return fn(_a, b, _c);
	        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
	          return fn(a, _b, _c);
	        }) : _curry1(function (_c) {
	          return fn(a, b, _c);
	        });

	      default:
	        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
	          return fn(_a, _b, c);
	        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
	          return fn(_a, b, _c);
	        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
	          return fn(a, _b, _c);
	        }) : _isPlaceholder(a) ? _curry1(function (_a) {
	          return fn(_a, b, c);
	        }) : _isPlaceholder(b) ? _curry1(function (_b) {
	          return fn(a, _b, c);
	        }) : _isPlaceholder(c) ? _curry1(function (_c) {
	          return fn(a, b, _c);
	        }) : fn(a, b, c);
	    }
	  };
	}

	/**
	 * Applies a function to the value at the given index of an array, returning a
	 * new copy of the array with the element at the given index replaced with the
	 * result of the function application.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category List
	 * @sig Number -> (a -> a) -> [a] -> [a]
	 * @param {Number} idx The index.
	 * @param {Function} fn The function to apply.
	 * @param {Array|Arguments} list An array-like object whose value
	 *        at the supplied index will be replaced.
	 * @return {Array} A copy of the supplied array-like object with
	 *         the element at index `idx` replaced with the value
	 *         returned by applying `fn` to the existing element.
	 * @see R.update
	 * @example
	 *
	 *      R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']
	 *      R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']
	 * @symb R.adjust(-1, f, [a, b]) = [a, f(b)]
	 * @symb R.adjust(0, f, [a, b]) = [f(a), b]
	 */

	var adjust =
	/*#__PURE__*/
	_curry3(function adjust(idx, fn, list) {
	  if (idx >= list.length || idx < -list.length) {
	    return list;
	  }

	  var start = idx < 0 ? list.length : 0;

	  var _idx = start + idx;

	  var _list = _concat(list);

	  _list[_idx] = fn(list[_idx]);
	  return _list;
	});

	/**
	 * Tests whether or not an object is an array.
	 *
	 * @private
	 * @param {*} val The object to test.
	 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
	 * @example
	 *
	 *      _isArray([]); //=> true
	 *      _isArray(null); //=> false
	 *      _isArray({}); //=> false
	 */
	var _isArray = Array.isArray || function _isArray(val) {
	  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
	};

	function _isTransformer(obj) {
	  return obj != null && typeof obj['@@transducer/step'] === 'function';
	}

	/**
	 * Returns a function that dispatches with different strategies based on the
	 * object in list position (last argument). If it is an array, executes [fn].
	 * Otherwise, if it has a function with one of the given method names, it will
	 * execute that function (functor case). Otherwise, if it is a transformer,
	 * uses transducer [xf] to return a new transformer (transducer case).
	 * Otherwise, it will default to executing [fn].
	 *
	 * @private
	 * @param {Array} methodNames properties to check for a custom implementation
	 * @param {Function} xf transducer to initialize if object is transformer
	 * @param {Function} fn default ramda implementation
	 * @return {Function} A function that dispatches on object in list position
	 */

	function _dispatchable(methodNames, xf, fn) {
	  return function () {
	    if (arguments.length === 0) {
	      return fn();
	    }

	    var args = Array.prototype.slice.call(arguments, 0);
	    var obj = args.pop();

	    if (!_isArray(obj)) {
	      var idx = 0;

	      while (idx < methodNames.length) {
	        if (typeof obj[methodNames[idx]] === 'function') {
	          return obj[methodNames[idx]].apply(obj, args);
	        }

	        idx += 1;
	      }

	      if (_isTransformer(obj)) {
	        var transducer = xf.apply(null, args);
	        return transducer(obj);
	      }
	    }

	    return fn.apply(this, arguments);
	  };
	}

	function _reduced(x) {
	  return x && x['@@transducer/reduced'] ? x : {
	    '@@transducer/value': x,
	    '@@transducer/reduced': true
	  };
	}

	var _xfBase = {
	  init: function () {
	    return this.xf['@@transducer/init']();
	  },
	  result: function (result) {
	    return this.xf['@@transducer/result'](result);
	  }
	};

	var XAll =
	/*#__PURE__*/
	function () {
	  function XAll(f, xf) {
	    this.xf = xf;
	    this.f = f;
	    this.all = true;
	  }

	  XAll.prototype['@@transducer/init'] = _xfBase.init;

	  XAll.prototype['@@transducer/result'] = function (result) {
	    if (this.all) {
	      result = this.xf['@@transducer/step'](result, true);
	    }

	    return this.xf['@@transducer/result'](result);
	  };

	  XAll.prototype['@@transducer/step'] = function (result, input) {
	    if (!this.f(input)) {
	      this.all = false;
	      result = _reduced(this.xf['@@transducer/step'](result, false));
	    }

	    return result;
	  };

	  return XAll;
	}();

	var _xall =
	/*#__PURE__*/
	_curry2(function _xall(f, xf) {
	  return new XAll(f, xf);
	});

	/**
	 * Returns `true` if all elements of the list match the predicate, `false` if
	 * there are any that don't.
	 *
	 * Dispatches to the `all` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> Boolean
	 * @param {Function} fn The predicate function.
	 * @param {Array} list The array to consider.
	 * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
	 *         otherwise.
	 * @see R.any, R.none, R.transduce
	 * @example
	 *
	 *      const equals3 = R.equals(3);
	 *      R.all(equals3)([3, 3, 3, 3]); //=> true
	 *      R.all(equals3)([3, 3, 1, 3]); //=> false
	 */

	var all =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['all'], _xall, function all(fn, list) {
	  var idx = 0;

	  while (idx < list.length) {
	    if (!fn(list[idx])) {
	      return false;
	    }

	    idx += 1;
	  }

	  return true;
	}));

	/**
	 * Returns the larger of its two arguments.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig Ord a => a -> a -> a
	 * @param {*} a
	 * @param {*} b
	 * @return {*}
	 * @see R.maxBy, R.min
	 * @example
	 *
	 *      R.max(789, 123); //=> 789
	 *      R.max('a', 'b'); //=> 'b'
	 */

	var max =
	/*#__PURE__*/
	_curry2(function max(a, b) {
	  return b > a ? b : a;
	});

	function _map(fn, functor) {
	  var idx = 0;
	  var len = functor.length;
	  var result = Array(len);

	  while (idx < len) {
	    result[idx] = fn(functor[idx]);
	    idx += 1;
	  }

	  return result;
	}

	function _isString(x) {
	  return Object.prototype.toString.call(x) === '[object String]';
	}

	/**
	 * Tests whether or not an object is similar to an array.
	 *
	 * @private
	 * @category Type
	 * @category List
	 * @sig * -> Boolean
	 * @param {*} x The object to test.
	 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
	 * @example
	 *
	 *      _isArrayLike([]); //=> true
	 *      _isArrayLike(true); //=> false
	 *      _isArrayLike({}); //=> false
	 *      _isArrayLike({length: 10}); //=> false
	 *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
	 */

	var _isArrayLike =
	/*#__PURE__*/
	_curry1(function isArrayLike(x) {
	  if (_isArray(x)) {
	    return true;
	  }

	  if (!x) {
	    return false;
	  }

	  if (typeof x !== 'object') {
	    return false;
	  }

	  if (_isString(x)) {
	    return false;
	  }

	  if (x.nodeType === 1) {
	    return !!x.length;
	  }

	  if (x.length === 0) {
	    return true;
	  }

	  if (x.length > 0) {
	    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
	  }

	  return false;
	});

	var XWrap =
	/*#__PURE__*/
	function () {
	  function XWrap(fn) {
	    this.f = fn;
	  }

	  XWrap.prototype['@@transducer/init'] = function () {
	    throw new Error('init not implemented on XWrap');
	  };

	  XWrap.prototype['@@transducer/result'] = function (acc) {
	    return acc;
	  };

	  XWrap.prototype['@@transducer/step'] = function (acc, x) {
	    return this.f(acc, x);
	  };

	  return XWrap;
	}();

	function _xwrap(fn) {
	  return new XWrap(fn);
	}

	/**
	 * Creates a function that is bound to a context.
	 * Note: `R.bind` does not provide the additional argument-binding capabilities of
	 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.6.0
	 * @category Function
	 * @category Object
	 * @sig (* -> *) -> {*} -> (* -> *)
	 * @param {Function} fn The function to bind to context
	 * @param {Object} thisObj The context to bind `fn` to
	 * @return {Function} A function that will execute in the context of `thisObj`.
	 * @see R.partial
	 * @example
	 *
	 *      const log = R.bind(console.log, console);
	 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
	 *      // logs {a: 2}
	 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
	 */

	var bind =
	/*#__PURE__*/
	_curry2(function bind(fn, thisObj) {
	  return _arity(fn.length, function () {
	    return fn.apply(thisObj, arguments);
	  });
	});

	function _arrayReduce(xf, acc, list) {
	  var idx = 0;
	  var len = list.length;

	  while (idx < len) {
	    acc = xf['@@transducer/step'](acc, list[idx]);

	    if (acc && acc['@@transducer/reduced']) {
	      acc = acc['@@transducer/value'];
	      break;
	    }

	    idx += 1;
	  }

	  return xf['@@transducer/result'](acc);
	}

	function _iterableReduce(xf, acc, iter) {
	  var step = iter.next();

	  while (!step.done) {
	    acc = xf['@@transducer/step'](acc, step.value);

	    if (acc && acc['@@transducer/reduced']) {
	      acc = acc['@@transducer/value'];
	      break;
	    }

	    step = iter.next();
	  }

	  return xf['@@transducer/result'](acc);
	}

	function _methodReduce(xf, acc, obj, methodName) {
	  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
	}

	var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';
	function _reduce(fn, acc, list) {
	  if (typeof fn === 'function') {
	    fn = _xwrap(fn);
	  }

	  if (_isArrayLike(list)) {
	    return _arrayReduce(fn, acc, list);
	  }

	  if (typeof list['fantasy-land/reduce'] === 'function') {
	    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
	  }

	  if (list[symIterator] != null) {
	    return _iterableReduce(fn, acc, list[symIterator]());
	  }

	  if (typeof list.next === 'function') {
	    return _iterableReduce(fn, acc, list);
	  }

	  if (typeof list.reduce === 'function') {
	    return _methodReduce(fn, acc, list, 'reduce');
	  }

	  throw new TypeError('reduce: list must be array or iterable');
	}

	var XMap =
	/*#__PURE__*/
	function () {
	  function XMap(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }

	  XMap.prototype['@@transducer/init'] = _xfBase.init;
	  XMap.prototype['@@transducer/result'] = _xfBase.result;

	  XMap.prototype['@@transducer/step'] = function (result, input) {
	    return this.xf['@@transducer/step'](result, this.f(input));
	  };

	  return XMap;
	}();

	var _xmap =
	/*#__PURE__*/
	_curry2(function _xmap(f, xf) {
	  return new XMap(f, xf);
	});

	function _has(prop, obj) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var toString = Object.prototype.toString;

	var _isArguments =
	/*#__PURE__*/
	function () {
	  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
	    return toString.call(x) === '[object Arguments]';
	  } : function _isArguments(x) {
	    return _has('callee', x);
	  };
	}();

	var hasEnumBug = !
	/*#__PURE__*/
	{
	  toString: null
	}.propertyIsEnumerable('toString');
	var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug

	var hasArgsEnumBug =
	/*#__PURE__*/
	function () {

	  return arguments.propertyIsEnumerable('length');
	}();

	var contains = function contains(list, item) {
	  var idx = 0;

	  while (idx < list.length) {
	    if (list[idx] === item) {
	      return true;
	    }

	    idx += 1;
	  }

	  return false;
	};
	/**
	 * Returns a list containing the names of all the enumerable own properties of
	 * the supplied object.
	 * Note that the order of the output array is not guaranteed to be consistent
	 * across different JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig {k: v} -> [k]
	 * @param {Object} obj The object to extract properties from
	 * @return {Array} An array of the object's own properties.
	 * @see R.keysIn, R.values
	 * @example
	 *
	 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
	 */


	var keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?
	/*#__PURE__*/
	_curry1(function keys(obj) {
	  return Object(obj) !== obj ? [] : Object.keys(obj);
	}) :
	/*#__PURE__*/
	_curry1(function keys(obj) {
	  if (Object(obj) !== obj) {
	    return [];
	  }

	  var prop, nIdx;
	  var ks = [];

	  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);

	  for (prop in obj) {
	    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
	      ks[ks.length] = prop;
	    }
	  }

	  if (hasEnumBug) {
	    nIdx = nonEnumerableProps.length - 1;

	    while (nIdx >= 0) {
	      prop = nonEnumerableProps[nIdx];

	      if (_has(prop, obj) && !contains(ks, prop)) {
	        ks[ks.length] = prop;
	      }

	      nIdx -= 1;
	    }
	  }

	  return ks;
	});

	/**
	 * Takes a function and
	 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
	 * applies the function to each of the functor's values, and returns
	 * a functor of the same shape.
	 *
	 * Ramda provides suitable `map` implementations for `Array` and `Object`,
	 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
	 *
	 * Dispatches to the `map` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * Also treats functions as functors and will compose them together.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Functor f => (a -> b) -> f a -> f b
	 * @param {Function} fn The function to be called on every element of the input `list`.
	 * @param {Array} list The list to be iterated over.
	 * @return {Array} The new list.
	 * @see R.transduce, R.addIndex
	 * @example
	 *
	 *      const double = x => x * 2;
	 *
	 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
	 *
	 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
	 * @symb R.map(f, [a, b]) = [f(a), f(b)]
	 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
	 * @symb R.map(f, functor_o) = functor_o.map(f)
	 */

	var map$1 =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {
	  switch (Object.prototype.toString.call(functor)) {
	    case '[object Function]':
	      return curryN(functor.length, function () {
	        return fn.call(this, functor.apply(this, arguments));
	      });

	    case '[object Object]':
	      return _reduce(function (acc, key) {
	        acc[key] = fn(functor[key]);
	        return acc;
	      }, {}, keys(functor));

	    default:
	      return _map(fn, functor);
	  }
	}));

	/**
	 * Determine if the passed argument is an integer.
	 *
	 * @private
	 * @param {*} n
	 * @category Type
	 * @return {Boolean}
	 */
	var _isInteger = Number.isInteger || function _isInteger(n) {
	  return n << 0 === n;
	};

	/**
	 * Returns the nth element of the given list or string. If n is negative the
	 * element at index length + n is returned.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Number -> [a] -> a | Undefined
	 * @sig Number -> String -> String
	 * @param {Number} offset
	 * @param {*} list
	 * @return {*}
	 * @example
	 *
	 *      const list = ['foo', 'bar', 'baz', 'quux'];
	 *      R.nth(1, list); //=> 'bar'
	 *      R.nth(-1, list); //=> 'quux'
	 *      R.nth(-99, list); //=> undefined
	 *
	 *      R.nth(2, 'abc'); //=> 'c'
	 *      R.nth(3, 'abc'); //=> ''
	 * @symb R.nth(-1, [a, b, c]) = c
	 * @symb R.nth(0, [a, b, c]) = a
	 * @symb R.nth(1, [a, b, c]) = b
	 */

	var nth =
	/*#__PURE__*/
	_curry2(function nth(offset, list) {
	  var idx = offset < 0 ? list.length + offset : offset;
	  return _isString(list) ? list.charAt(idx) : list[idx];
	});

	/**
	 * Retrieves the values at given paths of an object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.27.0
	 * @category Object
	 * @typedefn Idx = [String | Int]
	 * @sig [Idx] -> {a} -> [a | Undefined]
	 * @param {Array} pathsArray The array of paths to be fetched.
	 * @param {Object} obj The object to retrieve the nested properties from.
	 * @return {Array} A list consisting of values at paths specified by "pathsArray".
	 * @see R.path
	 * @example
	 *
	 *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]
	 *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]
	 */

	var paths =
	/*#__PURE__*/
	_curry2(function paths(pathsArray, obj) {
	  return pathsArray.map(function (paths) {
	    var val = obj;
	    var idx = 0;
	    var p;

	    while (idx < paths.length) {
	      if (val == null) {
	        return;
	      }

	      p = paths[idx];
	      val = _isInteger(p) ? nth(p, val) : val[p];
	      idx += 1;
	    }

	    return val;
	  });
	});

	/**
	 * Retrieve the value at a given path.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.0
	 * @category Object
	 * @typedefn Idx = String | Int
	 * @sig [Idx] -> {a} -> a | Undefined
	 * @param {Array} path The path to use.
	 * @param {Object} obj The object to retrieve the nested property from.
	 * @return {*} The data at `path`.
	 * @see R.prop, R.nth
	 * @example
	 *
	 *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
	 *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
	 *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1
	 *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2
	 */

	var path =
	/*#__PURE__*/
	_curry2(function path(pathAr, obj) {
	  return paths([pathAr], obj)[0];
	});

	/**
	 * Returns a function that when supplied an object returns the indicated
	 * property of that object, if it exists.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @typedefn Idx = String | Int
	 * @sig Idx -> {s: a} -> a | Undefined
	 * @param {String|Number} p The property name or array index
	 * @param {Object} obj The object to query
	 * @return {*} The value at `obj.p`.
	 * @see R.path, R.nth
	 * @example
	 *
	 *      R.prop('x', {x: 100}); //=> 100
	 *      R.prop('x', {}); //=> undefined
	 *      R.prop(0, [100]); //=> 100
	 *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4
	 */

	var prop =
	/*#__PURE__*/
	_curry2(function prop(p, obj) {
	  return path([p], obj);
	});

	/**
	 * Returns a new list by plucking the same named property off all objects in
	 * the list supplied.
	 *
	 * `pluck` will work on
	 * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
	 * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Functor f => k -> f {k: v} -> f v
	 * @param {Number|String} key The key name to pluck off of each object.
	 * @param {Array} f The array or functor to consider.
	 * @return {Array} The list of values for the given key.
	 * @see R.props
	 * @example
	 *
	 *      var getAges = R.pluck('age');
	 *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]
	 *
	 *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]
	 *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
	 * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
	 * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
	 */

	var pluck =
	/*#__PURE__*/
	_curry2(function pluck(p, list) {
	  return map$1(prop(p), list);
	});

	/**
	 * Returns a single item by iterating through the list, successively calling
	 * the iterator function and passing it an accumulator value and the current
	 * value from the array, and then passing the result to the next call.
	 *
	 * The iterator function receives two values: *(acc, value)*. It may use
	 * [`R.reduced`](#reduced) to shortcut the iteration.
	 *
	 * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
	 * is *(value, acc)*.
	 *
	 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
	 * arrays), unlike the native `Array.prototype.reduce` method. For more details
	 * on this behavior, see:
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
	 *
	 * Dispatches to the `reduce` method of the third argument, if present. When
	 * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
	 * shortcuting, as this is not implemented by `reduce`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig ((a, b) -> a) -> a -> [b] -> a
	 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	 *        current element from the array.
	 * @param {*} acc The accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.reduced, R.addIndex, R.reduceRight
	 * @example
	 *
	 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
	 *      //          -               -10
	 *      //         / \              / \
	 *      //        -   4           -6   4
	 *      //       / \              / \
	 *      //      -   3   ==>     -3   3
	 *      //     / \              / \
	 *      //    -   2           -1   2
	 *      //   / \              / \
	 *      //  0   1            0   1
	 *
	 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
	 */

	var reduce =
	/*#__PURE__*/
	_curry3(_reduce);

	/**
	 * Takes a list of predicates and returns a predicate that returns true for a
	 * given list of arguments if every one of the provided predicates is satisfied
	 * by those arguments.
	 *
	 * The function returned is a curried function whose arity matches that of the
	 * highest-arity predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Logic
	 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
	 * @param {Array} predicates An array of predicates to check
	 * @return {Function} The combined predicate
	 * @see R.anyPass
	 * @example
	 *
	 *      const isQueen = R.propEq('rank', 'Q');
	 *      const isSpade = R.propEq('suit', '♠︎');
	 *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);
	 *
	 *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false
	 *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true
	 */

	var allPass =
	/*#__PURE__*/
	_curry1(function allPass(preds) {
	  return curryN(reduce(max, 0, pluck('length', preds)), function () {
	    var idx = 0;
	    var len = preds.length;

	    while (idx < len) {
	      if (!preds[idx].apply(this, arguments)) {
	        return false;
	      }

	      idx += 1;
	    }

	    return true;
	  });
	});

	/**
	 * Returns a function that always returns the given value. Note that for
	 * non-primitives the value returned is a reference to the original value.
	 *
	 * This function is known as `const`, `constant`, or `K` (for K combinator) in
	 * other languages and libraries.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig a -> (* -> a)
	 * @param {*} val The value to wrap in a function
	 * @return {Function} A Function :: * -> val.
	 * @example
	 *
	 *      const t = R.always('Tee');
	 *      t(); //=> 'Tee'
	 */

	var always =
	/*#__PURE__*/
	_curry1(function always(val) {
	  return function () {
	    return val;
	  };
	});

	/**
	 * Returns `true` if both arguments are `true`; `false` otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Logic
	 * @sig a -> b -> a | b
	 * @param {Any} a
	 * @param {Any} b
	 * @return {Any} the first argument if it is falsy, otherwise the second argument.
	 * @see R.both, R.xor
	 * @example
	 *
	 *      R.and(true, true); //=> true
	 *      R.and(true, false); //=> false
	 *      R.and(false, true); //=> false
	 *      R.and(false, false); //=> false
	 */

	var and =
	/*#__PURE__*/
	_curry2(function and(a, b) {
	  return a && b;
	});

	var XAny =
	/*#__PURE__*/
	function () {
	  function XAny(f, xf) {
	    this.xf = xf;
	    this.f = f;
	    this.any = false;
	  }

	  XAny.prototype['@@transducer/init'] = _xfBase.init;

	  XAny.prototype['@@transducer/result'] = function (result) {
	    if (!this.any) {
	      result = this.xf['@@transducer/step'](result, false);
	    }

	    return this.xf['@@transducer/result'](result);
	  };

	  XAny.prototype['@@transducer/step'] = function (result, input) {
	    if (this.f(input)) {
	      this.any = true;
	      result = _reduced(this.xf['@@transducer/step'](result, true));
	    }

	    return result;
	  };

	  return XAny;
	}();

	var _xany =
	/*#__PURE__*/
	_curry2(function _xany(f, xf) {
	  return new XAny(f, xf);
	});

	/**
	 * Returns `true` if at least one of the elements of the list match the predicate,
	 * `false` otherwise.
	 *
	 * Dispatches to the `any` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> Boolean
	 * @param {Function} fn The predicate function.
	 * @param {Array} list The array to consider.
	 * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
	 *         otherwise.
	 * @see R.all, R.none, R.transduce
	 * @example
	 *
	 *      const lessThan0 = R.flip(R.lt)(0);
	 *      const lessThan2 = R.flip(R.lt)(2);
	 *      R.any(lessThan0)([1, 2]); //=> false
	 *      R.any(lessThan2)([1, 2]); //=> true
	 */

	var any =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['any'], _xany, function any(fn, list) {
	  var idx = 0;

	  while (idx < list.length) {
	    if (fn(list[idx])) {
	      return true;
	    }

	    idx += 1;
	  }

	  return false;
	}));

	/**
	 * Takes a list of predicates and returns a predicate that returns true for a
	 * given list of arguments if at least one of the provided predicates is
	 * satisfied by those arguments.
	 *
	 * The function returned is a curried function whose arity matches that of the
	 * highest-arity predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Logic
	 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
	 * @param {Array} predicates An array of predicates to check
	 * @return {Function} The combined predicate
	 * @see R.allPass
	 * @example
	 *
	 *      const isClub = R.propEq('suit', '♣');
	 *      const isSpade = R.propEq('suit', '♠');
	 *      const isBlackCard = R.anyPass([isClub, isSpade]);
	 *
	 *      isBlackCard({rank: '10', suit: '♣'}); //=> true
	 *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true
	 *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false
	 */

	var anyPass =
	/*#__PURE__*/
	_curry1(function anyPass(preds) {
	  return curryN(reduce(max, 0, pluck('length', preds)), function () {
	    var idx = 0;
	    var len = preds.length;

	    while (idx < len) {
	      if (preds[idx].apply(this, arguments)) {
	        return true;
	      }

	      idx += 1;
	    }

	    return false;
	  });
	});

	/**
	 * ap applies a list of functions to a list of values.
	 *
	 * Dispatches to the `ap` method of the second argument, if present. Also
	 * treats curried functions as applicatives.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category Function
	 * @sig [a -> b] -> [a] -> [b]
	 * @sig Apply f => f (a -> b) -> f a -> f b
	 * @sig (r -> a -> b) -> (r -> a) -> (r -> b)
	 * @param {*} applyF
	 * @param {*} applyX
	 * @return {*}
	 * @example
	 *
	 *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
	 *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
	 *
	 *      // R.ap can also be used as S combinator
	 *      // when only two functions are passed
	 *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'
	 * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
	 */

	var ap =
	/*#__PURE__*/
	_curry2(function ap(applyF, applyX) {
	  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {
	    return applyF(x)(applyX(x));
	  } : _reduce(function (acc, f) {
	    return _concat(acc, map$1(f, applyX));
	  }, [], applyF);
	});

	function _aperture(n, list) {
	  var idx = 0;
	  var limit = list.length - (n - 1);
	  var acc = new Array(limit >= 0 ? limit : 0);

	  while (idx < limit) {
	    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
	    idx += 1;
	  }

	  return acc;
	}

	var XAperture =
	/*#__PURE__*/
	function () {
	  function XAperture(n, xf) {
	    this.xf = xf;
	    this.pos = 0;
	    this.full = false;
	    this.acc = new Array(n);
	  }

	  XAperture.prototype['@@transducer/init'] = _xfBase.init;

	  XAperture.prototype['@@transducer/result'] = function (result) {
	    this.acc = null;
	    return this.xf['@@transducer/result'](result);
	  };

	  XAperture.prototype['@@transducer/step'] = function (result, input) {
	    this.store(input);
	    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;
	  };

	  XAperture.prototype.store = function (input) {
	    this.acc[this.pos] = input;
	    this.pos += 1;

	    if (this.pos === this.acc.length) {
	      this.pos = 0;
	      this.full = true;
	    }
	  };

	  XAperture.prototype.getCopy = function () {
	    return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
	  };

	  return XAperture;
	}();

	var _xaperture =
	/*#__PURE__*/
	_curry2(function _xaperture(n, xf) {
	  return new XAperture(n, xf);
	});

	/**
	 * Returns a new list, composed of n-tuples of consecutive elements. If `n` is
	 * greater than the length of the list, an empty list is returned.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.12.0
	 * @category List
	 * @sig Number -> [a] -> [[a]]
	 * @param {Number} n The size of the tuples to create
	 * @param {Array} list The list to split into `n`-length tuples
	 * @return {Array} The resulting list of `n`-length tuples
	 * @see R.transduce
	 * @example
	 *
	 *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
	 *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
	 *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
	 */

	var aperture =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable([], _xaperture, _aperture));

	/**
	 * Returns a new list containing the contents of the given list, followed by
	 * the given element.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig a -> [a] -> [a]
	 * @param {*} el The element to add to the end of the new list.
	 * @param {Array} list The list of elements to add a new item to.
	 *        list.
	 * @return {Array} A new list containing the elements of the old list followed by `el`.
	 * @see R.prepend
	 * @example
	 *
	 *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
	 *      R.append('tests', []); //=> ['tests']
	 *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
	 */

	var append =
	/*#__PURE__*/
	_curry2(function append(el, list) {
	  return _concat(list, [el]);
	});

	/**
	 * Applies function `fn` to the argument list `args`. This is useful for
	 * creating a fixed-arity function from a variadic function. `fn` should be a
	 * bound function if context is significant.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.7.0
	 * @category Function
	 * @sig (*... -> a) -> [*] -> a
	 * @param {Function} fn The function which will be called with `args`
	 * @param {Array} args The arguments to call `fn` with
	 * @return {*} result The result, equivalent to `fn(...args)`
	 * @see R.call, R.unapply
	 * @example
	 *
	 *      const nums = [1, 2, 3, -99, 42, 6, 7];
	 *      R.apply(Math.max, nums); //=> 42
	 * @symb R.apply(f, [a, b, c]) = f(a, b, c)
	 */

	var apply =
	/*#__PURE__*/
	_curry2(function apply(fn, args) {
	  return fn.apply(this, args);
	});

	/**
	 * Returns a list of all the enumerable own properties of the supplied object.
	 * Note that the order of the output array is not guaranteed across different
	 * JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig {k: v} -> [v]
	 * @param {Object} obj The object to extract values from
	 * @return {Array} An array of the values of the object's own properties.
	 * @see R.valuesIn, R.keys
	 * @example
	 *
	 *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
	 */

	var values =
	/*#__PURE__*/
	_curry1(function values(obj) {
	  var props = keys(obj);
	  var len = props.length;
	  var vals = [];
	  var idx = 0;

	  while (idx < len) {
	    vals[idx] = obj[props[idx]];
	    idx += 1;
	  }

	  return vals;
	});

	// delegating calls to .map

	function mapValues(fn, obj) {
	  return keys(obj).reduce(function (acc, key) {
	    acc[key] = fn(obj[key]);
	    return acc;
	  }, {});
	}
	/**
	 * Given a spec object recursively mapping properties to functions, creates a
	 * function producing an object of the same structure, by mapping each property
	 * to the result of calling its associated function with the supplied arguments.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.20.0
	 * @category Function
	 * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
	 * @param {Object} spec an object recursively mapping properties to functions for
	 *        producing the values for these properties.
	 * @return {Function} A function that returns an object of the same structure
	 * as `spec', with each property set to the value returned by calling its
	 * associated function with the supplied arguments.
	 * @see R.converge, R.juxt
	 * @example
	 *
	 *      const getMetrics = R.applySpec({
	 *        sum: R.add,
	 *        nested: { mul: R.multiply }
	 *      });
	 *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
	 * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }
	 */


	var applySpec =
	/*#__PURE__*/
	_curry1(function applySpec(spec) {
	  spec = mapValues(function (v) {
	    return typeof v == 'function' ? v : applySpec(v);
	  }, spec);
	  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {
	    var args = arguments;
	    return mapValues(function (f) {
	      return apply(f, args);
	    }, spec);
	  });
	});

	/**
	 * Takes a value and applies a function to it.
	 *
	 * This function is also known as the `thrush` combinator.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.25.0
	 * @category Function
	 * @sig a -> (a -> b) -> b
	 * @param {*} x The value
	 * @param {Function} f The function to apply
	 * @return {*} The result of applying `f` to `x`
	 * @example
	 *
	 *      const t42 = R.applyTo(42);
	 *      t42(R.identity); //=> 42
	 *      t42(R.add(1)); //=> 43
	 */

	var applyTo =
	/*#__PURE__*/
	_curry2(function applyTo(x, f) {
	  return f(x);
	});

	/**
	 * Makes an ascending comparator function out of a function that returns a value
	 * that can be compared with `<` and `>`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.23.0
	 * @category Function
	 * @sig Ord b => (a -> b) -> a -> a -> Number
	 * @param {Function} fn A function of arity one that returns a value that can be compared
	 * @param {*} a The first item to be compared.
	 * @param {*} b The second item to be compared.
	 * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`
	 * @see R.descend
	 * @example
	 *
	 *      const byAge = R.ascend(R.prop('age'));
	 *      const people = [
	 *        { name: 'Emma', age: 70 },
	 *        { name: 'Peter', age: 78 },
	 *        { name: 'Mikhail', age: 62 },
	 *      ];
	 *      const peopleByYoungestFirst = R.sort(byAge, people);
	 *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]
	 */

	var ascend =
	/*#__PURE__*/
	_curry3(function ascend(fn, a, b) {
	  var aa = fn(a);
	  var bb = fn(b);
	  return aa < bb ? -1 : aa > bb ? 1 : 0;
	});

	/**
	 * Makes a shallow clone of an object, setting or overriding the specified
	 * property with the given value. Note that this copies and flattens prototype
	 * properties onto the new object as well. All non-primitive properties are
	 * copied by reference.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Object
	 * @sig String -> a -> {k: v} -> {k: v}
	 * @param {String} prop The property name to set
	 * @param {*} val The new value
	 * @param {Object} obj The object to clone
	 * @return {Object} A new object equivalent to the original except for the changed property.
	 * @see R.dissoc, R.pick
	 * @example
	 *
	 *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
	 */

	var assoc =
	/*#__PURE__*/
	_curry3(function assoc(prop, val, obj) {
	  var result = {};

	  for (var p in obj) {
	    result[p] = obj[p];
	  }

	  result[prop] = val;
	  return result;
	});

	/**
	 * Checks if the input value is `null` or `undefined`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Type
	 * @sig * -> Boolean
	 * @param {*} x The value to test.
	 * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
	 * @example
	 *
	 *      R.isNil(null); //=> true
	 *      R.isNil(undefined); //=> true
	 *      R.isNil(0); //=> false
	 *      R.isNil([]); //=> false
	 */

	var isNil =
	/*#__PURE__*/
	_curry1(function isNil(x) {
	  return x == null;
	});

	/**
	 * Makes a shallow clone of an object, setting or overriding the nodes required
	 * to create the given path, and placing the specific value at the tail end of
	 * that path. Note that this copies and flattens prototype properties onto the
	 * new object as well. All non-primitive properties are copied by reference.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Object
	 * @typedefn Idx = String | Int
	 * @sig [Idx] -> a -> {a} -> {a}
	 * @param {Array} path the path to set
	 * @param {*} val The new value
	 * @param {Object} obj The object to clone
	 * @return {Object} A new object equivalent to the original except along the specified path.
	 * @see R.dissocPath
	 * @example
	 *
	 *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
	 *
	 *      // Any missing or non-object keys in path will be overridden
	 *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}
	 */

	var assocPath =
	/*#__PURE__*/
	_curry3(function assocPath(path, val, obj) {
	  if (path.length === 0) {
	    return val;
	  }

	  var idx = path[0];

	  if (path.length > 1) {
	    var nextObj = !isNil(obj) && _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};
	    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);
	  }

	  if (_isInteger(idx) && _isArray(obj)) {
	    var arr = [].concat(obj);
	    arr[idx] = val;
	    return arr;
	  } else {
	    return assoc(idx, val, obj);
	  }
	});

	/**
	 * Wraps a function of any arity (including nullary) in a function that accepts
	 * exactly `n` parameters. Any extraneous parameters will not be passed to the
	 * supplied function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig Number -> (* -> a) -> (* -> a)
	 * @param {Number} n The desired arity of the new function.
	 * @param {Function} fn The function to wrap.
	 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	 *         arity `n`.
	 * @see R.binary, R.unary
	 * @example
	 *
	 *      const takesTwoArgs = (a, b) => [a, b];
	 *
	 *      takesTwoArgs.length; //=> 2
	 *      takesTwoArgs(1, 2); //=> [1, 2]
	 *
	 *      const takesOneArg = R.nAry(1, takesTwoArgs);
	 *      takesOneArg.length; //=> 1
	 *      // Only `n` arguments are passed to the wrapped function
	 *      takesOneArg(1, 2); //=> [1, undefined]
	 * @symb R.nAry(0, f)(a, b) = f()
	 * @symb R.nAry(1, f)(a, b) = f(a)
	 * @symb R.nAry(2, f)(a, b) = f(a, b)
	 */

	var nAry =
	/*#__PURE__*/
	_curry2(function nAry(n, fn) {
	  switch (n) {
	    case 0:
	      return function () {
	        return fn.call(this);
	      };

	    case 1:
	      return function (a0) {
	        return fn.call(this, a0);
	      };

	    case 2:
	      return function (a0, a1) {
	        return fn.call(this, a0, a1);
	      };

	    case 3:
	      return function (a0, a1, a2) {
	        return fn.call(this, a0, a1, a2);
	      };

	    case 4:
	      return function (a0, a1, a2, a3) {
	        return fn.call(this, a0, a1, a2, a3);
	      };

	    case 5:
	      return function (a0, a1, a2, a3, a4) {
	        return fn.call(this, a0, a1, a2, a3, a4);
	      };

	    case 6:
	      return function (a0, a1, a2, a3, a4, a5) {
	        return fn.call(this, a0, a1, a2, a3, a4, a5);
	      };

	    case 7:
	      return function (a0, a1, a2, a3, a4, a5, a6) {
	        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
	      };

	    case 8:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
	      };

	    case 9:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
	      };

	    case 10:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
	      };

	    default:
	      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
	  }
	});

	/**
	 * Wraps a function of any arity (including nullary) in a function that accepts
	 * exactly 2 parameters. Any extraneous parameters will not be passed to the
	 * supplied function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.0
	 * @category Function
	 * @sig (* -> c) -> (a, b -> c)
	 * @param {Function} fn The function to wrap.
	 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	 *         arity 2.
	 * @see R.nAry, R.unary
	 * @example
	 *
	 *      const takesThreeArgs = function(a, b, c) {
	 *        return [a, b, c];
	 *      };
	 *      takesThreeArgs.length; //=> 3
	 *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
	 *
	 *      const takesTwoArgs = R.binary(takesThreeArgs);
	 *      takesTwoArgs.length; //=> 2
	 *      // Only 2 arguments are passed to the wrapped function
	 *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
	 * @symb R.binary(f)(a, b, c) = f(a, b)
	 */

	var binary =
	/*#__PURE__*/
	_curry1(function binary(fn) {
	  return nAry(2, fn);
	});

	function _isFunction(x) {
	  var type = Object.prototype.toString.call(x);
	  return type === '[object Function]' || type === '[object AsyncFunction]' || type === '[object GeneratorFunction]' || type === '[object AsyncGeneratorFunction]';
	}

	/**
	 * "lifts" a function to be the specified arity, so that it may "map over" that
	 * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.7.0
	 * @category Function
	 * @sig Number -> (*... -> *) -> ([*]... -> [*])
	 * @param {Function} fn The function to lift into higher context
	 * @return {Function} The lifted function.
	 * @see R.lift, R.ap
	 * @example
	 *
	 *      const madd3 = R.liftN(3, (...args) => R.sum(args));
	 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
	 */

	var liftN =
	/*#__PURE__*/
	_curry2(function liftN(arity, fn) {
	  var lifted = curryN(arity, fn);
	  return curryN(arity, function () {
	    return _reduce(ap, map$1(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
	  });
	});

	/**
	 * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
	 * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.7.0
	 * @category Function
	 * @sig (*... -> *) -> ([*]... -> [*])
	 * @param {Function} fn The function to lift into higher context
	 * @return {Function} The lifted function.
	 * @see R.liftN
	 * @example
	 *
	 *      const madd3 = R.lift((a, b, c) => a + b + c);
	 *
	 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
	 *
	 *      const madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
	 *
	 *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
	 */

	var lift =
	/*#__PURE__*/
	_curry1(function lift(fn) {
	  return liftN(fn.length, fn);
	});

	/**
	 * A function which calls the two provided functions and returns the `&&`
	 * of the results.
	 * It returns the result of the first function if it is false-y and the result
	 * of the second function otherwise. Note that this is short-circuited,
	 * meaning that the second function will not be invoked if the first returns a
	 * false-y value.
	 *
	 * In addition to functions, `R.both` also accepts any fantasy-land compatible
	 * applicative functor.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.12.0
	 * @category Logic
	 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
	 * @param {Function} f A predicate
	 * @param {Function} g Another predicate
	 * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
	 * @see R.and
	 * @example
	 *
	 *      const gt10 = R.gt(R.__, 10)
	 *      const lt20 = R.lt(R.__, 20)
	 *      const f = R.both(gt10, lt20);
	 *      f(15); //=> true
	 *      f(30); //=> false
	 *
	 *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)
	 *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]
	 */

	var both =
	/*#__PURE__*/
	_curry2(function both(f, g) {
	  return _isFunction(f) ? function _both() {
	    return f.apply(this, arguments) && g.apply(this, arguments);
	  } : lift(and)(f, g);
	});

	/**
	 * Returns a curried equivalent of the provided function. The curried function
	 * has two unusual capabilities. First, its arguments needn't be provided one
	 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
	 * following are equivalent:
	 *
	 *   - `g(1)(2)(3)`
	 *   - `g(1)(2, 3)`
	 *   - `g(1, 2)(3)`
	 *   - `g(1, 2, 3)`
	 *
	 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
	 * "gaps", allowing partial application of any combination of arguments,
	 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
	 * the following are equivalent:
	 *
	 *   - `g(1, 2, 3)`
	 *   - `g(_, 2, 3)(1)`
	 *   - `g(_, _, 3)(1)(2)`
	 *   - `g(_, _, 3)(1, 2)`
	 *   - `g(_, 2)(1)(3)`
	 *   - `g(_, 2)(1, 3)`
	 *   - `g(_, 2)(_, 3)(1)`
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig (* -> a) -> (* -> a)
	 * @param {Function} fn The function to curry.
	 * @return {Function} A new, curried function.
	 * @see R.curryN, R.partial
	 * @example
	 *
	 *      const addFourNumbers = (a, b, c, d) => a + b + c + d;
	 *
	 *      const curriedAddFourNumbers = R.curry(addFourNumbers);
	 *      const f = curriedAddFourNumbers(1, 2);
	 *      const g = f(3);
	 *      g(4); //=> 10
	 */

	var curry =
	/*#__PURE__*/
	_curry1(function curry(fn) {
	  return curryN(fn.length, fn);
	});

	/**
	 * Returns the result of calling its first argument with the remaining
	 * arguments. This is occasionally useful as a converging function for
	 * [`R.converge`](#converge): the first branch can produce a function while the
	 * remaining branches produce values to be passed to that function as its
	 * arguments.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Function
	 * @sig (*... -> a),*... -> a
	 * @param {Function} fn The function to apply to the remaining arguments.
	 * @param {...*} args Any number of positional arguments.
	 * @return {*}
	 * @see R.apply
	 * @example
	 *
	 *      R.call(R.add, 1, 2); //=> 3
	 *
	 *      const indentN = R.pipe(R.repeat(' '),
	 *                           R.join(''),
	 *                           R.replace(/^(?!$)/gm));
	 *
	 *      const format = R.converge(R.call, [
	 *                                  R.pipe(R.prop('indent'), indentN),
	 *                                  R.prop('value')
	 *                              ]);
	 *
	 *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
	 * @symb R.call(f, a, b) = f(a, b)
	 */

	var call =
	/*#__PURE__*/
	curry(function call(fn) {
	  return fn.apply(this, Array.prototype.slice.call(arguments, 1));
	});

	/**
	 * `_makeFlat` is a helper function that returns a one-level or fully recursive
	 * function based on the flag passed in.
	 *
	 * @private
	 */

	function _makeFlat(recursive) {
	  return function flatt(list) {
	    var value, jlen, j;
	    var result = [];
	    var idx = 0;
	    var ilen = list.length;

	    while (idx < ilen) {
	      if (_isArrayLike(list[idx])) {
	        value = recursive ? flatt(list[idx]) : list[idx];
	        j = 0;
	        jlen = value.length;

	        while (j < jlen) {
	          result[result.length] = value[j];
	          j += 1;
	        }
	      } else {
	        result[result.length] = list[idx];
	      }

	      idx += 1;
	    }

	    return result;
	  };
	}

	function _forceReduced(x) {
	  return {
	    '@@transducer/value': x,
	    '@@transducer/reduced': true
	  };
	}

	var preservingReduced = function (xf) {
	  return {
	    '@@transducer/init': _xfBase.init,
	    '@@transducer/result': function (result) {
	      return xf['@@transducer/result'](result);
	    },
	    '@@transducer/step': function (result, input) {
	      var ret = xf['@@transducer/step'](result, input);
	      return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;
	    }
	  };
	};

	var _flatCat = function _xcat(xf) {
	  var rxf = preservingReduced(xf);
	  return {
	    '@@transducer/init': _xfBase.init,
	    '@@transducer/result': function (result) {
	      return rxf['@@transducer/result'](result);
	    },
	    '@@transducer/step': function (result, input) {
	      return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
	    }
	  };
	};

	var _xchain =
	/*#__PURE__*/
	_curry2(function _xchain(f, xf) {
	  return map$1(f, _flatCat(xf));
	});

	/**
	 * `chain` maps a function over a list and concatenates the results. `chain`
	 * is also known as `flatMap` in some libraries.
	 *
	 * Dispatches to the `chain` method of the second argument, if present,
	 * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
	 *
	 * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category List
	 * @sig Chain m => (a -> m b) -> m a -> m b
	 * @param {Function} fn The function to map with
	 * @param {Array} list The list to map over
	 * @return {Array} The result of flat-mapping `list` with `fn`
	 * @example
	 *
	 *      const duplicate = n => [n, n];
	 *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
	 *
	 *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
	 */

	var chain =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {
	  if (typeof monad === 'function') {
	    return function (x) {
	      return fn(monad(x))(x);
	    };
	  }

	  return _makeFlat(false)(map$1(fn, monad));
	}));

	/**
	 * Restricts a number to be within a range.
	 *
	 * Also works for other ordered types such as Strings and Dates.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.20.0
	 * @category Relation
	 * @sig Ord a => a -> a -> a -> a
	 * @param {Number} minimum The lower limit of the clamp (inclusive)
	 * @param {Number} maximum The upper limit of the clamp (inclusive)
	 * @param {Number} value Value to be clamped
	 * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise
	 * @example
	 *
	 *      R.clamp(1, 10, -5) // => 1
	 *      R.clamp(1, 10, 15) // => 10
	 *      R.clamp(1, 10, 4)  // => 4
	 */

	var clamp =
	/*#__PURE__*/
	_curry3(function clamp(min, max, value) {
	  if (min > max) {
	    throw new Error('min must not be greater than max in clamp(min, max, value)');
	  }

	  return value < min ? min : value > max ? max : value;
	});

	function _cloneRegExp(pattern) {
	  return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
	}

	/**
	 * Gives a single-word string description of the (native) type of a value,
	 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
	 * attempt to distinguish user Object types any further, reporting them all as
	 * 'Object'.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Type
	 * @sig (* -> {*}) -> String
	 * @param {*} val The value to test
	 * @return {String}
	 * @example
	 *
	 *      R.type({}); //=> "Object"
	 *      R.type(1); //=> "Number"
	 *      R.type(false); //=> "Boolean"
	 *      R.type('s'); //=> "String"
	 *      R.type(null); //=> "Null"
	 *      R.type([]); //=> "Array"
	 *      R.type(/[A-z]/); //=> "RegExp"
	 *      R.type(() => {}); //=> "Function"
	 *      R.type(undefined); //=> "Undefined"
	 */

	var type =
	/*#__PURE__*/
	_curry1(function type(val) {
	  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
	});

	/**
	 * Copies an object.
	 *
	 * @private
	 * @param {*} value The value to be copied
	 * @param {Array} refFrom Array containing the source references
	 * @param {Array} refTo Array containing the copied source references
	 * @param {Boolean} deep Whether or not to perform deep cloning.
	 * @return {*} The copied value.
	 */

	function _clone(value, refFrom, refTo, deep) {
	  var copy = function copy(copiedValue) {
	    var len = refFrom.length;
	    var idx = 0;

	    while (idx < len) {
	      if (value === refFrom[idx]) {
	        return refTo[idx];
	      }

	      idx += 1;
	    }

	    refFrom[idx + 1] = value;
	    refTo[idx + 1] = copiedValue;

	    for (var key in value) {
	      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
	    }

	    return copiedValue;
	  };

	  switch (type(value)) {
	    case 'Object':
	      return copy({});

	    case 'Array':
	      return copy([]);

	    case 'Date':
	      return new Date(value.valueOf());

	    case 'RegExp':
	      return _cloneRegExp(value);

	    default:
	      return value;
	  }
	}

	/**
	 * Creates a deep copy of the value which may contain (nested) `Array`s and
	 * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
	 * assigned by reference rather than copied
	 *
	 * Dispatches to a `clone` method if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig {*} -> {*}
	 * @param {*} value The object or array to clone
	 * @return {*} A deeply cloned copy of `val`
	 * @example
	 *
	 *      const objects = [{}, {}, {}];
	 *      const objectsClone = R.clone(objects);
	 *      objects === objectsClone; //=> false
	 *      objects[0] === objectsClone[0]; //=> false
	 */

	var clone =
	/*#__PURE__*/
	_curry1(function clone(value) {
	  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);
	});

	/**
	 * Makes a comparator function out of a function that reports whether the first
	 * element is less than the second.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)
	 * @param {Function} pred A predicate function of arity two which will return `true` if the first argument
	 * is less than the second, `false` otherwise
	 * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`
	 * @example
	 *
	 *      const byAge = R.comparator((a, b) => a.age < b.age);
	 *      const people = [
	 *        { name: 'Emma', age: 70 },
	 *        { name: 'Peter', age: 78 },
	 *        { name: 'Mikhail', age: 62 },
	 *      ];
	 *      const peopleByIncreasingAge = R.sort(byAge, people);
	 *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]
	 */

	var comparator =
	/*#__PURE__*/
	_curry1(function comparator(pred) {
	  return function (a, b) {
	    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
	  };
	});

	/**
	 * A function that returns the `!` of its argument. It will return `true` when
	 * passed false-y value, and `false` when passed a truth-y one.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Logic
	 * @sig * -> Boolean
	 * @param {*} a any value
	 * @return {Boolean} the logical inverse of passed argument.
	 * @see R.complement
	 * @example
	 *
	 *      R.not(true); //=> false
	 *      R.not(false); //=> true
	 *      R.not(0); //=> true
	 *      R.not(1); //=> false
	 */

	var not =
	/*#__PURE__*/
	_curry1(function not(a) {
	  return !a;
	});

	/**
	 * Takes a function `f` and returns a function `g` such that if called with the same arguments
	 * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
	 *
	 * `R.complement` may be applied to any functor
	 *
	 * @func
	 * @memberOf R
	 * @since v0.12.0
	 * @category Logic
	 * @sig (*... -> *) -> (*... -> Boolean)
	 * @param {Function} f
	 * @return {Function}
	 * @see R.not
	 * @example
	 *
	 *      const isNotNil = R.complement(R.isNil);
	 *      isNil(null); //=> true
	 *      isNotNil(null); //=> false
	 *      isNil(7); //=> false
	 *      isNotNil(7); //=> true
	 */

	var complement =
	/*#__PURE__*/
	lift(not);

	function _pipe(f, g) {
	  return function () {
	    return g.call(this, f.apply(this, arguments));
	  };
	}

	/**
	 * This checks whether a function has a [methodname] function. If it isn't an
	 * array it will execute that function otherwise it will default to the ramda
	 * implementation.
	 *
	 * @private
	 * @param {Function} fn ramda implemtation
	 * @param {String} methodname property to check for a custom implementation
	 * @return {Object} Whatever the return value of the method is.
	 */

	function _checkForMethod(methodname, fn) {
	  return function () {
	    var length = arguments.length;

	    if (length === 0) {
	      return fn();
	    }

	    var obj = arguments[length - 1];
	    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
	  };
	}

	/**
	 * Returns the elements of the given list or string (or object with a `slice`
	 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
	 *
	 * Dispatches to the `slice` method of the third argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.4
	 * @category List
	 * @sig Number -> Number -> [a] -> [a]
	 * @sig Number -> Number -> String -> String
	 * @param {Number} fromIndex The start index (inclusive).
	 * @param {Number} toIndex The end index (exclusive).
	 * @param {*} list
	 * @return {*}
	 * @example
	 *
	 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
	 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
	 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
	 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
	 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
	 */

	var slice =
	/*#__PURE__*/
	_curry3(
	/*#__PURE__*/
	_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
	  return Array.prototype.slice.call(list, fromIndex, toIndex);
	}));

	/**
	 * Returns all but the first element of the given list or string (or object
	 * with a `tail` method).
	 *
	 * Dispatches to the `slice` method of the first argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [a]
	 * @sig String -> String
	 * @param {*} list
	 * @return {*}
	 * @see R.head, R.init, R.last
	 * @example
	 *
	 *      R.tail([1, 2, 3]);  //=> [2, 3]
	 *      R.tail([1, 2]);     //=> [2]
	 *      R.tail([1]);        //=> []
	 *      R.tail([]);         //=> []
	 *
	 *      R.tail('abc');  //=> 'bc'
	 *      R.tail('ab');   //=> 'b'
	 *      R.tail('a');    //=> ''
	 *      R.tail('');     //=> ''
	 */

	var tail =
	/*#__PURE__*/
	_curry1(
	/*#__PURE__*/
	_checkForMethod('tail',
	/*#__PURE__*/
	slice(1, Infinity)));

	/**
	 * Performs left-to-right function composition. The first argument may have
	 * any arity; the remaining arguments must be unary.
	 *
	 * In some libraries this function is named `sequence`.
	 *
	 * **Note:** The result of pipe is not automatically curried.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
	 * @param {...Function} functions
	 * @return {Function}
	 * @see R.compose
	 * @example
	 *
	 *      const f = R.pipe(Math.pow, R.negate, R.inc);
	 *
	 *      f(3, 4); // -(3^4) + 1
	 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
	 */

	function pipe() {
	  if (arguments.length === 0) {
	    throw new Error('pipe requires at least one argument');
	  }

	  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
	}

	/**
	 * Returns a new list or string with the elements or characters in reverse
	 * order.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [a]
	 * @sig String -> String
	 * @param {Array|String} list
	 * @return {Array|String}
	 * @example
	 *
	 *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
	 *      R.reverse([1, 2]);     //=> [2, 1]
	 *      R.reverse([1]);        //=> [1]
	 *      R.reverse([]);         //=> []
	 *
	 *      R.reverse('abc');      //=> 'cba'
	 *      R.reverse('ab');       //=> 'ba'
	 *      R.reverse('a');        //=> 'a'
	 *      R.reverse('');         //=> ''
	 */

	var reverse =
	/*#__PURE__*/
	_curry1(function reverse(list) {
	  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();
	});

	/**
	 * Performs right-to-left function composition. The last argument may have
	 * any arity; the remaining arguments must be unary.
	 *
	 * **Note:** The result of compose is not automatically curried.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
	 * @param {...Function} ...functions The functions to compose
	 * @return {Function}
	 * @see R.pipe
	 * @example
	 *
	 *      const classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
	 *      const yellGreeting = R.compose(R.toUpper, classyGreeting);
	 *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
	 *
	 *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
	 *
	 * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
	 */

	function compose() {
	  if (arguments.length === 0) {
	    throw new Error('compose requires at least one argument');
	  }

	  return pipe.apply(this, reverse(arguments));
	}

	/**
	 * Returns the right-to-left Kleisli composition of the provided functions,
	 * each of which must return a value of a type supported by [`chain`](#chain).
	 *
	 * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category Function
	 * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
	 * @param {...Function} ...functions The functions to compose
	 * @return {Function}
	 * @see R.pipeK
	 * @deprecated since v0.26.0
	 * @example
	 *
	 *       //  get :: String -> Object -> Maybe *
	 *       const get = R.curry((propName, obj) => Maybe(obj[propName]))
	 *
	 *       //  getStateCode :: Maybe String -> Maybe String
	 *       const getStateCode = R.composeK(
	 *         R.compose(Maybe.of, R.toUpper),
	 *         get('state'),
	 *         get('address'),
	 *         get('user'),
	 *       );
	 *       getStateCode({"user":{"address":{"state":"ny"}}}); //=> Maybe.Just("NY")
	 *       getStateCode({}); //=> Maybe.Nothing()
	 * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))
	 */

	function composeK() {
	  if (arguments.length === 0) {
	    throw new Error('composeK requires at least one argument');
	  }

	  var init = Array.prototype.slice.call(arguments);
	  var last = init.pop();
	  return compose(compose.apply(this, map$1(chain, init)), last);
	}

	function _pipeP(f, g) {
	  return function () {
	    var ctx = this;
	    return f.apply(ctx, arguments).then(function (x) {
	      return g.call(ctx, x);
	    });
	  };
	}

	/**
	 * Performs left-to-right composition of one or more Promise-returning
	 * functions. The first argument may have any arity; the remaining arguments
	 * must be unary.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category Function
	 * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
	 * @param {...Function} functions
	 * @return {Function}
	 * @see R.composeP
	 * @deprecated since v0.26.0
	 * @example
	 *
	 *      //  followersForUser :: String -> Promise [User]
	 *      const followersForUser = R.pipeP(db.getUserById, db.getFollowers);
	 */

	function pipeP() {
	  if (arguments.length === 0) {
	    throw new Error('pipeP requires at least one argument');
	  }

	  return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));
	}

	/**
	 * Performs right-to-left composition of one or more Promise-returning
	 * functions. The last arguments may have any arity; the remaining
	 * arguments must be unary.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category Function
	 * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
	 * @param {...Function} functions The functions to compose
	 * @return {Function}
	 * @see R.pipeP
	 * @deprecated since v0.26.0
	 * @example
	 *
	 *      const db = {
	 *        users: {
	 *          JOE: {
	 *            name: 'Joe',
	 *            followers: ['STEVE', 'SUZY']
	 *          }
	 *        }
	 *      }
	 *
	 *      // We'll pretend to do a db lookup which returns a promise
	 *      const lookupUser = (userId) => Promise.resolve(db.users[userId])
	 *      const lookupFollowers = (user) => Promise.resolve(user.followers)
	 *      lookupUser('JOE').then(lookupFollowers)
	 *
	 *      //  followersForUser :: String -> Promise [UserId]
	 *      const followersForUser = R.composeP(lookupFollowers, lookupUser);
	 *      followersForUser('JOE').then(followers => console.log('Followers:', followers))
	 *      // Followers: ["STEVE","SUZY"]
	 */

	function composeP() {
	  if (arguments.length === 0) {
	    throw new Error('composeP requires at least one argument');
	  }

	  return pipeP.apply(this, reverse(arguments));
	}

	/**
	 * Returns the first element of the given list or string. In some libraries
	 * this function is named `first`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> a | Undefined
	 * @sig String -> String
	 * @param {Array|String} list
	 * @return {*}
	 * @see R.tail, R.init, R.last
	 * @example
	 *
	 *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
	 *      R.head([]); //=> undefined
	 *
	 *      R.head('abc'); //=> 'a'
	 *      R.head(''); //=> ''
	 */

	var head$1 =
	/*#__PURE__*/
	nth(0);

	function _identity(x) {
	  return x;
	}

	/**
	 * A function that does nothing but return the parameter supplied to it. Good
	 * as a default or placeholder function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig a -> a
	 * @param {*} x The value to return.
	 * @return {*} The input value, `x`.
	 * @example
	 *
	 *      R.identity(1); //=> 1
	 *
	 *      const obj = {};
	 *      R.identity(obj) === obj; //=> true
	 * @symb R.identity(a) = a
	 */

	var identity =
	/*#__PURE__*/
	_curry1(_identity);

	/**
	 * Performs left-to-right function composition using transforming function. The first argument may have
	 * any arity; the remaining arguments must be unary.
	 *
	 * **Note:** The result of pipeWith is not automatically curried. Transforming function is not used on the
	 * first argument.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.26.0
	 * @category Function
	 * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)
	 * @param {...Function} functions
	 * @return {Function}
	 * @see R.composeWith, R.pipe
	 * @example
	 *
	 *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));
	 *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])
	 *
	 *      f(3, 4); // -(3^4) + 1
	 * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, g(...args)))
	 */

	var pipeWith =
	/*#__PURE__*/
	_curry2(function pipeWith(xf, list) {
	  if (list.length <= 0) {
	    return identity;
	  }

	  var headList = head$1(list);
	  var tailList = tail(list);
	  return _arity(headList.length, function () {
	    return _reduce(function (result, f) {
	      return xf.call(this, f, result);
	    }, headList.apply(this, arguments), tailList);
	  });
	});

	/**
	 * Performs right-to-left function composition using transforming function. The last argument may have
	 * any arity; the remaining arguments must be unary.
	 *
	 * **Note:** The result of compose is not automatically curried. Transforming function is not used on the
	 * last argument.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.26.0
	 * @category Function
	 * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)
	 * @param {...Function} ...functions The functions to compose
	 * @return {Function}
	 * @see R.compose, R.pipeWith
	 * @example
	 *
	 *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));
	 *
	 *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2
	 *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined
	 *
	 * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, i(...args)))
	 */

	var composeWith =
	/*#__PURE__*/
	_curry2(function composeWith(xf, list) {
	  return pipeWith.apply(this, [xf, reverse(list)]);
	});

	function _arrayFromIterator(iter) {
	  var list = [];
	  var next;

	  while (!(next = iter.next()).done) {
	    list.push(next.value);
	  }

	  return list;
	}

	function _includesWith(pred, x, list) {
	  var idx = 0;
	  var len = list.length;

	  while (idx < len) {
	    if (pred(x, list[idx])) {
	      return true;
	    }

	    idx += 1;
	  }

	  return false;
	}

	function _functionName(f) {
	  // String(x => x) evaluates to "x => x", so the pattern may not match.
	  var match = String(f).match(/^function (\w*)/);
	  return match == null ? '' : match[1];
	}

	// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	function _objectIs(a, b) {
	  // SameValue algorithm
	  if (a === b) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return a !== 0 || 1 / a === 1 / b;
	  } else {
	    // Step 6.a: NaN == NaN
	    return a !== a && b !== b;
	  }
	}

	var _objectIs$1 = typeof Object.is === 'function' ? Object.is : _objectIs;

	/**
	 * private _uniqContentEquals function.
	 * That function is checking equality of 2 iterator contents with 2 assumptions
	 * - iterators lengths are the same
	 * - iterators values are unique
	 *
	 * false-positive result will be returned for comparision of, e.g.
	 * - [1,2,3] and [1,2,3,4]
	 * - [1,1,1] and [1,2,3]
	 * */

	function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
	  var a = _arrayFromIterator(aIterator);

	  var b = _arrayFromIterator(bIterator);

	  function eq(_a, _b) {
	    return _equals(_a, _b, stackA.slice(), stackB.slice());
	  } // if *a* array contains any element that is not included in *b*


	  return !_includesWith(function (b, aItem) {
	    return !_includesWith(eq, aItem, b);
	  }, b, a);
	}

	function _equals(a, b, stackA, stackB) {
	  if (_objectIs$1(a, b)) {
	    return true;
	  }

	  var typeA = type(a);

	  if (typeA !== type(b)) {
	    return false;
	  }

	  if (a == null || b == null) {
	    return false;
	  }

	  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
	    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
	  }

	  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
	    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
	  }

	  switch (typeA) {
	    case 'Arguments':
	    case 'Array':
	    case 'Object':
	      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
	        return a === b;
	      }

	      break;

	    case 'Boolean':
	    case 'Number':
	    case 'String':
	      if (!(typeof a === typeof b && _objectIs$1(a.valueOf(), b.valueOf()))) {
	        return false;
	      }

	      break;

	    case 'Date':
	      if (!_objectIs$1(a.valueOf(), b.valueOf())) {
	        return false;
	      }

	      break;

	    case 'Error':
	      return a.name === b.name && a.message === b.message;

	    case 'RegExp':
	      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
	        return false;
	      }

	      break;
	  }

	  var idx = stackA.length - 1;

	  while (idx >= 0) {
	    if (stackA[idx] === a) {
	      return stackB[idx] === b;
	    }

	    idx -= 1;
	  }

	  switch (typeA) {
	    case 'Map':
	      if (a.size !== b.size) {
	        return false;
	      }

	      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));

	    case 'Set':
	      if (a.size !== b.size) {
	        return false;
	      }

	      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));

	    case 'Arguments':
	    case 'Array':
	    case 'Object':
	    case 'Boolean':
	    case 'Number':
	    case 'String':
	    case 'Date':
	    case 'Error':
	    case 'RegExp':
	    case 'Int8Array':
	    case 'Uint8Array':
	    case 'Uint8ClampedArray':
	    case 'Int16Array':
	    case 'Uint16Array':
	    case 'Int32Array':
	    case 'Uint32Array':
	    case 'Float32Array':
	    case 'Float64Array':
	    case 'ArrayBuffer':
	      break;

	    default:
	      // Values of other types are only equal if identical.
	      return false;
	  }

	  var keysA = keys(a);

	  if (keysA.length !== keys(b).length) {
	    return false;
	  }

	  var extendedStackA = stackA.concat([a]);
	  var extendedStackB = stackB.concat([b]);
	  idx = keysA.length - 1;

	  while (idx >= 0) {
	    var key = keysA[idx];

	    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
	      return false;
	    }

	    idx -= 1;
	  }

	  return true;
	}

	/**
	 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
	 * cyclical data structures.
	 *
	 * Dispatches symmetrically to the `equals` methods of both arguments, if
	 * present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.15.0
	 * @category Relation
	 * @sig a -> b -> Boolean
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 * @example
	 *
	 *      R.equals(1, 1); //=> true
	 *      R.equals(1, '1'); //=> false
	 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
	 *
	 *      const a = {}; a.v = a;
	 *      const b = {}; b.v = b;
	 *      R.equals(a, b); //=> true
	 */

	var equals =
	/*#__PURE__*/
	_curry2(function equals(a, b) {
	  return _equals(a, b, [], []);
	});

	function _indexOf(list, a, idx) {
	  var inf, item; // Array.prototype.indexOf doesn't exist below IE9

	  if (typeof list.indexOf === 'function') {
	    switch (typeof a) {
	      case 'number':
	        if (a === 0) {
	          // manually crawl the list to distinguish between +0 and -0
	          inf = 1 / a;

	          while (idx < list.length) {
	            item = list[idx];

	            if (item === 0 && 1 / item === inf) {
	              return idx;
	            }

	            idx += 1;
	          }

	          return -1;
	        } else if (a !== a) {
	          // NaN
	          while (idx < list.length) {
	            item = list[idx];

	            if (typeof item === 'number' && item !== item) {
	              return idx;
	            }

	            idx += 1;
	          }

	          return -1;
	        } // non-zero numbers can utilise Set


	        return list.indexOf(a, idx);
	      // all these types can utilise Set

	      case 'string':
	      case 'boolean':
	      case 'function':
	      case 'undefined':
	        return list.indexOf(a, idx);

	      case 'object':
	        if (a === null) {
	          // null can utilise Set
	          return list.indexOf(a, idx);
	        }

	    }
	  } // anything else not covered above, defer to R.equals


	  while (idx < list.length) {
	    if (equals(list[idx], a)) {
	      return idx;
	    }

	    idx += 1;
	  }

	  return -1;
	}

	function _includes(a, list) {
	  return _indexOf(list, a, 0) >= 0;
	}

	function _quote(s) {
	  var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
	  .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');
	  return '"' + escaped.replace(/"/g, '\\"') + '"';
	}

	/**
	 * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
	 */
	var pad = function pad(n) {
	  return (n < 10 ? '0' : '') + n;
	};

	var _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
	  return d.toISOString();
	} : function _toISOString(d) {
	  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
	};

	function _complement(f) {
	  return function () {
	    return !f.apply(this, arguments);
	  };
	}

	function _filter(fn, list) {
	  var idx = 0;
	  var len = list.length;
	  var result = [];

	  while (idx < len) {
	    if (fn(list[idx])) {
	      result[result.length] = list[idx];
	    }

	    idx += 1;
	  }

	  return result;
	}

	function _isObject(x) {
	  return Object.prototype.toString.call(x) === '[object Object]';
	}

	var XFilter =
	/*#__PURE__*/
	function () {
	  function XFilter(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }

	  XFilter.prototype['@@transducer/init'] = _xfBase.init;
	  XFilter.prototype['@@transducer/result'] = _xfBase.result;

	  XFilter.prototype['@@transducer/step'] = function (result, input) {
	    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
	  };

	  return XFilter;
	}();

	var _xfilter =
	/*#__PURE__*/
	_curry2(function _xfilter(f, xf) {
	  return new XFilter(f, xf);
	});

	/**
	 * Takes a predicate and a `Filterable`, and returns a new filterable of the
	 * same type containing the members of the given filterable which satisfy the
	 * given predicate. Filterable objects include plain objects or any object
	 * that has a filter method such as `Array`.
	 *
	 * Dispatches to the `filter` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Filterable f => (a -> Boolean) -> f a -> f a
	 * @param {Function} pred
	 * @param {Array} filterable
	 * @return {Array} Filterable
	 * @see R.reject, R.transduce, R.addIndex
	 * @example
	 *
	 *      const isEven = n => n % 2 === 0;
	 *
	 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
	 *
	 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
	 */

	var filter =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['filter'], _xfilter, function (pred, filterable) {
	  return _isObject(filterable) ? _reduce(function (acc, key) {
	    if (pred(filterable[key])) {
	      acc[key] = filterable[key];
	    }

	    return acc;
	  }, {}, keys(filterable)) : // else
	  _filter(pred, filterable);
	}));

	/**
	 * The complement of [`filter`](#filter).
	 *
	 * Acts as a transducer if a transformer is given in list position. Filterable
	 * objects include plain objects or any object that has a filter method such
	 * as `Array`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Filterable f => (a -> Boolean) -> f a -> f a
	 * @param {Function} pred
	 * @param {Array} filterable
	 * @return {Array}
	 * @see R.filter, R.transduce, R.addIndex
	 * @example
	 *
	 *      const isOdd = (n) => n % 2 === 1;
	 *
	 *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
	 *
	 *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
	 */

	var reject =
	/*#__PURE__*/
	_curry2(function reject(pred, filterable) {
	  return filter(_complement(pred), filterable);
	});

	function _toString(x, seen) {
	  var recur = function recur(y) {
	    var xs = seen.concat([x]);
	    return _includes(y, xs) ? '<Circular>' : _toString(y, xs);
	  }; //  mapPairs :: (Object, [String]) -> [String]


	  var mapPairs = function (obj, keys) {
	    return _map(function (k) {
	      return _quote(k) + ': ' + recur(obj[k]);
	    }, keys.slice().sort());
	  };

	  switch (Object.prototype.toString.call(x)) {
	    case '[object Arguments]':
	      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';

	    case '[object Array]':
	      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
	        return /^\d+$/.test(k);
	      }, keys(x)))).join(', ') + ']';

	    case '[object Boolean]':
	      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();

	    case '[object Date]':
	      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';

	    case '[object Null]':
	      return 'null';

	    case '[object Number]':
	      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);

	    case '[object String]':
	      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);

	    case '[object Undefined]':
	      return 'undefined';

	    default:
	      if (typeof x.toString === 'function') {
	        var repr = x.toString();

	        if (repr !== '[object Object]') {
	          return repr;
	        }
	      }

	      return '{' + mapPairs(x, keys(x)).join(', ') + '}';
	  }
	}

	/**
	 * Returns the string representation of the given value. `eval`'ing the output
	 * should result in a value equivalent to the input value. Many of the built-in
	 * `toString` methods do not satisfy this requirement.
	 *
	 * If the given value is an `[object Object]` with a `toString` method other
	 * than `Object.prototype.toString`, this method is invoked with no arguments
	 * to produce the return value. This means user-defined constructor functions
	 * can provide a suitable `toString` method. For example:
	 *
	 *     function Point(x, y) {
	 *       this.x = x;
	 *       this.y = y;
	 *     }
	 *
	 *     Point.prototype.toString = function() {
	 *       return 'new Point(' + this.x + ', ' + this.y + ')';
	 *     };
	 *
	 *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category String
	 * @sig * -> String
	 * @param {*} val
	 * @return {String}
	 * @example
	 *
	 *      R.toString(42); //=> '42'
	 *      R.toString('abc'); //=> '"abc"'
	 *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
	 *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
	 *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
	 */

	var toString$1 =
	/*#__PURE__*/
	_curry1(function toString(val) {
	  return _toString(val, []);
	});

	/**
	 * Returns the result of concatenating the given lists or strings.
	 *
	 * Note: `R.concat` expects both arguments to be of the same type,
	 * unlike the native `Array.prototype.concat` method. It will throw
	 * an error if you `concat` an Array with a non-Array value.
	 *
	 * Dispatches to the `concat` method of the first argument, if present.
	 * Can also concatenate two members of a [fantasy-land
	 * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [a] -> [a]
	 * @sig String -> String -> String
	 * @param {Array|String} firstList The first list
	 * @param {Array|String} secondList The second list
	 * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
	 * `secondList`.
	 *
	 * @example
	 *
	 *      R.concat('ABC', 'DEF'); // 'ABCDEF'
	 *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	 *      R.concat([], []); //=> []
	 */

	var concat =
	/*#__PURE__*/
	_curry2(function concat(a, b) {
	  if (_isArray(a)) {
	    if (_isArray(b)) {
	      return a.concat(b);
	    }

	    throw new TypeError(toString$1(b) + ' is not an array');
	  }

	  if (_isString(a)) {
	    if (_isString(b)) {
	      return a + b;
	    }

	    throw new TypeError(toString$1(b) + ' is not a string');
	  }

	  if (a != null && _isFunction(a['fantasy-land/concat'])) {
	    return a['fantasy-land/concat'](b);
	  }

	  if (a != null && _isFunction(a.concat)) {
	    return a.concat(b);
	  }

	  throw new TypeError(toString$1(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
	});

	/**
	 * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
	 * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
	 * to `fn` are applied to each of the predicates in turn until one returns a
	 * "truthy" value, at which point `fn` returns the result of applying its
	 * arguments to the corresponding transformer. If none of the predicates
	 * matches, `fn` returns undefined.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.6.0
	 * @category Logic
	 * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
	 * @param {Array} pairs A list of [predicate, transformer]
	 * @return {Function}
	 * @see R.ifElse, R.unless, R.when
	 * @example
	 *
	 *      const fn = R.cond([
	 *        [R.equals(0),   R.always('water freezes at 0°C')],
	 *        [R.equals(100), R.always('water boils at 100°C')],
	 *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
	 *      ]);
	 *      fn(0); //=> 'water freezes at 0°C'
	 *      fn(50); //=> 'nothing special happens at 50°C'
	 *      fn(100); //=> 'water boils at 100°C'
	 */

	var cond =
	/*#__PURE__*/
	_curry1(function cond(pairs) {
	  var arity = reduce(max, 0, map$1(function (pair) {
	    return pair[0].length;
	  }, pairs));
	  return _arity(arity, function () {
	    var idx = 0;

	    while (idx < pairs.length) {
	      if (pairs[idx][0].apply(this, arguments)) {
	        return pairs[idx][1].apply(this, arguments);
	      }

	      idx += 1;
	    }
	  });
	});

	/**
	 * Wraps a constructor function inside a curried function that can be called
	 * with the same arguments and returns the same type. The arity of the function
	 * returned is specified to allow using variadic constructor functions.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.4.0
	 * @category Function
	 * @sig Number -> (* -> {*}) -> (* -> {*})
	 * @param {Number} n The arity of the constructor function.
	 * @param {Function} Fn The constructor function to wrap.
	 * @return {Function} A wrapped, curried constructor function.
	 * @example
	 *
	 *      // Variadic Constructor function
	 *      function Salad() {
	 *        this.ingredients = arguments;
	 *      }
	 *
	 *      Salad.prototype.recipe = function() {
	 *        const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);
	 *        return R.join('\n', instructions);
	 *      };
	 *
	 *      const ThreeLayerSalad = R.constructN(3, Salad);
	 *
	 *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.
	 *      const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');
	 *
	 *      console.log(salad.recipe());
	 *      // Add a dollop of Mayonnaise
	 *      // Add a dollop of Potato Chips
	 *      // Add a dollop of Ketchup
	 */

	var constructN =
	/*#__PURE__*/
	_curry2(function constructN(n, Fn) {
	  if (n > 10) {
	    throw new Error('Constructor with greater than ten arguments');
	  }

	  if (n === 0) {
	    return function () {
	      return new Fn();
	    };
	  }

	  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
	    switch (arguments.length) {
	      case 1:
	        return new Fn($0);

	      case 2:
	        return new Fn($0, $1);

	      case 3:
	        return new Fn($0, $1, $2);

	      case 4:
	        return new Fn($0, $1, $2, $3);

	      case 5:
	        return new Fn($0, $1, $2, $3, $4);

	      case 6:
	        return new Fn($0, $1, $2, $3, $4, $5);

	      case 7:
	        return new Fn($0, $1, $2, $3, $4, $5, $6);

	      case 8:
	        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);

	      case 9:
	        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);

	      case 10:
	        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
	    }
	  }));
	});

	/**
	 * Wraps a constructor function inside a curried function that can be called
	 * with the same arguments and returns the same type.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig (* -> {*}) -> (* -> {*})
	 * @param {Function} fn The constructor function to wrap.
	 * @return {Function} A wrapped, curried constructor function.
	 * @see R.invoker
	 * @example
	 *
	 *      // Constructor function
	 *      function Animal(kind) {
	 *        this.kind = kind;
	 *      };
	 *      Animal.prototype.sighting = function() {
	 *        return "It's a " + this.kind + "!";
	 *      }
	 *
	 *      const AnimalConstructor = R.construct(Animal)
	 *
	 *      // Notice we no longer need the 'new' keyword:
	 *      AnimalConstructor('Pig'); //=> {"kind": "Pig", "sighting": function (){...}};
	 *
	 *      const animalTypes = ["Lion", "Tiger", "Bear"];
	 *      const animalSighting = R.invoker(0, 'sighting');
	 *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);
	 *      R.map(sightNewAnimal, animalTypes); //=> ["It's a Lion!", "It's a Tiger!", "It's a Bear!"]
	 */

	var construct =
	/*#__PURE__*/
	_curry1(function construct(Fn) {
	  return constructN(Fn.length, Fn);
	});

	/**
	 * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
	 * terms, to at least one element of the given list; `false` otherwise.
	 * Works also with strings.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig a -> [a] -> Boolean
	 * @param {Object} a The item to compare against.
	 * @param {Array} list The array to consider.
	 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
	 * @see R.includes
	 * @deprecated since v0.26.0
	 * @example
	 *
	 *      R.contains(3, [1, 2, 3]); //=> true
	 *      R.contains(4, [1, 2, 3]); //=> false
	 *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
	 *      R.contains([42], [[42]]); //=> true
	 *      R.contains('ba', 'banana'); //=>true
	 */

	var contains$1 =
	/*#__PURE__*/
	_curry2(_includes);

	/**
	 * Accepts a converging function and a list of branching functions and returns
	 * a new function. The arity of the new function is the same as the arity of
	 * the longest branching function. When invoked, this new function is applied
	 * to some arguments, and each branching function is applied to those same
	 * arguments. The results of each branching function are passed as arguments
	 * to the converging function to produce the return value.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.4.2
	 * @category Function
	 * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)
	 * @param {Function} after A function. `after` will be invoked with the return values of
	 *        `fn1` and `fn2` as its arguments.
	 * @param {Array} functions A list of functions.
	 * @return {Function} A new function.
	 * @see R.useWith
	 * @example
	 *
	 *      const average = R.converge(R.divide, [R.sum, R.length])
	 *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
	 *
	 *      const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
	 *      strangeConcat("Yodel") //=> "YODELyodel"
	 *
	 * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
	 */

	var converge =
	/*#__PURE__*/
	_curry2(function converge(after, fns) {
	  return curryN(reduce(max, 0, pluck('length', fns)), function () {
	    var args = arguments;
	    var context = this;
	    return after.apply(context, _map(function (fn) {
	      return fn.apply(context, args);
	    }, fns));
	  });
	});

	var XReduceBy =
	/*#__PURE__*/
	function () {
	  function XReduceBy(valueFn, valueAcc, keyFn, xf) {
	    this.valueFn = valueFn;
	    this.valueAcc = valueAcc;
	    this.keyFn = keyFn;
	    this.xf = xf;
	    this.inputs = {};
	  }

	  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;

	  XReduceBy.prototype['@@transducer/result'] = function (result) {
	    var key;

	    for (key in this.inputs) {
	      if (_has(key, this.inputs)) {
	        result = this.xf['@@transducer/step'](result, this.inputs[key]);

	        if (result['@@transducer/reduced']) {
	          result = result['@@transducer/value'];
	          break;
	        }
	      }
	    }

	    this.inputs = null;
	    return this.xf['@@transducer/result'](result);
	  };

	  XReduceBy.prototype['@@transducer/step'] = function (result, input) {
	    var key = this.keyFn(input);
	    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
	    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
	    return result;
	  };

	  return XReduceBy;
	}();

	var _xreduceBy =
	/*#__PURE__*/
	_curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
	  return new XReduceBy(valueFn, valueAcc, keyFn, xf);
	});

	/**
	 * Groups the elements of the list according to the result of calling
	 * the String-returning function `keyFn` on each element and reduces the elements
	 * of each group to a single value via the reducer function `valueFn`.
	 *
	 * This function is basically a more general [`groupBy`](#groupBy) function.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.20.0
	 * @category List
	 * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
	 * @param {Function} valueFn The function that reduces the elements of each group to a single
	 *        value. Receives two values, accumulator for a particular group and the current element.
	 * @param {*} acc The (initial) accumulator value for each group.
	 * @param {Function} keyFn The function that maps the list's element into a key.
	 * @param {Array} list The array to group.
	 * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
	 *         `valueFn` for elements which produced that key when passed to `keyFn`.
	 * @see R.groupBy, R.reduce
	 * @example
	 *
	 *      const groupNames = (acc, {name}) => acc.concat(name)
	 *      const toGrade = ({score}) =>
	 *        score < 65 ? 'F' :
	 *        score < 70 ? 'D' :
	 *        score < 80 ? 'C' :
	 *        score < 90 ? 'B' : 'A'
	 *
	 *      var students = [
	 *        {name: 'Abby', score: 83},
	 *        {name: 'Bart', score: 62},
	 *        {name: 'Curt', score: 88},
	 *        {name: 'Dora', score: 92},
	 *      ]
	 *
	 *      reduceBy(groupNames, [], toGrade, students)
	 *      //=> {"A": ["Dora"], "B": ["Abby", "Curt"], "F": ["Bart"]}
	 */

	var reduceBy =
	/*#__PURE__*/
	_curryN(4, [],
	/*#__PURE__*/
	_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
	  return _reduce(function (acc, elt) {
	    var key = keyFn(elt);
	    acc[key] = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, [], [], false), elt);
	    return acc;
	  }, {}, list);
	}));

	/**
	 * Counts the elements of a list according to how many match each value of a
	 * key generated by the supplied function. Returns an object mapping the keys
	 * produced by `fn` to the number of occurrences in the list. Note that all
	 * keys are coerced to strings because of how JavaScript objects work.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig (a -> String) -> [a] -> {*}
	 * @param {Function} fn The function used to map values to keys.
	 * @param {Array} list The list to count elements from.
	 * @return {Object} An object mapping keys to number of occurrences in the list.
	 * @example
	 *
	 *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
	 *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
	 *
	 *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];
	 *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
	 */

	var countBy =
	/*#__PURE__*/
	reduceBy(function (acc, elem) {
	  return acc + 1;
	}, 0);

	/**
	 * Decrements its argument.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Math
	 * @sig Number -> Number
	 * @param {Number} n
	 * @return {Number} n - 1
	 * @see R.inc
	 * @example
	 *
	 *      R.dec(42); //=> 41
	 */

	var dec =
	/*#__PURE__*/
	add(-1);

	/**
	 * Returns the second argument if it is not `null`, `undefined` or `NaN`;
	 * otherwise the first argument is returned.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category Logic
	 * @sig a -> b -> a | b
	 * @param {a} default The default value.
	 * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
	 * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
	 * @example
	 *
	 *      const defaultTo42 = R.defaultTo(42);
	 *
	 *      defaultTo42(null);  //=> 42
	 *      defaultTo42(undefined);  //=> 42
	 *      defaultTo42(false);  //=> false
	 *      defaultTo42('Ramda');  //=> 'Ramda'
	 *      // parseInt('string') results in NaN
	 *      defaultTo42(parseInt('string')); //=> 42
	 */

	var defaultTo =
	/*#__PURE__*/
	_curry2(function defaultTo(d, v) {
	  return v == null || v !== v ? d : v;
	});

	/**
	 * Makes a descending comparator function out of a function that returns a value
	 * that can be compared with `<` and `>`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.23.0
	 * @category Function
	 * @sig Ord b => (a -> b) -> a -> a -> Number
	 * @param {Function} fn A function of arity one that returns a value that can be compared
	 * @param {*} a The first item to be compared.
	 * @param {*} b The second item to be compared.
	 * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`
	 * @see R.ascend
	 * @example
	 *
	 *      const byAge = R.descend(R.prop('age'));
	 *      const people = [
	 *        { name: 'Emma', age: 70 },
	 *        { name: 'Peter', age: 78 },
	 *        { name: 'Mikhail', age: 62 },
	 *      ];
	 *      const peopleByOldestFirst = R.sort(byAge, people);
	 *        //=> [{ name: 'Peter', age: 78 }, { name: 'Emma', age: 70 }, { name: 'Mikhail', age: 62 }]
	 */

	var descend =
	/*#__PURE__*/
	_curry3(function descend(fn, a, b) {
	  var aa = fn(a);
	  var bb = fn(b);
	  return aa > bb ? -1 : aa < bb ? 1 : 0;
	});

	var _Set =
	/*#__PURE__*/
	function () {
	  function _Set() {
	    /* globals Set */
	    this._nativeSet = typeof Set === 'function' ? new Set() : null;
	    this._items = {};
	  }

	  // until we figure out why jsdoc chokes on this
	  // @param item The item to add to the Set
	  // @returns {boolean} true if the item did not exist prior, otherwise false
	  //
	  _Set.prototype.add = function (item) {
	    return !hasOrAdd(item, true, this);
	  }; //
	  // @param item The item to check for existence in the Set
	  // @returns {boolean} true if the item exists in the Set, otherwise false
	  //


	  _Set.prototype.has = function (item) {
	    return hasOrAdd(item, false, this);
	  }; //
	  // Combines the logic for checking whether an item is a member of the set and
	  // for adding a new item to the set.
	  //
	  // @param item       The item to check or add to the Set instance.
	  // @param shouldAdd  If true, the item will be added to the set if it doesn't
	  //                   already exist.
	  // @param set        The set instance to check or add to.
	  // @return {boolean} true if the item already existed, otherwise false.
	  //


	  return _Set;
	}();

	function hasOrAdd(item, shouldAdd, set) {
	  var type = typeof item;
	  var prevSize, newSize;

	  switch (type) {
	    case 'string':
	    case 'number':
	      // distinguish between +0 and -0
	      if (item === 0 && 1 / item === -Infinity) {
	        if (set._items['-0']) {
	          return true;
	        } else {
	          if (shouldAdd) {
	            set._items['-0'] = true;
	          }

	          return false;
	        }
	      } // these types can all utilise the native Set


	      if (set._nativeSet !== null) {
	        if (shouldAdd) {
	          prevSize = set._nativeSet.size;

	          set._nativeSet.add(item);

	          newSize = set._nativeSet.size;
	          return newSize === prevSize;
	        } else {
	          return set._nativeSet.has(item);
	        }
	      } else {
	        if (!(type in set._items)) {
	          if (shouldAdd) {
	            set._items[type] = {};
	            set._items[type][item] = true;
	          }

	          return false;
	        } else if (item in set._items[type]) {
	          return true;
	        } else {
	          if (shouldAdd) {
	            set._items[type][item] = true;
	          }

	          return false;
	        }
	      }

	    case 'boolean':
	      // set._items['boolean'] holds a two element array
	      // representing [ falseExists, trueExists ]
	      if (type in set._items) {
	        var bIdx = item ? 1 : 0;

	        if (set._items[type][bIdx]) {
	          return true;
	        } else {
	          if (shouldAdd) {
	            set._items[type][bIdx] = true;
	          }

	          return false;
	        }
	      } else {
	        if (shouldAdd) {
	          set._items[type] = item ? [false, true] : [true, false];
	        }

	        return false;
	      }

	    case 'function':
	      // compare functions for reference equality
	      if (set._nativeSet !== null) {
	        if (shouldAdd) {
	          prevSize = set._nativeSet.size;

	          set._nativeSet.add(item);

	          newSize = set._nativeSet.size;
	          return newSize === prevSize;
	        } else {
	          return set._nativeSet.has(item);
	        }
	      } else {
	        if (!(type in set._items)) {
	          if (shouldAdd) {
	            set._items[type] = [item];
	          }

	          return false;
	        }

	        if (!_includes(item, set._items[type])) {
	          if (shouldAdd) {
	            set._items[type].push(item);
	          }

	          return false;
	        }

	        return true;
	      }

	    case 'undefined':
	      if (set._items[type]) {
	        return true;
	      } else {
	        if (shouldAdd) {
	          set._items[type] = true;
	        }

	        return false;
	      }

	    case 'object':
	      if (item === null) {
	        if (!set._items['null']) {
	          if (shouldAdd) {
	            set._items['null'] = true;
	          }

	          return false;
	        }

	        return true;
	      }

	    /* falls through */

	    default:
	      // reduce the search size of heterogeneous sets by creating buckets
	      // for each type.
	      type = Object.prototype.toString.call(item);

	      if (!(type in set._items)) {
	        if (shouldAdd) {
	          set._items[type] = [item];
	        }

	        return false;
	      } // scan through all previously applied items


	      if (!_includes(item, set._items[type])) {
	        if (shouldAdd) {
	          set._items[type].push(item);
	        }

	        return false;
	      }

	      return true;
	  }
	} // A simple Set type that honours R.equals semantics

	/**
	 * Finds the set (i.e. no duplicates) of all elements in the first list not
	 * contained in the second list. Objects and Arrays are compared in terms of
	 * value equality, not reference equality.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig [*] -> [*] -> [*]
	 * @param {Array} list1 The first list.
	 * @param {Array} list2 The second list.
	 * @return {Array} The elements in `list1` that are not in `list2`.
	 * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without
	 * @example
	 *
	 *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
	 *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
	 *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]
	 */

	var difference =
	/*#__PURE__*/
	_curry2(function difference(first, second) {
	  var out = [];
	  var idx = 0;
	  var firstLen = first.length;
	  var secondLen = second.length;
	  var toFilterOut = new _Set();

	  for (var i = 0; i < secondLen; i += 1) {
	    toFilterOut.add(second[i]);
	  }

	  while (idx < firstLen) {
	    if (toFilterOut.add(first[idx])) {
	      out[out.length] = first[idx];
	    }

	    idx += 1;
	  }

	  return out;
	});

	/**
	 * Finds the set (i.e. no duplicates) of all elements in the first list not
	 * contained in the second list. Duplication is determined according to the
	 * value returned by applying the supplied predicate to two list elements.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
	 * @param {Function} pred A predicate used to test whether two items are equal.
	 * @param {Array} list1 The first list.
	 * @param {Array} list2 The second list.
	 * @return {Array} The elements in `list1` that are not in `list2`.
	 * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
	 * @example
	 *
	 *      const cmp = (x, y) => x.a === y.a;
	 *      const l1 = [{a: 1}, {a: 2}, {a: 3}];
	 *      const l2 = [{a: 3}, {a: 4}];
	 *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
	 */

	var differenceWith =
	/*#__PURE__*/
	_curry3(function differenceWith(pred, first, second) {
	  var out = [];
	  var idx = 0;
	  var firstLen = first.length;

	  while (idx < firstLen) {
	    if (!_includesWith(pred, first[idx], second) && !_includesWith(pred, first[idx], out)) {
	      out.push(first[idx]);
	    }

	    idx += 1;
	  }

	  return out;
	});

	/**
	 * Returns a new object that does not contain a `prop` property.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category Object
	 * @sig String -> {k: v} -> {k: v}
	 * @param {String} prop The name of the property to dissociate
	 * @param {Object} obj The object to clone
	 * @return {Object} A new object equivalent to the original but without the specified property
	 * @see R.assoc, R.omit
	 * @example
	 *
	 *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
	 */

	var dissoc =
	/*#__PURE__*/
	_curry2(function dissoc(prop, obj) {
	  var result = {};

	  for (var p in obj) {
	    result[p] = obj[p];
	  }

	  delete result[prop];
	  return result;
	});

	/**
	 * Removes the sub-list of `list` starting at index `start` and containing
	 * `count` elements. _Note that this is not destructive_: it returns a copy of
	 * the list with the changes.
	 * <small>No lists have been harmed in the application of this function.</small>
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.2
	 * @category List
	 * @sig Number -> Number -> [a] -> [a]
	 * @param {Number} start The position to start removing elements
	 * @param {Number} count The number of elements to remove
	 * @param {Array} list The list to remove from
	 * @return {Array} A new Array with `count` elements from `start` removed.
	 * @see R.without
	 * @example
	 *
	 *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
	 */

	var remove =
	/*#__PURE__*/
	_curry3(function remove(start, count, list) {
	  var result = Array.prototype.slice.call(list, 0);
	  result.splice(start, count);
	  return result;
	});

	/**
	 * Returns a new copy of the array with the element at the provided index
	 * replaced with the given value.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category List
	 * @sig Number -> a -> [a] -> [a]
	 * @param {Number} idx The index to update.
	 * @param {*} x The value to exist at the given index of the returned array.
	 * @param {Array|Arguments} list The source array-like object to be updated.
	 * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
	 * @see R.adjust
	 * @example
	 *
	 *      R.update(1, '_', ['a', 'b', 'c']);      //=> ['a', '_', 'c']
	 *      R.update(-1, '_', ['a', 'b', 'c']);     //=> ['a', 'b', '_']
	 * @symb R.update(-1, a, [b, c]) = [b, a]
	 * @symb R.update(0, a, [b, c]) = [a, c]
	 * @symb R.update(1, a, [b, c]) = [b, a]
	 */

	var update =
	/*#__PURE__*/
	_curry3(function update(idx, x, list) {
	  return adjust(idx, always(x), list);
	});

	/**
	 * Makes a shallow clone of an object, omitting the property at the given path.
	 * Note that this copies and flattens prototype properties onto the new object
	 * as well. All non-primitive properties are copied by reference.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.11.0
	 * @category Object
	 * @typedefn Idx = String | Int
	 * @sig [Idx] -> {k: v} -> {k: v}
	 * @param {Array} path The path to the value to omit
	 * @param {Object} obj The object to clone
	 * @return {Object} A new object without the property at path
	 * @see R.assocPath
	 * @example
	 *
	 *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
	 */

	var dissocPath =
	/*#__PURE__*/
	_curry2(function dissocPath(path, obj) {
	  switch (path.length) {
	    case 0:
	      return obj;

	    case 1:
	      return _isInteger(path[0]) && _isArray(obj) ? remove(path[0], 1, obj) : dissoc(path[0], obj);

	    default:
	      var head = path[0];
	      var tail = Array.prototype.slice.call(path, 1);

	      if (obj[head] == null) {
	        return obj;
	      } else if (_isInteger(head) && _isArray(obj)) {
	        return update(head, dissocPath(tail, obj[head]), obj);
	      } else {
	        return assoc(head, dissocPath(tail, obj[head]), obj);
	      }

	  }
	});

	/**
	 * Divides two numbers. Equivalent to `a / b`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Math
	 * @sig Number -> Number -> Number
	 * @param {Number} a The first value.
	 * @param {Number} b The second value.
	 * @return {Number} The result of `a / b`.
	 * @see R.multiply
	 * @example
	 *
	 *      R.divide(71, 100); //=> 0.71
	 *
	 *      const half = R.divide(R.__, 2);
	 *      half(42); //=> 21
	 *
	 *      const reciprocal = R.divide(1);
	 *      reciprocal(4);   //=> 0.25
	 */

	var divide =
	/*#__PURE__*/
	_curry2(function divide(a, b) {
	  return a / b;
	});

	var XDrop =
	/*#__PURE__*/
	function () {
	  function XDrop(n, xf) {
	    this.xf = xf;
	    this.n = n;
	  }

	  XDrop.prototype['@@transducer/init'] = _xfBase.init;
	  XDrop.prototype['@@transducer/result'] = _xfBase.result;

	  XDrop.prototype['@@transducer/step'] = function (result, input) {
	    if (this.n > 0) {
	      this.n -= 1;
	      return result;
	    }

	    return this.xf['@@transducer/step'](result, input);
	  };

	  return XDrop;
	}();

	var _xdrop =
	/*#__PURE__*/
	_curry2(function _xdrop(n, xf) {
	  return new XDrop(n, xf);
	});

	/**
	 * Returns all but the first `n` elements of the given list, string, or
	 * transducer/transformer (or object with a `drop` method).
	 *
	 * Dispatches to the `drop` method of the second argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Number -> [a] -> [a]
	 * @sig Number -> String -> String
	 * @param {Number} n
	 * @param {*} list
	 * @return {*} A copy of list without the first `n` elements
	 * @see R.take, R.transduce, R.dropLast, R.dropWhile
	 * @example
	 *
	 *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
	 *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
	 *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
	 *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
	 *      R.drop(3, 'ramda');               //=> 'da'
	 */

	var drop =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['drop'], _xdrop, function drop(n, xs) {
	  return slice(Math.max(0, n), Infinity, xs);
	}));

	var XTake =
	/*#__PURE__*/
	function () {
	  function XTake(n, xf) {
	    this.xf = xf;
	    this.n = n;
	    this.i = 0;
	  }

	  XTake.prototype['@@transducer/init'] = _xfBase.init;
	  XTake.prototype['@@transducer/result'] = _xfBase.result;

	  XTake.prototype['@@transducer/step'] = function (result, input) {
	    this.i += 1;
	    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
	    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;
	  };

	  return XTake;
	}();

	var _xtake =
	/*#__PURE__*/
	_curry2(function _xtake(n, xf) {
	  return new XTake(n, xf);
	});

	/**
	 * Returns the first `n` elements of the given list, string, or
	 * transducer/transformer (or object with a `take` method).
	 *
	 * Dispatches to the `take` method of the second argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Number -> [a] -> [a]
	 * @sig Number -> String -> String
	 * @param {Number} n
	 * @param {*} list
	 * @return {*}
	 * @see R.drop
	 * @example
	 *
	 *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
	 *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
	 *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	 *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	 *      R.take(3, 'ramda');               //=> 'ram'
	 *
	 *      const personnel = [
	 *        'Dave Brubeck',
	 *        'Paul Desmond',
	 *        'Eugene Wright',
	 *        'Joe Morello',
	 *        'Gerry Mulligan',
	 *        'Bob Bates',
	 *        'Joe Dodge',
	 *        'Ron Crotty'
	 *      ];
	 *
	 *      const takeFive = R.take(5);
	 *      takeFive(personnel);
	 *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
	 * @symb R.take(-1, [a, b]) = [a, b]
	 * @symb R.take(0, [a, b]) = []
	 * @symb R.take(1, [a, b]) = [a]
	 * @symb R.take(2, [a, b]) = [a, b]
	 */

	var take =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['take'], _xtake, function take(n, xs) {
	  return slice(0, n < 0 ? Infinity : n, xs);
	}));

	function dropLast(n, xs) {
	  return take(n < xs.length ? xs.length - n : 0, xs);
	}

	var XDropLast =
	/*#__PURE__*/
	function () {
	  function XDropLast(n, xf) {
	    this.xf = xf;
	    this.pos = 0;
	    this.full = false;
	    this.acc = new Array(n);
	  }

	  XDropLast.prototype['@@transducer/init'] = _xfBase.init;

	  XDropLast.prototype['@@transducer/result'] = function (result) {
	    this.acc = null;
	    return this.xf['@@transducer/result'](result);
	  };

	  XDropLast.prototype['@@transducer/step'] = function (result, input) {
	    if (this.full) {
	      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
	    }

	    this.store(input);
	    return result;
	  };

	  XDropLast.prototype.store = function (input) {
	    this.acc[this.pos] = input;
	    this.pos += 1;

	    if (this.pos === this.acc.length) {
	      this.pos = 0;
	      this.full = true;
	    }
	  };

	  return XDropLast;
	}();

	var _xdropLast =
	/*#__PURE__*/
	_curry2(function _xdropLast(n, xf) {
	  return new XDropLast(n, xf);
	});

	/**
	 * Returns a list containing all but the last `n` elements of the given `list`.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category List
	 * @sig Number -> [a] -> [a]
	 * @sig Number -> String -> String
	 * @param {Number} n The number of elements of `list` to skip.
	 * @param {Array} list The list of elements to consider.
	 * @return {Array} A copy of the list with only the first `list.length - n` elements
	 * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile
	 * @example
	 *
	 *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
	 *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
	 *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
	 *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
	 *      R.dropLast(3, 'ramda');               //=> 'ra'
	 */

	var dropLast$1 =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable([], _xdropLast, dropLast));

	function dropLastWhile(pred, xs) {
	  var idx = xs.length - 1;

	  while (idx >= 0 && pred(xs[idx])) {
	    idx -= 1;
	  }

	  return slice(0, idx + 1, xs);
	}

	var XDropLastWhile =
	/*#__PURE__*/
	function () {
	  function XDropLastWhile(fn, xf) {
	    this.f = fn;
	    this.retained = [];
	    this.xf = xf;
	  }

	  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;

	  XDropLastWhile.prototype['@@transducer/result'] = function (result) {
	    this.retained = null;
	    return this.xf['@@transducer/result'](result);
	  };

	  XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {
	    return this.f(input) ? this.retain(result, input) : this.flush(result, input);
	  };

	  XDropLastWhile.prototype.flush = function (result, input) {
	    result = _reduce(this.xf['@@transducer/step'], result, this.retained);
	    this.retained = [];
	    return this.xf['@@transducer/step'](result, input);
	  };

	  XDropLastWhile.prototype.retain = function (result, input) {
	    this.retained.push(input);
	    return result;
	  };

	  return XDropLastWhile;
	}();

	var _xdropLastWhile =
	/*#__PURE__*/
	_curry2(function _xdropLastWhile(fn, xf) {
	  return new XDropLastWhile(fn, xf);
	});

	/**
	 * Returns a new list excluding all the tailing elements of a given list which
	 * satisfy the supplied predicate function. It passes each value from the right
	 * to the supplied predicate function, skipping elements until the predicate
	 * function returns a `falsy` value. The predicate function is applied to one argument:
	 * *(value)*.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> [a]
	 * @sig (a -> Boolean) -> String -> String
	 * @param {Function} predicate The function to be called on each element
	 * @param {Array} xs The collection to iterate over.
	 * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.
	 * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile
	 * @example
	 *
	 *      const lteThree = x => x <= 3;
	 *
	 *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
	 *
	 *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'
	 */

	var dropLastWhile$1 =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable([], _xdropLastWhile, dropLastWhile));

	var XDropRepeatsWith =
	/*#__PURE__*/
	function () {
	  function XDropRepeatsWith(pred, xf) {
	    this.xf = xf;
	    this.pred = pred;
	    this.lastValue = undefined;
	    this.seenFirstValue = false;
	  }

	  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;
	  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;

	  XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
	    var sameAsLast = false;

	    if (!this.seenFirstValue) {
	      this.seenFirstValue = true;
	    } else if (this.pred(this.lastValue, input)) {
	      sameAsLast = true;
	    }

	    this.lastValue = input;
	    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
	  };

	  return XDropRepeatsWith;
	}();

	var _xdropRepeatsWith =
	/*#__PURE__*/
	_curry2(function _xdropRepeatsWith(pred, xf) {
	  return new XDropRepeatsWith(pred, xf);
	});

	/**
	 * Returns the last element of the given list or string.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.4
	 * @category List
	 * @sig [a] -> a | Undefined
	 * @sig String -> String
	 * @param {*} list
	 * @return {*}
	 * @see R.init, R.head, R.tail
	 * @example
	 *
	 *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
	 *      R.last([]); //=> undefined
	 *
	 *      R.last('abc'); //=> 'c'
	 *      R.last(''); //=> ''
	 */

	var last$1 =
	/*#__PURE__*/
	nth(-1);

	/**
	 * Returns a new list without any consecutively repeating elements. Equality is
	 * determined by applying the supplied predicate to each pair of consecutive elements. The
	 * first element in a series of equal elements will be preserved.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category List
	 * @sig ((a, a) -> Boolean) -> [a] -> [a]
	 * @param {Function} pred A predicate used to test whether two items are equal.
	 * @param {Array} list The array to consider.
	 * @return {Array} `list` without repeating elements.
	 * @see R.transduce
	 * @example
	 *
	 *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
	 *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
	 */

	var dropRepeatsWith =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
	  var result = [];
	  var idx = 1;
	  var len = list.length;

	  if (len !== 0) {
	    result[0] = list[0];

	    while (idx < len) {
	      if (!pred(last$1(result), list[idx])) {
	        result[result.length] = list[idx];
	      }

	      idx += 1;
	    }
	  }

	  return result;
	}));

	/**
	 * Returns a new list without any consecutively repeating elements.
	 * [`R.equals`](#equals) is used to determine equality.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category List
	 * @sig [a] -> [a]
	 * @param {Array} list The array to consider.
	 * @return {Array} `list` without repeating elements.
	 * @see R.transduce
	 * @example
	 *
	 *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
	 */

	var dropRepeats =
	/*#__PURE__*/
	_curry1(
	/*#__PURE__*/
	_dispatchable([],
	/*#__PURE__*/
	_xdropRepeatsWith(equals),
	/*#__PURE__*/
	dropRepeatsWith(equals)));

	var XDropWhile =
	/*#__PURE__*/
	function () {
	  function XDropWhile(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }

	  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;
	  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;

	  XDropWhile.prototype['@@transducer/step'] = function (result, input) {
	    if (this.f) {
	      if (this.f(input)) {
	        return result;
	      }

	      this.f = null;
	    }

	    return this.xf['@@transducer/step'](result, input);
	  };

	  return XDropWhile;
	}();

	var _xdropWhile =
	/*#__PURE__*/
	_curry2(function _xdropWhile(f, xf) {
	  return new XDropWhile(f, xf);
	});

	/**
	 * Returns a new list excluding the leading elements of a given list which
	 * satisfy the supplied predicate function. It passes each value to the supplied
	 * predicate function, skipping elements while the predicate function returns
	 * `true`. The predicate function is applied to one argument: *(value)*.
	 *
	 * Dispatches to the `dropWhile` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> [a]
	 * @sig (a -> Boolean) -> String -> String
	 * @param {Function} fn The function called per iteration.
	 * @param {Array} xs The collection to iterate over.
	 * @return {Array} A new array.
	 * @see R.takeWhile, R.transduce, R.addIndex
	 * @example
	 *
	 *      const lteTwo = x => x <= 2;
	 *
	 *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
	 *
	 *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'
	 */

	var dropWhile =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {
	  var idx = 0;
	  var len = xs.length;

	  while (idx < len && pred(xs[idx])) {
	    idx += 1;
	  }

	  return slice(idx, Infinity, xs);
	}));

	/**
	 * Returns `true` if one or both of its arguments are `true`. Returns `false`
	 * if both arguments are `false`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Logic
	 * @sig a -> b -> a | b
	 * @param {Any} a
	 * @param {Any} b
	 * @return {Any} the first argument if truthy, otherwise the second argument.
	 * @see R.either, R.xor
	 * @example
	 *
	 *      R.or(true, true); //=> true
	 *      R.or(true, false); //=> true
	 *      R.or(false, true); //=> true
	 *      R.or(false, false); //=> false
	 */

	var or =
	/*#__PURE__*/
	_curry2(function or(a, b) {
	  return a || b;
	});

	/**
	 * A function wrapping calls to the two functions in an `||` operation,
	 * returning the result of the first function if it is truth-y and the result
	 * of the second function otherwise. Note that this is short-circuited,
	 * meaning that the second function will not be invoked if the first returns a
	 * truth-y value.
	 *
	 * In addition to functions, `R.either` also accepts any fantasy-land compatible
	 * applicative functor.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.12.0
	 * @category Logic
	 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
	 * @param {Function} f a predicate
	 * @param {Function} g another predicate
	 * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
	 * @see R.or
	 * @example
	 *
	 *      const gt10 = x => x > 10;
	 *      const even = x => x % 2 === 0;
	 *      const f = R.either(gt10, even);
	 *      f(101); //=> true
	 *      f(8); //=> true
	 *
	 *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)
	 *      R.either([false, false, 'a'], [11]) // => [11, 11, "a"]
	 */

	var either =
	/*#__PURE__*/
	_curry2(function either(f, g) {
	  return _isFunction(f) ? function _either() {
	    return f.apply(this, arguments) || g.apply(this, arguments);
	  } : lift(or)(f, g);
	});

	/**
	 * Returns the empty value of its argument's type. Ramda defines the empty
	 * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
	 * types are supported if they define `<Type>.empty`,
	 * `<Type>.prototype.empty` or implement the
	 * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).
	 *
	 * Dispatches to the `empty` method of the first argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category Function
	 * @sig a -> a
	 * @param {*} x
	 * @return {*}
	 * @example
	 *
	 *      R.empty(Just(42));      //=> Nothing()
	 *      R.empty([1, 2, 3]);     //=> []
	 *      R.empty('unicorns');    //=> ''
	 *      R.empty({x: 1, y: 2});  //=> {}
	 */

	var empty =
	/*#__PURE__*/
	_curry1(function empty(x) {
	  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {
	    return arguments;
	  }() : void 0 // else
	  ;
	});

	/**
	 * Returns a new list containing the last `n` elements of the given list.
	 * If `n > list.length`, returns a list of `list.length` elements.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category List
	 * @sig Number -> [a] -> [a]
	 * @sig Number -> String -> String
	 * @param {Number} n The number of elements to return.
	 * @param {Array} xs The collection to consider.
	 * @return {Array}
	 * @see R.dropLast
	 * @example
	 *
	 *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
	 *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
	 *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	 *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	 *      R.takeLast(3, 'ramda');               //=> 'mda'
	 */

	var takeLast =
	/*#__PURE__*/
	_curry2(function takeLast(n, xs) {
	  return drop(n >= 0 ? xs.length - n : 0, xs);
	});

	/**
	 * Checks if a list ends with the provided sublist.
	 *
	 * Similarly, checks if a string ends with the provided substring.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category List
	 * @sig [a] -> [a] -> Boolean
	 * @sig String -> String -> Boolean
	 * @param {*} suffix
	 * @param {*} list
	 * @return {Boolean}
	 * @see R.startsWith
	 * @example
	 *
	 *      R.endsWith('c', 'abc')                //=> true
	 *      R.endsWith('b', 'abc')                //=> false
	 *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true
	 *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false
	 */

	var endsWith =
	/*#__PURE__*/
	_curry2(function (suffix, list) {
	  return equals(takeLast(suffix.length, list), suffix);
	});

	/**
	 * Takes a function and two values in its domain and returns `true` if the
	 * values map to the same value in the codomain; `false` otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.18.0
	 * @category Relation
	 * @sig (a -> b) -> a -> a -> Boolean
	 * @param {Function} f
	 * @param {*} x
	 * @param {*} y
	 * @return {Boolean}
	 * @example
	 *
	 *      R.eqBy(Math.abs, 5, -5); //=> true
	 */

	var eqBy =
	/*#__PURE__*/
	_curry3(function eqBy(f, x, y) {
	  return equals(f(x), f(y));
	});

	/**
	 * Reports whether two objects have the same value, in [`R.equals`](#equals)
	 * terms, for the specified property. Useful as a curried predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig k -> {k: v} -> {k: v} -> Boolean
	 * @param {String} prop The name of the property to compare
	 * @param {Object} obj1
	 * @param {Object} obj2
	 * @return {Boolean}
	 *
	 * @example
	 *
	 *      const o1 = { a: 1, b: 2, c: 3, d: 4 };
	 *      const o2 = { a: 10, b: 20, c: 3, d: 40 };
	 *      R.eqProps('a', o1, o2); //=> false
	 *      R.eqProps('c', o1, o2); //=> true
	 */

	var eqProps =
	/*#__PURE__*/
	_curry3(function eqProps(prop, obj1, obj2) {
	  return equals(obj1[prop], obj2[prop]);
	});

	/**
	 * Creates a new object by recursively evolving a shallow copy of `object`,
	 * according to the `transformation` functions. All non-primitive properties
	 * are copied by reference.
	 *
	 * A `transformation` function will not be invoked if its corresponding key
	 * does not exist in the evolved object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Object
	 * @sig {k: (v -> v)} -> {k: v} -> {k: v}
	 * @param {Object} transformations The object specifying transformation functions to apply
	 *        to the object.
	 * @param {Object} object The object to be transformed.
	 * @return {Object} The transformed object.
	 * @example
	 *
	 *      const tomato = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
	 *      const transformations = {
	 *        firstName: R.trim,
	 *        lastName: R.trim, // Will not get invoked.
	 *        data: {elapsed: R.add(1), remaining: R.add(-1)}
	 *      };
	 *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
	 */

	var evolve =
	/*#__PURE__*/
	_curry2(function evolve(transformations, object) {
	  var result = object instanceof Array ? [] : {};
	  var transformation, key, type;

	  for (key in object) {
	    transformation = transformations[key];
	    type = typeof transformation;
	    result[key] = type === 'function' ? transformation(object[key]) : transformation && type === 'object' ? evolve(transformation, object[key]) : object[key];
	  }

	  return result;
	});

	var XFind =
	/*#__PURE__*/
	function () {
	  function XFind(f, xf) {
	    this.xf = xf;
	    this.f = f;
	    this.found = false;
	  }

	  XFind.prototype['@@transducer/init'] = _xfBase.init;

	  XFind.prototype['@@transducer/result'] = function (result) {
	    if (!this.found) {
	      result = this.xf['@@transducer/step'](result, void 0);
	    }

	    return this.xf['@@transducer/result'](result);
	  };

	  XFind.prototype['@@transducer/step'] = function (result, input) {
	    if (this.f(input)) {
	      this.found = true;
	      result = _reduced(this.xf['@@transducer/step'](result, input));
	    }

	    return result;
	  };

	  return XFind;
	}();

	var _xfind =
	/*#__PURE__*/
	_curry2(function _xfind(f, xf) {
	  return new XFind(f, xf);
	});

	/**
	 * Returns the first element of the list which matches the predicate, or
	 * `undefined` if no element matches.
	 *
	 * Dispatches to the `find` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> a | undefined
	 * @param {Function} fn The predicate function used to determine if the element is the
	 *        desired one.
	 * @param {Array} list The array to consider.
	 * @return {Object} The element found, or `undefined`.
	 * @see R.transduce
	 * @example
	 *
	 *      const xs = [{a: 1}, {a: 2}, {a: 3}];
	 *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
	 *      R.find(R.propEq('a', 4))(xs); //=> undefined
	 */

	var find =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['find'], _xfind, function find(fn, list) {
	  var idx = 0;
	  var len = list.length;

	  while (idx < len) {
	    if (fn(list[idx])) {
	      return list[idx];
	    }

	    idx += 1;
	  }
	}));

	var XFindIndex =
	/*#__PURE__*/
	function () {
	  function XFindIndex(f, xf) {
	    this.xf = xf;
	    this.f = f;
	    this.idx = -1;
	    this.found = false;
	  }

	  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;

	  XFindIndex.prototype['@@transducer/result'] = function (result) {
	    if (!this.found) {
	      result = this.xf['@@transducer/step'](result, -1);
	    }

	    return this.xf['@@transducer/result'](result);
	  };

	  XFindIndex.prototype['@@transducer/step'] = function (result, input) {
	    this.idx += 1;

	    if (this.f(input)) {
	      this.found = true;
	      result = _reduced(this.xf['@@transducer/step'](result, this.idx));
	    }

	    return result;
	  };

	  return XFindIndex;
	}();

	var _xfindIndex =
	/*#__PURE__*/
	_curry2(function _xfindIndex(f, xf) {
	  return new XFindIndex(f, xf);
	});

	/**
	 * Returns the index of the first element of the list which matches the
	 * predicate, or `-1` if no element matches.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.1
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> Number
	 * @param {Function} fn The predicate function used to determine if the element is the
	 * desired one.
	 * @param {Array} list The array to consider.
	 * @return {Number} The index of the element found, or `-1`.
	 * @see R.transduce
	 * @example
	 *
	 *      const xs = [{a: 1}, {a: 2}, {a: 3}];
	 *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
	 *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
	 */

	var findIndex =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable([], _xfindIndex, function findIndex(fn, list) {
	  var idx = 0;
	  var len = list.length;

	  while (idx < len) {
	    if (fn(list[idx])) {
	      return idx;
	    }

	    idx += 1;
	  }

	  return -1;
	}));

	var XFindLast =
	/*#__PURE__*/
	function () {
	  function XFindLast(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }

	  XFindLast.prototype['@@transducer/init'] = _xfBase.init;

	  XFindLast.prototype['@@transducer/result'] = function (result) {
	    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));
	  };

	  XFindLast.prototype['@@transducer/step'] = function (result, input) {
	    if (this.f(input)) {
	      this.last = input;
	    }

	    return result;
	  };

	  return XFindLast;
	}();

	var _xfindLast =
	/*#__PURE__*/
	_curry2(function _xfindLast(f, xf) {
	  return new XFindLast(f, xf);
	});

	/**
	 * Returns the last element of the list which matches the predicate, or
	 * `undefined` if no element matches.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.1
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> a | undefined
	 * @param {Function} fn The predicate function used to determine if the element is the
	 * desired one.
	 * @param {Array} list The array to consider.
	 * @return {Object} The element found, or `undefined`.
	 * @see R.transduce
	 * @example
	 *
	 *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];
	 *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
	 *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
	 */

	var findLast =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable([], _xfindLast, function findLast(fn, list) {
	  var idx = list.length - 1;

	  while (idx >= 0) {
	    if (fn(list[idx])) {
	      return list[idx];
	    }

	    idx -= 1;
	  }
	}));

	var XFindLastIndex =
	/*#__PURE__*/
	function () {
	  function XFindLastIndex(f, xf) {
	    this.xf = xf;
	    this.f = f;
	    this.idx = -1;
	    this.lastIdx = -1;
	  }

	  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;

	  XFindLastIndex.prototype['@@transducer/result'] = function (result) {
	    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));
	  };

	  XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {
	    this.idx += 1;

	    if (this.f(input)) {
	      this.lastIdx = this.idx;
	    }

	    return result;
	  };

	  return XFindLastIndex;
	}();

	var _xfindLastIndex =
	/*#__PURE__*/
	_curry2(function _xfindLastIndex(f, xf) {
	  return new XFindLastIndex(f, xf);
	});

	/**
	 * Returns the index of the last element of the list which matches the
	 * predicate, or `-1` if no element matches.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.1
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> Number
	 * @param {Function} fn The predicate function used to determine if the element is the
	 * desired one.
	 * @param {Array} list The array to consider.
	 * @return {Number} The index of the element found, or `-1`.
	 * @see R.transduce
	 * @example
	 *
	 *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];
	 *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
	 *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
	 */

	var findLastIndex =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {
	  var idx = list.length - 1;

	  while (idx >= 0) {
	    if (fn(list[idx])) {
	      return idx;
	    }

	    idx -= 1;
	  }

	  return -1;
	}));

	/**
	 * Returns a new list by pulling every item out of it (and all its sub-arrays)
	 * and putting them in a new array, depth-first.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [b]
	 * @param {Array} list The array to consider.
	 * @return {Array} The flattened list.
	 * @see R.unnest
	 * @example
	 *
	 *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
	 *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
	 */

	var flatten =
	/*#__PURE__*/
	_curry1(
	/*#__PURE__*/
	_makeFlat(true));

	/**
	 * Returns a new function much like the supplied one, except that the first two
	 * arguments' order is reversed.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
	 * @param {Function} fn The function to invoke with its first two parameters reversed.
	 * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
	 * @example
	 *
	 *      const mergeThree = (a, b, c) => [].concat(a, b, c);
	 *
	 *      mergeThree(1, 2, 3); //=> [1, 2, 3]
	 *
	 *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
	 * @symb R.flip(f)(a, b, c) = f(b, a, c)
	 */

	var flip =
	/*#__PURE__*/
	_curry1(function flip(fn) {
	  return curryN(fn.length, function (a, b) {
	    var args = Array.prototype.slice.call(arguments, 0);
	    args[0] = b;
	    args[1] = a;
	    return fn.apply(this, args);
	  });
	});

	/**
	 * Iterate over an input `list`, calling a provided function `fn` for each
	 * element in the list.
	 *
	 * `fn` receives one argument: *(value)*.
	 *
	 * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
	 * arrays), unlike the native `Array.prototype.forEach` method. For more
	 * details on this behavior, see:
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
	 *
	 * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
	 * the original array. In some libraries this function is named `each`.
	 *
	 * Dispatches to the `forEach` method of the second argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.1
	 * @category List
	 * @sig (a -> *) -> [a] -> [a]
	 * @param {Function} fn The function to invoke. Receives one argument, `value`.
	 * @param {Array} list The list to iterate over.
	 * @return {Array} The original list.
	 * @see R.addIndex
	 * @example
	 *
	 *      const printXPlusFive = x => console.log(x + 5);
	 *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
	 *      // logs 6
	 *      // logs 7
	 *      // logs 8
	 * @symb R.forEach(f, [a, b, c]) = [a, b, c]
	 */

	var forEach =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_checkForMethod('forEach', function forEach(fn, list) {
	  var len = list.length;
	  var idx = 0;

	  while (idx < len) {
	    fn(list[idx]);
	    idx += 1;
	  }

	  return list;
	}));

	/**
	 * Iterate over an input `object`, calling a provided function `fn` for each
	 * key and value in the object.
	 *
	 * `fn` receives three argument: *(value, key, obj)*.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.23.0
	 * @category Object
	 * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
	 * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.
	 * @param {Object} obj The object to iterate over.
	 * @return {Object} The original object.
	 * @example
	 *
	 *      const printKeyConcatValue = (value, key) => console.log(key + ':' + value);
	 *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}
	 *      // logs x:1
	 *      // logs y:2
	 * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}
	 */

	var forEachObjIndexed =
	/*#__PURE__*/
	_curry2(function forEachObjIndexed(fn, obj) {
	  var keyList = keys(obj);
	  var idx = 0;

	  while (idx < keyList.length) {
	    var key = keyList[idx];
	    fn(obj[key], key, obj);
	    idx += 1;
	  }

	  return obj;
	});

	/**
	 * Creates a new object from a list key-value pairs. If a key appears in
	 * multiple pairs, the rightmost pair is included in the object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category List
	 * @sig [[k,v]] -> {k: v}
	 * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
	 * @return {Object} The object made by pairing up `keys` and `values`.
	 * @see R.toPairs, R.pair
	 * @example
	 *
	 *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
	 */

	var fromPairs =
	/*#__PURE__*/
	_curry1(function fromPairs(pairs) {
	  var result = {};
	  var idx = 0;

	  while (idx < pairs.length) {
	    result[pairs[idx][0]] = pairs[idx][1];
	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Splits a list into sub-lists stored in an object, based on the result of
	 * calling a String-returning function on each element, and grouping the
	 * results according to values returned.
	 *
	 * Dispatches to the `groupBy` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig (a -> String) -> [a] -> {String: [a]}
	 * @param {Function} fn Function :: a -> String
	 * @param {Array} list The array to group
	 * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
	 *         that produced that key when passed to `fn`.
	 * @see R.reduceBy, R.transduce
	 * @example
	 *
	 *      const byGrade = R.groupBy(function(student) {
	 *        const score = student.score;
	 *        return score < 65 ? 'F' :
	 *               score < 70 ? 'D' :
	 *               score < 80 ? 'C' :
	 *               score < 90 ? 'B' : 'A';
	 *      });
	 *      const students = [{name: 'Abby', score: 84},
	 *                      {name: 'Eddy', score: 58},
	 *                      // ...
	 *                      {name: 'Jack', score: 69}];
	 *      byGrade(students);
	 *      // {
	 *      //   'A': [{name: 'Dianne', score: 99}],
	 *      //   'B': [{name: 'Abby', score: 84}]
	 *      //   // ...,
	 *      //   'F': [{name: 'Eddy', score: 58}]
	 *      // }
	 */

	var groupBy =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_checkForMethod('groupBy',
	/*#__PURE__*/
	reduceBy(function (acc, item) {
	  if (acc == null) {
	    acc = [];
	  }

	  acc.push(item);
	  return acc;
	}, null)));

	/**
	 * Takes a list and returns a list of lists where each sublist's elements are
	 * all satisfied pairwise comparison according to the provided function.
	 * Only adjacent elements are passed to the comparison function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.21.0
	 * @category List
	 * @sig ((a, a) → Boolean) → [a] → [[a]]
	 * @param {Function} fn Function for determining whether two given (adjacent)
	 *        elements should be in the same group
	 * @param {Array} list The array to group. Also accepts a string, which will be
	 *        treated as a list of characters.
	 * @return {List} A list that contains sublists of elements,
	 *         whose concatenations are equal to the original list.
	 * @example
	 *
	 * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
	 * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
	 *
	 * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])
	 * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]
	 *
	 * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
	 * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
	 *
	 * R.groupWith(R.eqBy(isVowel), 'aestiou')
	 * //=> ['ae', 'st', 'iou']
	 */

	var groupWith =
	/*#__PURE__*/
	_curry2(function (fn, list) {
	  var res = [];
	  var idx = 0;
	  var len = list.length;

	  while (idx < len) {
	    var nextidx = idx + 1;

	    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {
	      nextidx += 1;
	    }

	    res.push(list.slice(idx, nextidx));
	    idx = nextidx;
	  }

	  return res;
	});

	/**
	 * Returns `true` if the first argument is greater than the second; `false`
	 * otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig Ord a => a -> a -> Boolean
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 * @see R.lt
	 * @example
	 *
	 *      R.gt(2, 1); //=> true
	 *      R.gt(2, 2); //=> false
	 *      R.gt(2, 3); //=> false
	 *      R.gt('a', 'z'); //=> false
	 *      R.gt('z', 'a'); //=> true
	 */

	var gt =
	/*#__PURE__*/
	_curry2(function gt(a, b) {
	  return a > b;
	});

	/**
	 * Returns `true` if the first argument is greater than or equal to the second;
	 * `false` otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig Ord a => a -> a -> Boolean
	 * @param {Number} a
	 * @param {Number} b
	 * @return {Boolean}
	 * @see R.lte
	 * @example
	 *
	 *      R.gte(2, 1); //=> true
	 *      R.gte(2, 2); //=> true
	 *      R.gte(2, 3); //=> false
	 *      R.gte('a', 'z'); //=> false
	 *      R.gte('z', 'a'); //=> true
	 */

	var gte =
	/*#__PURE__*/
	_curry2(function gte(a, b) {
	  return a >= b;
	});

	/**
	 * Returns whether or not a path exists in an object. Only the object's
	 * own properties are checked.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.26.0
	 * @category Object
	 * @typedefn Idx = String | Int
	 * @sig [Idx] -> {a} -> Boolean
	 * @param {Array} path The path to use.
	 * @param {Object} obj The object to check the path in.
	 * @return {Boolean} Whether the path exists.
	 * @see R.has
	 * @example
	 *
	 *      R.hasPath(['a', 'b'], {a: {b: 2}});         // => true
	 *      R.hasPath(['a', 'b'], {a: {b: undefined}}); // => true
	 *      R.hasPath(['a', 'b'], {a: {c: 2}});         // => false
	 *      R.hasPath(['a', 'b'], {});                  // => false
	 */

	var hasPath =
	/*#__PURE__*/
	_curry2(function hasPath(_path, obj) {
	  if (_path.length === 0 || isNil(obj)) {
	    return false;
	  }

	  var val = obj;
	  var idx = 0;

	  while (idx < _path.length) {
	    if (!isNil(val) && _has(_path[idx], val)) {
	      val = val[_path[idx]];
	      idx += 1;
	    } else {
	      return false;
	    }
	  }

	  return true;
	});

	/**
	 * Returns whether or not an object has an own property with the specified name
	 *
	 * @func
	 * @memberOf R
	 * @since v0.7.0
	 * @category Object
	 * @sig s -> {s: x} -> Boolean
	 * @param {String} prop The name of the property to check for.
	 * @param {Object} obj The object to query.
	 * @return {Boolean} Whether the property exists.
	 * @example
	 *
	 *      const hasName = R.has('name');
	 *      hasName({name: 'alice'});   //=> true
	 *      hasName({name: 'bob'});     //=> true
	 *      hasName({});                //=> false
	 *
	 *      const point = {x: 0, y: 0};
	 *      const pointHas = R.has(R.__, point);
	 *      pointHas('x');  //=> true
	 *      pointHas('y');  //=> true
	 *      pointHas('z');  //=> false
	 */

	var has =
	/*#__PURE__*/
	_curry2(function has(prop, obj) {
	  return hasPath([prop], obj);
	});

	/**
	 * Returns whether or not an object or its prototype chain has a property with
	 * the specified name
	 *
	 * @func
	 * @memberOf R
	 * @since v0.7.0
	 * @category Object
	 * @sig s -> {s: x} -> Boolean
	 * @param {String} prop The name of the property to check for.
	 * @param {Object} obj The object to query.
	 * @return {Boolean} Whether the property exists.
	 * @example
	 *
	 *      function Rectangle(width, height) {
	 *        this.width = width;
	 *        this.height = height;
	 *      }
	 *      Rectangle.prototype.area = function() {
	 *        return this.width * this.height;
	 *      };
	 *
	 *      const square = new Rectangle(2, 2);
	 *      R.hasIn('width', square);  //=> true
	 *      R.hasIn('area', square);  //=> true
	 */

	var hasIn =
	/*#__PURE__*/
	_curry2(function hasIn(prop, obj) {
	  return prop in obj;
	});

	/**
	 * Returns true if its arguments are identical, false otherwise. Values are
	 * identical if they reference the same memory. `NaN` is identical to `NaN`;
	 * `0` and `-0` are not identical.
	 *
	 * Note this is merely a curried version of ES6 `Object.is`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.15.0
	 * @category Relation
	 * @sig a -> a -> Boolean
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 * @example
	 *
	 *      const o = {};
	 *      R.identical(o, o); //=> true
	 *      R.identical(1, 1); //=> true
	 *      R.identical(1, '1'); //=> false
	 *      R.identical([], []); //=> false
	 *      R.identical(0, -0); //=> false
	 *      R.identical(NaN, NaN); //=> true
	 */

	var identical =
	/*#__PURE__*/
	_curry2(_objectIs$1);

	/**
	 * Creates a function that will process either the `onTrue` or the `onFalse`
	 * function depending upon the result of the `condition` predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Logic
	 * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
	 * @param {Function} condition A predicate function
	 * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
	 * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
	 * @return {Function} A new function that will process either the `onTrue` or the `onFalse`
	 *                    function depending upon the result of the `condition` predicate.
	 * @see R.unless, R.when, R.cond
	 * @example
	 *
	 *      const incCount = R.ifElse(
	 *        R.has('count'),
	 *        R.over(R.lensProp('count'), R.inc),
	 *        R.assoc('count', 1)
	 *      );
	 *      incCount({});           //=> { count: 1 }
	 *      incCount({ count: 1 }); //=> { count: 2 }
	 */

	var ifElse =
	/*#__PURE__*/
	_curry3(function ifElse(condition, onTrue, onFalse) {
	  return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
	    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
	  });
	});

	/**
	 * Increments its argument.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Math
	 * @sig Number -> Number
	 * @param {Number} n
	 * @return {Number} n + 1
	 * @see R.dec
	 * @example
	 *
	 *      R.inc(42); //=> 43
	 */

	var inc =
	/*#__PURE__*/
	add(1);

	/**
	 * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
	 * terms, to at least one element of the given list; `false` otherwise.
	 * Works also with strings.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.26.0
	 * @category List
	 * @sig a -> [a] -> Boolean
	 * @param {Object} a The item to compare against.
	 * @param {Array} list The array to consider.
	 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
	 * @see R.any
	 * @example
	 *
	 *      R.includes(3, [1, 2, 3]); //=> true
	 *      R.includes(4, [1, 2, 3]); //=> false
	 *      R.includes({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
	 *      R.includes([42], [[42]]); //=> true
	 *      R.includes('ba', 'banana'); //=>true
	 */

	var includes =
	/*#__PURE__*/
	_curry2(_includes);

	/**
	 * Given a function that generates a key, turns a list of objects into an
	 * object indexing the objects by the given key. Note that if multiple
	 * objects generate the same value for the indexing key only the last value
	 * will be included in the generated object.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category List
	 * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
	 * @param {Function} fn Function :: a -> String
	 * @param {Array} array The array of objects to index
	 * @return {Object} An object indexing each array element by the given property.
	 * @example
	 *
	 *      const list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
	 *      R.indexBy(R.prop('id'), list);
	 *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
	 */

	var indexBy =
	/*#__PURE__*/
	reduceBy(function (acc, elem) {
	  return elem;
	}, null);

	/**
	 * Returns the position of the first occurrence of an item in an array, or -1
	 * if the item is not included in the array. [`R.equals`](#equals) is used to
	 * determine equality.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig a -> [a] -> Number
	 * @param {*} target The item to find.
	 * @param {Array} xs The array to search in.
	 * @return {Number} the index of the target, or -1 if the target is not found.
	 * @see R.lastIndexOf
	 * @example
	 *
	 *      R.indexOf(3, [1,2,3,4]); //=> 2
	 *      R.indexOf(10, [1,2,3,4]); //=> -1
	 */

	var indexOf =
	/*#__PURE__*/
	_curry2(function indexOf(target, xs) {
	  return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
	});

	/**
	 * Returns all but the last element of the given list or string.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category List
	 * @sig [a] -> [a]
	 * @sig String -> String
	 * @param {*} list
	 * @return {*}
	 * @see R.last, R.head, R.tail
	 * @example
	 *
	 *      R.init([1, 2, 3]);  //=> [1, 2]
	 *      R.init([1, 2]);     //=> [1]
	 *      R.init([1]);        //=> []
	 *      R.init([]);         //=> []
	 *
	 *      R.init('abc');  //=> 'ab'
	 *      R.init('ab');   //=> 'a'
	 *      R.init('a');    //=> ''
	 *      R.init('');     //=> ''
	 */

	var init =
	/*#__PURE__*/
	slice(0, -1);

	/**
	 * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list
	 * `xs'` comprising each of the elements of `xs` which is equal to one or more
	 * elements of `ys` according to `pred`.
	 *
	 * `pred` must be a binary function expecting an element from each list.
	 *
	 * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should
	 * not be significant, but since `xs'` is ordered the implementation guarantees
	 * that its values are in the same order as they appear in `xs`. Duplicates are
	 * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category Relation
	 * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]
	 * @param {Function} pred
	 * @param {Array} xs
	 * @param {Array} ys
	 * @return {Array}
	 * @see R.intersection
	 * @example
	 *
	 *      R.innerJoin(
	 *        (record, id) => record.id === id,
	 *        [{id: 824, name: 'Richie Furay'},
	 *         {id: 956, name: 'Dewey Martin'},
	 *         {id: 313, name: 'Bruce Palmer'},
	 *         {id: 456, name: 'Stephen Stills'},
	 *         {id: 177, name: 'Neil Young'}],
	 *        [177, 456, 999]
	 *      );
	 *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
	 */

	var innerJoin =
	/*#__PURE__*/
	_curry3(function innerJoin(pred, xs, ys) {
	  return _filter(function (x) {
	    return _includesWith(pred, x, ys);
	  }, xs);
	});

	/**
	 * Inserts the supplied element into the list, at the specified `index`. _Note that

	 * this is not destructive_: it returns a copy of the list with the changes.
	 * <small>No lists have been harmed in the application of this function.</small>
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.2
	 * @category List
	 * @sig Number -> a -> [a] -> [a]
	 * @param {Number} index The position to insert the element
	 * @param {*} elt The element to insert into the Array
	 * @param {Array} list The list to insert into
	 * @return {Array} A new Array with `elt` inserted at `index`.
	 * @example
	 *
	 *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
	 */

	var insert =
	/*#__PURE__*/
	_curry3(function insert(idx, elt, list) {
	  idx = idx < list.length && idx >= 0 ? idx : list.length;
	  var result = Array.prototype.slice.call(list, 0);
	  result.splice(idx, 0, elt);
	  return result;
	});

	/**
	 * Inserts the sub-list into the list, at the specified `index`. _Note that this is not
	 * destructive_: it returns a copy of the list with the changes.
	 * <small>No lists have been harmed in the application of this function.</small>
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category List
	 * @sig Number -> [a] -> [a] -> [a]
	 * @param {Number} index The position to insert the sub-list
	 * @param {Array} elts The sub-list to insert into the Array
	 * @param {Array} list The list to insert the sub-list into
	 * @return {Array} A new Array with `elts` inserted starting at `index`.
	 * @example
	 *
	 *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
	 */

	var insertAll =
	/*#__PURE__*/
	_curry3(function insertAll(idx, elts, list) {
	  idx = idx < list.length && idx >= 0 ? idx : list.length;
	  return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
	});

	/**
	 * Returns a new list containing only one copy of each element in the original
	 * list, based upon the value returned by applying the supplied function to
	 * each list element. Prefers the first item if the supplied function produces
	 * the same value on two items. [`R.equals`](#equals) is used for comparison.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category List
	 * @sig (a -> b) -> [a] -> [a]
	 * @param {Function} fn A function used to produce a value to use during comparisons.
	 * @param {Array} list The array to consider.
	 * @return {Array} The list of unique items.
	 * @example
	 *
	 *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
	 */

	var uniqBy =
	/*#__PURE__*/
	_curry2(function uniqBy(fn, list) {
	  var set = new _Set();
	  var result = [];
	  var idx = 0;
	  var appliedItem, item;

	  while (idx < list.length) {
	    item = list[idx];
	    appliedItem = fn(item);

	    if (set.add(appliedItem)) {
	      result.push(item);
	    }

	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Returns a new list containing only one copy of each element in the original
	 * list. [`R.equals`](#equals) is used to determine equality.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [a]
	 * @param {Array} list The array to consider.
	 * @return {Array} The list of unique items.
	 * @example
	 *
	 *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
	 *      R.uniq([1, '1']);     //=> [1, '1']
	 *      R.uniq([[42], [42]]); //=> [[42]]
	 */

	var uniq =
	/*#__PURE__*/
	uniqBy(identity);

	/**
	 * Combines two lists into a set (i.e. no duplicates) composed of those
	 * elements common to both lists.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig [*] -> [*] -> [*]
	 * @param {Array} list1 The first list.
	 * @param {Array} list2 The second list.
	 * @return {Array} The list of elements found in both `list1` and `list2`.
	 * @see R.innerJoin
	 * @example
	 *
	 *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
	 */

	var intersection =
	/*#__PURE__*/
	_curry2(function intersection(list1, list2) {
	  var lookupList, filteredList;

	  if (list1.length > list2.length) {
	    lookupList = list1;
	    filteredList = list2;
	  } else {
	    lookupList = list2;
	    filteredList = list1;
	  }

	  return uniq(_filter(flip(_includes)(lookupList), filteredList));
	});

	/**
	 * Creates a new list with the separator interposed between elements.
	 *
	 * Dispatches to the `intersperse` method of the second argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category List
	 * @sig a -> [a] -> [a]
	 * @param {*} separator The element to add to the list.
	 * @param {Array} list The list to be interposed.
	 * @return {Array} The new list.
	 * @example
	 *
	 *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']
	 */

	var intersperse =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_checkForMethod('intersperse', function intersperse(separator, list) {
	  var out = [];
	  var idx = 0;
	  var length = list.length;

	  while (idx < length) {
	    if (idx === length - 1) {
	      out.push(list[idx]);
	    } else {
	      out.push(list[idx], separator);
	    }

	    idx += 1;
	  }

	  return out;
	}));

	function _objectAssign(target) {
	  if (target == null) {
	    throw new TypeError('Cannot convert undefined or null to object');
	  }

	  var output = Object(target);
	  var idx = 1;
	  var length = arguments.length;

	  while (idx < length) {
	    var source = arguments[idx];

	    if (source != null) {
	      for (var nextKey in source) {
	        if (_has(nextKey, source)) {
	          output[nextKey] = source[nextKey];
	        }
	      }
	    }

	    idx += 1;
	  }

	  return output;
	}

	var _objectAssign$1 = typeof Object.assign === 'function' ? Object.assign : _objectAssign;

	/**
	 * Creates an object containing a single key:value pair.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.18.0
	 * @category Object
	 * @sig String -> a -> {String:a}
	 * @param {String} key
	 * @param {*} val
	 * @return {Object}
	 * @see R.pair
	 * @example
	 *
	 *      const matchPhrases = R.compose(
	 *        R.objOf('must'),
	 *        R.map(R.objOf('match_phrase'))
	 *      );
	 *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
	 */

	var objOf =
	/*#__PURE__*/
	_curry2(function objOf(key, val) {
	  var obj = {};
	  obj[key] = val;
	  return obj;
	});

	var _stepCatArray = {
	  '@@transducer/init': Array,
	  '@@transducer/step': function (xs, x) {
	    xs.push(x);
	    return xs;
	  },
	  '@@transducer/result': _identity
	};
	var _stepCatString = {
	  '@@transducer/init': String,
	  '@@transducer/step': function (a, b) {
	    return a + b;
	  },
	  '@@transducer/result': _identity
	};
	var _stepCatObject = {
	  '@@transducer/init': Object,
	  '@@transducer/step': function (result, input) {
	    return _objectAssign$1(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);
	  },
	  '@@transducer/result': _identity
	};
	function _stepCat(obj) {
	  if (_isTransformer(obj)) {
	    return obj;
	  }

	  if (_isArrayLike(obj)) {
	    return _stepCatArray;
	  }

	  if (typeof obj === 'string') {
	    return _stepCatString;
	  }

	  if (typeof obj === 'object') {
	    return _stepCatObject;
	  }

	  throw new Error('Cannot create transformer for ' + obj);
	}

	/**
	 * Transforms the items of the list with the transducer and appends the
	 * transformed items to the accumulator using an appropriate iterator function
	 * based on the accumulator type.
	 *
	 * The accumulator can be an array, string, object or a transformer. Iterated
	 * items will be appended to arrays and concatenated to strings. Objects will
	 * be merged directly or 2-item arrays will be merged as key, value pairs.
	 *
	 * The accumulator can also be a transformer object that provides a 2-arity
	 * reducing iterator function, step, 0-arity initial value function, init, and
	 * 1-arity result extraction function result. The step function is used as the
	 * iterator function in reduce. The result function is used to convert the
	 * final accumulator into the return type and in most cases is R.identity. The
	 * init function is used to provide the initial accumulator.
	 *
	 * The iteration is performed with [`R.reduce`](#reduce) after initializing the
	 * transducer.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.12.0
	 * @category List
	 * @sig a -> (b -> b) -> [c] -> a
	 * @param {*} acc The initial accumulator value.
	 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.transduce
	 * @example
	 *
	 *      const numbers = [1, 2, 3, 4];
	 *      const transducer = R.compose(R.map(R.add(1)), R.take(2));
	 *
	 *      R.into([], transducer, numbers); //=> [2, 3]
	 *
	 *      const intoArray = R.into([]);
	 *      intoArray(transducer, numbers); //=> [2, 3]
	 */

	var into =
	/*#__PURE__*/
	_curry3(function into(acc, xf, list) {
	  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);
	});

	/**
	 * Same as [`R.invertObj`](#invertObj), however this accounts for objects with
	 * duplicate values by putting the values into an array.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Object
	 * @sig {s: x} -> {x: [ s, ... ]}
	 * @param {Object} obj The object or array to invert
	 * @return {Object} out A new object with keys in an array.
	 * @see R.invertObj
	 * @example
	 *
	 *      const raceResultsByFirstName = {
	 *        first: 'alice',
	 *        second: 'jake',
	 *        third: 'alice',
	 *      };
	 *      R.invert(raceResultsByFirstName);
	 *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
	 */

	var invert =
	/*#__PURE__*/
	_curry1(function invert(obj) {
	  var props = keys(obj);
	  var len = props.length;
	  var idx = 0;
	  var out = {};

	  while (idx < len) {
	    var key = props[idx];
	    var val = obj[key];
	    var list = _has(val, out) ? out[val] : out[val] = [];
	    list[list.length] = key;
	    idx += 1;
	  }

	  return out;
	});

	/**
	 * Returns a new object with the keys of the given object as values, and the
	 * values of the given object, which are coerced to strings, as keys. Note
	 * that the last key found is preferred when handling the same value.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Object
	 * @sig {s: x} -> {x: s}
	 * @param {Object} obj The object or array to invert
	 * @return {Object} out A new object
	 * @see R.invert
	 * @example
	 *
	 *      const raceResults = {
	 *        first: 'alice',
	 *        second: 'jake'
	 *      };
	 *      R.invertObj(raceResults);
	 *      //=> { 'alice': 'first', 'jake':'second' }
	 *
	 *      // Alternatively:
	 *      const raceResults = ['alice', 'jake'];
	 *      R.invertObj(raceResults);
	 *      //=> { 'alice': '0', 'jake':'1' }
	 */

	var invertObj =
	/*#__PURE__*/
	_curry1(function invertObj(obj) {
	  var props = keys(obj);
	  var len = props.length;
	  var idx = 0;
	  var out = {};

	  while (idx < len) {
	    var key = props[idx];
	    out[obj[key]] = key;
	    idx += 1;
	  }

	  return out;
	});

	/**
	 * Turns a named method with a specified arity into a function that can be
	 * called directly supplied with arguments and a target object.
	 *
	 * The returned function is curried and accepts `arity + 1` parameters where
	 * the final parameter is the target object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
	 * @param {Number} arity Number of arguments the returned function should take
	 *        before the target object.
	 * @param {String} method Name of any of the target object's methods to call.
	 * @return {Function} A new curried function.
	 * @see R.construct
	 * @example
	 *
	 *      const sliceFrom = R.invoker(1, 'slice');
	 *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
	 *      const sliceFrom6 = R.invoker(2, 'slice')(6);
	 *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
	 *
	 *      const dog = {
	 *        speak: async () => 'Woof!'
	 *      };
	 *      const speak = R.invoker(0, 'speak');
	 *      speak(dog).then(console.log) //~> 'Woof!'
	 *
	 * @symb R.invoker(0, 'method')(o) = o['method']()
	 * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
	 * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
	 */

	var invoker =
	/*#__PURE__*/
	_curry2(function invoker(arity, method) {
	  return curryN(arity + 1, function () {
	    var target = arguments[arity];

	    if (target != null && _isFunction(target[method])) {
	      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
	    }

	    throw new TypeError(toString$1(target) + ' does not have a method named "' + method + '"');
	  });
	});

	/**
	 * See if an object (`val`) is an instance of the supplied constructor. This
	 * function will check up the inheritance chain, if any.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category Type
	 * @sig (* -> {*}) -> a -> Boolean
	 * @param {Object} ctor A constructor
	 * @param {*} val The value to test
	 * @return {Boolean}
	 * @example
	 *
	 *      R.is(Object, {}); //=> true
	 *      R.is(Number, 1); //=> true
	 *      R.is(Object, 1); //=> false
	 *      R.is(String, 's'); //=> true
	 *      R.is(String, new String('')); //=> true
	 *      R.is(Object, new String('')); //=> true
	 *      R.is(Object, 's'); //=> false
	 *      R.is(Number, {}); //=> false
	 */

	var is =
	/*#__PURE__*/
	_curry2(function is(Ctor, val) {
	  return val != null && val.constructor === Ctor || val instanceof Ctor;
	});

	/**
	 * Returns `true` if the given value is its type's empty value; `false`
	 * otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Logic
	 * @sig a -> Boolean
	 * @param {*} x
	 * @return {Boolean}
	 * @see R.empty
	 * @example
	 *
	 *      R.isEmpty([1, 2, 3]);   //=> false
	 *      R.isEmpty([]);          //=> true
	 *      R.isEmpty('');          //=> true
	 *      R.isEmpty(null);        //=> false
	 *      R.isEmpty({});          //=> true
	 *      R.isEmpty({length: 0}); //=> false
	 */

	var isEmpty =
	/*#__PURE__*/
	_curry1(function isEmpty(x) {
	  return x != null && equals(x, empty(x));
	});

	/**
	 * Returns a string made by inserting the `separator` between each element and
	 * concatenating all the elements into a single string.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig String -> [a] -> String
	 * @param {Number|String} separator The string used to separate the elements.
	 * @param {Array} xs The elements to join into a string.
	 * @return {String} str The string made by concatenating `xs` with `separator`.
	 * @see R.split
	 * @example
	 *
	 *      const spacer = R.join(' ');
	 *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
	 *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
	 */

	var join$1 =
	/*#__PURE__*/
	invoker(1, 'join');

	/**
	 * juxt applies a list of functions to a list of values.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category Function
	 * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
	 * @param {Array} fns An array of functions
	 * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
	 * @see R.applySpec
	 * @example
	 *
	 *      const getRange = R.juxt([Math.min, Math.max]);
	 *      getRange(3, 4, 9, -3); //=> [-3, 9]
	 * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
	 */

	var juxt =
	/*#__PURE__*/
	_curry1(function juxt(fns) {
	  return converge(function () {
	    return Array.prototype.slice.call(arguments, 0);
	  }, fns);
	});

	/**
	 * Returns a list containing the names of all the properties of the supplied
	 * object, including prototype properties.
	 * Note that the order of the output array is not guaranteed to be consistent
	 * across different JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.0
	 * @category Object
	 * @sig {k: v} -> [k]
	 * @param {Object} obj The object to extract properties from
	 * @return {Array} An array of the object's own and prototype properties.
	 * @see R.keys, R.valuesIn
	 * @example
	 *
	 *      const F = function() { this.x = 'X'; };
	 *      F.prototype.y = 'Y';
	 *      const f = new F();
	 *      R.keysIn(f); //=> ['x', 'y']
	 */

	var keysIn =
	/*#__PURE__*/
	_curry1(function keysIn(obj) {
	  var prop;
	  var ks = [];

	  for (prop in obj) {
	    ks[ks.length] = prop;
	  }

	  return ks;
	});

	/**
	 * Returns the position of the last occurrence of an item in an array, or -1 if
	 * the item is not included in the array. [`R.equals`](#equals) is used to
	 * determine equality.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig a -> [a] -> Number
	 * @param {*} target The item to find.
	 * @param {Array} xs The array to search in.
	 * @return {Number} the index of the target, or -1 if the target is not found.
	 * @see R.indexOf
	 * @example
	 *
	 *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
	 *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
	 */

	var lastIndexOf =
	/*#__PURE__*/
	_curry2(function lastIndexOf(target, xs) {
	  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {
	    return xs.lastIndexOf(target);
	  } else {
	    var idx = xs.length - 1;

	    while (idx >= 0) {
	      if (equals(xs[idx], target)) {
	        return idx;
	      }

	      idx -= 1;
	    }

	    return -1;
	  }
	});

	function _isNumber(x) {
	  return Object.prototype.toString.call(x) === '[object Number]';
	}

	/**
	 * Returns the number of elements in the array by returning `list.length`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category List
	 * @sig [a] -> Number
	 * @param {Array} list The array to inspect.
	 * @return {Number} The length of the array.
	 * @example
	 *
	 *      R.length([]); //=> 0
	 *      R.length([1, 2, 3]); //=> 3
	 */

	var length =
	/*#__PURE__*/
	_curry1(function length(list) {
	  return list != null && _isNumber(list.length) ? list.length : NaN;
	});

	/**
	 * Returns a lens for the given getter and setter functions. The getter "gets"
	 * the value of the focus; the setter "sets" the value of the focus. The setter
	 * should not mutate the data structure.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Object
	 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	 * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
	 * @param {Function} getter
	 * @param {Function} setter
	 * @return {Lens}
	 * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
	 * @example
	 *
	 *      const xLens = R.lens(R.prop('x'), R.assoc('x'));
	 *
	 *      R.view(xLens, {x: 1, y: 2});            //=> 1
	 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
	 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
	 */

	var lens =
	/*#__PURE__*/
	_curry2(function lens(getter, setter) {
	  return function (toFunctorFn) {
	    return function (target) {
	      return map$1(function (focus) {
	        return setter(focus, target);
	      }, toFunctorFn(getter(target)));
	    };
	  };
	});

	/**
	 * Returns a lens whose focus is the specified index.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category Object
	 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	 * @sig Number -> Lens s a
	 * @param {Number} n
	 * @return {Lens}
	 * @see R.view, R.set, R.over, R.nth
	 * @example
	 *
	 *      const headLens = R.lensIndex(0);
	 *
	 *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
	 *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
	 *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
	 */

	var lensIndex =
	/*#__PURE__*/
	_curry1(function lensIndex(n) {
	  return lens(nth(n), update(n));
	});

	/**
	 * Returns a lens whose focus is the specified path.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category Object
	 * @typedefn Idx = String | Int
	 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	 * @sig [Idx] -> Lens s a
	 * @param {Array} path The path to use.
	 * @return {Lens}
	 * @see R.view, R.set, R.over
	 * @example
	 *
	 *      const xHeadYLens = R.lensPath(['x', 0, 'y']);
	 *
	 *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
	 *      //=> 2
	 *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
	 *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}
	 *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
	 *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}
	 */

	var lensPath =
	/*#__PURE__*/
	_curry1(function lensPath(p) {
	  return lens(path(p), assocPath(p));
	});

	/**
	 * Returns a lens whose focus is the specified property.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category Object
	 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	 * @sig String -> Lens s a
	 * @param {String} k
	 * @return {Lens}
	 * @see R.view, R.set, R.over
	 * @example
	 *
	 *      const xLens = R.lensProp('x');
	 *
	 *      R.view(xLens, {x: 1, y: 2});            //=> 1
	 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
	 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
	 */

	var lensProp =
	/*#__PURE__*/
	_curry1(function lensProp(k) {
	  return lens(prop(k), assoc(k));
	});

	/**
	 * Returns `true` if the first argument is less than the second; `false`
	 * otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig Ord a => a -> a -> Boolean
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 * @see R.gt
	 * @example
	 *
	 *      R.lt(2, 1); //=> false
	 *      R.lt(2, 2); //=> false
	 *      R.lt(2, 3); //=> true
	 *      R.lt('a', 'z'); //=> true
	 *      R.lt('z', 'a'); //=> false
	 */

	var lt =
	/*#__PURE__*/
	_curry2(function lt(a, b) {
	  return a < b;
	});

	/**
	 * Returns `true` if the first argument is less than or equal to the second;
	 * `false` otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig Ord a => a -> a -> Boolean
	 * @param {Number} a
	 * @param {Number} b
	 * @return {Boolean}
	 * @see R.gte
	 * @example
	 *
	 *      R.lte(2, 1); //=> false
	 *      R.lte(2, 2); //=> true
	 *      R.lte(2, 3); //=> true
	 *      R.lte('a', 'z'); //=> true
	 *      R.lte('z', 'a'); //=> false
	 */

	var lte =
	/*#__PURE__*/
	_curry2(function lte(a, b) {
	  return a <= b;
	});

	/**
	 * The `mapAccum` function behaves like a combination of map and reduce; it
	 * applies a function to each element of a list, passing an accumulating
	 * parameter from left to right, and returning a final value of this
	 * accumulator together with the new list.
	 *
	 * The iterator function receives two arguments, *acc* and *value*, and should
	 * return a tuple *[acc, value]*.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category List
	 * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])
	 * @param {Function} fn The function to be called on every element of the input `list`.
	 * @param {*} acc The accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.scan, R.addIndex, R.mapAccumRight
	 * @example
	 *
	 *      const digits = ['1', '2', '3', '4'];
	 *      const appender = (a, b) => [a + b, a + b];
	 *
	 *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
	 * @symb R.mapAccum(f, a, [b, c, d]) = [
	 *   f(f(f(a, b)[0], c)[0], d)[0],
	 *   [
	 *     f(a, b)[1],
	 *     f(f(a, b)[0], c)[1],
	 *     f(f(f(a, b)[0], c)[0], d)[1]
	 *   ]
	 * ]
	 */

	var mapAccum =
	/*#__PURE__*/
	_curry3(function mapAccum(fn, acc, list) {
	  var idx = 0;
	  var len = list.length;
	  var result = [];
	  var tuple = [acc];

	  while (idx < len) {
	    tuple = fn(tuple[0], list[idx]);
	    result[idx] = tuple[1];
	    idx += 1;
	  }

	  return [tuple[0], result];
	});

	/**
	 * The `mapAccumRight` function behaves like a combination of map and reduce; it
	 * applies a function to each element of a list, passing an accumulating
	 * parameter from right to left, and returning a final value of this
	 * accumulator together with the new list.
	 *
	 * Similar to [`mapAccum`](#mapAccum), except moves through the input list from
	 * the right to the left.
	 *
	 * The iterator function receives two arguments, *acc* and *value*, and should
	 * return a tuple *[acc, value]*.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category List
	 * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])
	 * @param {Function} fn The function to be called on every element of the input `list`.
	 * @param {*} acc The accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.addIndex, R.mapAccum
	 * @example
	 *
	 *      const digits = ['1', '2', '3', '4'];
	 *      const appender = (a, b) => [b + a, b + a];
	 *
	 *      R.mapAccumRight(appender, 5, digits); //=> ['12345', ['12345', '2345', '345', '45']]
	 * @symb R.mapAccumRight(f, a, [b, c, d]) = [
	 *   f(f(f(a, d)[0], c)[0], b)[0],
	 *   [
	 *     f(a, d)[1],
	 *     f(f(a, d)[0], c)[1],
	 *     f(f(f(a, d)[0], c)[0], b)[1]
	 *   ]
	 * ]
	 */

	var mapAccumRight =
	/*#__PURE__*/
	_curry3(function mapAccumRight(fn, acc, list) {
	  var idx = list.length - 1;
	  var result = [];
	  var tuple = [acc];

	  while (idx >= 0) {
	    tuple = fn(tuple[0], list[idx]);
	    result[idx] = tuple[1];
	    idx -= 1;
	  }

	  return [tuple[0], result];
	});

	/**
	 * An Object-specific version of [`map`](#map). The function is applied to three
	 * arguments: *(value, key, obj)*. If only the value is significant, use
	 * [`map`](#map) instead.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Object
	 * @sig ((*, String, Object) -> *) -> Object -> Object
	 * @param {Function} fn
	 * @param {Object} obj
	 * @return {Object}
	 * @see R.map
	 * @example
	 *
	 *      const xyz = { x: 1, y: 2, z: 3 };
	 *      const prependKeyAndDouble = (num, key, obj) => key + (num * 2);
	 *
	 *      R.mapObjIndexed(prependKeyAndDouble, xyz); //=> { x: 'x2', y: 'y4', z: 'z6' }
	 */

	var mapObjIndexed =
	/*#__PURE__*/
	_curry2(function mapObjIndexed(fn, obj) {
	  return _reduce(function (acc, key) {
	    acc[key] = fn(obj[key], key, obj);
	    return acc;
	  }, {}, keys(obj));
	});

	/**
	 * Tests a regular expression against a String. Note that this function will
	 * return an empty array when there are no matches. This differs from
	 * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
	 * which returns `null` when there are no matches.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category String
	 * @sig RegExp -> String -> [String | Undefined]
	 * @param {RegExp} rx A regular expression.
	 * @param {String} str The string to match against
	 * @return {Array} The list of matches or empty array.
	 * @see R.test
	 * @example
	 *
	 *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
	 *      R.match(/a/, 'b'); //=> []
	 *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
	 */

	var match =
	/*#__PURE__*/
	_curry2(function match(rx, str) {
	  return str.match(rx) || [];
	});

	/**
	 * `mathMod` behaves like the modulo operator should mathematically, unlike the
	 * `%` operator (and by extension, [`R.modulo`](#modulo)). So while
	 * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer
	 * arguments, and returns NaN when the modulus is zero or negative.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category Math
	 * @sig Number -> Number -> Number
	 * @param {Number} m The dividend.
	 * @param {Number} p the modulus.
	 * @return {Number} The result of `b mod a`.
	 * @see R.modulo
	 * @example
	 *
	 *      R.mathMod(-17, 5);  //=> 3
	 *      R.mathMod(17, 5);   //=> 2
	 *      R.mathMod(17, -5);  //=> NaN
	 *      R.mathMod(17, 0);   //=> NaN
	 *      R.mathMod(17.2, 5); //=> NaN
	 *      R.mathMod(17, 5.3); //=> NaN
	 *
	 *      const clock = R.mathMod(R.__, 12);
	 *      clock(15); //=> 3
	 *      clock(24); //=> 0
	 *
	 *      const seventeenMod = R.mathMod(17);
	 *      seventeenMod(3);  //=> 2
	 *      seventeenMod(4);  //=> 1
	 *      seventeenMod(10); //=> 7
	 */

	var mathMod =
	/*#__PURE__*/
	_curry2(function mathMod(m, p) {
	  if (!_isInteger(m)) {
	    return NaN;
	  }

	  if (!_isInteger(p) || p < 1) {
	    return NaN;
	  }

	  return (m % p + p) % p;
	});

	/**
	 * Takes a function and two values, and returns whichever value produces the
	 * larger result when passed to the provided function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Relation
	 * @sig Ord b => (a -> b) -> a -> a -> a
	 * @param {Function} f
	 * @param {*} a
	 * @param {*} b
	 * @return {*}
	 * @see R.max, R.minBy
	 * @example
	 *
	 *      //  square :: Number -> Number
	 *      const square = n => n * n;
	 *
	 *      R.maxBy(square, -3, 2); //=> -3
	 *
	 *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
	 *      R.reduce(R.maxBy(square), 0, []); //=> 0
	 */

	var maxBy =
	/*#__PURE__*/
	_curry3(function maxBy(f, a, b) {
	  return f(b) > f(a) ? b : a;
	});

	/**
	 * Adds together all the elements of a list.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Math
	 * @sig [Number] -> Number
	 * @param {Array} list An array of numbers
	 * @return {Number} The sum of all the numbers in the list.
	 * @see R.reduce
	 * @example
	 *
	 *      R.sum([2,4,6,8,100,1]); //=> 121
	 */

	var sum =
	/*#__PURE__*/
	reduce(add, 0);

	/**
	 * Returns the mean of the given list of numbers.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category Math
	 * @sig [Number] -> Number
	 * @param {Array} list
	 * @return {Number}
	 * @see R.median
	 * @example
	 *
	 *      R.mean([2, 7, 9]); //=> 6
	 *      R.mean([]); //=> NaN
	 */

	var mean =
	/*#__PURE__*/
	_curry1(function mean(list) {
	  return sum(list) / list.length;
	});

	/**
	 * Returns the median of the given list of numbers.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category Math
	 * @sig [Number] -> Number
	 * @param {Array} list
	 * @return {Number}
	 * @see R.mean
	 * @example
	 *
	 *      R.median([2, 9, 7]); //=> 7
	 *      R.median([7, 2, 10, 9]); //=> 8
	 *      R.median([]); //=> NaN
	 */

	var median =
	/*#__PURE__*/
	_curry1(function median(list) {
	  var len = list.length;

	  if (len === 0) {
	    return NaN;
	  }

	  var width = 2 - len % 2;
	  var idx = (len - width) / 2;
	  return mean(Array.prototype.slice.call(list, 0).sort(function (a, b) {
	    return a < b ? -1 : a > b ? 1 : 0;
	  }).slice(idx, idx + width));
	});

	/**
	 * Creates a new function that, when invoked, caches the result of calling `fn`
	 * for a given argument set and returns the result. Subsequent calls to the
	 * memoized `fn` with the same argument set will not result in an additional
	 * call to `fn`; instead, the cached result for that set of arguments will be
	 * returned.
	 *
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category Function
	 * @sig (*... -> String) -> (*... -> a) -> (*... -> a)
	 * @param {Function} fn The function to generate the cache key.
	 * @param {Function} fn The function to memoize.
	 * @return {Function} Memoized version of `fn`.
	 * @example
	 *
	 *      let count = 0;
	 *      const factorial = R.memoizeWith(R.identity, n => {
	 *        count += 1;
	 *        return R.product(R.range(1, n + 1));
	 *      });
	 *      factorial(5); //=> 120
	 *      factorial(5); //=> 120
	 *      factorial(5); //=> 120
	 *      count; //=> 1
	 */

	var memoizeWith =
	/*#__PURE__*/
	_curry2(function memoizeWith(mFn, fn) {
	  var cache = {};
	  return _arity(fn.length, function () {
	    var key = mFn.apply(this, arguments);

	    if (!_has(key, cache)) {
	      cache[key] = fn.apply(this, arguments);
	    }

	    return cache[key];
	  });
	});

	/**
	 * Create a new object with the own properties of the first object merged with
	 * the own properties of the second object. If a key exists in both objects,
	 * the value from the second object will be used.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig {k: v} -> {k: v} -> {k: v}
	 * @param {Object} l
	 * @param {Object} r
	 * @return {Object}
	 * @see R.mergeRight, R.mergeDeepRight, R.mergeWith, R.mergeWithKey
	 * @deprecated since v0.26.0
	 * @example
	 *
	 *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
	 *      //=> { 'name': 'fred', 'age': 40 }
	 *
	 *      const withDefaults = R.merge({x: 0, y: 0});
	 *      withDefaults({y: 2}); //=> {x: 0, y: 2}
	 * @symb R.merge(a, b) = {...a, ...b}
	 */

	var merge =
	/*#__PURE__*/
	_curry2(function merge(l, r) {
	  return _objectAssign$1({}, l, r);
	});

	/**
	 * Merges a list of objects together into one object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category List
	 * @sig [{k: v}] -> {k: v}
	 * @param {Array} list An array of objects
	 * @return {Object} A merged object.
	 * @see R.reduce
	 * @example
	 *
	 *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
	 *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
	 * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }
	 */

	var mergeAll =
	/*#__PURE__*/
	_curry1(function mergeAll(list) {
	  return _objectAssign$1.apply(null, [{}].concat(list));
	});

	/**
	 * Creates a new object with the own properties of the two provided objects. If
	 * a key exists in both objects, the provided function is applied to the key
	 * and the values associated with the key in each object, with the result being
	 * used as the value associated with the key in the returned object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category Object
	 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
	 * @param {Function} fn
	 * @param {Object} l
	 * @param {Object} r
	 * @return {Object}
	 * @see R.mergeDeepWithKey, R.merge, R.mergeWith
	 * @example
	 *
	 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
	 *      R.mergeWithKey(concatValues,
	 *                     { a: true, thing: 'foo', values: [10, 20] },
	 *                     { b: true, thing: 'bar', values: [15, 35] });
	 *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
	 * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
	 */

	var mergeWithKey =
	/*#__PURE__*/
	_curry3(function mergeWithKey(fn, l, r) {
	  var result = {};
	  var k;

	  for (k in l) {
	    if (_has(k, l)) {
	      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
	    }
	  }

	  for (k in r) {
	    if (_has(k, r) && !_has(k, result)) {
	      result[k] = r[k];
	    }
	  }

	  return result;
	});

	/**
	 * Creates a new object with the own properties of the two provided objects.
	 * If a key exists in both objects:
	 * - and both associated values are also objects then the values will be
	 *   recursively merged.
	 * - otherwise the provided function is applied to the key and associated values
	 *   using the resulting value as the new value associated with the key.
	 * If a key only exists in one object, the value will be associated with the key
	 * of the resulting object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category Object
	 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
	 * @param {Function} fn
	 * @param {Object} lObj
	 * @param {Object} rObj
	 * @return {Object}
	 * @see R.mergeWithKey, R.mergeDeepWith
	 * @example
	 *
	 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
	 *      R.mergeDeepWithKey(concatValues,
	 *                         { a: true, c: { thing: 'foo', values: [10, 20] }},
	 *                         { b: true, c: { thing: 'bar', values: [15, 35] }});
	 *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}
	 */

	var mergeDeepWithKey =
	/*#__PURE__*/
	_curry3(function mergeDeepWithKey(fn, lObj, rObj) {
	  return mergeWithKey(function (k, lVal, rVal) {
	    if (_isObject(lVal) && _isObject(rVal)) {
	      return mergeDeepWithKey(fn, lVal, rVal);
	    } else {
	      return fn(k, lVal, rVal);
	    }
	  }, lObj, rObj);
	});

	/**
	 * Creates a new object with the own properties of the first object merged with
	 * the own properties of the second object. If a key exists in both objects:
	 * - and both values are objects, the two values will be recursively merged
	 * - otherwise the value from the first object will be used.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category Object
	 * @sig {a} -> {a} -> {a}
	 * @param {Object} lObj
	 * @param {Object} rObj
	 * @return {Object}
	 * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey
	 * @example
	 *
	 *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
	 *                      { age: 40, contact: { email: 'baa@example.com' }});
	 *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}
	 */

	var mergeDeepLeft =
	/*#__PURE__*/
	_curry2(function mergeDeepLeft(lObj, rObj) {
	  return mergeDeepWithKey(function (k, lVal, rVal) {
	    return lVal;
	  }, lObj, rObj);
	});

	/**
	 * Creates a new object with the own properties of the first object merged with
	 * the own properties of the second object. If a key exists in both objects:
	 * - and both values are objects, the two values will be recursively merged
	 * - otherwise the value from the second object will be used.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category Object
	 * @sig {a} -> {a} -> {a}
	 * @param {Object} lObj
	 * @param {Object} rObj
	 * @return {Object}
	 * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey
	 * @example
	 *
	 *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
	 *                       { age: 40, contact: { email: 'baa@example.com' }});
	 *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}
	 */

	var mergeDeepRight =
	/*#__PURE__*/
	_curry2(function mergeDeepRight(lObj, rObj) {
	  return mergeDeepWithKey(function (k, lVal, rVal) {
	    return rVal;
	  }, lObj, rObj);
	});

	/**
	 * Creates a new object with the own properties of the two provided objects.
	 * If a key exists in both objects:
	 * - and both associated values are also objects then the values will be
	 *   recursively merged.
	 * - otherwise the provided function is applied to associated values using the
	 *   resulting value as the new value associated with the key.
	 * If a key only exists in one object, the value will be associated with the key
	 * of the resulting object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category Object
	 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
	 * @param {Function} fn
	 * @param {Object} lObj
	 * @param {Object} rObj
	 * @return {Object}
	 * @see R.mergeWith, R.mergeDeepWithKey
	 * @example
	 *
	 *      R.mergeDeepWith(R.concat,
	 *                      { a: true, c: { values: [10, 20] }},
	 *                      { b: true, c: { values: [15, 35] }});
	 *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}
	 */

	var mergeDeepWith =
	/*#__PURE__*/
	_curry3(function mergeDeepWith(fn, lObj, rObj) {
	  return mergeDeepWithKey(function (k, lVal, rVal) {
	    return fn(lVal, rVal);
	  }, lObj, rObj);
	});

	/**
	 * Create a new object with the own properties of the first object merged with
	 * the own properties of the second object. If a key exists in both objects,
	 * the value from the first object will be used.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.26.0
	 * @category Object
	 * @sig {k: v} -> {k: v} -> {k: v}
	 * @param {Object} l
	 * @param {Object} r
	 * @return {Object}
	 * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey
	 * @example
	 *
	 *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });
	 *      //=> { 'name': 'fred', 'age': 40 }
	 *
	 *      const resetToDefault = R.mergeLeft({x: 0});
	 *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
	 * @symb R.mergeLeft(a, b) = {...b, ...a}
	 */

	var mergeLeft =
	/*#__PURE__*/
	_curry2(function mergeLeft(l, r) {
	  return _objectAssign$1({}, r, l);
	});

	/**
	 * Create a new object with the own properties of the first object merged with
	 * the own properties of the second object. If a key exists in both objects,
	 * the value from the second object will be used.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.26.0
	 * @category Object
	 * @sig {k: v} -> {k: v} -> {k: v}
	 * @param {Object} l
	 * @param {Object} r
	 * @return {Object}
	 * @see R.mergeLeft, R.mergeDeepRight, R.mergeWith, R.mergeWithKey
	 * @example
	 *
	 *      R.mergeRight({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
	 *      //=> { 'name': 'fred', 'age': 40 }
	 *
	 *      const withDefaults = R.mergeRight({x: 0, y: 0});
	 *      withDefaults({y: 2}); //=> {x: 0, y: 2}
	 * @symb R.mergeRight(a, b) = {...a, ...b}
	 */

	var mergeRight =
	/*#__PURE__*/
	_curry2(function mergeRight(l, r) {
	  return _objectAssign$1({}, l, r);
	});

	/**
	 * Creates a new object with the own properties of the two provided objects. If
	 * a key exists in both objects, the provided function is applied to the values
	 * associated with the key in each object, with the result being used as the
	 * value associated with the key in the returned object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category Object
	 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
	 * @param {Function} fn
	 * @param {Object} l
	 * @param {Object} r
	 * @return {Object}
	 * @see R.mergeDeepWith, R.merge, R.mergeWithKey
	 * @example
	 *
	 *      R.mergeWith(R.concat,
	 *                  { a: true, values: [10, 20] },
	 *                  { b: true, values: [15, 35] });
	 *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
	 */

	var mergeWith =
	/*#__PURE__*/
	_curry3(function mergeWith(fn, l, r) {
	  return mergeWithKey(function (_, _l, _r) {
	    return fn(_l, _r);
	  }, l, r);
	});

	/**
	 * Returns the smaller of its two arguments.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig Ord a => a -> a -> a
	 * @param {*} a
	 * @param {*} b
	 * @return {*}
	 * @see R.minBy, R.max
	 * @example
	 *
	 *      R.min(789, 123); //=> 123
	 *      R.min('a', 'b'); //=> 'a'
	 */

	var min =
	/*#__PURE__*/
	_curry2(function min(a, b) {
	  return b < a ? b : a;
	});

	/**
	 * Takes a function and two values, and returns whichever value produces the
	 * smaller result when passed to the provided function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Relation
	 * @sig Ord b => (a -> b) -> a -> a -> a
	 * @param {Function} f
	 * @param {*} a
	 * @param {*} b
	 * @return {*}
	 * @see R.min, R.maxBy
	 * @example
	 *
	 *      //  square :: Number -> Number
	 *      const square = n => n * n;
	 *
	 *      R.minBy(square, -3, 2); //=> 2
	 *
	 *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
	 *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
	 */

	var minBy =
	/*#__PURE__*/
	_curry3(function minBy(f, a, b) {
	  return f(b) < f(a) ? b : a;
	});

	/**
	 * Divides the first parameter by the second and returns the remainder. Note
	 * that this function preserves the JavaScript-style behavior for modulo. For
	 * mathematical modulo see [`mathMod`](#mathMod).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.1
	 * @category Math
	 * @sig Number -> Number -> Number
	 * @param {Number} a The value to the divide.
	 * @param {Number} b The pseudo-modulus
	 * @return {Number} The result of `b % a`.
	 * @see R.mathMod
	 * @example
	 *
	 *      R.modulo(17, 3); //=> 2
	 *      // JS behavior:
	 *      R.modulo(-17, 3); //=> -2
	 *      R.modulo(17, -3); //=> 2
	 *
	 *      const isOdd = R.modulo(R.__, 2);
	 *      isOdd(42); //=> 0
	 *      isOdd(21); //=> 1
	 */

	var modulo =
	/*#__PURE__*/
	_curry2(function modulo(a, b) {
	  return a % b;
	});

	/**
	 * Move an item, at index `from`, to index `to`, in a list of elements.
	 * A new list will be created containing the new elements order.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.27.0
	 * @category List
	 * @sig Number -> Number -> [a] -> [a]
	 * @param {Number} from The source index
	 * @param {Number} to The destination index
	 * @param {Array} list The list which will serve to realise the move
	 * @return {Array} The new list reordered
	 * @example
	 *
	 *      R.move(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['b', 'c', 'a', 'd', 'e', 'f']
	 *      R.move(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'a', 'b', 'c', 'd', 'e'] list rotation
	 */

	var move =
	/*#__PURE__*/
	_curry3(function (from, to, list) {
	  var length = list.length;
	  var result = list.slice();
	  var positiveFrom = from < 0 ? length + from : from;
	  var positiveTo = to < 0 ? length + to : to;
	  var item = result.splice(positiveFrom, 1);
	  return positiveFrom < 0 || positiveFrom >= list.length || positiveTo < 0 || positiveTo >= list.length ? list : [].concat(result.slice(0, positiveTo)).concat(item).concat(result.slice(positiveTo, list.length));
	});

	/**
	 * Multiplies two numbers. Equivalent to `a * b` but curried.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Math
	 * @sig Number -> Number -> Number
	 * @param {Number} a The first value.
	 * @param {Number} b The second value.
	 * @return {Number} The result of `a * b`.
	 * @see R.divide
	 * @example
	 *
	 *      const double = R.multiply(2);
	 *      const triple = R.multiply(3);
	 *      double(3);       //=>  6
	 *      triple(4);       //=> 12
	 *      R.multiply(2, 5);  //=> 10
	 */

	var multiply =
	/*#__PURE__*/
	_curry2(function multiply(a, b) {
	  return a * b;
	});

	/**
	 * Negates its argument.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Math
	 * @sig Number -> Number
	 * @param {Number} n
	 * @return {Number}
	 * @example
	 *
	 *      R.negate(42); //=> -42
	 */

	var negate =
	/*#__PURE__*/
	_curry1(function negate(n) {
	  return -n;
	});

	/**
	 * Returns `true` if no elements of the list match the predicate, `false`
	 * otherwise.
	 *
	 * Dispatches to the `all` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.12.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> Boolean
	 * @param {Function} fn The predicate function.
	 * @param {Array} list The array to consider.
	 * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
	 * @see R.all, R.any
	 * @example
	 *
	 *      const isEven = n => n % 2 === 0;
	 *      const isOdd = n => n % 2 === 1;
	 *
	 *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
	 *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false
	 */

	var none =
	/*#__PURE__*/
	_curry2(function none(fn, input) {
	  return all(_complement(fn), input);
	});

	/**
	 * Returns a function which returns its nth argument.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Function
	 * @sig Number -> *... -> *
	 * @param {Number} n
	 * @return {Function}
	 * @example
	 *
	 *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
	 *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
	 * @symb R.nthArg(-1)(a, b, c) = c
	 * @symb R.nthArg(0)(a, b, c) = a
	 * @symb R.nthArg(1)(a, b, c) = b
	 */

	var nthArg =
	/*#__PURE__*/
	_curry1(function nthArg(n) {
	  var arity = n < 0 ? 1 : n + 1;
	  return curryN(arity, function () {
	    return nth(n, arguments);
	  });
	});

	/**
	 * `o` is a curried composition function that returns a unary function.
	 * Like [`compose`](#compose), `o` performs right-to-left function composition.
	 * Unlike [`compose`](#compose), the rightmost function passed to `o` will be
	 * invoked with only one argument. Also, unlike [`compose`](#compose), `o` is
	 * limited to accepting only 2 unary functions. The name o was chosen because
	 * of its similarity to the mathematical composition operator ∘.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category Function
	 * @sig (b -> c) -> (a -> b) -> a -> c
	 * @param {Function} f
	 * @param {Function} g
	 * @return {Function}
	 * @see R.compose, R.pipe
	 * @example
	 *
	 *      const classyGreeting = name => "The name's " + name.last + ", " + name.first + " " + name.last
	 *      const yellGreeting = R.o(R.toUpper, classyGreeting);
	 *      yellGreeting({first: 'James', last: 'Bond'}); //=> "THE NAME'S BOND, JAMES BOND"
	 *
	 *      R.o(R.multiply(10), R.add(10))(-4) //=> 60
	 *
	 * @symb R.o(f, g, x) = f(g(x))
	 */

	var o =
	/*#__PURE__*/
	_curry3(function o(f, g, x) {
	  return f(g(x));
	});

	function _of(x) {
	  return [x];
	}

	/**
	 * Returns a singleton array containing the value provided.
	 *
	 * Note this `of` is different from the ES6 `of`; See
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category Function
	 * @sig a -> [a]
	 * @param {*} x any value
	 * @return {Array} An array wrapping `x`.
	 * @example
	 *
	 *      R.of(null); //=> [null]
	 *      R.of([42]); //=> [[42]]
	 */

	var of =
	/*#__PURE__*/
	_curry1(_of);

	/**
	 * Returns a partial copy of an object omitting the keys specified.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig [String] -> {String: *} -> {String: *}
	 * @param {Array} names an array of String property names to omit from the new object
	 * @param {Object} obj The object to copy from
	 * @return {Object} A new object with properties from `names` not on it.
	 * @see R.pick
	 * @example
	 *
	 *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
	 */

	var omit =
	/*#__PURE__*/
	_curry2(function omit(names, obj) {
	  var result = {};
	  var index = {};
	  var idx = 0;
	  var len = names.length;

	  while (idx < len) {
	    index[names[idx]] = 1;
	    idx += 1;
	  }

	  for (var prop in obj) {
	    if (!index.hasOwnProperty(prop)) {
	      result[prop] = obj[prop];
	    }
	  }

	  return result;
	});

	/**
	 * Accepts a function `fn` and returns a function that guards invocation of
	 * `fn` such that `fn` can only ever be called once, no matter how many times
	 * the returned function is invoked. The first value calculated is returned in
	 * subsequent invocations.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig (a... -> b) -> (a... -> b)
	 * @param {Function} fn The function to wrap in a call-only-once wrapper.
	 * @return {Function} The wrapped function.
	 * @example
	 *
	 *      const addOneOnce = R.once(x => x + 1);
	 *      addOneOnce(10); //=> 11
	 *      addOneOnce(addOneOnce(50)); //=> 11
	 */

	var once =
	/*#__PURE__*/
	_curry1(function once(fn) {
	  var called = false;
	  var result;
	  return _arity(fn.length, function () {
	    if (called) {
	      return result;
	    }

	    called = true;
	    result = fn.apply(this, arguments);
	    return result;
	  });
	});

	function _assertPromise(name, p) {
	  if (p == null || !_isFunction(p.then)) {
	    throw new TypeError('`' + name + '` expected a Promise, received ' + _toString(p, []));
	  }
	}

	/**
	 * Returns the result of applying the onFailure function to the value inside
	 * a failed promise. This is useful for handling rejected promises
	 * inside function compositions.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.26.0
	 * @category Function
	 * @sig (e -> b) -> (Promise e a) -> (Promise e b)
	 * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)
	 * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.
	 * @param {Promise} p
	 * @return {Promise} The result of calling `p.then(null, onFailure)`
	 * @see R.then
	 * @example
	 *
	 *      var failedFetch = (id) => Promise.reject('bad ID');
	 *      var useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' })
	 *
	 *      //recoverFromFailure :: String -> Promise ({firstName, lastName})
	 *      var recoverFromFailure = R.pipe(
	 *        failedFetch,
	 *        R.otherwise(useDefault),
	 *        R.then(R.pick(['firstName', 'lastName'])),
	 *      );
	 *      recoverFromFailure(12345).then(console.log)
	 */

	var otherwise =
	/*#__PURE__*/
	_curry2(function otherwise(f, p) {
	  _assertPromise('otherwise', p);

	  return p.then(null, f);
	});

	// transforms the held value with the provided function.

	var Identity = function (x) {
	  return {
	    value: x,
	    map: function (f) {
	      return Identity(f(x));
	    }
	  };
	};
	/**
	 * Returns the result of "setting" the portion of the given data structure
	 * focused by the given lens to the result of applying the given function to
	 * the focused value.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category Object
	 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	 * @sig Lens s a -> (a -> a) -> s -> s
	 * @param {Lens} lens
	 * @param {*} v
	 * @param {*} x
	 * @return {*}
	 * @see R.prop, R.lensIndex, R.lensProp
	 * @example
	 *
	 *      const headLens = R.lensIndex(0);
	 *
	 *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
	 */


	var over =
	/*#__PURE__*/
	_curry3(function over(lens, f, x) {
	  // The value returned by the getter function is first transformed with `f`,
	  // then set as the value of an `Identity`. This is then mapped over with the
	  // setter function of the lens.
	  return lens(function (y) {
	    return Identity(f(y));
	  })(x).value;
	});

	/**
	 * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.18.0
	 * @category List
	 * @sig a -> b -> (a,b)
	 * @param {*} fst
	 * @param {*} snd
	 * @return {Array}
	 * @see R.objOf, R.of
	 * @example
	 *
	 *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
	 */

	var pair =
	/*#__PURE__*/
	_curry2(function pair(fst, snd) {
	  return [fst, snd];
	});

	function _createPartialApplicator(concat) {
	  return _curry2(function (fn, args) {
	    return _arity(Math.max(0, fn.length - args.length), function () {
	      return fn.apply(this, concat(args, arguments));
	    });
	  });
	}

	/**
	 * Takes a function `f` and a list of arguments, and returns a function `g`.
	 * When applied, `g` returns the result of applying `f` to the arguments
	 * provided initially followed by the arguments provided to `g`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category Function
	 * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
	 * @param {Function} f
	 * @param {Array} args
	 * @return {Function}
	 * @see R.partialRight, R.curry
	 * @example
	 *
	 *      const multiply2 = (a, b) => a * b;
	 *      const double = R.partial(multiply2, [2]);
	 *      double(2); //=> 4
	 *
	 *      const greet = (salutation, title, firstName, lastName) =>
	 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
	 *
	 *      const sayHello = R.partial(greet, ['Hello']);
	 *      const sayHelloToMs = R.partial(sayHello, ['Ms.']);
	 *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
	 * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)
	 */

	var partial =
	/*#__PURE__*/
	_createPartialApplicator(_concat);

	/**
	 * Takes a function `f` and a list of arguments, and returns a function `g`.
	 * When applied, `g` returns the result of applying `f` to the arguments
	 * provided to `g` followed by the arguments provided initially.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category Function
	 * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
	 * @param {Function} f
	 * @param {Array} args
	 * @return {Function}
	 * @see R.partial
	 * @example
	 *
	 *      const greet = (salutation, title, firstName, lastName) =>
	 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
	 *
	 *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
	 *
	 *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
	 * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
	 */

	var partialRight =
	/*#__PURE__*/
	_createPartialApplicator(
	/*#__PURE__*/
	flip(_concat));

	/**
	 * Takes a predicate and a list or other `Filterable` object and returns the
	 * pair of filterable objects of the same type of elements which do and do not
	 * satisfy, the predicate, respectively. Filterable objects include plain objects or any object
	 * that has a filter method such as `Array`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.4
	 * @category List
	 * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
	 * @param {Function} pred A predicate to determine which side the element belongs to.
	 * @param {Array} filterable the list (or other filterable) to partition.
	 * @return {Array} An array, containing first the subset of elements that satisfy the
	 *         predicate, and second the subset of elements that do not satisfy.
	 * @see R.filter, R.reject
	 * @example
	 *
	 *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);
	 *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
	 *
	 *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
	 *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
	 */

	var partition =
	/*#__PURE__*/
	juxt([filter, reject]);

	/**
	 * Determines whether a nested path on an object has a specific value, in
	 * [`R.equals`](#equals) terms. Most likely used to filter a list.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.7.0
	 * @category Relation
	 * @typedefn Idx = String | Int
	 * @sig [Idx] -> a -> {a} -> Boolean
	 * @param {Array} path The path of the nested property to use
	 * @param {*} val The value to compare the nested property with
	 * @param {Object} obj The object to check the nested property in
	 * @return {Boolean} `true` if the value equals the nested object property,
	 *         `false` otherwise.
	 * @example
	 *
	 *      const user1 = { address: { zipCode: 90210 } };
	 *      const user2 = { address: { zipCode: 55555 } };
	 *      const user3 = { name: 'Bob' };
	 *      const users = [ user1, user2, user3 ];
	 *      const isFamous = R.pathEq(['address', 'zipCode'], 90210);
	 *      R.filter(isFamous, users); //=> [ user1 ]
	 */

	var pathEq =
	/*#__PURE__*/
	_curry3(function pathEq(_path, val, obj) {
	  return equals(path(_path, obj), val);
	});

	/**
	 * If the given, non-null object has a value at the given path, returns the
	 * value at that path. Otherwise returns the provided default value.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.18.0
	 * @category Object
	 * @typedefn Idx = String | Int
	 * @sig a -> [Idx] -> {a} -> a
	 * @param {*} d The default value.
	 * @param {Array} p The path to use.
	 * @param {Object} obj The object to retrieve the nested property from.
	 * @return {*} The data at `path` of the supplied object or the default value.
	 * @example
	 *
	 *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
	 *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
	 */

	var pathOr =
	/*#__PURE__*/
	_curry3(function pathOr(d, p, obj) {
	  return defaultTo(d, path(p, obj));
	});

	/**
	 * Returns `true` if the specified object property at given path satisfies the
	 * given predicate; `false` otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category Logic
	 * @typedefn Idx = String | Int
	 * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean
	 * @param {Function} pred
	 * @param {Array} propPath
	 * @param {*} obj
	 * @return {Boolean}
	 * @see R.propSatisfies, R.path
	 * @example
	 *
	 *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
	 *      R.pathSatisfies(R.is(Object), [], {x: {y: 2}}); //=> true
	 */

	var pathSatisfies =
	/*#__PURE__*/
	_curry3(function pathSatisfies(pred, propPath, obj) {
	  return pred(path(propPath, obj));
	});

	/**
	 * Returns a partial copy of an object containing only the keys specified. If
	 * the key does not exist, the property is ignored.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig [k] -> {k: v} -> {k: v}
	 * @param {Array} names an array of String property names to copy onto a new object
	 * @param {Object} obj The object to copy from
	 * @return {Object} A new object with only properties from `names` on it.
	 * @see R.omit, R.props
	 * @example
	 *
	 *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
	 *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
	 */

	var pick =
	/*#__PURE__*/
	_curry2(function pick(names, obj) {
	  var result = {};
	  var idx = 0;

	  while (idx < names.length) {
	    if (names[idx] in obj) {
	      result[names[idx]] = obj[names[idx]];
	    }

	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Similar to `pick` except that this one includes a `key: undefined` pair for
	 * properties that don't exist.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig [k] -> {k: v} -> {k: v}
	 * @param {Array} names an array of String property names to copy onto a new object
	 * @param {Object} obj The object to copy from
	 * @return {Object} A new object with only properties from `names` on it.
	 * @see R.pick
	 * @example
	 *
	 *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
	 *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
	 */

	var pickAll =
	/*#__PURE__*/
	_curry2(function pickAll(names, obj) {
	  var result = {};
	  var idx = 0;
	  var len = names.length;

	  while (idx < len) {
	    var name = names[idx];
	    result[name] = obj[name];
	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Returns a partial copy of an object containing only the keys that satisfy
	 * the supplied predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Object
	 * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}
	 * @param {Function} pred A predicate to determine whether or not a key
	 *        should be included on the output object.
	 * @param {Object} obj The object to copy from
	 * @return {Object} A new object with only properties that satisfy `pred`
	 *         on it.
	 * @see R.pick, R.filter
	 * @example
	 *
	 *      const isUpperCase = (val, key) => key.toUpperCase() === key;
	 *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
	 */

	var pickBy =
	/*#__PURE__*/
	_curry2(function pickBy(test, obj) {
	  var result = {};

	  for (var prop in obj) {
	    if (test(obj[prop], prop, obj)) {
	      result[prop] = obj[prop];
	    }
	  }

	  return result;
	});

	/**
	 * Returns the left-to-right Kleisli composition of the provided functions,
	 * each of which must return a value of a type supported by [`chain`](#chain).
	 *
	 * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category Function
	 * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
	 * @param {...Function}
	 * @return {Function}
	 * @see R.composeK
	 * @deprecated since v0.26.0
	 * @example
	 *
	 *      //  parseJson :: String -> Maybe *
	 *      //  get :: String -> Object -> Maybe *
	 *
	 *      //  getStateCode :: Maybe String -> Maybe String
	 *      const getStateCode = R.pipeK(
	 *        parseJson,
	 *        get('user'),
	 *        get('address'),
	 *        get('state'),
	 *        R.compose(Maybe.of, R.toUpper)
	 *      );
	 *
	 *      getStateCode('{"user":{"address":{"state":"ny"}}}');
	 *      //=> Just('NY')
	 *      getStateCode('[Invalid JSON]');
	 *      //=> Nothing()
	 * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))
	 */

	function pipeK() {
	  if (arguments.length === 0) {
	    throw new Error('pipeK requires at least one argument');
	  }

	  return composeK.apply(this, reverse(arguments));
	}

	/**
	 * Returns a new list with the given element at the front, followed by the
	 * contents of the list.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig a -> [a] -> [a]
	 * @param {*} el The item to add to the head of the output list.
	 * @param {Array} list The array to add to the tail of the output list.
	 * @return {Array} A new array.
	 * @see R.append
	 * @example
	 *
	 *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
	 */

	var prepend =
	/*#__PURE__*/
	_curry2(function prepend(el, list) {
	  return _concat([el], list);
	});

	/**
	 * Multiplies together all the elements of a list.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Math
	 * @sig [Number] -> Number
	 * @param {Array} list An array of numbers
	 * @return {Number} The product of all the numbers in the list.
	 * @see R.reduce
	 * @example
	 *
	 *      R.product([2,4,6,8,100,1]); //=> 38400
	 */

	var product =
	/*#__PURE__*/
	reduce(multiply, 1);

	/**
	 * Accepts a function `fn` and a list of transformer functions and returns a
	 * new curried function. When the new function is invoked, it calls the
	 * function `fn` with parameters consisting of the result of calling each
	 * supplied handler on successive arguments to the new function.
	 *
	 * If more arguments are passed to the returned function than transformer
	 * functions, those arguments are passed directly to `fn` as additional
	 * parameters. If you expect additional arguments that don't need to be
	 * transformed, although you can ignore them, it's best to pass an identity
	 * function so that the new function reports the correct arity.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
	 * @param {Function} fn The function to wrap.
	 * @param {Array} transformers A list of transformer functions
	 * @return {Function} The wrapped function.
	 * @see R.converge
	 * @example
	 *
	 *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
	 *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
	 *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
	 *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
	 * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
	 */

	var useWith =
	/*#__PURE__*/
	_curry2(function useWith(fn, transformers) {
	  return curryN(transformers.length, function () {
	    var args = [];
	    var idx = 0;

	    while (idx < transformers.length) {
	      args.push(transformers[idx].call(this, arguments[idx]));
	      idx += 1;
	    }

	    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
	  });
	});

	/**
	 * Reasonable analog to SQL `select` statement.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @category Relation
	 * @sig [k] -> [{k: v}] -> [{k: v}]
	 * @param {Array} props The property names to project
	 * @param {Array} objs The objects to query
	 * @return {Array} An array of objects with just the `props` properties.
	 * @example
	 *
	 *      const abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
	 *      const fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
	 *      const kids = [abby, fred];
	 *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
	 */

	var project =
	/*#__PURE__*/
	useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity

	/**
	 * Returns `true` if the specified object property is equal, in
	 * [`R.equals`](#equals) terms, to the given value; `false` otherwise.
	 * You can test multiple properties with [`R.whereEq`](#whereEq).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig String -> a -> Object -> Boolean
	 * @param {String} name
	 * @param {*} val
	 * @param {*} obj
	 * @return {Boolean}
	 * @see R.whereEq, R.propSatisfies, R.equals
	 * @example
	 *
	 *      const abby = {name: 'Abby', age: 7, hair: 'blond'};
	 *      const fred = {name: 'Fred', age: 12, hair: 'brown'};
	 *      const rusty = {name: 'Rusty', age: 10, hair: 'brown'};
	 *      const alois = {name: 'Alois', age: 15, disposition: 'surly'};
	 *      const kids = [abby, fred, rusty, alois];
	 *      const hasBrownHair = R.propEq('hair', 'brown');
	 *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
	 */

	var propEq =
	/*#__PURE__*/
	_curry3(function propEq(name, val, obj) {
	  return equals(val, obj[name]);
	});

	/**
	 * Returns `true` if the specified object property is of the given type;
	 * `false` otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category Type
	 * @sig Type -> String -> Object -> Boolean
	 * @param {Function} type
	 * @param {String} name
	 * @param {*} obj
	 * @return {Boolean}
	 * @see R.is, R.propSatisfies
	 * @example
	 *
	 *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
	 *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
	 *      R.propIs(Number, 'x', {});            //=> false
	 */

	var propIs =
	/*#__PURE__*/
	_curry3(function propIs(type, name, obj) {
	  return is(type, obj[name]);
	});

	/**
	 * If the given, non-null object has an own property with the specified name,
	 * returns the value of that property. Otherwise returns the provided default
	 * value.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.6.0
	 * @category Object
	 * @sig a -> String -> Object -> a
	 * @param {*} val The default value.
	 * @param {String} p The name of the property to return.
	 * @param {Object} obj The object to query.
	 * @return {*} The value of given property of the supplied object or the default value.
	 * @example
	 *
	 *      const alice = {
	 *        name: 'ALICE',
	 *        age: 101
	 *      };
	 *      const favorite = R.prop('favoriteLibrary');
	 *      const favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
	 *
	 *      favorite(alice);  //=> undefined
	 *      favoriteWithDefault(alice);  //=> 'Ramda'
	 */

	var propOr =
	/*#__PURE__*/
	_curry3(function propOr(val, p, obj) {
	  return pathOr(val, [p], obj);
	});

	/**
	 * Returns `true` if the specified object property satisfies the given
	 * predicate; `false` otherwise. You can test multiple properties with
	 * [`R.where`](#where).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category Logic
	 * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
	 * @param {Function} pred
	 * @param {String} name
	 * @param {*} obj
	 * @return {Boolean}
	 * @see R.where, R.propEq, R.propIs
	 * @example
	 *
	 *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
	 */

	var propSatisfies =
	/*#__PURE__*/
	_curry3(function propSatisfies(pred, name, obj) {
	  return pred(obj[name]);
	});

	/**
	 * Acts as multiple `prop`: array of keys in, array of values out. Preserves
	 * order.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig [k] -> {k: v} -> [v]
	 * @param {Array} ps The property names to fetch
	 * @param {Object} obj The object to query
	 * @return {Array} The corresponding values or partially applied function.
	 * @example
	 *
	 *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
	 *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
	 *
	 *      const fullName = R.compose(R.join(' '), R.props(['first', 'last']));
	 *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
	 */

	var props =
	/*#__PURE__*/
	_curry2(function props(ps, obj) {
	  return ps.map(function (p) {
	    return path([p], obj);
	  });
	});

	/**
	 * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Number -> Number -> [Number]
	 * @param {Number} from The first number in the list.
	 * @param {Number} to One more than the last number in the list.
	 * @return {Array} The list of numbers in the set `[a, b)`.
	 * @example
	 *
	 *      R.range(1, 5);    //=> [1, 2, 3, 4]
	 *      R.range(50, 53);  //=> [50, 51, 52]
	 */

	var range =
	/*#__PURE__*/
	_curry2(function range(from, to) {
	  if (!(_isNumber(from) && _isNumber(to))) {
	    throw new TypeError('Both arguments to range must be numbers');
	  }

	  var result = [];
	  var n = from;

	  while (n < to) {
	    result.push(n);
	    n += 1;
	  }

	  return result;
	});

	/**
	 * Returns a single item by iterating through the list, successively calling
	 * the iterator function and passing it an accumulator value and the current
	 * value from the array, and then passing the result to the next call.
	 *
	 * Similar to [`reduce`](#reduce), except moves through the input list from the
	 * right to the left.
	 *
	 * The iterator function receives two values: *(value, acc)*, while the arguments'
	 * order of `reduce`'s iterator function is *(acc, value)*.
	 *
	 * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
	 * arrays), unlike the native `Array.prototype.reduceRight` method. For more details
	 * on this behavior, see:
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig ((a, b) -> b) -> b -> [a] -> b
	 * @param {Function} fn The iterator function. Receives two values, the current element from the array
	 *        and the accumulator.
	 * @param {*} acc The accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.reduce, R.addIndex
	 * @example
	 *
	 *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2
	 *      //    -               -2
	 *      //   / \              / \
	 *      //  1   -            1   3
	 *      //     / \              / \
	 *      //    2   -     ==>    2  -1
	 *      //       / \              / \
	 *      //      3   -            3   4
	 *      //         / \              / \
	 *      //        4   0            4   0
	 *
	 * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))
	 */

	var reduceRight =
	/*#__PURE__*/
	_curry3(function reduceRight(fn, acc, list) {
	  var idx = list.length - 1;

	  while (idx >= 0) {
	    acc = fn(list[idx], acc);
	    idx -= 1;
	  }

	  return acc;
	});

	/**
	 * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating
	 * through the list, successively calling the iterator function. `reduceWhile`
	 * also takes a predicate that is evaluated before each step. If the predicate
	 * returns `false`, it "short-circuits" the iteration and returns the current
	 * value of the accumulator.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.22.0
	 * @category List
	 * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
	 * @param {Function} pred The predicate. It is passed the accumulator and the
	 *        current element.
	 * @param {Function} fn The iterator function. Receives two values, the
	 *        accumulator and the current element.
	 * @param {*} a The accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.reduce, R.reduced
	 * @example
	 *
	 *      const isOdd = (acc, x) => x % 2 === 1;
	 *      const xs = [1, 3, 5, 60, 777, 800];
	 *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
	 *
	 *      const ys = [2, 4, 6]
	 *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
	 */

	var reduceWhile =
	/*#__PURE__*/
	_curryN(4, [], function _reduceWhile(pred, fn, a, list) {
	  return _reduce(function (acc, x) {
	    return pred(acc, x) ? fn(acc, x) : _reduced(acc);
	  }, a, list);
	});

	/**
	 * Returns a value wrapped to indicate that it is the final value of the reduce
	 * and transduce functions. The returned value should be considered a black
	 * box: the internal structure is not guaranteed to be stable.
	 *
	 * Note: this optimization is only available to the below functions:
	 * - [`reduce`](#reduce)
	 * - [`reduceWhile`](#reduceWhile)
	 * - [`transduce`](#transduce)
	 *
	 * @func
	 * @memberOf R
	 * @since v0.15.0
	 * @category List
	 * @sig a -> *
	 * @param {*} x The final value of the reduce.
	 * @return {*} The wrapped value.
	 * @see R.reduce, R.reduceWhile, R.transduce
	 * @example
	 *
	 *     R.reduce(
	 *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),
	 *       [],
	 *       [1, 2, 3, 4, 5]) // [1, 2, 3]
	 */

	var reduced =
	/*#__PURE__*/
	_curry1(_reduced);

	/**
	 * Calls an input function `n` times, returning an array containing the results
	 * of those function calls.
	 *
	 * `fn` is passed one argument: The current value of `n`, which begins at `0`
	 * and is gradually incremented to `n - 1`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.3
	 * @category List
	 * @sig (Number -> a) -> Number -> [a]
	 * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
	 * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
	 * @return {Array} An array containing the return values of all calls to `fn`.
	 * @see R.repeat
	 * @example
	 *
	 *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
	 * @symb R.times(f, 0) = []
	 * @symb R.times(f, 1) = [f(0)]
	 * @symb R.times(f, 2) = [f(0), f(1)]
	 */

	var times =
	/*#__PURE__*/
	_curry2(function times(fn, n) {
	  var len = Number(n);
	  var idx = 0;
	  var list;

	  if (len < 0 || isNaN(len)) {
	    throw new RangeError('n must be a non-negative number');
	  }

	  list = new Array(len);

	  while (idx < len) {
	    list[idx] = fn(idx);
	    idx += 1;
	  }

	  return list;
	});

	/**
	 * Returns a fixed list of size `n` containing a specified identical value.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.1
	 * @category List
	 * @sig a -> n -> [a]
	 * @param {*} value The value to repeat.
	 * @param {Number} n The desired size of the output list.
	 * @return {Array} A new array containing `n` `value`s.
	 * @see R.times
	 * @example
	 *
	 *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
	 *
	 *      const obj = {};
	 *      const repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
	 *      repeatedObjs[0] === repeatedObjs[1]; //=> true
	 * @symb R.repeat(a, 0) = []
	 * @symb R.repeat(a, 1) = [a]
	 * @symb R.repeat(a, 2) = [a, a]
	 */

	var repeat =
	/*#__PURE__*/
	_curry2(function repeat(value, n) {
	  return times(always(value), n);
	});

	/**
	 * Replace a substring or regex match in a string with a replacement.
	 *
	 * The first two parameters correspond to the parameters of the
	 * `String.prototype.replace()` function, so the second parameter can also be a
	 * function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.7.0
	 * @category String
	 * @sig RegExp|String -> String -> String -> String
	 * @param {RegExp|String} pattern A regular expression or a substring to match.
	 * @param {String} replacement The string to replace the matches with.
	 * @param {String} str The String to do the search and replacement in.
	 * @return {String} The result.
	 * @example
	 *
	 *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
	 *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
	 *
	 *      // Use the "g" (global) flag to replace all occurrences:
	 *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
	 */

	var replace =
	/*#__PURE__*/
	_curry3(function replace(regex, replacement, str) {
	  return str.replace(regex, replacement);
	});

	/**
	 * Scan is similar to [`reduce`](#reduce), but returns a list of successively
	 * reduced values from the left
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category List
	 * @sig ((a, b) -> a) -> a -> [b] -> [a]
	 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	 *        current element from the array
	 * @param {*} acc The accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {Array} A list of all intermediately reduced values.
	 * @see R.reduce, R.mapAccum
	 * @example
	 *
	 *      const numbers = [1, 2, 3, 4];
	 *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
	 * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]
	 */

	var scan =
	/*#__PURE__*/
	_curry3(function scan(fn, acc, list) {
	  var idx = 0;
	  var len = list.length;
	  var result = [acc];

	  while (idx < len) {
	    acc = fn(acc, list[idx]);
	    result[idx + 1] = acc;
	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
	 * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
	 * Applicative of Traversable.
	 *
	 * Dispatches to the `sequence` method of the second argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category List
	 * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
	 * @param {Function} of
	 * @param {*} traversable
	 * @return {*}
	 * @see R.traverse
	 * @example
	 *
	 *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
	 *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
	 *
	 *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
	 *      R.sequence(R.of, Nothing());       //=> [Nothing()]
	 */

	var sequence =
	/*#__PURE__*/
	_curry2(function sequence(of, traversable) {
	  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (x, acc) {
	    return ap(map$1(prepend, x), acc);
	  }, of([]), traversable);
	});

	/**
	 * Returns the result of "setting" the portion of the given data structure
	 * focused by the given lens to the given value.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category Object
	 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	 * @sig Lens s a -> a -> s -> s
	 * @param {Lens} lens
	 * @param {*} v
	 * @param {*} x
	 * @return {*}
	 * @see R.prop, R.lensIndex, R.lensProp
	 * @example
	 *
	 *      const xLens = R.lensProp('x');
	 *
	 *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
	 *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
	 */

	var set =
	/*#__PURE__*/
	_curry3(function set(lens, v, x) {
	  return over(lens, always(v), x);
	});

	/**
	 * Returns a copy of the list, sorted according to the comparator function,
	 * which should accept two values at a time and return a negative number if the
	 * first value is smaller, a positive number if it's larger, and zero if they
	 * are equal. Please note that this is a **copy** of the list. It does not
	 * modify the original.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig ((a, a) -> Number) -> [a] -> [a]
	 * @param {Function} comparator A sorting function :: a -> b -> Int
	 * @param {Array} list The list to sort
	 * @return {Array} a new array with its elements sorted by the comparator function.
	 * @example
	 *
	 *      const diff = function(a, b) { return a - b; };
	 *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
	 */

	var sort =
	/*#__PURE__*/
	_curry2(function sort(comparator, list) {
	  return Array.prototype.slice.call(list, 0).sort(comparator);
	});

	/**
	 * Sorts the list according to the supplied function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig Ord b => (a -> b) -> [a] -> [a]
	 * @param {Function} fn
	 * @param {Array} list The list to sort.
	 * @return {Array} A new list sorted by the keys generated by `fn`.
	 * @example
	 *
	 *      const sortByFirstItem = R.sortBy(R.prop(0));
	 *      const pairs = [[-1, 1], [-2, 2], [-3, 3]];
	 *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
	 *
	 *      const sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
	 *      const alice = {
	 *        name: 'ALICE',
	 *        age: 101
	 *      };
	 *      const bob = {
	 *        name: 'Bob',
	 *        age: -10
	 *      };
	 *      const clara = {
	 *        name: 'clara',
	 *        age: 314.159
	 *      };
	 *      const people = [clara, bob, alice];
	 *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
	 */

	var sortBy =
	/*#__PURE__*/
	_curry2(function sortBy(fn, list) {
	  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
	    var aa = fn(a);
	    var bb = fn(b);
	    return aa < bb ? -1 : aa > bb ? 1 : 0;
	  });
	});

	/**
	 * Sorts a list according to a list of comparators.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.23.0
	 * @category Relation
	 * @sig [(a, a) -> Number] -> [a] -> [a]
	 * @param {Array} functions A list of comparator functions.
	 * @param {Array} list The list to sort.
	 * @return {Array} A new list sorted according to the comarator functions.
	 * @example
	 *
	 *      const alice = {
	 *        name: 'alice',
	 *        age: 40
	 *      };
	 *      const bob = {
	 *        name: 'bob',
	 *        age: 30
	 *      };
	 *      const clara = {
	 *        name: 'clara',
	 *        age: 40
	 *      };
	 *      const people = [clara, bob, alice];
	 *      const ageNameSort = R.sortWith([
	 *        R.descend(R.prop('age')),
	 *        R.ascend(R.prop('name'))
	 *      ]);
	 *      ageNameSort(people); //=> [alice, clara, bob]
	 */

	var sortWith =
	/*#__PURE__*/
	_curry2(function sortWith(fns, list) {
	  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
	    var result = 0;
	    var i = 0;

	    while (result === 0 && i < fns.length) {
	      result = fns[i](a, b);
	      i += 1;
	    }

	    return result;
	  });
	});

	/**
	 * Splits a string into an array of strings based on the given
	 * separator.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category String
	 * @sig (String | RegExp) -> String -> [String]
	 * @param {String|RegExp} sep The pattern.
	 * @param {String} str The string to separate into an array.
	 * @return {Array} The array of strings from `str` separated by `sep`.
	 * @see R.join
	 * @example
	 *
	 *      const pathComponents = R.split('/');
	 *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
	 *
	 *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
	 */

	var split =
	/*#__PURE__*/
	invoker(1, 'split');

	/**
	 * Splits a given list or string at a given index.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category List
	 * @sig Number -> [a] -> [[a], [a]]
	 * @sig Number -> String -> [String, String]
	 * @param {Number} index The index where the array/string is split.
	 * @param {Array|String} array The array/string to be split.
	 * @return {Array}
	 * @example
	 *
	 *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
	 *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
	 *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
	 */

	var splitAt =
	/*#__PURE__*/
	_curry2(function splitAt(index, array) {
	  return [slice(0, index, array), slice(index, length(array), array)];
	});

	/**
	 * Splits a collection into slices of the specified length.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category List
	 * @sig Number -> [a] -> [[a]]
	 * @sig Number -> String -> [String]
	 * @param {Number} n
	 * @param {Array} list
	 * @return {Array}
	 * @example
	 *
	 *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
	 *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
	 */

	var splitEvery =
	/*#__PURE__*/
	_curry2(function splitEvery(n, list) {
	  if (n <= 0) {
	    throw new Error('First argument to splitEvery must be a positive integer');
	  }

	  var result = [];
	  var idx = 0;

	  while (idx < list.length) {
	    result.push(slice(idx, idx += n, list));
	  }

	  return result;
	});

	/**
	 * Takes a list and a predicate and returns a pair of lists with the following properties:
	 *
	 *  - the result of concatenating the two output lists is equivalent to the input list;
	 *  - none of the elements of the first output list satisfies the predicate; and
	 *  - if the second output list is non-empty, its first element satisfies the predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> [[a], [a]]
	 * @param {Function} pred The predicate that determines where the array is split.
	 * @param {Array} list The array to be split.
	 * @return {Array}
	 * @example
	 *
	 *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
	 */

	var splitWhen =
	/*#__PURE__*/
	_curry2(function splitWhen(pred, list) {
	  var idx = 0;
	  var len = list.length;
	  var prefix = [];

	  while (idx < len && !pred(list[idx])) {
	    prefix.push(list[idx]);
	    idx += 1;
	  }

	  return [prefix, Array.prototype.slice.call(list, idx)];
	});

	/**
	 * Checks if a list starts with the provided sublist.
	 *
	 * Similarly, checks if a string starts with the provided substring.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category List
	 * @sig [a] -> [a] -> Boolean
	 * @sig String -> String -> Boolean
	 * @param {*} prefix
	 * @param {*} list
	 * @return {Boolean}
	 * @see R.endsWith
	 * @example
	 *
	 *      R.startsWith('a', 'abc')                //=> true
	 *      R.startsWith('b', 'abc')                //=> false
	 *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true
	 *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false
	 */

	var startsWith =
	/*#__PURE__*/
	_curry2(function (prefix, list) {
	  return equals(take(prefix.length, list), prefix);
	});

	/**
	 * Subtracts its second argument from its first argument.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Math
	 * @sig Number -> Number -> Number
	 * @param {Number} a The first value.
	 * @param {Number} b The second value.
	 * @return {Number} The result of `a - b`.
	 * @see R.add
	 * @example
	 *
	 *      R.subtract(10, 8); //=> 2
	 *
	 *      const minus5 = R.subtract(R.__, 5);
	 *      minus5(17); //=> 12
	 *
	 *      const complementaryAngle = R.subtract(90);
	 *      complementaryAngle(30); //=> 60
	 *      complementaryAngle(72); //=> 18
	 */

	var subtract =
	/*#__PURE__*/
	_curry2(function subtract(a, b) {
	  return Number(a) - Number(b);
	});

	/**
	 * Finds the set (i.e. no duplicates) of all elements contained in the first or
	 * second list, but not both.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category Relation
	 * @sig [*] -> [*] -> [*]
	 * @param {Array} list1 The first list.
	 * @param {Array} list2 The second list.
	 * @return {Array} The elements in `list1` or `list2`, but not both.
	 * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
	 * @example
	 *
	 *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
	 *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
	 */

	var symmetricDifference =
	/*#__PURE__*/
	_curry2(function symmetricDifference(list1, list2) {
	  return concat(difference(list1, list2), difference(list2, list1));
	});

	/**
	 * Finds the set (i.e. no duplicates) of all elements contained in the first or
	 * second list, but not both. Duplication is determined according to the value
	 * returned by applying the supplied predicate to two list elements.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category Relation
	 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
	 * @param {Function} pred A predicate used to test whether two items are equal.
	 * @param {Array} list1 The first list.
	 * @param {Array} list2 The second list.
	 * @return {Array} The elements in `list1` or `list2`, but not both.
	 * @see R.symmetricDifference, R.difference, R.differenceWith
	 * @example
	 *
	 *      const eqA = R.eqBy(R.prop('a'));
	 *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
	 *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
	 *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
	 */

	var symmetricDifferenceWith =
	/*#__PURE__*/
	_curry3(function symmetricDifferenceWith(pred, list1, list2) {
	  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
	});

	/**
	 * Returns a new list containing the last `n` elements of a given list, passing
	 * each value to the supplied predicate function, and terminating when the
	 * predicate function returns `false`. Excludes the element that caused the
	 * predicate function to fail. The predicate function is passed one argument:
	 * *(value)*.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> [a]
	 * @sig (a -> Boolean) -> String -> String
	 * @param {Function} fn The function called per iteration.
	 * @param {Array} xs The collection to iterate over.
	 * @return {Array} A new array.
	 * @see R.dropLastWhile, R.addIndex
	 * @example
	 *
	 *      const isNotOne = x => x !== 1;
	 *
	 *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
	 *
	 *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'
	 */

	var takeLastWhile =
	/*#__PURE__*/
	_curry2(function takeLastWhile(fn, xs) {
	  var idx = xs.length - 1;

	  while (idx >= 0 && fn(xs[idx])) {
	    idx -= 1;
	  }

	  return slice(idx + 1, Infinity, xs);
	});

	var XTakeWhile =
	/*#__PURE__*/
	function () {
	  function XTakeWhile(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }

	  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;
	  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;

	  XTakeWhile.prototype['@@transducer/step'] = function (result, input) {
	    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);
	  };

	  return XTakeWhile;
	}();

	var _xtakeWhile =
	/*#__PURE__*/
	_curry2(function _xtakeWhile(f, xf) {
	  return new XTakeWhile(f, xf);
	});

	/**
	 * Returns a new list containing the first `n` elements of a given list,
	 * passing each value to the supplied predicate function, and terminating when
	 * the predicate function returns `false`. Excludes the element that caused the
	 * predicate function to fail. The predicate function is passed one argument:
	 * *(value)*.
	 *
	 * Dispatches to the `takeWhile` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> [a]
	 * @sig (a -> Boolean) -> String -> String
	 * @param {Function} fn The function called per iteration.
	 * @param {Array} xs The collection to iterate over.
	 * @return {Array} A new array.
	 * @see R.dropWhile, R.transduce, R.addIndex
	 * @example
	 *
	 *      const isNotFour = x => x !== 4;
	 *
	 *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
	 *
	 *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'
	 */

	var takeWhile =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, xs) {
	  var idx = 0;
	  var len = xs.length;

	  while (idx < len && fn(xs[idx])) {
	    idx += 1;
	  }

	  return slice(0, idx, xs);
	}));

	var XTap =
	/*#__PURE__*/
	function () {
	  function XTap(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }

	  XTap.prototype['@@transducer/init'] = _xfBase.init;
	  XTap.prototype['@@transducer/result'] = _xfBase.result;

	  XTap.prototype['@@transducer/step'] = function (result, input) {
	    this.f(input);
	    return this.xf['@@transducer/step'](result, input);
	  };

	  return XTap;
	}();

	var _xtap =
	/*#__PURE__*/
	_curry2(function _xtap(f, xf) {
	  return new XTap(f, xf);
	});

	/**
	 * Runs the given function with the supplied object, then returns the object.
	 *
	 * Acts as a transducer if a transformer is given as second parameter.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig (a -> *) -> a -> a
	 * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
	 * @param {*} x
	 * @return {*} `x`.
	 * @example
	 *
	 *      const sayX = x => console.log('x is ' + x);
	 *      R.tap(sayX, 100); //=> 100
	 *      // logs 'x is 100'
	 * @symb R.tap(f, a) = a
	 */

	var tap =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable([], _xtap, function tap(fn, x) {
	  fn(x);
	  return x;
	}));

	function _isRegExp(x) {
	  return Object.prototype.toString.call(x) === '[object RegExp]';
	}

	/**
	 * Determines whether a given string matches a given regular expression.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.12.0
	 * @category String
	 * @sig RegExp -> String -> Boolean
	 * @param {RegExp} pattern
	 * @param {String} str
	 * @return {Boolean}
	 * @see R.match
	 * @example
	 *
	 *      R.test(/^x/, 'xyz'); //=> true
	 *      R.test(/^y/, 'xyz'); //=> false
	 */

	var test =
	/*#__PURE__*/
	_curry2(function test(pattern, str) {
	  if (!_isRegExp(pattern)) {
	    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString$1(pattern));
	  }

	  return _cloneRegExp(pattern).test(str);
	});

	/**
	 * Returns the result of applying the onSuccess function to the value inside
	 * a successfully resolved promise. This is useful for working with promises
	 * inside function compositions.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.27.0
	 * @category Function
	 * @sig (a -> b) -> (Promise e a) -> (Promise e b)
	 * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)
	 * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.
	 * @param {Promise} p
	 * @return {Promise} The result of calling `p.then(onSuccess)`
	 * @see R.otherwise
	 * @example
	 *
	 *      var makeQuery = (email) => ({ query: { email }});
	 *
	 *      //getMemberName :: String -> Promise ({firstName, lastName})
	 *      var getMemberName = R.pipe(
	 *        makeQuery,
	 *        fetchMember,
	 *        R.andThen(R.pick(['firstName', 'lastName']))
	 *      );
	 */

	var andThen =
	/*#__PURE__*/
	_curry2(function andThen(f, p) {
	  _assertPromise('andThen', p);

	  return p.then(f);
	});

	/**
	 * The lower case version of a string.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category String
	 * @sig String -> String
	 * @param {String} str The string to lower case.
	 * @return {String} The lower case version of `str`.
	 * @see R.toUpper
	 * @example
	 *
	 *      R.toLower('XYZ'); //=> 'xyz'
	 */

	var toLower =
	/*#__PURE__*/
	invoker(0, 'toLowerCase');

	/**
	 * Converts an object into an array of key, value arrays. Only the object's
	 * own properties are used.
	 * Note that the order of the output array is not guaranteed to be consistent
	 * across different JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.4.0
	 * @category Object
	 * @sig {String: *} -> [[String,*]]
	 * @param {Object} obj The object to extract from
	 * @return {Array} An array of key, value arrays from the object's own properties.
	 * @see R.fromPairs
	 * @example
	 *
	 *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
	 */

	var toPairs =
	/*#__PURE__*/
	_curry1(function toPairs(obj) {
	  var pairs = [];

	  for (var prop in obj) {
	    if (_has(prop, obj)) {
	      pairs[pairs.length] = [prop, obj[prop]];
	    }
	  }

	  return pairs;
	});

	/**
	 * Converts an object into an array of key, value arrays. The object's own
	 * properties and prototype properties are used. Note that the order of the
	 * output array is not guaranteed to be consistent across different JS
	 * platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.4.0
	 * @category Object
	 * @sig {String: *} -> [[String,*]]
	 * @param {Object} obj The object to extract from
	 * @return {Array} An array of key, value arrays from the object's own
	 *         and prototype properties.
	 * @example
	 *
	 *      const F = function() { this.x = 'X'; };
	 *      F.prototype.y = 'Y';
	 *      const f = new F();
	 *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
	 */

	var toPairsIn =
	/*#__PURE__*/
	_curry1(function toPairsIn(obj) {
	  var pairs = [];

	  for (var prop in obj) {
	    pairs[pairs.length] = [prop, obj[prop]];
	  }

	  return pairs;
	});

	/**
	 * The upper case version of a string.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category String
	 * @sig String -> String
	 * @param {String} str The string to upper case.
	 * @return {String} The upper case version of `str`.
	 * @see R.toLower
	 * @example
	 *
	 *      R.toUpper('abc'); //=> 'ABC'
	 */

	var toUpper =
	/*#__PURE__*/
	invoker(0, 'toUpperCase');

	/**
	 * Initializes a transducer using supplied iterator function. Returns a single
	 * item by iterating through the list, successively calling the transformed
	 * iterator function and passing it an accumulator value and the current value
	 * from the array, and then passing the result to the next call.
	 *
	 * The iterator function receives two values: *(acc, value)*. It will be
	 * wrapped as a transformer to initialize the transducer. A transformer can be
	 * passed directly in place of an iterator function. In both cases, iteration
	 * may be stopped early with the [`R.reduced`](#reduced) function.
	 *
	 * A transducer is a function that accepts a transformer and returns a
	 * transformer and can be composed directly.
	 *
	 * A transformer is an an object that provides a 2-arity reducing iterator
	 * function, step, 0-arity initial value function, init, and 1-arity result
	 * extraction function, result. The step function is used as the iterator
	 * function in reduce. The result function is used to convert the final
	 * accumulator into the return type and in most cases is
	 * [`R.identity`](#identity). The init function can be used to provide an
	 * initial accumulator, but is ignored by transduce.
	 *
	 * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.12.0
	 * @category List
	 * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a
	 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
	 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	 *        current element from the array. Wrapped as transformer, if necessary, and used to
	 *        initialize the transducer
	 * @param {*} acc The initial accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.reduce, R.reduced, R.into
	 * @example
	 *
	 *      const numbers = [1, 2, 3, 4];
	 *      const transducer = R.compose(R.map(R.add(1)), R.take(2));
	 *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
	 *
	 *      const isOdd = (x) => x % 2 === 1;
	 *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));
	 *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]
	 */

	var transduce =
	/*#__PURE__*/
	curryN(4, function transduce(xf, fn, acc, list) {
	  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);
	});

	/**
	 * Transposes the rows and columns of a 2D list.
	 * When passed a list of `n` lists of length `x`,
	 * returns a list of `x` lists of length `n`.
	 *
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category List
	 * @sig [[a]] -> [[a]]
	 * @param {Array} list A 2D list
	 * @return {Array} A 2D list
	 * @example
	 *
	 *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
	 *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
	 *
	 *      // If some of the rows are shorter than the following rows, their elements are skipped:
	 *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
	 * @symb R.transpose([[a], [b], [c]]) = [a, b, c]
	 * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]
	 * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]
	 */

	var transpose =
	/*#__PURE__*/
	_curry1(function transpose(outerlist) {
	  var i = 0;
	  var result = [];

	  while (i < outerlist.length) {
	    var innerlist = outerlist[i];
	    var j = 0;

	    while (j < innerlist.length) {
	      if (typeof result[j] === 'undefined') {
	        result[j] = [];
	      }

	      result[j].push(innerlist[j]);
	      j += 1;
	    }

	    i += 1;
	  }

	  return result;
	});

	/**
	 * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
	 * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
	 * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
	 * into an Applicative of Traversable.
	 *
	 * Dispatches to the `traverse` method of the third argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category List
	 * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
	 * @param {Function} of
	 * @param {Function} f
	 * @param {*} traversable
	 * @return {*}
	 * @see R.sequence
	 * @example
	 *
	 *      // Returns `Maybe.Nothing` if the given divisor is `0`
	 *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)
	 *
	 *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])
	 *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing
	 */

	var traverse =
	/*#__PURE__*/
	_curry3(function traverse(of, f, traversable) {
	  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](f, of) : sequence(of, map$1(f, traversable));
	});

	var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
	var zeroWidth = '\u200b';
	var hasProtoTrim = typeof String.prototype.trim === 'function';
	/**
	 * Removes (strips) whitespace from both ends of the string.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.6.0
	 * @category String
	 * @sig String -> String
	 * @param {String} str The string to trim.
	 * @return {String} Trimmed version of `str`.
	 * @example
	 *
	 *      R.trim('   xyz  '); //=> 'xyz'
	 *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
	 */

	var trim = !hasProtoTrim ||
	/*#__PURE__*/
	ws.trim() || !
	/*#__PURE__*/
	zeroWidth.trim() ?
	/*#__PURE__*/
	_curry1(function trim(str) {
	  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
	  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
	  return str.replace(beginRx, '').replace(endRx, '');
	}) :
	/*#__PURE__*/
	_curry1(function trim(str) {
	  return str.trim();
	});

	/**
	 * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
	 * function evaluates the `tryer`; if it does not throw, it simply returns the
	 * result. If the `tryer` *does* throw, the returned function evaluates the
	 * `catcher` function and returns its result. Note that for effective
	 * composition with this function, both the `tryer` and `catcher` functions
	 * must return the same type of results.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.20.0
	 * @category Function
	 * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
	 * @param {Function} tryer The function that may throw.
	 * @param {Function} catcher The function that will be evaluated if `tryer` throws.
	 * @return {Function} A new function that will catch exceptions and send then to the catcher.
	 * @example
	 *
	 *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
	 *      R.tryCatch(() => { throw 'foo'}, R.always('catched'))('bar') // => 'catched'
	 *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []
	 *      R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}
	 */

	var tryCatch =
	/*#__PURE__*/
	_curry2(function _tryCatch(tryer, catcher) {
	  return _arity(tryer.length, function () {
	    try {
	      return tryer.apply(this, arguments);
	    } catch (e) {
	      return catcher.apply(this, _concat([e], arguments));
	    }
	  });
	});

	/**
	 * Takes a function `fn`, which takes a single array argument, and returns a
	 * function which:
	 *
	 *   - takes any number of positional arguments;
	 *   - passes these arguments to `fn` as an array; and
	 *   - returns the result.
	 *
	 * In other words, `R.unapply` derives a variadic function from a function which
	 * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Function
	 * @sig ([*...] -> a) -> (*... -> a)
	 * @param {Function} fn
	 * @return {Function}
	 * @see R.apply
	 * @example
	 *
	 *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
	 * @symb R.unapply(f)(a, b) = f([a, b])
	 */

	var unapply =
	/*#__PURE__*/
	_curry1(function unapply(fn) {
	  return function () {
	    return fn(Array.prototype.slice.call(arguments, 0));
	  };
	});

	/**
	 * Wraps a function of any arity (including nullary) in a function that accepts
	 * exactly 1 parameter. Any extraneous parameters will not be passed to the
	 * supplied function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.0
	 * @category Function
	 * @sig (* -> b) -> (a -> b)
	 * @param {Function} fn The function to wrap.
	 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	 *         arity 1.
	 * @see R.binary, R.nAry
	 * @example
	 *
	 *      const takesTwoArgs = function(a, b) {
	 *        return [a, b];
	 *      };
	 *      takesTwoArgs.length; //=> 2
	 *      takesTwoArgs(1, 2); //=> [1, 2]
	 *
	 *      const takesOneArg = R.unary(takesTwoArgs);
	 *      takesOneArg.length; //=> 1
	 *      // Only 1 argument is passed to the wrapped function
	 *      takesOneArg(1, 2); //=> [1, undefined]
	 * @symb R.unary(f)(a, b, c) = f(a)
	 */

	var unary =
	/*#__PURE__*/
	_curry1(function unary(fn) {
	  return nAry(1, fn);
	});

	/**
	 * Returns a function of arity `n` from a (manually) curried function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category Function
	 * @sig Number -> (a -> b) -> (a -> c)
	 * @param {Number} length The arity for the returned function.
	 * @param {Function} fn The function to uncurry.
	 * @return {Function} A new function.
	 * @see R.curry
	 * @example
	 *
	 *      const addFour = a => b => c => d => a + b + c + d;
	 *
	 *      const uncurriedAddFour = R.uncurryN(4, addFour);
	 *      uncurriedAddFour(1, 2, 3, 4); //=> 10
	 */

	var uncurryN =
	/*#__PURE__*/
	_curry2(function uncurryN(depth, fn) {
	  return curryN(depth, function () {
	    var currentDepth = 1;
	    var value = fn;
	    var idx = 0;
	    var endIdx;

	    while (currentDepth <= depth && typeof value === 'function') {
	      endIdx = currentDepth === depth ? arguments.length : idx + value.length;
	      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
	      currentDepth += 1;
	      idx = endIdx;
	    }

	    return value;
	  });
	});

	/**
	 * Builds a list from a seed value. Accepts an iterator function, which returns
	 * either false to stop iteration or an array of length 2 containing the value
	 * to add to the resulting list and the seed to be used in the next call to the
	 * iterator function.
	 *
	 * The iterator function receives one argument: *(seed)*.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category List
	 * @sig (a -> [b]) -> * -> [b]
	 * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
	 *        either false to quit iteration or an array of length two to proceed. The element
	 *        at index 0 of this array will be added to the resulting array, and the element
	 *        at index 1 will be passed to the next call to `fn`.
	 * @param {*} seed The seed value.
	 * @return {Array} The final list.
	 * @example
	 *
	 *      const f = n => n > 50 ? false : [-n, n + 10];
	 *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
	 * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]
	 */

	var unfold =
	/*#__PURE__*/
	_curry2(function unfold(fn, seed) {
	  var pair = fn(seed);
	  var result = [];

	  while (pair && pair.length) {
	    result[result.length] = pair[0];
	    pair = fn(pair[1]);
	  }

	  return result;
	});

	/**
	 * Combines two lists into a set (i.e. no duplicates) composed of the elements
	 * of each list.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig [*] -> [*] -> [*]
	 * @param {Array} as The first list.
	 * @param {Array} bs The second list.
	 * @return {Array} The first and second lists concatenated, with
	 *         duplicates removed.
	 * @example
	 *
	 *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
	 */

	var union =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	compose(uniq, _concat));

	/**
	 * Returns a new list containing only one copy of each element in the original
	 * list, based upon the value returned by applying the supplied predicate to
	 * two list elements. Prefers the first item if two items compare equal based
	 * on the predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.0
	 * @category List
	 * @sig ((a, a) -> Boolean) -> [a] -> [a]
	 * @param {Function} pred A predicate used to test whether two items are equal.
	 * @param {Array} list The array to consider.
	 * @return {Array} The list of unique items.
	 * @example
	 *
	 *      const strEq = R.eqBy(String);
	 *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
	 *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
	 *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
	 *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
	 */

	var uniqWith =
	/*#__PURE__*/
	_curry2(function uniqWith(pred, list) {
	  var idx = 0;
	  var len = list.length;
	  var result = [];
	  var item;

	  while (idx < len) {
	    item = list[idx];

	    if (!_includesWith(pred, item, result)) {
	      result[result.length] = item;
	    }

	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Combines two lists into a set (i.e. no duplicates) composed of the elements
	 * of each list. Duplication is determined according to the value returned by
	 * applying the supplied predicate to two list elements.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]
	 * @param {Function} pred A predicate used to test whether two items are equal.
	 * @param {Array} list1 The first list.
	 * @param {Array} list2 The second list.
	 * @return {Array} The first and second lists concatenated, with
	 *         duplicates removed.
	 * @see R.union
	 * @example
	 *
	 *      const l1 = [{a: 1}, {a: 2}];
	 *      const l2 = [{a: 1}, {a: 4}];
	 *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
	 */

	var unionWith =
	/*#__PURE__*/
	_curry3(function unionWith(pred, list1, list2) {
	  return uniqWith(pred, _concat(list1, list2));
	});

	/**
	 * Tests the final argument by passing it to the given predicate function. If
	 * the predicate is not satisfied, the function will return the result of
	 * calling the `whenFalseFn` function with the same argument. If the predicate
	 * is satisfied, the argument is returned as is.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.18.0
	 * @category Logic
	 * @sig (a -> Boolean) -> (a -> a) -> a -> a
	 * @param {Function} pred        A predicate function
	 * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
	 *                               to a falsy value.
	 * @param {*}        x           An object to test with the `pred` function and
	 *                               pass to `whenFalseFn` if necessary.
	 * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
	 * @see R.ifElse, R.when, R.cond
	 * @example
	 *
	 *      let safeInc = R.unless(R.isNil, R.inc);
	 *      safeInc(null); //=> null
	 *      safeInc(1); //=> 2
	 */

	var unless =
	/*#__PURE__*/
	_curry3(function unless(pred, whenFalseFn, x) {
	  return pred(x) ? x : whenFalseFn(x);
	});

	/**
	 * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
	 * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category List
	 * @sig Chain c => c (c a) -> c a
	 * @param {*} list
	 * @return {*}
	 * @see R.flatten, R.chain
	 * @example
	 *
	 *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
	 *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
	 */

	var unnest =
	/*#__PURE__*/
	chain(_identity);

	/**
	 * Takes a predicate, a transformation function, and an initial value,
	 * and returns a value of the same type as the initial value.
	 * It does so by applying the transformation until the predicate is satisfied,
	 * at which point it returns the satisfactory value.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.20.0
	 * @category Logic
	 * @sig (a -> Boolean) -> (a -> a) -> a -> a
	 * @param {Function} pred A predicate function
	 * @param {Function} fn The iterator function
	 * @param {*} init Initial value
	 * @return {*} Final value that satisfies predicate
	 * @example
	 *
	 *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
	 */

	var until =
	/*#__PURE__*/
	_curry3(function until(pred, fn, init) {
	  var val = init;

	  while (!pred(val)) {
	    val = fn(val);
	  }

	  return val;
	});

	/**
	 * Returns a list of all the properties, including prototype properties, of the
	 * supplied object.
	 * Note that the order of the output array is not guaranteed to be consistent
	 * across different JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.0
	 * @category Object
	 * @sig {k: v} -> [v]
	 * @param {Object} obj The object to extract values from
	 * @return {Array} An array of the values of the object's own and prototype properties.
	 * @see R.values, R.keysIn
	 * @example
	 *
	 *      const F = function() { this.x = 'X'; };
	 *      F.prototype.y = 'Y';
	 *      const f = new F();
	 *      R.valuesIn(f); //=> ['X', 'Y']
	 */

	var valuesIn =
	/*#__PURE__*/
	_curry1(function valuesIn(obj) {
	  var prop;
	  var vs = [];

	  for (prop in obj) {
	    vs[vs.length] = obj[prop];
	  }

	  return vs;
	});

	var Const = function (x) {
	  return {
	    value: x,
	    'fantasy-land/map': function () {
	      return this;
	    }
	  };
	};
	/**
	 * Returns a "view" of the given data structure, determined by the given lens.
	 * The lens's focus determines which portion of the data structure is visible.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category Object
	 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	 * @sig Lens s a -> s -> a
	 * @param {Lens} lens
	 * @param {*} x
	 * @return {*}
	 * @see R.prop, R.lensIndex, R.lensProp
	 * @example
	 *
	 *      const xLens = R.lensProp('x');
	 *
	 *      R.view(xLens, {x: 1, y: 2});  //=> 1
	 *      R.view(xLens, {x: 4, y: 2});  //=> 4
	 */


	var view =
	/*#__PURE__*/
	_curry2(function view(lens, x) {
	  // Using `Const` effectively ignores the setter function of the `lens`,
	  // leaving the value returned by the getter function unmodified.
	  return lens(Const)(x).value;
	});

	/**
	 * Tests the final argument by passing it to the given predicate function. If
	 * the predicate is satisfied, the function will return the result of calling
	 * the `whenTrueFn` function with the same argument. If the predicate is not
	 * satisfied, the argument is returned as is.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.18.0
	 * @category Logic
	 * @sig (a -> Boolean) -> (a -> a) -> a -> a
	 * @param {Function} pred       A predicate function
	 * @param {Function} whenTrueFn A function to invoke when the `condition`
	 *                              evaluates to a truthy value.
	 * @param {*}        x          An object to test with the `pred` function and
	 *                              pass to `whenTrueFn` if necessary.
	 * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
	 * @see R.ifElse, R.unless, R.cond
	 * @example
	 *
	 *      // truncate :: String -> String
	 *      const truncate = R.when(
	 *        R.propSatisfies(R.gt(R.__, 10), 'length'),
	 *        R.pipe(R.take(10), R.append('…'), R.join(''))
	 *      );
	 *      truncate('12345');         //=> '12345'
	 *      truncate('0123456789ABC'); //=> '0123456789…'
	 */

	var when =
	/*#__PURE__*/
	_curry3(function when(pred, whenTrueFn, x) {
	  return pred(x) ? whenTrueFn(x) : x;
	});

	/**
	 * Takes a spec object and a test object; returns true if the test satisfies
	 * the spec. Each of the spec's own properties must be a predicate function.
	 * Each predicate is applied to the value of the corresponding property of the
	 * test object. `where` returns true if all the predicates return true, false
	 * otherwise.
	 *
	 * `where` is well suited to declaratively expressing constraints for other
	 * functions such as [`filter`](#filter) and [`find`](#find).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.1
	 * @category Object
	 * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
	 * @param {Object} spec
	 * @param {Object} testObj
	 * @return {Boolean}
	 * @see R.propSatisfies, R.whereEq
	 * @example
	 *
	 *      // pred :: Object -> Boolean
	 *      const pred = R.where({
	 *        a: R.equals('foo'),
	 *        b: R.complement(R.equals('bar')),
	 *        x: R.gt(R.__, 10),
	 *        y: R.lt(R.__, 20)
	 *      });
	 *
	 *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
	 *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
	 *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
	 *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
	 *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
	 */

	var where =
	/*#__PURE__*/
	_curry2(function where(spec, testObj) {
	  for (var prop in spec) {
	    if (_has(prop, spec) && !spec[prop](testObj[prop])) {
	      return false;
	    }
	  }

	  return true;
	});

	/**
	 * Takes a spec object and a test object; returns true if the test satisfies
	 * the spec, false otherwise. An object satisfies the spec if, for each of the
	 * spec's own properties, accessing that property of the object gives the same
	 * value (in [`R.equals`](#equals) terms) as accessing that property of the
	 * spec.
	 *
	 * `whereEq` is a specialization of [`where`](#where).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.14.0
	 * @category Object
	 * @sig {String: *} -> {String: *} -> Boolean
	 * @param {Object} spec
	 * @param {Object} testObj
	 * @return {Boolean}
	 * @see R.propEq, R.where
	 * @example
	 *
	 *      // pred :: Object -> Boolean
	 *      const pred = R.whereEq({a: 1, b: 2});
	 *
	 *      pred({a: 1});              //=> false
	 *      pred({a: 1, b: 2});        //=> true
	 *      pred({a: 1, b: 2, c: 3});  //=> true
	 *      pred({a: 1, b: 1});        //=> false
	 */

	var whereEq =
	/*#__PURE__*/
	_curry2(function whereEq(spec, testObj) {
	  return where(map$1(equals, spec), testObj);
	});

	/**
	 * Returns a new list without values in the first argument.
	 * [`R.equals`](#equals) is used to determine equality.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category List
	 * @sig [a] -> [a] -> [a]
	 * @param {Array} list1 The values to be removed from `list2`.
	 * @param {Array} list2 The array to remove values from.
	 * @return {Array} The new array without values in `list1`.
	 * @see R.transduce, R.difference, R.remove
	 * @example
	 *
	 *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
	 */

	var without$1 =
	/*#__PURE__*/
	_curry2(function (xs, list) {
	  return reject(flip(_includes)(xs), list);
	});

	/**
	 * Exclusive disjunction logical operation.
	 * Returns `true` if one of the arguments is truthy and the other is falsy.
	 * Otherwise, it returns `false`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.27.0
	 * @category Logic
	 * @sig a -> b -> Boolean
	 * @param {Any} a
	 * @param {Any} b
	 * @return {Boolean} true if one of the arguments is truthy and the other is falsy
	 * @see R.or, R.and
	 * @example
	 *
	 *      R.xor(true, true); //=> false
	 *      R.xor(true, false); //=> true
	 *      R.xor(false, true); //=> true
	 *      R.xor(false, false); //=> false
	 */

	var xor =
	/*#__PURE__*/
	_curry2(function xor(a, b) {
	  return Boolean(!a ^ !b);
	});

	/**
	 * Creates a new list out of the two supplied by creating each possible pair
	 * from the lists.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [b] -> [[a,b]]
	 * @param {Array} as The first list.
	 * @param {Array} bs The second list.
	 * @return {Array} The list made by combining each possible pair from
	 *         `as` and `bs` into pairs (`[a, b]`).
	 * @example
	 *
	 *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
	 * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]
	 */

	var xprod =
	/*#__PURE__*/
	_curry2(function xprod(a, b) {
	  // = xprodWith(prepend); (takes about 3 times as long...)
	  var idx = 0;
	  var ilen = a.length;
	  var j;
	  var jlen = b.length;
	  var result = [];

	  while (idx < ilen) {
	    j = 0;

	    while (j < jlen) {
	      result[result.length] = [a[idx], b[j]];
	      j += 1;
	    }

	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Creates a new list out of the two supplied by pairing up equally-positioned
	 * items from both lists. The returned list is truncated to the length of the
	 * shorter of the two input lists.
	 * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [b] -> [[a,b]]
	 * @param {Array} list1 The first array to consider.
	 * @param {Array} list2 The second array to consider.
	 * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
	 * @example
	 *
	 *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
	 * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]
	 */

	var zip =
	/*#__PURE__*/
	_curry2(function zip(a, b) {
	  var rv = [];
	  var idx = 0;
	  var len = Math.min(a.length, b.length);

	  while (idx < len) {
	    rv[idx] = [a[idx], b[idx]];
	    idx += 1;
	  }

	  return rv;
	});

	/**
	 * Creates a new object out of a list of keys and a list of values.
	 * Key/value pairing is truncated to the length of the shorter of the two lists.
	 * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category List
	 * @sig [String] -> [*] -> {String: *}
	 * @param {Array} keys The array that will be properties on the output object.
	 * @param {Array} values The list of values on the output object.
	 * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
	 * @example
	 *
	 *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
	 */

	var zipObj =
	/*#__PURE__*/
	_curry2(function zipObj(keys, values) {
	  var idx = 0;
	  var len = Math.min(keys.length, values.length);
	  var out = {};

	  while (idx < len) {
	    out[keys[idx]] = values[idx];
	    idx += 1;
	  }

	  return out;
	});

	/**
	 * Creates a new list out of the two supplied by applying the function to each
	 * equally-positioned pair in the lists. The returned list is truncated to the
	 * length of the shorter of the two input lists.
	 *
	 * @function
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig ((a, b) -> c) -> [a] -> [b] -> [c]
	 * @param {Function} fn The function used to combine the two elements into one value.
	 * @param {Array} list1 The first array to consider.
	 * @param {Array} list2 The second array to consider.
	 * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
	 *         using `fn`.
	 * @example
	 *
	 *      const f = (x, y) => {
	 *        // ...
	 *      };
	 *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
	 *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
	 * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]
	 */

	var zipWith =
	/*#__PURE__*/
	_curry3(function zipWith(fn, a, b) {
	  var rv = [];
	  var idx = 0;
	  var len = Math.min(a.length, b.length);

	  while (idx < len) {
	    rv[idx] = fn(a[idx], b[idx]);
	    idx += 1;
	  }

	  return rv;
	});

	/**
	 * Creates a thunk out of a function. A thunk delays a calculation until
	 * its result is needed, providing lazy evaluation of arguments.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.26.0
	 * @category Function
	 * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)
	 * @param {Function} fn A function to wrap in a thunk
	 * @return {Function} Expects arguments for `fn` and returns a new function
	 *  that, when called, applies those arguments to `fn`.
	 * @see R.partial, R.partialRight
	 * @example
	 *
	 *      R.thunkify(R.identity)(42)(); //=> 42
	 *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42
	 */

	var thunkify =
	/*#__PURE__*/
	_curry1(function thunkify(fn) {
	  return curryN(fn.length, function createThunk() {
	    var fnArgs = arguments;
	    return function invokeThunk() {
	      return fn.apply(this, fnArgs);
	    };
	  });
	});



	var index = /*#__PURE__*/Object.freeze({
		__proto__: null,
		F: F,
		T: T,
		__: __,
		add: add,
		addIndex: addIndex$1,
		adjust: adjust,
		all: all,
		allPass: allPass,
		always: always,
		and: and,
		any: any,
		anyPass: anyPass,
		ap: ap,
		aperture: aperture,
		append: append,
		apply: apply,
		applySpec: applySpec,
		applyTo: applyTo,
		ascend: ascend,
		assoc: assoc,
		assocPath: assocPath,
		binary: binary,
		bind: bind,
		both: both,
		call: call,
		chain: chain,
		clamp: clamp,
		clone: clone,
		comparator: comparator,
		complement: complement,
		compose: compose,
		composeK: composeK,
		composeP: composeP,
		composeWith: composeWith,
		concat: concat,
		cond: cond,
		construct: construct,
		constructN: constructN,
		contains: contains$1,
		converge: converge,
		countBy: countBy,
		curry: curry,
		curryN: curryN,
		dec: dec,
		defaultTo: defaultTo,
		descend: descend,
		difference: difference,
		differenceWith: differenceWith,
		dissoc: dissoc,
		dissocPath: dissocPath,
		divide: divide,
		drop: drop,
		dropLast: dropLast$1,
		dropLastWhile: dropLastWhile$1,
		dropRepeats: dropRepeats,
		dropRepeatsWith: dropRepeatsWith,
		dropWhile: dropWhile,
		either: either,
		empty: empty,
		endsWith: endsWith,
		eqBy: eqBy,
		eqProps: eqProps,
		equals: equals,
		evolve: evolve,
		filter: filter,
		find: find,
		findIndex: findIndex,
		findLast: findLast,
		findLastIndex: findLastIndex,
		flatten: flatten,
		flip: flip,
		forEach: forEach,
		forEachObjIndexed: forEachObjIndexed,
		fromPairs: fromPairs,
		groupBy: groupBy,
		groupWith: groupWith,
		gt: gt,
		gte: gte,
		has: has,
		hasIn: hasIn,
		hasPath: hasPath,
		head: head$1,
		identical: identical,
		identity: identity,
		ifElse: ifElse,
		inc: inc,
		includes: includes,
		indexBy: indexBy,
		indexOf: indexOf,
		init: init,
		innerJoin: innerJoin,
		insert: insert,
		insertAll: insertAll,
		intersection: intersection,
		intersperse: intersperse,
		into: into,
		invert: invert,
		invertObj: invertObj,
		invoker: invoker,
		is: is,
		isEmpty: isEmpty,
		isNil: isNil,
		join: join$1,
		juxt: juxt,
		keys: keys,
		keysIn: keysIn,
		last: last$1,
		lastIndexOf: lastIndexOf,
		length: length,
		lens: lens,
		lensIndex: lensIndex,
		lensPath: lensPath,
		lensProp: lensProp,
		lift: lift,
		liftN: liftN,
		lt: lt,
		lte: lte,
		map: map$1,
		mapAccum: mapAccum,
		mapAccumRight: mapAccumRight,
		mapObjIndexed: mapObjIndexed,
		match: match,
		mathMod: mathMod,
		max: max,
		maxBy: maxBy,
		mean: mean,
		median: median,
		memoizeWith: memoizeWith,
		merge: merge,
		mergeAll: mergeAll,
		mergeDeepLeft: mergeDeepLeft,
		mergeDeepRight: mergeDeepRight,
		mergeDeepWith: mergeDeepWith,
		mergeDeepWithKey: mergeDeepWithKey,
		mergeLeft: mergeLeft,
		mergeRight: mergeRight,
		mergeWith: mergeWith,
		mergeWithKey: mergeWithKey,
		min: min,
		minBy: minBy,
		modulo: modulo,
		move: move,
		multiply: multiply,
		nAry: nAry,
		negate: negate,
		none: none,
		not: not,
		nth: nth,
		nthArg: nthArg,
		o: o,
		objOf: objOf,
		of: of,
		omit: omit,
		once: once,
		or: or,
		otherwise: otherwise,
		over: over,
		pair: pair,
		partial: partial,
		partialRight: partialRight,
		partition: partition,
		path: path,
		paths: paths,
		pathEq: pathEq,
		pathOr: pathOr,
		pathSatisfies: pathSatisfies,
		pick: pick,
		pickAll: pickAll,
		pickBy: pickBy,
		pipe: pipe,
		pipeK: pipeK,
		pipeP: pipeP,
		pipeWith: pipeWith,
		pluck: pluck,
		prepend: prepend,
		product: product,
		project: project,
		prop: prop,
		propEq: propEq,
		propIs: propIs,
		propOr: propOr,
		propSatisfies: propSatisfies,
		props: props,
		range: range,
		reduce: reduce,
		reduceBy: reduceBy,
		reduceRight: reduceRight,
		reduceWhile: reduceWhile,
		reduced: reduced,
		reject: reject,
		remove: remove,
		repeat: repeat,
		replace: replace,
		reverse: reverse,
		scan: scan,
		sequence: sequence,
		set: set,
		slice: slice,
		sort: sort,
		sortBy: sortBy,
		sortWith: sortWith,
		split: split,
		splitAt: splitAt,
		splitEvery: splitEvery,
		splitWhen: splitWhen,
		startsWith: startsWith,
		subtract: subtract,
		sum: sum,
		symmetricDifference: symmetricDifference,
		symmetricDifferenceWith: symmetricDifferenceWith,
		tail: tail,
		take: take,
		takeLast: takeLast,
		takeLastWhile: takeLastWhile,
		takeWhile: takeWhile,
		tap: tap,
		test: test,
		andThen: andThen,
		times: times,
		toLower: toLower,
		toPairs: toPairs,
		toPairsIn: toPairsIn,
		toString: toString$1,
		toUpper: toUpper,
		transduce: transduce,
		transpose: transpose,
		traverse: traverse,
		trim: trim,
		tryCatch: tryCatch,
		type: type,
		unapply: unapply,
		unary: unary,
		uncurryN: uncurryN,
		unfold: unfold,
		union: union,
		unionWith: unionWith,
		uniq: uniq,
		uniqBy: uniqBy,
		uniqWith: uniqWith,
		unless: unless,
		unnest: unnest,
		until: until,
		update: update,
		useWith: useWith,
		values: values,
		valuesIn: valuesIn,
		view: view,
		when: when,
		where: where,
		whereEq: whereEq,
		without: without$1,
		xor: xor,
		xprod: xprod,
		zip: zip,
		zipObj: zipObj,
		zipWith: zipWith,
		thunkify: thunkify
	});

	// ================= MIDI Messages predicates ======================

	let seemsMIDIMessageAsArray =
	  allPass ([either (is (Array)) (is (Uint8Array)),
	            complement (isEmpty),
	            all (is (Number))]);

	let seemsMIDIMessageAsObject =
	  allPass ([is (Object),
	            propEq ('type', 'midimessage'),
	            propSatisfies (seemsMIDIMessageAsArray, 'data')]);

	let seemsMIDIMessage = 
	  either (seemsMIDIMessageAsArray) (seemsMIDIMessageAsObject);

	let seemsArrayOfMIDIMessagesAsArrays =
	  both (is (Array))
	       (all (seemsMIDIMessageAsArray));

	let seemsArrayOfMIDIMessagesAsObjects = 
	  both (is (Array))
	       (all (seemsMIDIMessageAsObject));

	let dataEq = curry ((d, m) =>
	  seemsMIDIMessageAsArray (m) ?
	    equals (d) (m)
	    : seemsMIDIMessage (m) ?
	      dataEq (d) (m.data)
	      : false );

	let byteEq = curry ((n, d, m) =>
	  seemsMIDIMessageAsArray (m) ?
	    pathEq ([n]) (d) (m)
	    : seemsMIDIMessage (m) ?
	      byteEq (n) (d) (m.data)
	      : false );

	let dataEqBy = curry ((p, m) =>
	  seemsMIDIMessageAsArray (m) ?
	    p (m)
	    : seemsMIDIMessage (m) ?
	      dataEqBy (p) (m.data)
	      : false );

	let byteEqBy = curry ((n, p, m) =>
	  seemsMIDIMessageAsArray (m) ?
	    p (path ([n]) (m))
	    : seemsMIDIMessage (m) ?
	      byteEqBy (n) (p) (m.data)
	      : false );


	// ------------------ Channel Voice Messages -----------------------

	let isChannelVoiceMessageOfType = (t) =>
	  both (seemsMIDIMessage)
	       (dataEqBy 
	         (p => includes (t, [8, 9, 10, 11, 14]) ?
	                 length(p) === 3 && p[0] >> 4 === t
	                 : length(p) === 2 && p[0] >> 4 === t));

	let isNoteOff = 
	  isChannelVoiceMessageOfType (8);

	let isNoteOn = 
	  isChannelVoiceMessageOfType (9);

	let asNoteOn = 
	  both (isNoteOn) (complement (byteEq (2) (0)));

	let asNoteOff =
	  either (isNoteOff) (both (isNoteOn) (byteEq (2) (0)));

	let isNote = 
	  either (isNoteOff) (isNoteOn);

	let hasVelocity = 
	  isNote;

	let velocityEq = (v) =>
	  both (hasVelocity)
	       (byteEq (2) (v));

	let isPolyPressure = 
	  isChannelVoiceMessageOfType (10);

	let hasNote = 
	  either (isNote) (isPolyPressure);

	let noteEq = (n) => 
	  both (hasNote)
	       (byteEq (1) (n));

	let isControlChange = 
	  isChannelVoiceMessageOfType (11);

	let controlEq = (c) =>
	  both (isControlChange)
	       (byteEq (1) (c));

	let valueEq = (v) =>
	  both (isControlChange)
	       (byteEq (2) (v));

	let isProgramChange = 
	  isChannelVoiceMessageOfType (12);

	let programEq = (p) =>
	  both (isProgramChange)
	       (byteEq (1) (p));

	let isChannelPressure = 
	  isChannelVoiceMessageOfType (13);

	let hasPressure =
	  either (isPolyPressure) (isChannelPressure);

	let pressureEq = (p) =>
	  cond ([
	    [isPolyPressure, byteEq (2) (p)],
	    [isChannelPressure, byteEq (1) (p)],
	    [T, F]]);

	let isPitchBend = 
	  isChannelVoiceMessageOfType (14);

	let pitchBendEq = (pb) =>
	  allPass ([isPitchBend,
	            byteEq (1) (pb & 0x7F),
	            byteEq (2) (pb >> 7)]);


	// ------------ Channel Mode Messages ----------------

	let isChannelModeMessage = (d1, d2) =>
	  d2 === undefined ?
	    both (isControlChange) (byteEq (1) (d1))
	    : allPass ([isControlChange,
	                byteEq (1) (d1),
	                byteEq (2) (d2)]);

	let isAllSoundOff = 
	  isChannelModeMessage (120, 0);

	let isResetAll = 
	  isChannelModeMessage (121);

	let isLocalControlOff = 
	  isChannelModeMessage (122, 0);

	let isLocalControlOn = 
	  isChannelModeMessage (122, 127);

	let isAllNotesOff = 
	  isChannelModeMessage (123, 0);

	let isOmniModeOff =  
	  isChannelModeMessage (124, 0);

	let isOmniModeOn = 
	  isChannelModeMessage (125, 0);

	let isMonoModeOn = 
	  isChannelModeMessage (126);

	let isPolyModeOn = 
	  isChannelModeMessage (127, 0);

	let isChannelMode =
	  anyPass ([isAllSoundOff,
	            isResetAll,
	            isLocalControlOff,
	            isLocalControlOn,
	            isAllNotesOff,
	            isOmniModeOff,
	            isOmniModeOn,
	            isMonoModeOn,
	            isPolyModeOn]);

	let isChannelVoice =
	  anyPass ([isNote,
	            isPolyPressure,
	            both (isControlChange) 
	                 (complement (isChannelMode)),
	            isProgramChange,
	            isChannelPressure,
	            isPitchBend]);

	// -------------------- RPN & NRPN predicates ----------------------

	let isRPN =
	  allPass ([seemsMIDIMessage,
	            byteEq (1) (101),
	            byteEq (4) (100),
	            byteEq (7) (6),
	            byteEq (-5) (101),
	            byteEq (-4) (127),
	            byteEq (-2) (100),
	            byteEq (-1) (127)]);

	let isNRPN =
	  allPass ([seemsMIDIMessage,
	            byteEq (1) (99),
	            byteEq (4) (98),
	            byteEq (7) (6),
	            byteEq (-5) (101),
	            byteEq (-4) (127),
	            byteEq (-2) (100),
	            byteEq (-1) (127)]);

	let isChannelMessage =
	  anyPass ([ isChannelMode, isChannelVoice, isRPN, isNRPN ]);

	let isOnChannel = (ch) =>
	  both (isChannelMessage)
	       (byteEqBy (0) (v => (v & 0xF) === ch));

	let isOnChannels = (chs) =>
	  both (isChannelMessage)
	       (byteEqBy (0) (v => includes (v & 0xF, chs)));

	// =============== System Common message predicates ================

	let isSystemExclusive = 
	  allPass ([seemsMIDIMessage,
	            byteEq (0) (240),
	            byteEq (-1) (247)]);

	let isMIDITimeCodeQuarterFrame =
	  both (seemsMIDIMessage) (byteEq (0) (241));

	let isSongPositionPointer =
	  both (seemsMIDIMessage) (byteEq (0) (242));

	let isSongSelect =
	  both (seemsMIDIMessage) (byteEq (0) (243));

	let isTuneRequest =
	  both (seemsMIDIMessage) (dataEq ([246]));

	let isEndOfExclusive =
	  both (seemsMIDIMessage) (dataEq ([247]));

	// ============= System Real Time message predicates ===============

	let isMIDIClock =
	  both (seemsMIDIMessage) (dataEq ([248]));

	let isStart =
	  both (seemsMIDIMessage) (dataEq ([250]));

	let isContinue =
	  both (seemsMIDIMessage) (dataEq ([251]));

	let isStop =
	  both (seemsMIDIMessage) (dataEq ([252]));

	let isActiveSensing =
	  both (seemsMIDIMessage) (dataEq ([254]));

	// Reset and MIDI File Meta Events have the same value on
	// their first byte: 0xFF.
	// Reset message is just one byte long and MIDI File Meta
	// Events are several bytes long. It's not possible to
	// differentiate them based on first byte, it's the
	// programmer responsability to only use isReset outside
	// MIDI Files and seemsMIDIMetaEvent inside MIDI Files.
	let isReset =
	  both (either (seemsMIDIMessage) (seemsMIDIMessageAsArray))
	       (dataEq ([255]));


	// ============== MIDI File Meta Events predicates =================

	// TODO: Check that length is correct !!!
	let seemsMIDIMetaEventArray =
	  allPass ([is (Array),
	            complement (isEmpty),
	            all (is (Number)),
	            pathEq ([0]) (255)]);

	let seemsMIDIMetaEventObject =
	  allPass ([is (Object),
	            propEq ('type', 'metaevent'),
	            has ('metaType'),
	            has ('data')]);

	let seemsMIDIMetaEvent =
	  either (seemsMIDIMetaEventArray) (seemsMIDIMetaEventObject);

	let metaTypeEq = curry((t, m) => 
	  seemsMIDIMetaEventArray (m) ?
	    pathEq ([1]) (t) (m)
	    : seemsMIDIMetaEventObject (m) ?
	      metaTypeEq (t, m.data) 
	      : false);

	let isTempoChange = 
	  both (seemsMIDIMetaEvent) (metaTypeEq (81));

	// =================== MIDI Message creation =======================

	// Converts a byte array to a MIDIMessageEvent compatible object.

	let msg = (data, timeStamp = 0, deltaTime = 0) => 
	({ 
		type: 'midimessage', 
		timeStamp: timeStamp,
		deltaTime: deltaTime,
		data: [ ...data ],
	});

	let from = (msg) =>
	  is (Array, msg) ?
	    assoc ('data')
	          (flatten (map$1 (prop ('data'), msg)))
	          (clone (head$1 (msg)))
	    : clone (msg);

	// =================== MIDI Messages definition ====================

	// -------------- Channel Voice messages generation ----------------

	let off = (n, v = 96, ch = 0) => 
	  msg([128 + ch, n, v]);

	let on = (n, v = 96, ch = 0) => 
	  msg([144 + ch, n, v]);

	let pp = (n, p = 96, ch = 0) => 
	  msg([160 + ch, n, p]);

	let cc = (c, v, ch = 0) => 
	  msg([176 + ch, c, v]);

	let pc = (p, ch = 0) => 
	  msg([192 + ch, p]);

	let cp = (p, ch = 0) => 
	  msg([208 + ch, p]);

	let pb = (v, ch = 0) => 
	  msg([224 + ch, v & 0x7F, v >> 7]);

	let rpn = (n, v, ch = 0) => 
	  from ([
	  	cc (101, n >> 7, ch),
	  	cc (100, n % 128, ch), 
	  	cc (6, v >> 7, ch),
	  	cc (38, v % 128, ch),
	  	cc (101, 127, ch),
	  	cc (100, 127, ch)
	  ]);

	let nrpn = (n, v, ch = 0) => 
	from([
		cc(99, n >> 7, ch),
		cc(98, n % 128, ch),
		cc(6, v >> 7, ch),
		cc(38, v % 128, ch),
		cc(101, 127, ch),
		cc(100, 127, ch)
	]);

	// -------------- System common messages generation ----------------

	let syx = (b) => 
	  msg([240, ...b, 247]);

	let tc = (t, v) => 
	  msg([241, (t << 4) + v]);

	let spp = (b) => 
	  msg([242, b % 128, b >> 7]);

	let ss = (s) => 
	  msg([243, s]);

	let tun = () => 
	  msg([246]);

	// ------------- System real time messages generation --------------

	let mc = () => 
	  msg([248]);

	let start = () => 
	  msg([250]);

	let cont = () => 
	  msg([251]);

	let stop = () => 
	  msg([252]);

	let as = () => 
	  msg([254]);

	let rst = () => 
	  msg([255]);

	let panic = () => 
	{
		let panic_msgs = [];
		for (let ch = 0; ch < 16; ch++) {
			panic_msgs.push (cc (64, 0, ch));
			panic_msgs.push (cc (120, 0, ch));
			panic_msgs.push (cc (123, 0, ch));
			for (let n = 0; n < 128; n++) {
				panic_msgs.push (off (n, 0, ch));
			}
		}

		return from(panic_msgs)
	};

	// ------------- Generic property modification helpers -------------

	let getByte = curry ((n, msg) =>
	  seemsMIDIMessageAsArray (msg) ?
	    msg[n]
	    : msg.data [n] 
	);

	let setByte = curry ((n, v, msg) => 
	  seemsMIDIMessageAsArray (msg) ?
	    [...slice (0, n, msg), v, ...slice (n + 1, Infinity, msg)]
	    : assoc ('data')
	            (setByte (n, v, msg.data))
	            (clone (msg))
	);


	// --------------------------- Lenses ------------------------------

	let lensWhen = curry ((p, v, s) =>
	  lens (
	    (msg) => p (msg) ? v (msg) : undefined,
	    (v, msg) => p (msg) ? s (v, msg) : msg)
	);

	let timeStamp =
	  lensWhen (seemsMIDIMessageAsObject) 
	           (prop ('timeStamp')) 
	           (assoc ('timeStamp'));

	let deltaTime =
	  lensWhen (seemsMIDIMessageAsObject)
	           (prop ('deltaTime'))
	           (assoc ('deltaTime'));

	let channel =
	  lensWhen (isChannelMessage) 
	           ((m) => getByte (0) (m) & 0xF)
	           ((v, m) => setByte (0) ((getByte (0, m) & 0xF0) + v) (m));

	let note =
	  lensWhen (hasNote) (getByte (1)) (setByte (1));

	let velocity =
	  lensWhen (hasVelocity) (getByte (2)) (setByte (2));

	let pressure =
	  lensWhen (hasPressure)
	           (ifElse (isPolyPressure) (getByte (2)) (getByte (1)))
	           ((v, m) => isPolyPressure (m) ?
	                        setByte (2) (v) (m)
	                        : setByte (1) (v) (m));

	let control =
	  lensWhen (isControlChange) (getByte (1)) (setByte (1));

	let value =
	  lensWhen (isControlChange) (getByte (2)) (setByte (2));

	let program =
	  lensWhen (isProgramChange) (getByte (1)) (setByte (1));

	let pitchBend =
	  lensWhen (isPitchBend)
	           ((m) => { /* TODO */ })
	           ((v, m) => { /* TODO */ });

	// ----------------- MIDI Clock message generation -----------------

	let lookAheadClock$1 = 
	  curry ((time_division, bpm, last_tick_time, now, look_ahead) => {
	    let ms_per_tick = 60000 / (bpm * time_division);
	    let look_ahead_end = now + look_ahead;

	    let events = [];

	    last_tick_time = last_tick_time + ms_per_tick;
	    while (last_tick_time < look_ahead_end) {
	      if (last_tick_time >= now) {
	        events.push (set (timeStamp) (last_tick_time) (mc ()));
	      }
	      last_tick_time = last_tick_time + ms_per_tick;
	    }

	    return events
	  });

	// ------------------------- Predicates ----------------------------

	let seemsMIDIFile = 
	  allPass ([is (Object),
	            has ('formatType'),
	            has ('timeDivision'),
	            has ('tracks'),
	            has ('track'),
	            propIs (Array, 'track')]);

	let seemsMIDILoop =
	  both (seemsMIDIFile)
	       (propEq ('loop', true));

	// -------------------------- Helpers ------------------------------

	let withAbsoluteDeltaTimes =
		evolve ({
			track: map$1 (
				evolve ({
					event: pipe (
						scan 
	            (([tick, _], msg) => [tick + msg.deltaTime, msg])
	            ([0, null]),
						map$1
	            (([tick, msg]) => 
	              msg !== null ?
	                from (mergeLeft ({ absoluteDeltaTime: tick }, msg))
	                : null),
						tail)}))});

	let mergeTracks =
		evolve ({
			tracks: always (1),
			track: pipe (
				reduce ((acc, v) => concat(acc, v.event), []),
	      map$1 (v => from (v)),
				objOf ('event'),
				append (__, []))});

	let sortEvents = 
	    evolve ({
			track: pipe (
				map$1 (v => 
	        pipe (
	          sort ((a, b) => a.absoluteDeltaTime - b.absoluteDeltaTime),
	          map$1 (v => from (v))
	        )(v.event)),
				head$1,
				objOf ('event'),
				append (__, []))});

	let filterIndexed = 
	  addIndex$1 (filter);

	let filterTracks =	(tracks, midiFile) => 
			evolve ({
				tracks: () => tracks.length,
				track: pipe (
	        filterIndexed ((v, k) => tracks.includes (k)),
	        map$1 (v => objOf ('event', map$1 (from, v.event)))
	      )
			}, midiFile);

	// TODO
	//export let addTrack/s = (midiFile, tracks) => 

	// TODO
	//export let changeTimeDivision = (midiFile, newTimeDivision) =>

	// TODO
	// export let commonTimeDivision = (midiFile1, midiFile2, ...) => 

	let createMIDIFile =	(track, timeDivision = 24) => ({
	  formatType: 1,
		tracks: 1,
		timeDivision: timeDivision,
		track: [{ event: map$1 (from, track) }]
	});

	let createLoop =	(midifile) => ({
	  ...midifile,
	  loop: true,
	  track: map$1 (
	    pipe (
	      prop ('event'),
	      map$1 (from),
	      objOf ('event')
	    )
	  ) (midifile.track)
	});

	// TODO: MIDIPlayer should have state, extract inner function
	// to be easily testeable.
	let MIDIFilePlayer$1 = (midifile, tick, midi_clocks) => {
	  let playable = pipe (
	    withAbsoluteDeltaTimes,
	    mergeTracks,
	    sortEvents
	  ) (midifile);

	  let track = playable.track [0].event;
	  let loop = playable.loop;
	  let maxTick = last$1 (track).absoluteDeltaTime;

	  let func = (tick, midi_clocks) => 
	    slice 
	      (0, 2)
	      (reduceWhile 
	        (([events, tick, bpm_not_found], midi_clock) => bpm_not_found)
	        (([events, tick, bpm_not_found], midi_clock) => {
	          let tick_events = pipe (
	            filter (e => 
	              e.absoluteDeltaTime === tick ||
	              (loop &&  e.absoluteDeltaTime === (tick % maxTick))),
	            map$1 (set (timeStamp) (midi_clock.timeStamp)),
	          ) (track);

	          return [
	            concat (events, tick_events), 
	            loop ? (tick + 1) % maxTick : tick + 1,
	            isEmpty (filter (isTempoChange) (tick_events))
	          ]
	        })
	        ([[], tick, true])
	        (midi_clocks));

	    if (tick === undefined || midi_clocks === undefined) 
	      return func
	    else
	      return func (tick, midi_clocks)
	};

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isFunction(x) {
	    return typeof x === 'function';
	}
	//# sourceMappingURL=isFunction.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var _enable_super_gross_mode_that_will_cause_bad_things = false;
	var config = {
	    Promise: undefined,
	    set useDeprecatedSynchronousErrorHandling(value) {
	        if (value) {
	            var error = /*@__PURE__*/ new Error();
	            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
	        }
	        _enable_super_gross_mode_that_will_cause_bad_things = value;
	    },
	    get useDeprecatedSynchronousErrorHandling() {
	        return _enable_super_gross_mode_that_will_cause_bad_things;
	    },
	};
	//# sourceMappingURL=config.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function hostReportError(err) {
	    setTimeout(function () { throw err; }, 0);
	}
	//# sourceMappingURL=hostReportError.js.map

	/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
	var empty$1 = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) {
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            throw err;
	        }
	        else {
	            hostReportError(err);
	        }
	    },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var isArray = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();
	//# sourceMappingURL=isArray.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isObject(x) {
	    return x !== null && typeof x === 'object';
	}
	//# sourceMappingURL=isObject.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
	    function UnsubscriptionErrorImpl(errors) {
	        Error.call(this);
	        this.message = errors ?
	            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
	        this.name = 'UnsubscriptionError';
	        this.errors = errors;
	        return this;
	    }
	    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return UnsubscriptionErrorImpl;
	})();
	var UnsubscriptionError = UnsubscriptionErrorImpl;
	//# sourceMappingURL=UnsubscriptionError.js.map

	/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */
	var Subscription = /*@__PURE__*/ (function () {
	    function Subscription(unsubscribe) {
	        this.closed = false;
	        this._parentOrParents = null;
	        this._subscriptions = null;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    Subscription.prototype.unsubscribe = function () {
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        var _a = this, _parentOrParents = _a._parentOrParents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this.closed = true;
	        this._parentOrParents = null;
	        this._subscriptions = null;
	        if (_parentOrParents instanceof Subscription) {
	            _parentOrParents.remove(this);
	        }
	        else if (_parentOrParents !== null) {
	            for (var index = 0; index < _parentOrParents.length; ++index) {
	                var parent_1 = _parentOrParents[index];
	                parent_1.remove(this);
	            }
	        }
	        if (isFunction(_unsubscribe)) {
	            try {
	                _unsubscribe.call(this);
	            }
	            catch (e) {
	                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
	            }
	        }
	        if (isArray(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject(sub)) {
	                    try {
	                        sub.unsubscribe();
	                    }
	                    catch (e) {
	                        errors = errors || [];
	                        if (e instanceof UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
	                        }
	                        else {
	                            errors.push(e);
	                        }
	                    }
	                }
	            }
	        }
	        if (errors) {
	            throw new UnsubscriptionError(errors);
	        }
	    };
	    Subscription.prototype.add = function (teardown) {
	        var subscription = teardown;
	        if (!teardown) {
	            return Subscription.EMPTY;
	        }
	        switch (typeof teardown) {
	            case 'function':
	                subscription = new Subscription(teardown);
	            case 'object':
	                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
	                    return subscription;
	                }
	                else if (this.closed) {
	                    subscription.unsubscribe();
	                    return subscription;
	                }
	                else if (!(subscription instanceof Subscription)) {
	                    var tmp = subscription;
	                    subscription = new Subscription();
	                    subscription._subscriptions = [tmp];
	                }
	                break;
	            default: {
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	            }
	        }
	        var _parentOrParents = subscription._parentOrParents;
	        if (_parentOrParents === null) {
	            subscription._parentOrParents = this;
	        }
	        else if (_parentOrParents instanceof Subscription) {
	            if (_parentOrParents === this) {
	                return subscription;
	            }
	            subscription._parentOrParents = [_parentOrParents, this];
	        }
	        else if (_parentOrParents.indexOf(this) === -1) {
	            _parentOrParents.push(this);
	        }
	        else {
	            return subscription;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions === null) {
	            this._subscriptions = [subscription];
	        }
	        else {
	            subscriptions.push(subscription);
	        }
	        return subscription;
	    };
	    Subscription.prototype.remove = function (subscription) {
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
	}
	//# sourceMappingURL=Subscription.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var rxSubscriber = /*@__PURE__*/ (function () {
	    return typeof Symbol === 'function'
	        ? /*@__PURE__*/ Symbol('rxSubscriber')
	        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
	})();
	//# sourceMappingURL=rxSubscriber.js.map

	/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
	var Subscriber = /*@__PURE__*/ (function (_super) {
	    __extends(Subscriber, _super);
	    function Subscriber(destinationOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this.syncErrorValue = null;
	        _this.syncErrorThrown = false;
	        _this.syncErrorThrowable = false;
	        _this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                _this.destination = empty$1;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    _this.destination = empty$1;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
	                        _this.destination = destinationOrNext;
	                        destinationOrNext.add(_this);
	                    }
	                    else {
	                        _this.syncErrorThrowable = true;
	                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                _this.syncErrorThrowable = true;
	                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
	                break;
	        }
	        return _this;
	    }
	    Subscriber.prototype[rxSubscriber] = function () { return this; };
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    Subscriber.prototype._unsubscribeAndRecycle = function () {
	        var _parentOrParents = this._parentOrParents;
	        this._parentOrParents = null;
	        this.unsubscribe();
	        this.closed = false;
	        this.isStopped = false;
	        this._parentOrParents = _parentOrParents;
	        return this;
	    };
	    return Subscriber;
	}(Subscription));
	var SafeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this._parentSubscriber = _parentSubscriber;
	        var next;
	        var context = _this;
	        if (isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (observerOrNext !== empty$1) {
	                context = Object.create(observerOrNext);
	                if (isFunction(context.unsubscribe)) {
	                    _this.add(context.unsubscribe.bind(context));
	                }
	                context.unsubscribe = _this.unsubscribe.bind(_this);
	            }
	        }
	        _this._context = context;
	        _this._next = next;
	        _this._error = error;
	        _this._complete = complete;
	        return _this;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
	            if (this._error) {
	                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parentSubscriber.syncErrorThrowable) {
	                this.unsubscribe();
	                if (useDeprecatedSynchronousErrorHandling) {
	                    throw err;
	                }
	                hostReportError(err);
	            }
	            else {
	                if (useDeprecatedSynchronousErrorHandling) {
	                    _parentSubscriber.syncErrorValue = err;
	                    _parentSubscriber.syncErrorThrown = true;
	                }
	                else {
	                    hostReportError(err);
	                }
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        var _this = this;
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._complete) {
	                var wrappedComplete = function () { return _this._complete.call(_this._context); };
	                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(wrappedComplete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                throw err;
	            }
	            else {
	                hostReportError(err);
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        if (!config.useDeprecatedSynchronousErrorHandling) {
	            throw new Error('bad call');
	        }
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                parent.syncErrorValue = err;
	                parent.syncErrorThrown = true;
	                return true;
	            }
	            else {
	                hostReportError(err);
	                return true;
	            }
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parentSubscriber = this._parentSubscriber;
	        this._context = null;
	        this._parentSubscriber = null;
	        _parentSubscriber.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

	/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
	function canReportError(observer) {
	    while (observer) {
	        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
	        if (closed_1 || isStopped) {
	            return false;
	        }
	        else if (destination && destination instanceof Subscriber) {
	            observer = destination;
	        }
	        else {
	            observer = null;
	        }
	    }
	    return true;
	}
	//# sourceMappingURL=canReportError.js.map

	/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber]) {
	            return nextOrObserver[rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber(empty$1);
	    }
	    return new Subscriber(nextOrObserver, error, complete);
	}
	//# sourceMappingURL=toSubscriber.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();
	//# sourceMappingURL=observable.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function identity$1(x) {
	    return x;
	}
	//# sourceMappingURL=identity.js.map

	/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */
	function pipe$1() {
	    var fns = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        fns[_i] = arguments[_i];
	    }
	    return pipeFromArray(fns);
	}
	function pipeFromArray(fns) {
	    if (fns.length === 0) {
	        return identity$1;
	    }
	    if (fns.length === 1) {
	        return fns[0];
	    }
	    return function piped(input) {
	        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
	    };
	}
	//# sourceMappingURL=pipe.js.map

	/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
	var Observable = /*@__PURE__*/ (function () {
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            sink.add(operator.call(sink, this.source));
	        }
	        else {
	            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
	                this._subscribe(sink) :
	                this._trySubscribe(sink));
	        }
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            if (sink.syncErrorThrowable) {
	                sink.syncErrorThrowable = false;
	                if (sink.syncErrorThrown) {
	                    throw sink.syncErrorValue;
	                }
	            }
	        }
	        return sink;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                sink.syncErrorThrown = true;
	                sink.syncErrorValue = err;
	            }
	            if (canReportError(sink)) {
	                sink.error(err);
	            }
	            else {
	                console.warn(err);
	            }
	        }
	    };
	    Observable.prototype.forEach = function (next, promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                try {
	                    next(value);
	                }
	                catch (err) {
	                    reject(err);
	                    if (subscription) {
	                        subscription.unsubscribe();
	                    }
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        return source && source.subscribe(subscriber);
	    };
	    Observable.prototype[observable] = function () {
	        return this;
	    };
	    Observable.prototype.pipe = function () {
	        var operations = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operations[_i] = arguments[_i];
	        }
	        if (operations.length === 0) {
	            return this;
	        }
	        return pipeFromArray(operations)(this);
	    };
	    Observable.prototype.toPromise = function (promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var value;
	            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	        });
	    };
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	function getPromiseCtor(promiseCtor) {
	    if (!promiseCtor) {
	        promiseCtor = config.Promise || Promise;
	    }
	    if (!promiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return promiseCtor;
	}
	//# sourceMappingURL=Observable.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {
	    function ObjectUnsubscribedErrorImpl() {
	        Error.call(this);
	        this.message = 'object unsubscribed';
	        this.name = 'ObjectUnsubscribedError';
	        return this;
	    }
	    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return ObjectUnsubscribedErrorImpl;
	})();
	var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

	/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
	var SubjectSubscription = /*@__PURE__*/ (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        var _this = _super.call(this) || this;
	        _this.subject = subject;
	        _this.subscriber = subscriber;
	        _this.closed = false;
	        return _this;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription));
	//# sourceMappingURL=SubjectSubscription.js.map

	/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
	var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        return _this;
	    }
	    return SubjectSubscriber;
	}(Subscriber));
	var Subject = /*@__PURE__*/ (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        var _this = _super.call(this) || this;
	        _this.observers = [];
	        _this.closed = false;
	        _this.isStopped = false;
	        _this.hasError = false;
	        _this.thrownError = null;
	        return _this;
	    }
	    Subject.prototype[rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._trySubscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else {
	            return _super.prototype._trySubscribe.call(this, subscriber);
	        }
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable));
	var AnonymousSubject = /*@__PURE__*/ (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        var _this = _super.call(this) || this;
	        _this.destination = destination;
	        _this.source = source;
	        return _this;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	//# sourceMappingURL=Subject.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function refCount() {
	    return function refCountOperatorFunction(source) {
	        return source.lift(new RefCountOperator(source));
	    };
	}
	var RefCountOperator = /*@__PURE__*/ (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        var _this = _super.call(this, destination) || this;
	        _this.connectable = connectable;
	        return _this;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber));
	//# sourceMappingURL=refCount.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
	var ConnectableObservable = /*@__PURE__*/ (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subjectFactory = subjectFactory;
	        _this._refCount = 0;
	        _this._isComplete = false;
	        return _this;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            this._isComplete = false;
	            connection = this._connection = new Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription.EMPTY;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return refCount()(this);
	    };
	    return ConnectableObservable;
	}(Observable));
	var connectableObservableDescriptor = /*@__PURE__*/ (function () {
	    var connectableProto = ConnectableObservable.prototype;
	    return {
	        operator: { value: null },
	        _refCount: { value: 0, writable: true },
	        _subject: { value: null, writable: true },
	        _connection: { value: null, writable: true },
	        _subscribe: { value: connectableProto._subscribe },
	        _isComplete: { value: connectableProto._isComplete, writable: true },
	        getSubject: { value: connectableProto.getSubject },
	        connect: { value: connectableProto.connect },
	        refCount: { value: connectableProto.refCount }
	    };
	})();
	var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        var _this = _super.call(this, destination) || this;
	        _this.connectable = connectable;
	        return _this;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this.connectable._isComplete = true;
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(SubjectSubscriber));
	//# sourceMappingURL=ConnectableObservable.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */
	function groupBy$1(keySelector, elementSelector, durationSelector, subjectSelector) {
	    return function (source) {
	        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
	    };
	}
	var GroupByOperator = /*@__PURE__*/ (function () {
	    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
	        this.keySelector = keySelector;
	        this.elementSelector = elementSelector;
	        this.durationSelector = durationSelector;
	        this.subjectSelector = subjectSelector;
	    }
	    GroupByOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
	    };
	    return GroupByOperator;
	}());
	var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(GroupBySubscriber, _super);
	    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.elementSelector = elementSelector;
	        _this.durationSelector = durationSelector;
	        _this.subjectSelector = subjectSelector;
	        _this.groups = null;
	        _this.attemptedToUnsubscribe = false;
	        _this.count = 0;
	        return _this;
	    }
	    GroupBySubscriber.prototype._next = function (value) {
	        var key;
	        try {
	            key = this.keySelector(value);
	        }
	        catch (err) {
	            this.error(err);
	            return;
	        }
	        this._group(value, key);
	    };
	    GroupBySubscriber.prototype._group = function (value, key) {
	        var groups = this.groups;
	        if (!groups) {
	            groups = this.groups = new Map();
	        }
	        var group = groups.get(key);
	        var element;
	        if (this.elementSelector) {
	            try {
	                element = this.elementSelector(value);
	            }
	            catch (err) {
	                this.error(err);
	            }
	        }
	        else {
	            element = value;
	        }
	        if (!group) {
	            group = (this.subjectSelector ? this.subjectSelector() : new Subject());
	            groups.set(key, group);
	            var groupedObservable = new GroupedObservable(key, group, this);
	            this.destination.next(groupedObservable);
	            if (this.durationSelector) {
	                var duration = void 0;
	                try {
	                    duration = this.durationSelector(new GroupedObservable(key, group));
	                }
	                catch (err) {
	                    this.error(err);
	                    return;
	                }
	                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
	            }
	        }
	        if (!group.closed) {
	            group.next(element);
	        }
	    };
	    GroupBySubscriber.prototype._error = function (err) {
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.error(err);
	            });
	            groups.clear();
	        }
	        this.destination.error(err);
	    };
	    GroupBySubscriber.prototype._complete = function () {
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.complete();
	            });
	            groups.clear();
	        }
	        this.destination.complete();
	    };
	    GroupBySubscriber.prototype.removeGroup = function (key) {
	        this.groups.delete(key);
	    };
	    GroupBySubscriber.prototype.unsubscribe = function () {
	        if (!this.closed) {
	            this.attemptedToUnsubscribe = true;
	            if (this.count === 0) {
	                _super.prototype.unsubscribe.call(this);
	            }
	        }
	    };
	    return GroupBySubscriber;
	}(Subscriber));
	var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(GroupDurationSubscriber, _super);
	    function GroupDurationSubscriber(key, group, parent) {
	        var _this = _super.call(this, group) || this;
	        _this.key = key;
	        _this.group = group;
	        _this.parent = parent;
	        return _this;
	    }
	    GroupDurationSubscriber.prototype._next = function (value) {
	        this.complete();
	    };
	    GroupDurationSubscriber.prototype._unsubscribe = function () {
	        var _a = this, parent = _a.parent, key = _a.key;
	        this.key = this.parent = null;
	        if (parent) {
	            parent.removeGroup(key);
	        }
	    };
	    return GroupDurationSubscriber;
	}(Subscriber));
	var GroupedObservable = /*@__PURE__*/ (function (_super) {
	    __extends(GroupedObservable, _super);
	    function GroupedObservable(key, groupSubject, refCountSubscription) {
	        var _this = _super.call(this) || this;
	        _this.key = key;
	        _this.groupSubject = groupSubject;
	        _this.refCountSubscription = refCountSubscription;
	        return _this;
	    }
	    GroupedObservable.prototype._subscribe = function (subscriber) {
	        var subscription = new Subscription();
	        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
	        if (refCountSubscription && !refCountSubscription.closed) {
	            subscription.add(new InnerRefCountSubscription(refCountSubscription));
	        }
	        subscription.add(groupSubject.subscribe(subscriber));
	        return subscription;
	    };
	    return GroupedObservable;
	}(Observable));
	var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
	    __extends(InnerRefCountSubscription, _super);
	    function InnerRefCountSubscription(parent) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        parent.count++;
	        return _this;
	    }
	    InnerRefCountSubscription.prototype.unsubscribe = function () {
	        var parent = this.parent;
	        if (!parent.closed && !this.closed) {
	            _super.prototype.unsubscribe.call(this);
	            parent.count -= 1;
	            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
	                parent.unsubscribe();
	            }
	        }
	    };
	    return InnerRefCountSubscription;
	}(Subscription));
	//# sourceMappingURL=groupBy.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
	var BehaviorSubject = /*@__PURE__*/ (function (_super) {
	    __extends(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        var _this = _super.call(this) || this;
	        _this._value = _value;
	        return _this;
	    }
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        if (subscription && !subscription.closed) {
	            subscriber.next(this._value);
	        }
	        return subscription;
	    };
	    BehaviorSubject.prototype.getValue = function () {
	        if (this.hasError) {
	            throw this.thrownError;
	        }
	        else if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else {
	            return this._value;
	        }
	    };
	    BehaviorSubject.prototype.next = function (value) {
	        _super.prototype.next.call(this, this._value = value);
	    };
	    return BehaviorSubject;
	}(Subject));
	//# sourceMappingURL=BehaviorSubject.js.map

	/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
	var Action = /*@__PURE__*/ (function (_super) {
	    __extends(Action, _super);
	    function Action(scheduler, work) {
	        return _super.call(this) || this;
	    }
	    Action.prototype.schedule = function (state, delay) {
	        return this;
	    };
	    return Action;
	}(Subscription));
	//# sourceMappingURL=Action.js.map

	/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
	var AsyncAction = /*@__PURE__*/ (function (_super) {
	    __extends(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.pending = false;
	        return _this;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (this.closed) {
	            return this;
	        }
	        this.state = state;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.pending = true;
	        this.delay = delay;
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && this.delay === delay && this.pending === false) {
	            return id;
	        }
	        clearInterval(id);
	        return undefined;
	    };
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, delay) {
	        var errored = false;
	        var errorValue = undefined;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = !!e && e || new Error(e);
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype._unsubscribe = function () {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = null;
	        this.state = null;
	        this.pending = false;
	        this.scheduler = null;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, null);
	        }
	        this.delay = null;
	    };
	    return AsyncAction;
	}(Action));
	//# sourceMappingURL=AsyncAction.js.map

	/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
	var QueueAction = /*@__PURE__*/ (function (_super) {
	    __extends(QueueAction, _super);
	    function QueueAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    QueueAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay > 0) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.delay = delay;
	        this.state = state;
	        this.scheduler.flush(this);
	        return this;
	    };
	    QueueAction.prototype.execute = function (state, delay) {
	        return (delay > 0 || this.closed) ?
	            _super.prototype.execute.call(this, state, delay) :
	            this._execute(state, delay);
	    };
	    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        return scheduler.flush(this);
	    };
	    return QueueAction;
	}(AsyncAction));
	//# sourceMappingURL=QueueAction.js.map

	var Scheduler = /*@__PURE__*/ (function () {
	    function Scheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        this.SchedulerAction = SchedulerAction;
	        this.now = now;
	    }
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return new this.SchedulerAction(this, work).schedule(state, delay);
	    };
	    Scheduler.now = function () { return Date.now(); };
	    return Scheduler;
	}());
	//# sourceMappingURL=Scheduler.js.map

	/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
	var AsyncScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(AsyncScheduler, _super);
	    function AsyncScheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        var _this = _super.call(this, SchedulerAction, function () {
	            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
	                return AsyncScheduler.delegate.now();
	            }
	            else {
	                return now();
	            }
	        }) || this;
	        _this.actions = [];
	        _this.active = false;
	        _this.scheduled = undefined;
	        return _this;
	    }
	    AsyncScheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
	            return AsyncScheduler.delegate.schedule(work, delay, state);
	        }
	        else {
	            return _super.prototype.schedule.call(this, work, delay, state);
	        }
	    };
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this.active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this.active = true;
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (action = actions.shift());
	        this.active = false;
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler));
	//# sourceMappingURL=AsyncScheduler.js.map

	/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
	var QueueScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(QueueScheduler, _super);
	    function QueueScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return QueueScheduler;
	}(AsyncScheduler));
	//# sourceMappingURL=QueueScheduler.js.map

	/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
	var queueScheduler = /*@__PURE__*/ new QueueScheduler(QueueAction);
	var queue = queueScheduler;
	//# sourceMappingURL=queue.js.map

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
	function empty$2(scheduler) {
	    return scheduler ? emptyScheduled(scheduler) : EMPTY;
	}
	function emptyScheduled(scheduler) {
	    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
	}
	//# sourceMappingURL=empty.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isScheduler(value) {
	    return value && typeof value.schedule === 'function';
	}
	//# sourceMappingURL=isScheduler.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var subscribeToArray = function (array) {
	    return function (subscriber) {
	        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
	            subscriber.next(array[i]);
	        }
	        subscriber.complete();
	    };
	};
	//# sourceMappingURL=subscribeToArray.js.map

	/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
	function scheduleArray(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        var i = 0;
	        sub.add(scheduler.schedule(function () {
	            if (i === input.length) {
	                subscriber.complete();
	                return;
	            }
	            subscriber.next(input[i++]);
	            if (!subscriber.closed) {
	                sub.add(this.schedule());
	            }
	        }));
	        return sub;
	    });
	}
	//# sourceMappingURL=scheduleArray.js.map

	/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */
	function fromArray(input, scheduler) {
	    if (!scheduler) {
	        return new Observable(subscribeToArray(input));
	    }
	    else {
	        return scheduleArray(input, scheduler);
	    }
	}
	//# sourceMappingURL=fromArray.js.map

	/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */
	function of$1() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = args[args.length - 1];
	    if (isScheduler(scheduler)) {
	        args.pop();
	        return scheduleArray(args, scheduler);
	    }
	    else {
	        return fromArray(args);
	    }
	}
	//# sourceMappingURL=of.js.map

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function throwError(error, scheduler) {
	    if (!scheduler) {
	        return new Observable(function (subscriber) { return subscriber.error(error); });
	    }
	    else {
	        return new Observable(function (subscriber) { return scheduler.schedule(dispatch$1, 0, { error: error, subscriber: subscriber }); });
	    }
	}
	function dispatch$1(_a) {
	    var error = _a.error, subscriber = _a.subscriber;
	    subscriber.error(error);
	}
	//# sourceMappingURL=throwError.js.map

	/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
	var NotificationKind;
	/*@__PURE__*/ (function (NotificationKind) {
	    NotificationKind["NEXT"] = "N";
	    NotificationKind["ERROR"] = "E";
	    NotificationKind["COMPLETE"] = "C";
	})(NotificationKind || (NotificationKind = {}));
	var Notification = /*@__PURE__*/ (function () {
	    function Notification(kind, value, error) {
	        this.kind = kind;
	        this.value = value;
	        this.error = error;
	        this.hasValue = kind === 'N';
	    }
	    Notification.prototype.observe = function (observer) {
	        switch (this.kind) {
	            case 'N':
	                return observer.next && observer.next(this.value);
	            case 'E':
	                return observer.error && observer.error(this.error);
	            case 'C':
	                return observer.complete && observer.complete();
	        }
	    };
	    Notification.prototype.do = function (next, error, complete) {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return next && next(this.value);
	            case 'E':
	                return error && error(this.error);
	            case 'C':
	                return complete && complete();
	        }
	    };
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
	            return this.observe(nextOrObserver);
	        }
	        else {
	            return this.do(nextOrObserver, error, complete);
	        }
	    };
	    Notification.prototype.toObservable = function () {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return of$1(this.value);
	            case 'E':
	                return throwError(this.error);
	            case 'C':
	                return empty$2();
	        }
	        throw new Error('unexpected notification kind value');
	    };
	    Notification.createNext = function (value) {
	        if (typeof value !== 'undefined') {
	            return new Notification('N', value);
	        }
	        return Notification.undefinedValueNotification;
	    };
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    Notification.createComplete = function () {
	        return Notification.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    Notification.undefinedValueNotification = new Notification('N', undefined);
	    return Notification;
	}());
	//# sourceMappingURL=Notification.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
	function observeOn(scheduler, delay) {
	    if (delay === void 0) {
	        delay = 0;
	    }
	    return function observeOnOperatorFunction(source) {
	        return source.lift(new ObserveOnOperator(scheduler, delay));
	    };
	}
	var ObserveOnOperator = /*@__PURE__*/ (function () {
	    function ObserveOnOperator(scheduler, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
	    };
	    return ObserveOnOperator;
	}());
	var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ObserveOnSubscriber, _super);
	    function ObserveOnSubscriber(destination, scheduler, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        var _this = _super.call(this, destination) || this;
	        _this.scheduler = scheduler;
	        _this.delay = delay;
	        return _this;
	    }
	    ObserveOnSubscriber.dispatch = function (arg) {
	        var notification = arg.notification, destination = arg.destination;
	        notification.observe(destination);
	        this.unsubscribe();
	    };
	    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
	        var destination = this.destination;
	        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
	    };
	    ObserveOnSubscriber.prototype._next = function (value) {
	        this.scheduleMessage(Notification.createNext(value));
	    };
	    ObserveOnSubscriber.prototype._error = function (err) {
	        this.scheduleMessage(Notification.createError(err));
	        this.unsubscribe();
	    };
	    ObserveOnSubscriber.prototype._complete = function () {
	        this.scheduleMessage(Notification.createComplete());
	        this.unsubscribe();
	    };
	    return ObserveOnSubscriber;
	}(Subscriber));
	var ObserveOnMessage = /*@__PURE__*/ (function () {
	    function ObserveOnMessage(notification, destination) {
	        this.notification = notification;
	        this.destination = destination;
	    }
	    return ObserveOnMessage;
	}());
	//# sourceMappingURL=observeOn.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
	var ReplaySubject = /*@__PURE__*/ (function (_super) {
	    __extends(ReplaySubject, _super);
	    function ReplaySubject(bufferSize, windowTime, scheduler) {
	        if (bufferSize === void 0) {
	            bufferSize = Number.POSITIVE_INFINITY;
	        }
	        if (windowTime === void 0) {
	            windowTime = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this) || this;
	        _this.scheduler = scheduler;
	        _this._events = [];
	        _this._infiniteTimeWindow = false;
	        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
	        _this._windowTime = windowTime < 1 ? 1 : windowTime;
	        if (windowTime === Number.POSITIVE_INFINITY) {
	            _this._infiniteTimeWindow = true;
	            _this.next = _this.nextInfiniteTimeWindow;
	        }
	        else {
	            _this.next = _this.nextTimeWindow;
	        }
	        return _this;
	    }
	    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
	        var _events = this._events;
	        _events.push(value);
	        if (_events.length > this._bufferSize) {
	            _events.shift();
	        }
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype.nextTimeWindow = function (value) {
	        this._events.push(new ReplayEvent(this._getNow(), value));
	        this._trimBufferThenGetEvents();
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype._subscribe = function (subscriber) {
	        var _infiniteTimeWindow = this._infiniteTimeWindow;
	        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
	        var scheduler = this.scheduler;
	        var len = _events.length;
	        var subscription;
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else if (this.isStopped || this.hasError) {
	            subscription = Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            subscription = new SubjectSubscription(this, subscriber);
	        }
	        if (scheduler) {
	            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
	        }
	        if (_infiniteTimeWindow) {
	            for (var i = 0; i < len && !subscriber.closed; i++) {
	                subscriber.next(_events[i]);
	            }
	        }
	        else {
	            for (var i = 0; i < len && !subscriber.closed; i++) {
	                subscriber.next(_events[i].value);
	            }
	        }
	        if (this.hasError) {
	            subscriber.error(this.thrownError);
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	        }
	        return subscription;
	    };
	    ReplaySubject.prototype._getNow = function () {
	        return (this.scheduler || queue).now();
	    };
	    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
	        var now = this._getNow();
	        var _bufferSize = this._bufferSize;
	        var _windowTime = this._windowTime;
	        var _events = this._events;
	        var eventsCount = _events.length;
	        var spliceCount = 0;
	        while (spliceCount < eventsCount) {
	            if ((now - _events[spliceCount].time) < _windowTime) {
	                break;
	            }
	            spliceCount++;
	        }
	        if (eventsCount > _bufferSize) {
	            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
	        }
	        if (spliceCount > 0) {
	            _events.splice(0, spliceCount);
	        }
	        return _events;
	    };
	    return ReplaySubject;
	}(Subject));
	var ReplayEvent = /*@__PURE__*/ (function () {
	    function ReplayEvent(time, value) {
	        this.time = time;
	        this.value = value;
	    }
	    return ReplayEvent;
	}());
	//# sourceMappingURL=ReplaySubject.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
	var AsyncSubject = /*@__PURE__*/ (function (_super) {
	    __extends(AsyncSubject, _super);
	    function AsyncSubject() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.value = null;
	        _this.hasNext = false;
	        _this.hasCompleted = false;
	        return _this;
	    }
	    AsyncSubject.prototype._subscribe = function (subscriber) {
	        if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription.EMPTY;
	        }
	        else if (this.hasCompleted && this.hasNext) {
	            subscriber.next(this.value);
	            subscriber.complete();
	            return Subscription.EMPTY;
	        }
	        return _super.prototype._subscribe.call(this, subscriber);
	    };
	    AsyncSubject.prototype.next = function (value) {
	        if (!this.hasCompleted) {
	            this.value = value;
	            this.hasNext = true;
	        }
	    };
	    AsyncSubject.prototype.error = function (error) {
	        if (!this.hasCompleted) {
	            _super.prototype.error.call(this, error);
	        }
	    };
	    AsyncSubject.prototype.complete = function () {
	        this.hasCompleted = true;
	        if (this.hasNext) {
	            _super.prototype.next.call(this, this.value);
	        }
	        _super.prototype.complete.call(this);
	    };
	    return AsyncSubject;
	}(Subject));
	//# sourceMappingURL=AsyncSubject.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var nextHandle = 1;
	var RESOLVED = /*@__PURE__*/ (function () { return /*@__PURE__*/ Promise.resolve(); })();
	var activeHandles = {};
	function findAndClearHandle(handle) {
	    if (handle in activeHandles) {
	        delete activeHandles[handle];
	        return true;
	    }
	    return false;
	}
	var Immediate = {
	    setImmediate: function (cb) {
	        var handle = nextHandle++;
	        activeHandles[handle] = true;
	        RESOLVED.then(function () { return findAndClearHandle(handle) && cb(); });
	        return handle;
	    },
	    clearImmediate: function (handle) {
	        findAndClearHandle(handle);
	    },
	};
	//# sourceMappingURL=Immediate.js.map

	/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
	var AsapAction = /*@__PURE__*/ (function (_super) {
	    __extends(AsapAction, _super);
	    function AsapAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
	    };
	    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            Immediate.clearImmediate(id);
	            scheduler.scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AsapAction;
	}(AsyncAction));
	//# sourceMappingURL=AsapAction.js.map

	/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
	var AsapScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(AsapScheduler, _super);
	    function AsapScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AsapScheduler.prototype.flush = function (action) {
	        this.active = true;
	        this.scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        var count = actions.length;
	        action = action || actions.shift();
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this.active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsapScheduler;
	}(AsyncScheduler));
	//# sourceMappingURL=AsapScheduler.js.map

	/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
	var asapScheduler = /*@__PURE__*/ new AsapScheduler(AsapAction);
	var asap = asapScheduler;
	//# sourceMappingURL=asap.js.map

	/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
	var asyncScheduler = /*@__PURE__*/ new AsyncScheduler(AsyncAction);
	var async = asyncScheduler;
	//# sourceMappingURL=async.js.map

	/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
	var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
	    __extends(AnimationFrameAction, _super);
	    function AnimationFrameAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
	    };
	    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            cancelAnimationFrame(id);
	            scheduler.scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AnimationFrameAction;
	}(AsyncAction));
	//# sourceMappingURL=AnimationFrameAction.js.map

	/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
	var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(AnimationFrameScheduler, _super);
	    function AnimationFrameScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AnimationFrameScheduler.prototype.flush = function (action) {
	        this.active = true;
	        this.scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        var count = actions.length;
	        action = action || actions.shift();
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this.active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AnimationFrameScheduler;
	}(AsyncScheduler));
	//# sourceMappingURL=AnimationFrameScheduler.js.map

	/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */
	var animationFrameScheduler = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);
	var animationFrame = animationFrameScheduler;
	//# sourceMappingURL=animationFrame.js.map

	/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
	var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(VirtualTimeScheduler, _super);
	    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
	        if (SchedulerAction === void 0) {
	            SchedulerAction = VirtualAction;
	        }
	        if (maxFrames === void 0) {
	            maxFrames = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
	        _this.maxFrames = maxFrames;
	        _this.frame = 0;
	        _this.index = -1;
	        return _this;
	    }
	    VirtualTimeScheduler.prototype.flush = function () {
	        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
	        var error, action;
	        while ((action = actions[0]) && action.delay <= maxFrames) {
	            actions.shift();
	            this.frame = action.delay;
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        }
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    VirtualTimeScheduler.frameTimeFactor = 10;
	    return VirtualTimeScheduler;
	}(AsyncScheduler));
	var VirtualAction = /*@__PURE__*/ (function (_super) {
	    __extends(VirtualAction, _super);
	    function VirtualAction(scheduler, work, index) {
	        if (index === void 0) {
	            index = scheduler.index += 1;
	        }
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.index = index;
	        _this.active = true;
	        _this.index = scheduler.index = index;
	        return _this;
	    }
	    VirtualAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (!this.id) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.active = false;
	        var action = new VirtualAction(this.scheduler, this.work);
	        this.add(action);
	        return action.schedule(state, delay);
	    };
	    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        this.delay = scheduler.frame + delay;
	        var actions = scheduler.actions;
	        actions.push(this);
	        actions.sort(VirtualAction.sortActions);
	        return true;
	    };
	    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        return undefined;
	    };
	    VirtualAction.prototype._execute = function (state, delay) {
	        if (this.active === true) {
	            return _super.prototype._execute.call(this, state, delay);
	        }
	    };
	    VirtualAction.sortActions = function (a, b) {
	        if (a.delay === b.delay) {
	            if (a.index === b.index) {
	                return 0;
	            }
	            else if (a.index > b.index) {
	                return 1;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (a.delay > b.delay) {
	            return 1;
	        }
	        else {
	            return -1;
	        }
	    };
	    return VirtualAction;
	}(AsyncAction));
	//# sourceMappingURL=VirtualTimeScheduler.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function noop() { }
	//# sourceMappingURL=noop.js.map

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function isObservable(obj) {
	    return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
	}
	//# sourceMappingURL=isObservable.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var ArgumentOutOfRangeErrorImpl = /*@__PURE__*/ (function () {
	    function ArgumentOutOfRangeErrorImpl() {
	        Error.call(this);
	        this.message = 'argument out of range';
	        this.name = 'ArgumentOutOfRangeError';
	        return this;
	    }
	    ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return ArgumentOutOfRangeErrorImpl;
	})();
	var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
	//# sourceMappingURL=ArgumentOutOfRangeError.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var EmptyErrorImpl = /*@__PURE__*/ (function () {
	    function EmptyErrorImpl() {
	        Error.call(this);
	        this.message = 'no elements in sequence';
	        this.name = 'EmptyError';
	        return this;
	    }
	    EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return EmptyErrorImpl;
	})();
	var EmptyError = EmptyErrorImpl;
	//# sourceMappingURL=EmptyError.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var TimeoutErrorImpl = /*@__PURE__*/ (function () {
	    function TimeoutErrorImpl() {
	        Error.call(this);
	        this.message = 'Timeout has occurred';
	        this.name = 'TimeoutError';
	        return this;
	    }
	    TimeoutErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return TimeoutErrorImpl;
	})();
	var TimeoutError = TimeoutErrorImpl;
	//# sourceMappingURL=TimeoutError.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function map$2(project, thisArg) {
	    return function mapOperation(source) {
	        if (typeof project !== 'function') {
	            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
	        }
	        return source.lift(new MapOperator(project, thisArg));
	    };
	}
	var MapOperator = /*@__PURE__*/ (function () {
	    function MapOperator(project, thisArg) {
	        this.project = project;
	        this.thisArg = thisArg;
	    }
	    MapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
	    };
	    return MapOperator;
	}());
	var MapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MapSubscriber, _super);
	    function MapSubscriber(destination, project, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.count = 0;
	        _this.thisArg = thisArg || _this;
	        return _this;
	    }
	    MapSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.project.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return MapSubscriber;
	}(Subscriber));
	//# sourceMappingURL=map.js.map

	/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */
	function bindCallback(callbackFunc, resultSelector, scheduler) {
	    if (resultSelector) {
	        if (isScheduler(resultSelector)) {
	            scheduler = resultSelector;
	        }
	        else {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map$2(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
	            };
	        }
	    }
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var context = this;
	        var subject;
	        var params = {
	            context: context,
	            subject: subject,
	            callbackFunc: callbackFunc,
	            scheduler: scheduler,
	        };
	        return new Observable(function (subscriber) {
	            if (!scheduler) {
	                if (!subject) {
	                    subject = new AsyncSubject();
	                    var handler = function () {
	                        var innerArgs = [];
	                        for (var _i = 0; _i < arguments.length; _i++) {
	                            innerArgs[_i] = arguments[_i];
	                        }
	                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
	                        subject.complete();
	                    };
	                    try {
	                        callbackFunc.apply(context, args.concat([handler]));
	                    }
	                    catch (err) {
	                        if (canReportError(subject)) {
	                            subject.error(err);
	                        }
	                        else {
	                            console.warn(err);
	                        }
	                    }
	                }
	                return subject.subscribe(subscriber);
	            }
	            else {
	                var state = {
	                    args: args, subscriber: subscriber, params: params,
	                };
	                return scheduler.schedule(dispatch$2, 0, state);
	            }
	        });
	    };
	}
	function dispatch$2(state) {
	    var _this = this;
	    var args = state.args, subscriber = state.subscriber, params = state.params;
	    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
	    var subject = params.subject;
	    if (!subject) {
	        subject = params.subject = new AsyncSubject();
	        var handler = function () {
	            var innerArgs = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                innerArgs[_i] = arguments[_i];
	            }
	            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
	            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
	        };
	        try {
	            callbackFunc.apply(context, args.concat([handler]));
	        }
	        catch (err) {
	            subject.error(err);
	        }
	    }
	    this.add(subject.subscribe(subscriber));
	}
	function dispatchNext(state) {
	    var value = state.value, subject = state.subject;
	    subject.next(value);
	    subject.complete();
	}
	//# sourceMappingURL=bindCallback.js.map

	/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */
	function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
	    if (resultSelector) {
	        if (isScheduler(resultSelector)) {
	            scheduler = resultSelector;
	        }
	        else {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map$2(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
	            };
	        }
	    }
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var params = {
	            subject: undefined,
	            args: args,
	            callbackFunc: callbackFunc,
	            scheduler: scheduler,
	            context: this,
	        };
	        return new Observable(function (subscriber) {
	            var context = params.context;
	            var subject = params.subject;
	            if (!scheduler) {
	                if (!subject) {
	                    subject = params.subject = new AsyncSubject();
	                    var handler = function () {
	                        var innerArgs = [];
	                        for (var _i = 0; _i < arguments.length; _i++) {
	                            innerArgs[_i] = arguments[_i];
	                        }
	                        var err = innerArgs.shift();
	                        if (err) {
	                            subject.error(err);
	                            return;
	                        }
	                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
	                        subject.complete();
	                    };
	                    try {
	                        callbackFunc.apply(context, args.concat([handler]));
	                    }
	                    catch (err) {
	                        if (canReportError(subject)) {
	                            subject.error(err);
	                        }
	                        else {
	                            console.warn(err);
	                        }
	                    }
	                }
	                return subject.subscribe(subscriber);
	            }
	            else {
	                return scheduler.schedule(dispatch$3, 0, { params: params, subscriber: subscriber, context: context });
	            }
	        });
	    };
	}
	function dispatch$3(state) {
	    var _this = this;
	    var params = state.params, subscriber = state.subscriber, context = state.context;
	    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
	    var subject = params.subject;
	    if (!subject) {
	        subject = params.subject = new AsyncSubject();
	        var handler = function () {
	            var innerArgs = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                innerArgs[_i] = arguments[_i];
	            }
	            var err = innerArgs.shift();
	            if (err) {
	                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
	            }
	            else {
	                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
	                _this.add(scheduler.schedule(dispatchNext$1, 0, { value: value, subject: subject }));
	            }
	        };
	        try {
	            callbackFunc.apply(context, args.concat([handler]));
	        }
	        catch (err) {
	            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
	        }
	    }
	    this.add(subject.subscribe(subscriber));
	}
	function dispatchNext$1(arg) {
	    var value = arg.value, subject = arg.subject;
	    subject.next(value);
	    subject.complete();
	}
	function dispatchError(arg) {
	    var err = arg.err, subject = arg.subject;
	    subject.error(err);
	}
	//# sourceMappingURL=bindNodeCallback.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var OuterSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(OuterSubscriber, _super);
	    function OuterSubscriber() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.destination.error(error);
	    };
	    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.destination.complete();
	    };
	    return OuterSubscriber;
	}(Subscriber));
	//# sourceMappingURL=OuterSubscriber.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var InnerSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(InnerSubscriber, _super);
	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        _this.outerValue = outerValue;
	        _this.outerIndex = outerIndex;
	        _this.index = 0;
	        return _this;
	    }
	    InnerSubscriber.prototype._next = function (value) {
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
	    };
	    InnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error, this);
	        this.unsubscribe();
	    };
	    InnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete(this);
	        this.unsubscribe();
	    };
	    return InnerSubscriber;
	}(Subscriber));
	//# sourceMappingURL=InnerSubscriber.js.map

	/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
	var subscribeToPromise = function (promise) {
	    return function (subscriber) {
	        promise.then(function (value) {
	            if (!subscriber.closed) {
	                subscriber.next(value);
	                subscriber.complete();
	            }
	        }, function (err) { return subscriber.error(err); })
	            .then(null, hostReportError);
	        return subscriber;
	    };
	};
	//# sourceMappingURL=subscribeToPromise.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function getSymbolIterator() {
	    if (typeof Symbol !== 'function' || !Symbol.iterator) {
	        return '@@iterator';
	    }
	    return Symbol.iterator;
	}
	var iterator = /*@__PURE__*/ getSymbolIterator();
	//# sourceMappingURL=iterator.js.map

	/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
	var subscribeToIterable = function (iterable) {
	    return function (subscriber) {
	        var iterator$1 = iterable[iterator]();
	        do {
	            var item = void 0;
	            try {
	                item = iterator$1.next();
	            }
	            catch (err) {
	                subscriber.error(err);
	                return subscriber;
	            }
	            if (item.done) {
	                subscriber.complete();
	                break;
	            }
	            subscriber.next(item.value);
	            if (subscriber.closed) {
	                break;
	            }
	        } while (true);
	        if (typeof iterator$1.return === 'function') {
	            subscriber.add(function () {
	                if (iterator$1.return) {
	                    iterator$1.return();
	                }
	            });
	        }
	        return subscriber;
	    };
	};
	//# sourceMappingURL=subscribeToIterable.js.map

	/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
	var subscribeToObservable = function (obj) {
	    return function (subscriber) {
	        var obs = obj[observable]();
	        if (typeof obs.subscribe !== 'function') {
	            throw new TypeError('Provided object does not correctly implement Symbol.observable');
	        }
	        else {
	            return obs.subscribe(subscriber);
	        }
	    };
	};
	//# sourceMappingURL=subscribeToObservable.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
	//# sourceMappingURL=isArrayLike.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isPromise(value) {
	    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
	}
	//# sourceMappingURL=isPromise.js.map

	/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
	var subscribeTo = function (result) {
	    if (!!result && typeof result[observable] === 'function') {
	        return subscribeToObservable(result);
	    }
	    else if (isArrayLike(result)) {
	        return subscribeToArray(result);
	    }
	    else if (isPromise(result)) {
	        return subscribeToPromise(result);
	    }
	    else if (!!result && typeof result[iterator] === 'function') {
	        return subscribeToIterable(result);
	    }
	    else {
	        var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
	        var msg = "You provided " + value + " where a stream was expected."
	            + ' You can provide an Observable, Promise, Array, or Iterable.';
	        throw new TypeError(msg);
	    }
	};
	//# sourceMappingURL=subscribeTo.js.map

	/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */
	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
	    if (innerSubscriber === void 0) {
	        innerSubscriber = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
	    }
	    if (innerSubscriber.closed) {
	        return undefined;
	    }
	    if (result instanceof Observable) {
	        return result.subscribe(innerSubscriber);
	    }
	    return subscribeTo(result)(innerSubscriber);
	}
	//# sourceMappingURL=subscribeToResult.js.map

	/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
	var NONE = {};
	function combineLatest() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var resultSelector = null;
	    var scheduler = null;
	    if (isScheduler(observables[observables.length - 1])) {
	        scheduler = observables.pop();
	    }
	    if (typeof observables[observables.length - 1] === 'function') {
	        resultSelector = observables.pop();
	    }
	    if (observables.length === 1 && isArray(observables[0])) {
	        observables = observables[0];
	    }
	    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
	}
	var CombineLatestOperator = /*@__PURE__*/ (function () {
	    function CombineLatestOperator(resultSelector) {
	        this.resultSelector = resultSelector;
	    }
	    CombineLatestOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
	    };
	    return CombineLatestOperator;
	}());
	var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(CombineLatestSubscriber, _super);
	    function CombineLatestSubscriber(destination, resultSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.resultSelector = resultSelector;
	        _this.active = 0;
	        _this.values = [];
	        _this.observables = [];
	        return _this;
	    }
	    CombineLatestSubscriber.prototype._next = function (observable) {
	        this.values.push(NONE);
	        this.observables.push(observable);
	    };
	    CombineLatestSubscriber.prototype._complete = function () {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        }
	        else {
	            this.active = len;
	            this.toRespond = len;
	            for (var i = 0; i < len; i++) {
	                var observable = observables[i];
	                this.add(subscribeToResult(this, observable, observable, i));
	            }
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
	        if ((this.active -= 1) === 0) {
	            this.destination.complete();
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var values = this.values;
	        var oldVal = values[outerIndex];
	        var toRespond = !this.toRespond
	            ? 0
	            : oldVal === NONE ? --this.toRespond : this.toRespond;
	        values[outerIndex] = innerValue;
	        if (toRespond === 0) {
	            if (this.resultSelector) {
	                this._tryResultSelector(values);
	            }
	            else {
	                this.destination.next(values.slice());
	            }
	        }
	    };
	    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
	        var result;
	        try {
	            result = this.resultSelector.apply(this, values);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return CombineLatestSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=combineLatest.js.map

	/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */
	function scheduleObservable(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        sub.add(scheduler.schedule(function () {
	            var observable$1 = input[observable]();
	            sub.add(observable$1.subscribe({
	                next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
	                error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
	                complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
	            }));
	        }));
	        return sub;
	    });
	}
	//# sourceMappingURL=scheduleObservable.js.map

	/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
	function schedulePromise(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        sub.add(scheduler.schedule(function () {
	            return input.then(function (value) {
	                sub.add(scheduler.schedule(function () {
	                    subscriber.next(value);
	                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
	                }));
	            }, function (err) {
	                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
	            });
	        }));
	        return sub;
	    });
	}
	//# sourceMappingURL=schedulePromise.js.map

	/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */
	function scheduleIterable(input, scheduler) {
	    if (!input) {
	        throw new Error('Iterable cannot be null');
	    }
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        var iterator$1;
	        sub.add(function () {
	            if (iterator$1 && typeof iterator$1.return === 'function') {
	                iterator$1.return();
	            }
	        });
	        sub.add(scheduler.schedule(function () {
	            iterator$1 = input[iterator]();
	            sub.add(scheduler.schedule(function () {
	                if (subscriber.closed) {
	                    return;
	                }
	                var value;
	                var done;
	                try {
	                    var result = iterator$1.next();
	                    value = result.value;
	                    done = result.done;
	                }
	                catch (err) {
	                    subscriber.error(err);
	                    return;
	                }
	                if (done) {
	                    subscriber.complete();
	                }
	                else {
	                    subscriber.next(value);
	                    this.schedule();
	                }
	            }));
	        }));
	        return sub;
	    });
	}
	//# sourceMappingURL=scheduleIterable.js.map

	/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
	function isInteropObservable(input) {
	    return input && typeof input[observable] === 'function';
	}
	//# sourceMappingURL=isInteropObservable.js.map

	/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
	function isIterable(input) {
	    return input && typeof input[iterator] === 'function';
	}
	//# sourceMappingURL=isIterable.js.map

	/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */
	function scheduled(input, scheduler) {
	    if (input != null) {
	        if (isInteropObservable(input)) {
	            return scheduleObservable(input, scheduler);
	        }
	        else if (isPromise(input)) {
	            return schedulePromise(input, scheduler);
	        }
	        else if (isArrayLike(input)) {
	            return scheduleArray(input, scheduler);
	        }
	        else if (isIterable(input) || typeof input === 'string') {
	            return scheduleIterable(input, scheduler);
	        }
	    }
	    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
	}
	//# sourceMappingURL=scheduled.js.map

	/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */
	function from$1(input, scheduler) {
	    if (!scheduler) {
	        if (input instanceof Observable) {
	            return input;
	        }
	        return new Observable(subscribeTo(input));
	    }
	    else {
	        return scheduled(input, scheduler);
	    }
	}
	//# sourceMappingURL=from.js.map

	/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */
	function mergeMap(project, resultSelector, concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    if (typeof resultSelector === 'function') {
	        return function (source) { return source.pipe(mergeMap(function (a, i) { return from$1(project(a, i)).pipe(map$2(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
	    }
	    else if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
	}
	var MergeMapOperator = /*@__PURE__*/ (function () {
	    function MergeMapOperator(project, concurrent) {
	        if (concurrent === void 0) {
	            concurrent = Number.POSITIVE_INFINITY;
	        }
	        this.project = project;
	        this.concurrent = concurrent;
	    }
	    MergeMapOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
	    };
	    return MergeMapOperator;
	}());
	var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MergeMapSubscriber, _super);
	    function MergeMapSubscriber(destination, project, concurrent) {
	        if (concurrent === void 0) {
	            concurrent = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.concurrent = concurrent;
	        _this.hasCompleted = false;
	        _this.buffer = [];
	        _this.active = 0;
	        _this.index = 0;
	        return _this;
	    }
	    MergeMapSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            this._tryNext(value);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeMapSubscriber.prototype._tryNext = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.active++;
	        this._innerSub(result, value, index);
	    };
	    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
	        var innerSubscriber = new InnerSubscriber(this, value, index);
	        var destination = this.destination;
	        destination.add(innerSubscriber);
	        var innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);
	        if (innerSubscription !== innerSubscriber) {
	            destination.add(innerSubscription);
	        }
	    };
	    MergeMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	        this.unsubscribe();
	    };
	    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeMapSubscriber;
	}(OuterSubscriber));
	var flatMap = mergeMap;
	//# sourceMappingURL=mergeMap.js.map

	/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
	function mergeAll$1(concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    return mergeMap(identity$1, concurrent);
	}
	//# sourceMappingURL=mergeAll.js.map

	/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */
	function concatAll() {
	    return mergeAll$1(1);
	}
	//# sourceMappingURL=concatAll.js.map

	/** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */
	function concat$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return concatAll()(of$1.apply(void 0, observables));
	}
	//# sourceMappingURL=concat.js.map

	/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
	function defer(observableFactory) {
	    return new Observable(function (subscriber) {
	        var input;
	        try {
	            input = observableFactory();
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        var source = input ? from$1(input) : empty$2();
	        return source.subscribe(subscriber);
	    });
	}
	//# sourceMappingURL=defer.js.map

	/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */
	function forkJoin() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    if (sources.length === 1) {
	        var first_1 = sources[0];
	        if (isArray(first_1)) {
	            return forkJoinInternal(first_1, null);
	        }
	        if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
	            var keys = Object.keys(first_1);
	            return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);
	        }
	    }
	    if (typeof sources[sources.length - 1] === 'function') {
	        var resultSelector_1 = sources.pop();
	        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;
	        return forkJoinInternal(sources, null).pipe(map$2(function (args) { return resultSelector_1.apply(void 0, args); }));
	    }
	    return forkJoinInternal(sources, null);
	}
	function forkJoinInternal(sources, keys) {
	    return new Observable(function (subscriber) {
	        var len = sources.length;
	        if (len === 0) {
	            subscriber.complete();
	            return;
	        }
	        var values = new Array(len);
	        var completed = 0;
	        var emitted = 0;
	        var _loop_1 = function (i) {
	            var source = from$1(sources[i]);
	            var hasValue = false;
	            subscriber.add(source.subscribe({
	                next: function (value) {
	                    if (!hasValue) {
	                        hasValue = true;
	                        emitted++;
	                    }
	                    values[i] = value;
	                },
	                error: function (err) { return subscriber.error(err); },
	                complete: function () {
	                    completed++;
	                    if (completed === len || !hasValue) {
	                        if (emitted === len) {
	                            subscriber.next(keys ?
	                                keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :
	                                values);
	                        }
	                        subscriber.complete();
	                    }
	                }
	            }));
	        };
	        for (var i = 0; i < len; i++) {
	            _loop_1(i);
	        }
	    });
	}
	//# sourceMappingURL=forkJoin.js.map

	/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
	function fromEvent(target, eventName, options, resultSelector) {
	    if (isFunction(options)) {
	        resultSelector = options;
	        options = undefined;
	    }
	    if (resultSelector) {
	        return fromEvent(target, eventName, options).pipe(map$2(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
	    }
	    return new Observable(function (subscriber) {
	        function handler(e) {
	            if (arguments.length > 1) {
	                subscriber.next(Array.prototype.slice.call(arguments));
	            }
	            else {
	                subscriber.next(e);
	            }
	        }
	        setupSubscription(target, eventName, handler, subscriber, options);
	    });
	}
	function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
	    var unsubscribe;
	    if (isEventTarget(sourceObj)) {
	        var source_1 = sourceObj;
	        sourceObj.addEventListener(eventName, handler, options);
	        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
	    }
	    else if (isJQueryStyleEventEmitter(sourceObj)) {
	        var source_2 = sourceObj;
	        sourceObj.on(eventName, handler);
	        unsubscribe = function () { return source_2.off(eventName, handler); };
	    }
	    else if (isNodeStyleEventEmitter(sourceObj)) {
	        var source_3 = sourceObj;
	        sourceObj.addListener(eventName, handler);
	        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
	    }
	    else if (sourceObj && sourceObj.length) {
	        for (var i = 0, len = sourceObj.length; i < len; i++) {
	            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
	        }
	    }
	    else {
	        throw new TypeError('Invalid event target');
	    }
	    subscriber.add(unsubscribe);
	}
	function isNodeStyleEventEmitter(sourceObj) {
	    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
	}
	function isJQueryStyleEventEmitter(sourceObj) {
	    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
	}
	function isEventTarget(sourceObj) {
	    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
	}
	//# sourceMappingURL=fromEvent.js.map

	/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
	function fromEventPattern(addHandler, removeHandler, resultSelector) {
	    if (resultSelector) {
	        return fromEventPattern(addHandler, removeHandler).pipe(map$2(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
	    }
	    return new Observable(function (subscriber) {
	        var handler = function () {
	            var e = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                e[_i] = arguments[_i];
	            }
	            return subscriber.next(e.length === 1 ? e[0] : e);
	        };
	        var retValue;
	        try {
	            retValue = addHandler(handler);
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        if (!isFunction(removeHandler)) {
	            return undefined;
	        }
	        return function () { return removeHandler(handler, retValue); };
	    });
	}
	//# sourceMappingURL=fromEventPattern.js.map

	/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */
	function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
	    var resultSelector;
	    var initialState;
	    if (arguments.length == 1) {
	        var options = initialStateOrOptions;
	        initialState = options.initialState;
	        condition = options.condition;
	        iterate = options.iterate;
	        resultSelector = options.resultSelector || identity$1;
	        scheduler = options.scheduler;
	    }
	    else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {
	        initialState = initialStateOrOptions;
	        resultSelector = identity$1;
	        scheduler = resultSelectorOrObservable;
	    }
	    else {
	        initialState = initialStateOrOptions;
	        resultSelector = resultSelectorOrObservable;
	    }
	    return new Observable(function (subscriber) {
	        var state = initialState;
	        if (scheduler) {
	            return scheduler.schedule(dispatch$4, 0, {
	                subscriber: subscriber,
	                iterate: iterate,
	                condition: condition,
	                resultSelector: resultSelector,
	                state: state
	            });
	        }
	        do {
	            if (condition) {
	                var conditionResult = void 0;
	                try {
	                    conditionResult = condition(state);
	                }
	                catch (err) {
	                    subscriber.error(err);
	                    return undefined;
	                }
	                if (!conditionResult) {
	                    subscriber.complete();
	                    break;
	                }
	            }
	            var value = void 0;
	            try {
	                value = resultSelector(state);
	            }
	            catch (err) {
	                subscriber.error(err);
	                return undefined;
	            }
	            subscriber.next(value);
	            if (subscriber.closed) {
	                break;
	            }
	            try {
	                state = iterate(state);
	            }
	            catch (err) {
	                subscriber.error(err);
	                return undefined;
	            }
	        } while (true);
	        return undefined;
	    });
	}
	function dispatch$4(state) {
	    var subscriber = state.subscriber, condition = state.condition;
	    if (subscriber.closed) {
	        return undefined;
	    }
	    if (state.needIterate) {
	        try {
	            state.state = state.iterate(state.state);
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	    }
	    else {
	        state.needIterate = true;
	    }
	    if (condition) {
	        var conditionResult = void 0;
	        try {
	            conditionResult = condition(state.state);
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        if (!conditionResult) {
	            subscriber.complete();
	            return undefined;
	        }
	        if (subscriber.closed) {
	            return undefined;
	        }
	    }
	    var value;
	    try {
	        value = state.resultSelector(state.state);
	    }
	    catch (err) {
	        subscriber.error(err);
	        return undefined;
	    }
	    if (subscriber.closed) {
	        return undefined;
	    }
	    subscriber.next(value);
	    if (subscriber.closed) {
	        return undefined;
	    }
	    return this.schedule(state);
	}
	//# sourceMappingURL=generate.js.map

	/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */
	function iif(condition, trueResult, falseResult) {
	    if (trueResult === void 0) {
	        trueResult = EMPTY;
	    }
	    if (falseResult === void 0) {
	        falseResult = EMPTY;
	    }
	    return defer(function () { return condition() ? trueResult : falseResult; });
	}
	//# sourceMappingURL=iif.js.map

	/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
	function isNumeric(val) {
	    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
	}
	//# sourceMappingURL=isNumeric.js.map

	/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */
	function interval(period, scheduler) {
	    if (period === void 0) {
	        period = 0;
	    }
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    if (!isNumeric(period) || period < 0) {
	        period = 0;
	    }
	    if (!scheduler || typeof scheduler.schedule !== 'function') {
	        scheduler = async;
	    }
	    return new Observable(function (subscriber) {
	        subscriber.add(scheduler.schedule(dispatch$5, period, { subscriber: subscriber, counter: 0, period: period }));
	        return subscriber;
	    });
	}
	function dispatch$5(state) {
	    var subscriber = state.subscriber, counter = state.counter, period = state.period;
	    subscriber.next(counter);
	    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
	}
	//# sourceMappingURL=interval.js.map

	/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */
	function merge$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var concurrent = Number.POSITIVE_INFINITY;
	    var scheduler = null;
	    var last = observables[observables.length - 1];
	    if (isScheduler(last)) {
	        scheduler = observables.pop();
	        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
	            concurrent = observables.pop();
	        }
	    }
	    else if (typeof last === 'number') {
	        concurrent = observables.pop();
	    }
	    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {
	        return observables[0];
	    }
	    return mergeAll$1(concurrent)(fromArray(observables, scheduler));
	}
	//# sourceMappingURL=merge.js.map

	/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */
	var NEVER = /*@__PURE__*/ new Observable(noop);
	function never() {
	    return NEVER;
	}
	//# sourceMappingURL=never.js.map

	/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */
	function onErrorResumeNext() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    if (sources.length === 0) {
	        return EMPTY;
	    }
	    var first = sources[0], remainder = sources.slice(1);
	    if (sources.length === 1 && isArray(first)) {
	        return onErrorResumeNext.apply(void 0, first);
	    }
	    return new Observable(function (subscriber) {
	        var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
	        return from$1(first).subscribe({
	            next: function (value) { subscriber.next(value); },
	            error: subNext,
	            complete: subNext,
	        });
	    });
	}
	//# sourceMappingURL=onErrorResumeNext.js.map

	/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
	function pairs(obj, scheduler) {
	    if (!scheduler) {
	        return new Observable(function (subscriber) {
	            var keys = Object.keys(obj);
	            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
	                var key = keys[i];
	                if (obj.hasOwnProperty(key)) {
	                    subscriber.next([key, obj[key]]);
	                }
	            }
	            subscriber.complete();
	        });
	    }
	    else {
	        return new Observable(function (subscriber) {
	            var keys = Object.keys(obj);
	            var subscription = new Subscription();
	            subscription.add(scheduler.schedule(dispatch$6, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
	            return subscription;
	        });
	    }
	}
	function dispatch$6(state) {
	    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
	    if (!subscriber.closed) {
	        if (index < keys.length) {
	            var key = keys[index];
	            subscriber.next([key, obj[key]]);
	            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
	        }
	        else {
	            subscriber.complete();
	        }
	    }
	}
	//# sourceMappingURL=pairs.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function not$1(pred, thisArg) {
	    function notPred() {
	        return !(notPred.pred.apply(notPred.thisArg, arguments));
	    }
	    notPred.pred = pred;
	    notPred.thisArg = thisArg;
	    return notPred;
	}
	//# sourceMappingURL=not.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function filter$1(predicate, thisArg) {
	    return function filterOperatorFunction(source) {
	        return source.lift(new FilterOperator(predicate, thisArg));
	    };
	}
	var FilterOperator = /*@__PURE__*/ (function () {
	    function FilterOperator(predicate, thisArg) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	    }
	    FilterOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
	    };
	    return FilterOperator;
	}());
	var FilterSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(FilterSubscriber, _super);
	    function FilterSubscriber(destination, predicate, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.thisArg = thisArg;
	        _this.count = 0;
	        return _this;
	    }
	    FilterSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.destination.next(value);
	        }
	    };
	    return FilterSubscriber;
	}(Subscriber));
	//# sourceMappingURL=filter.js.map

	/** PURE_IMPORTS_START _util_not,_util_subscribeTo,_operators_filter,_Observable PURE_IMPORTS_END */
	function partition$1(source, predicate, thisArg) {
	    return [
	        filter$1(predicate, thisArg)(new Observable(subscribeTo(source))),
	        filter$1(not$1(predicate, thisArg))(new Observable(subscribeTo(source)))
	    ];
	}
	//# sourceMappingURL=partition.js.map

	/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function race() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    if (observables.length === 1) {
	        if (isArray(observables[0])) {
	            observables = observables[0];
	        }
	        else {
	            return observables[0];
	        }
	    }
	    return fromArray(observables, undefined).lift(new RaceOperator());
	}
	var RaceOperator = /*@__PURE__*/ (function () {
	    function RaceOperator() {
	    }
	    RaceOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RaceSubscriber(subscriber));
	    };
	    return RaceOperator;
	}());
	var RaceSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RaceSubscriber, _super);
	    function RaceSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasFirst = false;
	        _this.observables = [];
	        _this.subscriptions = [];
	        return _this;
	    }
	    RaceSubscriber.prototype._next = function (observable) {
	        this.observables.push(observable);
	    };
	    RaceSubscriber.prototype._complete = function () {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        }
	        else {
	            for (var i = 0; i < len && !this.hasFirst; i++) {
	                var observable = observables[i];
	                var subscription = subscribeToResult(this, observable, observable, i);
	                if (this.subscriptions) {
	                    this.subscriptions.push(subscription);
	                }
	                this.add(subscription);
	            }
	            this.observables = null;
	        }
	    };
	    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (!this.hasFirst) {
	            this.hasFirst = true;
	            for (var i = 0; i < this.subscriptions.length; i++) {
	                if (i !== outerIndex) {
	                    var subscription = this.subscriptions[i];
	                    subscription.unsubscribe();
	                    this.remove(subscription);
	                }
	            }
	            this.subscriptions = null;
	        }
	        this.destination.next(innerValue);
	    };
	    return RaceSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=race.js.map

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function range$1(start, count, scheduler) {
	    if (start === void 0) {
	        start = 0;
	    }
	    return new Observable(function (subscriber) {
	        if (count === undefined) {
	            count = start;
	            start = 0;
	        }
	        var index = 0;
	        var current = start;
	        if (scheduler) {
	            return scheduler.schedule(dispatch$7, 0, {
	                index: index, count: count, start: start, subscriber: subscriber
	            });
	        }
	        else {
	            do {
	                if (index++ >= count) {
	                    subscriber.complete();
	                    break;
	                }
	                subscriber.next(current++);
	                if (subscriber.closed) {
	                    break;
	                }
	            } while (true);
	        }
	        return undefined;
	    });
	}
	function dispatch$7(state) {
	    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
	    if (index >= count) {
	        subscriber.complete();
	        return;
	    }
	    subscriber.next(start);
	    if (subscriber.closed) {
	        return;
	    }
	    state.index = index + 1;
	    state.start = start + 1;
	    this.schedule(state);
	}
	//# sourceMappingURL=range.js.map

	/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
	function timer(dueTime, periodOrScheduler, scheduler) {
	    if (dueTime === void 0) {
	        dueTime = 0;
	    }
	    var period = -1;
	    if (isNumeric(periodOrScheduler)) {
	        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
	    }
	    else if (isScheduler(periodOrScheduler)) {
	        scheduler = periodOrScheduler;
	    }
	    if (!isScheduler(scheduler)) {
	        scheduler = async;
	    }
	    return new Observable(function (subscriber) {
	        var due = isNumeric(dueTime)
	            ? dueTime
	            : (+dueTime - scheduler.now());
	        return scheduler.schedule(dispatch$8, due, {
	            index: 0, period: period, subscriber: subscriber
	        });
	    });
	}
	function dispatch$8(state) {
	    var index = state.index, period = state.period, subscriber = state.subscriber;
	    subscriber.next(index);
	    if (subscriber.closed) {
	        return;
	    }
	    else if (period === -1) {
	        return subscriber.complete();
	    }
	    state.index = index + 1;
	    this.schedule(state, period);
	}
	//# sourceMappingURL=timer.js.map

	/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
	function using(resourceFactory, observableFactory) {
	    return new Observable(function (subscriber) {
	        var resource;
	        try {
	            resource = resourceFactory();
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        var result;
	        try {
	            result = observableFactory(resource);
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        var source = result ? from$1(result) : EMPTY;
	        var subscription = source.subscribe(subscriber);
	        return function () {
	            subscription.unsubscribe();
	            if (resource) {
	                resource.unsubscribe();
	            }
	        };
	    });
	}
	//# sourceMappingURL=using.js.map

	/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */
	function zip$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var resultSelector = observables[observables.length - 1];
	    if (typeof resultSelector === 'function') {
	        observables.pop();
	    }
	    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
	}
	var ZipOperator = /*@__PURE__*/ (function () {
	    function ZipOperator(resultSelector) {
	        this.resultSelector = resultSelector;
	    }
	    ZipOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
	    };
	    return ZipOperator;
	}());
	var ZipSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ZipSubscriber, _super);
	    function ZipSubscriber(destination, resultSelector, values) {
	        if (values === void 0) {
	            values = Object.create(null);
	        }
	        var _this = _super.call(this, destination) || this;
	        _this.iterators = [];
	        _this.active = 0;
	        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
	        _this.values = values;
	        return _this;
	    }
	    ZipSubscriber.prototype._next = function (value) {
	        var iterators = this.iterators;
	        if (isArray(value)) {
	            iterators.push(new StaticArrayIterator(value));
	        }
	        else if (typeof value[iterator] === 'function') {
	            iterators.push(new StaticIterator(value[iterator]()));
	        }
	        else {
	            iterators.push(new ZipBufferIterator(this.destination, this, value));
	        }
	    };
	    ZipSubscriber.prototype._complete = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        this.unsubscribe();
	        if (len === 0) {
	            this.destination.complete();
	            return;
	        }
	        this.active = len;
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (iterator.stillUnsubscribed) {
	                var destination = this.destination;
	                destination.add(iterator.subscribe(iterator, i));
	            }
	            else {
	                this.active--;
	            }
	        }
	    };
	    ZipSubscriber.prototype.notifyInactive = function () {
	        this.active--;
	        if (this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    ZipSubscriber.prototype.checkIterators = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        var destination = this.destination;
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
	                return;
	            }
	        }
	        var shouldComplete = false;
	        var args = [];
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            var result = iterator.next();
	            if (iterator.hasCompleted()) {
	                shouldComplete = true;
	            }
	            if (result.done) {
	                destination.complete();
	                return;
	            }
	            args.push(result.value);
	        }
	        if (this.resultSelector) {
	            this._tryresultSelector(args);
	        }
	        else {
	            destination.next(args);
	        }
	        if (shouldComplete) {
	            destination.complete();
	        }
	    };
	    ZipSubscriber.prototype._tryresultSelector = function (args) {
	        var result;
	        try {
	            result = this.resultSelector.apply(this, args);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return ZipSubscriber;
	}(Subscriber));
	var StaticIterator = /*@__PURE__*/ (function () {
	    function StaticIterator(iterator) {
	        this.iterator = iterator;
	        this.nextResult = iterator.next();
	    }
	    StaticIterator.prototype.hasValue = function () {
	        return true;
	    };
	    StaticIterator.prototype.next = function () {
	        var result = this.nextResult;
	        this.nextResult = this.iterator.next();
	        return result;
	    };
	    StaticIterator.prototype.hasCompleted = function () {
	        var nextResult = this.nextResult;
	        return nextResult && nextResult.done;
	    };
	    return StaticIterator;
	}());
	var StaticArrayIterator = /*@__PURE__*/ (function () {
	    function StaticArrayIterator(array) {
	        this.array = array;
	        this.index = 0;
	        this.length = 0;
	        this.length = array.length;
	    }
	    StaticArrayIterator.prototype[iterator] = function () {
	        return this;
	    };
	    StaticArrayIterator.prototype.next = function (value) {
	        var i = this.index++;
	        var array = this.array;
	        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
	    };
	    StaticArrayIterator.prototype.hasValue = function () {
	        return this.array.length > this.index;
	    };
	    StaticArrayIterator.prototype.hasCompleted = function () {
	        return this.array.length === this.index;
	    };
	    return StaticArrayIterator;
	}());
	var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
	    __extends(ZipBufferIterator, _super);
	    function ZipBufferIterator(destination, parent, observable) {
	        var _this = _super.call(this, destination) || this;
	        _this.parent = parent;
	        _this.observable = observable;
	        _this.stillUnsubscribed = true;
	        _this.buffer = [];
	        _this.isComplete = false;
	        return _this;
	    }
	    ZipBufferIterator.prototype[iterator] = function () {
	        return this;
	    };
	    ZipBufferIterator.prototype.next = function () {
	        var buffer = this.buffer;
	        if (buffer.length === 0 && this.isComplete) {
	            return { value: null, done: true };
	        }
	        else {
	            return { value: buffer.shift(), done: false };
	        }
	    };
	    ZipBufferIterator.prototype.hasValue = function () {
	        return this.buffer.length > 0;
	    };
	    ZipBufferIterator.prototype.hasCompleted = function () {
	        return this.buffer.length === 0 && this.isComplete;
	    };
	    ZipBufferIterator.prototype.notifyComplete = function () {
	        if (this.buffer.length > 0) {
	            this.isComplete = true;
	            this.parent.notifyInactive();
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.buffer.push(innerValue);
	        this.parent.checkIterators();
	    };
	    ZipBufferIterator.prototype.subscribe = function (value, index) {
	        return subscribeToResult(this, this.observable, this, index);
	    };
	    return ZipBufferIterator;
	}(OuterSubscriber));
	//# sourceMappingURL=zip.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	//# sourceMappingURL=index.js.map

	var index$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Observable: Observable,
		ConnectableObservable: ConnectableObservable,
		GroupedObservable: GroupedObservable,
		observable: observable,
		Subject: Subject,
		BehaviorSubject: BehaviorSubject,
		ReplaySubject: ReplaySubject,
		AsyncSubject: AsyncSubject,
		asap: asap,
		asapScheduler: asapScheduler,
		async: async,
		asyncScheduler: asyncScheduler,
		queue: queue,
		queueScheduler: queueScheduler,
		animationFrame: animationFrame,
		animationFrameScheduler: animationFrameScheduler,
		VirtualTimeScheduler: VirtualTimeScheduler,
		VirtualAction: VirtualAction,
		Scheduler: Scheduler,
		Subscription: Subscription,
		Subscriber: Subscriber,
		Notification: Notification,
		get NotificationKind () { return NotificationKind; },
		pipe: pipe$1,
		noop: noop,
		identity: identity$1,
		isObservable: isObservable,
		ArgumentOutOfRangeError: ArgumentOutOfRangeError,
		EmptyError: EmptyError,
		ObjectUnsubscribedError: ObjectUnsubscribedError,
		UnsubscriptionError: UnsubscriptionError,
		TimeoutError: TimeoutError,
		bindCallback: bindCallback,
		bindNodeCallback: bindNodeCallback,
		combineLatest: combineLatest,
		concat: concat$1,
		defer: defer,
		empty: empty$2,
		forkJoin: forkJoin,
		from: from$1,
		fromEvent: fromEvent,
		fromEventPattern: fromEventPattern,
		generate: generate,
		iif: iif,
		interval: interval,
		merge: merge$1,
		never: never,
		of: of$1,
		onErrorResumeNext: onErrorResumeNext,
		pairs: pairs,
		partition: partition$1,
		race: race,
		range: range$1,
		throwError: throwError,
		timer: timer,
		using: using,
		zip: zip$1,
		scheduled: scheduled,
		EMPTY: EMPTY,
		NEVER: NEVER,
		config: config
	});

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function audit(durationSelector) {
	    return function auditOperatorFunction(source) {
	        return source.lift(new AuditOperator(durationSelector));
	    };
	}
	var AuditOperator = /*@__PURE__*/ (function () {
	    function AuditOperator(durationSelector) {
	        this.durationSelector = durationSelector;
	    }
	    AuditOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
	    };
	    return AuditOperator;
	}());
	var AuditSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(AuditSubscriber, _super);
	    function AuditSubscriber(destination, durationSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.durationSelector = durationSelector;
	        _this.hasValue = false;
	        return _this;
	    }
	    AuditSubscriber.prototype._next = function (value) {
	        this.value = value;
	        this.hasValue = true;
	        if (!this.throttled) {
	            var duration = void 0;
	            try {
	                var durationSelector = this.durationSelector;
	                duration = durationSelector(value);
	            }
	            catch (err) {
	                return this.destination.error(err);
	            }
	            var innerSubscription = subscribeToResult(this, duration);
	            if (!innerSubscription || innerSubscription.closed) {
	                this.clearThrottle();
	            }
	            else {
	                this.add(this.throttled = innerSubscription);
	            }
	        }
	    };
	    AuditSubscriber.prototype.clearThrottle = function () {
	        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
	        if (throttled) {
	            this.remove(throttled);
	            this.throttled = null;
	            throttled.unsubscribe();
	        }
	        if (hasValue) {
	            this.value = null;
	            this.hasValue = false;
	            this.destination.next(value);
	        }
	    };
	    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        this.clearThrottle();
	    };
	    AuditSubscriber.prototype.notifyComplete = function () {
	        this.clearThrottle();
	    };
	    return AuditSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=audit.js.map

	/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */
	function auditTime(duration, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return audit(function () { return timer(duration, scheduler); });
	}
	//# sourceMappingURL=auditTime.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function buffer(closingNotifier) {
	    return function bufferOperatorFunction(source) {
	        return source.lift(new BufferOperator(closingNotifier));
	    };
	}
	var BufferOperator = /*@__PURE__*/ (function () {
	    function BufferOperator(closingNotifier) {
	        this.closingNotifier = closingNotifier;
	    }
	    BufferOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
	    };
	    return BufferOperator;
	}());
	var BufferSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferSubscriber, _super);
	    function BufferSubscriber(destination, closingNotifier) {
	        var _this = _super.call(this, destination) || this;
	        _this.buffer = [];
	        _this.add(subscribeToResult(_this, closingNotifier));
	        return _this;
	    }
	    BufferSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var buffer = this.buffer;
	        this.buffer = [];
	        this.destination.next(buffer);
	    };
	    return BufferSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=buffer.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function bufferCount(bufferSize, startBufferEvery) {
	    if (startBufferEvery === void 0) {
	        startBufferEvery = null;
	    }
	    return function bufferCountOperatorFunction(source) {
	        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
	    };
	}
	var BufferCountOperator = /*@__PURE__*/ (function () {
	    function BufferCountOperator(bufferSize, startBufferEvery) {
	        this.bufferSize = bufferSize;
	        this.startBufferEvery = startBufferEvery;
	        if (!startBufferEvery || bufferSize === startBufferEvery) {
	            this.subscriberClass = BufferCountSubscriber;
	        }
	        else {
	            this.subscriberClass = BufferSkipCountSubscriber;
	        }
	    }
	    BufferCountOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
	    };
	    return BufferCountOperator;
	}());
	var BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferCountSubscriber, _super);
	    function BufferCountSubscriber(destination, bufferSize) {
	        var _this = _super.call(this, destination) || this;
	        _this.bufferSize = bufferSize;
	        _this.buffer = [];
	        return _this;
	    }
	    BufferCountSubscriber.prototype._next = function (value) {
	        var buffer = this.buffer;
	        buffer.push(value);
	        if (buffer.length == this.bufferSize) {
	            this.destination.next(buffer);
	            this.buffer = [];
	        }
	    };
	    BufferCountSubscriber.prototype._complete = function () {
	        var buffer = this.buffer;
	        if (buffer.length > 0) {
	            this.destination.next(buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    return BufferCountSubscriber;
	}(Subscriber));
	var BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferSkipCountSubscriber, _super);
	    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
	        var _this = _super.call(this, destination) || this;
	        _this.bufferSize = bufferSize;
	        _this.startBufferEvery = startBufferEvery;
	        _this.buffers = [];
	        _this.count = 0;
	        return _this;
	    }
	    BufferSkipCountSubscriber.prototype._next = function (value) {
	        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
	        this.count++;
	        if (count % startBufferEvery === 0) {
	            buffers.push([]);
	        }
	        for (var i = buffers.length; i--;) {
	            var buffer = buffers[i];
	            buffer.push(value);
	            if (buffer.length === bufferSize) {
	                buffers.splice(i, 1);
	                this.destination.next(buffer);
	            }
	        }
	    };
	    BufferSkipCountSubscriber.prototype._complete = function () {
	        var _a = this, buffers = _a.buffers, destination = _a.destination;
	        while (buffers.length > 0) {
	            var buffer = buffers.shift();
	            if (buffer.length > 0) {
	                destination.next(buffer);
	            }
	        }
	        _super.prototype._complete.call(this);
	    };
	    return BufferSkipCountSubscriber;
	}(Subscriber));
	//# sourceMappingURL=bufferCount.js.map

	/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */
	function bufferTime(bufferTimeSpan) {
	    var length = arguments.length;
	    var scheduler = async;
	    if (isScheduler(arguments[arguments.length - 1])) {
	        scheduler = arguments[arguments.length - 1];
	        length--;
	    }
	    var bufferCreationInterval = null;
	    if (length >= 2) {
	        bufferCreationInterval = arguments[1];
	    }
	    var maxBufferSize = Number.POSITIVE_INFINITY;
	    if (length >= 3) {
	        maxBufferSize = arguments[2];
	    }
	    return function bufferTimeOperatorFunction(source) {
	        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
	    };
	}
	var BufferTimeOperator = /*@__PURE__*/ (function () {
	    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
	        this.bufferTimeSpan = bufferTimeSpan;
	        this.bufferCreationInterval = bufferCreationInterval;
	        this.maxBufferSize = maxBufferSize;
	        this.scheduler = scheduler;
	    }
	    BufferTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
	    };
	    return BufferTimeOperator;
	}());
	var Context = /*@__PURE__*/ (function () {
	    function Context() {
	        this.buffer = [];
	    }
	    return Context;
	}());
	var BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferTimeSubscriber, _super);
	    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.bufferTimeSpan = bufferTimeSpan;
	        _this.bufferCreationInterval = bufferCreationInterval;
	        _this.maxBufferSize = maxBufferSize;
	        _this.scheduler = scheduler;
	        _this.contexts = [];
	        var context = _this.openContext();
	        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
	        if (_this.timespanOnly) {
	            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
	            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	        else {
	            var closeState = { subscriber: _this, context: context };
	            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
	            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
	            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
	        }
	        return _this;
	    }
	    BufferTimeSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        var filledBufferContext;
	        for (var i = 0; i < len; i++) {
	            var context_1 = contexts[i];
	            var buffer = context_1.buffer;
	            buffer.push(value);
	            if (buffer.length == this.maxBufferSize) {
	                filledBufferContext = context_1;
	            }
	        }
	        if (filledBufferContext) {
	            this.onBufferFull(filledBufferContext);
	        }
	    };
	    BufferTimeSubscriber.prototype._error = function (err) {
	        this.contexts.length = 0;
	        _super.prototype._error.call(this, err);
	    };
	    BufferTimeSubscriber.prototype._complete = function () {
	        var _a = this, contexts = _a.contexts, destination = _a.destination;
	        while (contexts.length > 0) {
	            var context_2 = contexts.shift();
	            destination.next(context_2.buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    BufferTimeSubscriber.prototype._unsubscribe = function () {
	        this.contexts = null;
	    };
	    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
	        this.closeContext(context);
	        var closeAction = context.closeAction;
	        closeAction.unsubscribe();
	        this.remove(closeAction);
	        if (!this.closed && this.timespanOnly) {
	            context = this.openContext();
	            var bufferTimeSpan = this.bufferTimeSpan;
	            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
	            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	    };
	    BufferTimeSubscriber.prototype.openContext = function () {
	        var context = new Context();
	        this.contexts.push(context);
	        return context;
	    };
	    BufferTimeSubscriber.prototype.closeContext = function (context) {
	        this.destination.next(context.buffer);
	        var contexts = this.contexts;
	        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
	        if (spliceIndex >= 0) {
	            contexts.splice(contexts.indexOf(context), 1);
	        }
	    };
	    return BufferTimeSubscriber;
	}(Subscriber));
	function dispatchBufferTimeSpanOnly(state) {
	    var subscriber = state.subscriber;
	    var prevContext = state.context;
	    if (prevContext) {
	        subscriber.closeContext(prevContext);
	    }
	    if (!subscriber.closed) {
	        state.context = subscriber.openContext();
	        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
	    }
	}
	function dispatchBufferCreation(state) {
	    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
	    var context = subscriber.openContext();
	    var action = this;
	    if (!subscriber.closed) {
	        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
	        action.schedule(state, bufferCreationInterval);
	    }
	}
	function dispatchBufferClose(arg) {
	    var subscriber = arg.subscriber, context = arg.context;
	    subscriber.closeContext(context);
	}
	//# sourceMappingURL=bufferTime.js.map

	/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
	function bufferToggle(openings, closingSelector) {
	    return function bufferToggleOperatorFunction(source) {
	        return source.lift(new BufferToggleOperator(openings, closingSelector));
	    };
	}
	var BufferToggleOperator = /*@__PURE__*/ (function () {
	    function BufferToggleOperator(openings, closingSelector) {
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }
	    BufferToggleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
	    };
	    return BufferToggleOperator;
	}());
	var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferToggleSubscriber, _super);
	    function BufferToggleSubscriber(destination, openings, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.openings = openings;
	        _this.closingSelector = closingSelector;
	        _this.contexts = [];
	        _this.add(subscribeToResult(_this, openings));
	        return _this;
	    }
	    BufferToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        for (var i = 0; i < len; i++) {
	            contexts[i].buffer.push(value);
	        }
	    };
	    BufferToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context_1 = contexts.shift();
	            context_1.subscription.unsubscribe();
	            context_1.buffer = null;
	            context_1.subscription = null;
	        }
	        this.contexts = null;
	        _super.prototype._error.call(this, err);
	    };
	    BufferToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context_2 = contexts.shift();
	            this.destination.next(context_2.buffer);
	            context_2.subscription.unsubscribe();
	            context_2.buffer = null;
	            context_2.subscription = null;
	        }
	        this.contexts = null;
	        _super.prototype._complete.call(this);
	    };
	    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
	    };
	    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.closeBuffer(innerSub.context);
	    };
	    BufferToggleSubscriber.prototype.openBuffer = function (value) {
	        try {
	            var closingSelector = this.closingSelector;
	            var closingNotifier = closingSelector.call(this, value);
	            if (closingNotifier) {
	                this.trySubscribe(closingNotifier);
	            }
	        }
	        catch (err) {
	            this._error(err);
	        }
	    };
	    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
	        var contexts = this.contexts;
	        if (contexts && context) {
	            var buffer = context.buffer, subscription = context.subscription;
	            this.destination.next(buffer);
	            contexts.splice(contexts.indexOf(context), 1);
	            this.remove(subscription);
	            subscription.unsubscribe();
	        }
	    };
	    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
	        var contexts = this.contexts;
	        var buffer = [];
	        var subscription = new Subscription();
	        var context = { buffer: buffer, subscription: subscription };
	        contexts.push(context);
	        var innerSubscription = subscribeToResult(this, closingNotifier, context);
	        if (!innerSubscription || innerSubscription.closed) {
	            this.closeBuffer(context);
	        }
	        else {
	            innerSubscription.context = context;
	            this.add(innerSubscription);
	            subscription.add(innerSubscription);
	        }
	    };
	    return BufferToggleSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=bufferToggle.js.map

	/** PURE_IMPORTS_START tslib,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function bufferWhen(closingSelector) {
	    return function (source) {
	        return source.lift(new BufferWhenOperator(closingSelector));
	    };
	}
	var BufferWhenOperator = /*@__PURE__*/ (function () {
	    function BufferWhenOperator(closingSelector) {
	        this.closingSelector = closingSelector;
	    }
	    BufferWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
	    };
	    return BufferWhenOperator;
	}());
	var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferWhenSubscriber, _super);
	    function BufferWhenSubscriber(destination, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.closingSelector = closingSelector;
	        _this.subscribing = false;
	        _this.openBuffer();
	        return _this;
	    }
	    BufferWhenSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferWhenSubscriber.prototype._complete = function () {
	        var buffer = this.buffer;
	        if (buffer) {
	            this.destination.next(buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    BufferWhenSubscriber.prototype._unsubscribe = function () {
	        this.buffer = null;
	        this.subscribing = false;
	    };
	    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.openBuffer();
	    };
	    BufferWhenSubscriber.prototype.notifyComplete = function () {
	        if (this.subscribing) {
	            this.complete();
	        }
	        else {
	            this.openBuffer();
	        }
	    };
	    BufferWhenSubscriber.prototype.openBuffer = function () {
	        var closingSubscription = this.closingSubscription;
	        if (closingSubscription) {
	            this.remove(closingSubscription);
	            closingSubscription.unsubscribe();
	        }
	        var buffer = this.buffer;
	        if (this.buffer) {
	            this.destination.next(buffer);
	        }
	        this.buffer = [];
	        var closingNotifier;
	        try {
	            var closingSelector = this.closingSelector;
	            closingNotifier = closingSelector();
	        }
	        catch (err) {
	            return this.error(err);
	        }
	        closingSubscription = new Subscription();
	        this.closingSubscription = closingSubscription;
	        this.add(closingSubscription);
	        this.subscribing = true;
	        closingSubscription.add(subscribeToResult(this, closingNotifier));
	        this.subscribing = false;
	    };
	    return BufferWhenSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=bufferWhen.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function catchError(selector) {
	    return function catchErrorOperatorFunction(source) {
	        var operator = new CatchOperator(selector);
	        var caught = source.lift(operator);
	        return (operator.caught = caught);
	    };
	}
	var CatchOperator = /*@__PURE__*/ (function () {
	    function CatchOperator(selector) {
	        this.selector = selector;
	    }
	    CatchOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
	    };
	    return CatchOperator;
	}());
	var CatchSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(CatchSubscriber, _super);
	    function CatchSubscriber(destination, selector, caught) {
	        var _this = _super.call(this, destination) || this;
	        _this.selector = selector;
	        _this.caught = caught;
	        return _this;
	    }
	    CatchSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var result = void 0;
	            try {
	                result = this.selector(err, this.caught);
	            }
	            catch (err2) {
	                _super.prototype.error.call(this, err2);
	                return;
	            }
	            this._unsubscribeAndRecycle();
	            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
	            this.add(innerSubscriber);
	            var innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);
	            if (innerSubscription !== innerSubscriber) {
	                this.add(innerSubscription);
	            }
	        }
	    };
	    return CatchSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=catchError.js.map

	/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */
	function combineAll(project) {
	    return function (source) { return source.lift(new CombineLatestOperator(project)); };
	}
	//# sourceMappingURL=combineAll.js.map

	/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */
	function combineLatest$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var project = null;
	    if (typeof observables[observables.length - 1] === 'function') {
	        project = observables.pop();
	    }
	    if (observables.length === 1 && isArray(observables[0])) {
	        observables = observables[0].slice();
	    }
	    return function (source) { return source.lift.call(from$1([source].concat(observables)), new CombineLatestOperator(project)); };
	}
	//# sourceMappingURL=combineLatest.js.map

	/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */
	function concat$2() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return function (source) { return source.lift.call(concat$1.apply(void 0, [source].concat(observables))); };
	}
	//# sourceMappingURL=concat.js.map

	/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
	function concatMap(project, resultSelector) {
	    return mergeMap(project, resultSelector, 1);
	}
	//# sourceMappingURL=concatMap.js.map

	/** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */
	function concatMapTo(innerObservable, resultSelector) {
	    return concatMap(function () { return innerObservable; }, resultSelector);
	}
	//# sourceMappingURL=concatMapTo.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function count(predicate) {
	    return function (source) { return source.lift(new CountOperator(predicate, source)); };
	}
	var CountOperator = /*@__PURE__*/ (function () {
	    function CountOperator(predicate, source) {
	        this.predicate = predicate;
	        this.source = source;
	    }
	    CountOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
	    };
	    return CountOperator;
	}());
	var CountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(CountSubscriber, _super);
	    function CountSubscriber(destination, predicate, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.source = source;
	        _this.count = 0;
	        _this.index = 0;
	        return _this;
	    }
	    CountSubscriber.prototype._next = function (value) {
	        if (this.predicate) {
	            this._tryPredicate(value);
	        }
	        else {
	            this.count++;
	        }
	    };
	    CountSubscriber.prototype._tryPredicate = function (value) {
	        var result;
	        try {
	            result = this.predicate(value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.count++;
	        }
	    };
	    CountSubscriber.prototype._complete = function () {
	        this.destination.next(this.count);
	        this.destination.complete();
	    };
	    return CountSubscriber;
	}(Subscriber));
	//# sourceMappingURL=count.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function debounce(durationSelector) {
	    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };
	}
	var DebounceOperator = /*@__PURE__*/ (function () {
	    function DebounceOperator(durationSelector) {
	        this.durationSelector = durationSelector;
	    }
	    DebounceOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
	    };
	    return DebounceOperator;
	}());
	var DebounceSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DebounceSubscriber, _super);
	    function DebounceSubscriber(destination, durationSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.durationSelector = durationSelector;
	        _this.hasValue = false;
	        _this.durationSubscription = null;
	        return _this;
	    }
	    DebounceSubscriber.prototype._next = function (value) {
	        try {
	            var result = this.durationSelector.call(this, value);
	            if (result) {
	                this._tryNext(value, result);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    DebounceSubscriber.prototype._complete = function () {
	        this.emitValue();
	        this.destination.complete();
	    };
	    DebounceSubscriber.prototype._tryNext = function (value, duration) {
	        var subscription = this.durationSubscription;
	        this.value = value;
	        this.hasValue = true;
	        if (subscription) {
	            subscription.unsubscribe();
	            this.remove(subscription);
	        }
	        subscription = subscribeToResult(this, duration);
	        if (subscription && !subscription.closed) {
	            this.add(this.durationSubscription = subscription);
	        }
	    };
	    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.emitValue();
	    };
	    DebounceSubscriber.prototype.notifyComplete = function () {
	        this.emitValue();
	    };
	    DebounceSubscriber.prototype.emitValue = function () {
	        if (this.hasValue) {
	            var value = this.value;
	            var subscription = this.durationSubscription;
	            if (subscription) {
	                this.durationSubscription = null;
	                subscription.unsubscribe();
	                this.remove(subscription);
	            }
	            this.value = null;
	            this.hasValue = false;
	            _super.prototype._next.call(this, value);
	        }
	    };
	    return DebounceSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=debounce.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
	function debounceTime(dueTime, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
	}
	var DebounceTimeOperator = /*@__PURE__*/ (function () {
	    function DebounceTimeOperator(dueTime, scheduler) {
	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	    }
	    DebounceTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
	    };
	    return DebounceTimeOperator;
	}());
	var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DebounceTimeSubscriber, _super);
	    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.dueTime = dueTime;
	        _this.scheduler = scheduler;
	        _this.debouncedSubscription = null;
	        _this.lastValue = null;
	        _this.hasValue = false;
	        return _this;
	    }
	    DebounceTimeSubscriber.prototype._next = function (value) {
	        this.clearDebounce();
	        this.lastValue = value;
	        this.hasValue = true;
	        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$2, this.dueTime, this));
	    };
	    DebounceTimeSubscriber.prototype._complete = function () {
	        this.debouncedNext();
	        this.destination.complete();
	    };
	    DebounceTimeSubscriber.prototype.debouncedNext = function () {
	        this.clearDebounce();
	        if (this.hasValue) {
	            var lastValue = this.lastValue;
	            this.lastValue = null;
	            this.hasValue = false;
	            this.destination.next(lastValue);
	        }
	    };
	    DebounceTimeSubscriber.prototype.clearDebounce = function () {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription !== null) {
	            this.remove(debouncedSubscription);
	            debouncedSubscription.unsubscribe();
	            this.debouncedSubscription = null;
	        }
	    };
	    return DebounceTimeSubscriber;
	}(Subscriber));
	function dispatchNext$2(subscriber) {
	    subscriber.debouncedNext();
	}
	//# sourceMappingURL=debounceTime.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function defaultIfEmpty(defaultValue) {
	    if (defaultValue === void 0) {
	        defaultValue = null;
	    }
	    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
	}
	var DefaultIfEmptyOperator = /*@__PURE__*/ (function () {
	    function DefaultIfEmptyOperator(defaultValue) {
	        this.defaultValue = defaultValue;
	    }
	    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
	    };
	    return DefaultIfEmptyOperator;
	}());
	var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DefaultIfEmptySubscriber, _super);
	    function DefaultIfEmptySubscriber(destination, defaultValue) {
	        var _this = _super.call(this, destination) || this;
	        _this.defaultValue = defaultValue;
	        _this.isEmpty = true;
	        return _this;
	    }
	    DefaultIfEmptySubscriber.prototype._next = function (value) {
	        this.isEmpty = false;
	        this.destination.next(value);
	    };
	    DefaultIfEmptySubscriber.prototype._complete = function () {
	        if (this.isEmpty) {
	            this.destination.next(this.defaultValue);
	        }
	        this.destination.complete();
	    };
	    return DefaultIfEmptySubscriber;
	}(Subscriber));
	//# sourceMappingURL=defaultIfEmpty.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isDate(value) {
	    return value instanceof Date && !isNaN(+value);
	}
	//# sourceMappingURL=isDate.js.map

	/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */
	function delay(delay, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    var absoluteDelay = isDate(delay);
	    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
	    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };
	}
	var DelayOperator = /*@__PURE__*/ (function () {
	    function DelayOperator(delay, scheduler) {
	        this.delay = delay;
	        this.scheduler = scheduler;
	    }
	    DelayOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
	    };
	    return DelayOperator;
	}());
	var DelaySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DelaySubscriber, _super);
	    function DelaySubscriber(destination, delay, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.delay = delay;
	        _this.scheduler = scheduler;
	        _this.queue = [];
	        _this.active = false;
	        _this.errored = false;
	        return _this;
	    }
	    DelaySubscriber.dispatch = function (state) {
	        var source = state.source;
	        var queue = source.queue;
	        var scheduler = state.scheduler;
	        var destination = state.destination;
	        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
	            queue.shift().notification.observe(destination);
	        }
	        if (queue.length > 0) {
	            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
	            this.schedule(state, delay_1);
	        }
	        else {
	            this.unsubscribe();
	            source.active = false;
	        }
	    };
	    DelaySubscriber.prototype._schedule = function (scheduler) {
	        this.active = true;
	        var destination = this.destination;
	        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
	            source: this, destination: this.destination, scheduler: scheduler
	        }));
	    };
	    DelaySubscriber.prototype.scheduleNotification = function (notification) {
	        if (this.errored === true) {
	            return;
	        }
	        var scheduler = this.scheduler;
	        var message = new DelayMessage(scheduler.now() + this.delay, notification);
	        this.queue.push(message);
	        if (this.active === false) {
	            this._schedule(scheduler);
	        }
	    };
	    DelaySubscriber.prototype._next = function (value) {
	        this.scheduleNotification(Notification.createNext(value));
	    };
	    DelaySubscriber.prototype._error = function (err) {
	        this.errored = true;
	        this.queue = [];
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    DelaySubscriber.prototype._complete = function () {
	        this.scheduleNotification(Notification.createComplete());
	        this.unsubscribe();
	    };
	    return DelaySubscriber;
	}(Subscriber));
	var DelayMessage = /*@__PURE__*/ (function () {
	    function DelayMessage(time, notification) {
	        this.time = time;
	        this.notification = notification;
	    }
	    return DelayMessage;
	}());
	//# sourceMappingURL=delay.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function delayWhen(delayDurationSelector, subscriptionDelay) {
	    if (subscriptionDelay) {
	        return function (source) {
	            return new SubscriptionDelayObservable(source, subscriptionDelay)
	                .lift(new DelayWhenOperator(delayDurationSelector));
	        };
	    }
	    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };
	}
	var DelayWhenOperator = /*@__PURE__*/ (function () {
	    function DelayWhenOperator(delayDurationSelector) {
	        this.delayDurationSelector = delayDurationSelector;
	    }
	    DelayWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
	    };
	    return DelayWhenOperator;
	}());
	var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DelayWhenSubscriber, _super);
	    function DelayWhenSubscriber(destination, delayDurationSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.delayDurationSelector = delayDurationSelector;
	        _this.completed = false;
	        _this.delayNotifierSubscriptions = [];
	        _this.index = 0;
	        return _this;
	    }
	    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(outerValue);
	        this.removeSubscription(innerSub);
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
	        var value = this.removeSubscription(innerSub);
	        if (value) {
	            this.destination.next(value);
	        }
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        try {
	            var delayNotifier = this.delayDurationSelector(value, index);
	            if (delayNotifier) {
	                this.tryDelay(delayNotifier, value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    DelayWhenSubscriber.prototype._complete = function () {
	        this.completed = true;
	        this.tryComplete();
	        this.unsubscribe();
	    };
	    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
	        subscription.unsubscribe();
	        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
	        if (subscriptionIdx !== -1) {
	            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
	        }
	        return subscription.outerValue;
	    };
	    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
	        var notifierSubscription = subscribeToResult(this, delayNotifier, value);
	        if (notifierSubscription && !notifierSubscription.closed) {
	            var destination = this.destination;
	            destination.add(notifierSubscription);
	            this.delayNotifierSubscriptions.push(notifierSubscription);
	        }
	    };
	    DelayWhenSubscriber.prototype.tryComplete = function () {
	        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
	            this.destination.complete();
	        }
	    };
	    return DelayWhenSubscriber;
	}(OuterSubscriber));
	var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
	    __extends(SubscriptionDelayObservable, _super);
	    function SubscriptionDelayObservable(source, subscriptionDelay) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subscriptionDelay = subscriptionDelay;
	        return _this;
	    }
	    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
	        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
	    };
	    return SubscriptionDelayObservable;
	}(Observable));
	var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SubscriptionDelaySubscriber, _super);
	    function SubscriptionDelaySubscriber(parent, source) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        _this.source = source;
	        _this.sourceSubscribed = false;
	        return _this;
	    }
	    SubscriptionDelaySubscriber.prototype._next = function (unused) {
	        this.subscribeToSource();
	    };
	    SubscriptionDelaySubscriber.prototype._error = function (err) {
	        this.unsubscribe();
	        this.parent.error(err);
	    };
	    SubscriptionDelaySubscriber.prototype._complete = function () {
	        this.unsubscribe();
	        this.subscribeToSource();
	    };
	    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
	        if (!this.sourceSubscribed) {
	            this.sourceSubscribed = true;
	            this.unsubscribe();
	            this.source.subscribe(this.parent);
	        }
	    };
	    return SubscriptionDelaySubscriber;
	}(Subscriber));
	//# sourceMappingURL=delayWhen.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function dematerialize() {
	    return function dematerializeOperatorFunction(source) {
	        return source.lift(new DeMaterializeOperator());
	    };
	}
	var DeMaterializeOperator = /*@__PURE__*/ (function () {
	    function DeMaterializeOperator() {
	    }
	    DeMaterializeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DeMaterializeSubscriber(subscriber));
	    };
	    return DeMaterializeOperator;
	}());
	var DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DeMaterializeSubscriber, _super);
	    function DeMaterializeSubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    DeMaterializeSubscriber.prototype._next = function (value) {
	        value.observe(this.destination);
	    };
	    return DeMaterializeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=dematerialize.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function distinct(keySelector, flushes) {
	    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };
	}
	var DistinctOperator = /*@__PURE__*/ (function () {
	    function DistinctOperator(keySelector, flushes) {
	        this.keySelector = keySelector;
	        this.flushes = flushes;
	    }
	    DistinctOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
	    };
	    return DistinctOperator;
	}());
	var DistinctSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DistinctSubscriber, _super);
	    function DistinctSubscriber(destination, keySelector, flushes) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.values = new Set();
	        if (flushes) {
	            _this.add(subscribeToResult(_this, flushes));
	        }
	        return _this;
	    }
	    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.values.clear();
	    };
	    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    DistinctSubscriber.prototype._next = function (value) {
	        if (this.keySelector) {
	            this._useKeySelector(value);
	        }
	        else {
	            this._finalizeNext(value, value);
	        }
	    };
	    DistinctSubscriber.prototype._useKeySelector = function (value) {
	        var key;
	        var destination = this.destination;
	        try {
	            key = this.keySelector(value);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        this._finalizeNext(key, value);
	    };
	    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
	        var values = this.values;
	        if (!values.has(key)) {
	            values.add(key);
	            this.destination.next(value);
	        }
	    };
	    return DistinctSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=distinct.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function distinctUntilChanged(compare, keySelector) {
	    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
	}
	var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
	    function DistinctUntilChangedOperator(compare, keySelector) {
	        this.compare = compare;
	        this.keySelector = keySelector;
	    }
	    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
	    };
	    return DistinctUntilChangedOperator;
	}());
	var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DistinctUntilChangedSubscriber, _super);
	    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.hasKey = false;
	        if (typeof compare === 'function') {
	            _this.compare = compare;
	        }
	        return _this;
	    }
	    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
	        return x === y;
	    };
	    DistinctUntilChangedSubscriber.prototype._next = function (value) {
	        var key;
	        try {
	            var keySelector = this.keySelector;
	            key = keySelector ? keySelector(value) : value;
	        }
	        catch (err) {
	            return this.destination.error(err);
	        }
	        var result = false;
	        if (this.hasKey) {
	            try {
	                var compare = this.compare;
	                result = compare(this.key, key);
	            }
	            catch (err) {
	                return this.destination.error(err);
	            }
	        }
	        else {
	            this.hasKey = true;
	        }
	        if (!result) {
	            this.key = key;
	            this.destination.next(value);
	        }
	    };
	    return DistinctUntilChangedSubscriber;
	}(Subscriber));
	//# sourceMappingURL=distinctUntilChanged.js.map

	/** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */
	function distinctUntilKeyChanged(key, compare) {
	    return distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
	}
	//# sourceMappingURL=distinctUntilKeyChanged.js.map

	/** PURE_IMPORTS_START tslib,_util_EmptyError,_Subscriber PURE_IMPORTS_END */
	function throwIfEmpty(errorFactory) {
	    if (errorFactory === void 0) {
	        errorFactory = defaultErrorFactory;
	    }
	    return function (source) {
	        return source.lift(new ThrowIfEmptyOperator(errorFactory));
	    };
	}
	var ThrowIfEmptyOperator = /*@__PURE__*/ (function () {
	    function ThrowIfEmptyOperator(errorFactory) {
	        this.errorFactory = errorFactory;
	    }
	    ThrowIfEmptyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
	    };
	    return ThrowIfEmptyOperator;
	}());
	var ThrowIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ThrowIfEmptySubscriber, _super);
	    function ThrowIfEmptySubscriber(destination, errorFactory) {
	        var _this = _super.call(this, destination) || this;
	        _this.errorFactory = errorFactory;
	        _this.hasValue = false;
	        return _this;
	    }
	    ThrowIfEmptySubscriber.prototype._next = function (value) {
	        this.hasValue = true;
	        this.destination.next(value);
	    };
	    ThrowIfEmptySubscriber.prototype._complete = function () {
	        if (!this.hasValue) {
	            var err = void 0;
	            try {
	                err = this.errorFactory();
	            }
	            catch (e) {
	                err = e;
	            }
	            this.destination.error(err);
	        }
	        else {
	            return this.destination.complete();
	        }
	    };
	    return ThrowIfEmptySubscriber;
	}(Subscriber));
	function defaultErrorFactory() {
	    return new EmptyError();
	}
	//# sourceMappingURL=throwIfEmpty.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
	function take$1(count) {
	    return function (source) {
	        if (count === 0) {
	            return empty$2();
	        }
	        else {
	            return source.lift(new TakeOperator(count));
	        }
	    };
	}
	var TakeOperator = /*@__PURE__*/ (function () {
	    function TakeOperator(total) {
	        this.total = total;
	        if (this.total < 0) {
	            throw new ArgumentOutOfRangeError;
	        }
	    }
	    TakeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeSubscriber(subscriber, this.total));
	    };
	    return TakeOperator;
	}());
	var TakeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeSubscriber, _super);
	    function TakeSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.count = 0;
	        return _this;
	    }
	    TakeSubscriber.prototype._next = function (value) {
	        var total = this.total;
	        var count = ++this.count;
	        if (count <= total) {
	            this.destination.next(value);
	            if (count === total) {
	                this.destination.complete();
	                this.unsubscribe();
	            }
	        }
	    };
	    return TakeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=take.js.map

	/** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */
	function elementAt(index, defaultValue) {
	    if (index < 0) {
	        throw new ArgumentOutOfRangeError();
	    }
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(filter$1(function (v, i) { return i === index; }), take$1(1), hasDefaultValue
	            ? defaultIfEmpty(defaultValue)
	            : throwIfEmpty(function () { return new ArgumentOutOfRangeError(); }));
	    };
	}
	//# sourceMappingURL=elementAt.js.map

	/** PURE_IMPORTS_START _observable_concat,_observable_of PURE_IMPORTS_END */
	function endWith() {
	    var array = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        array[_i] = arguments[_i];
	    }
	    return function (source) { return concat$1(source, of$1.apply(void 0, array)); };
	}
	//# sourceMappingURL=endWith.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function every(predicate, thisArg) {
	    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };
	}
	var EveryOperator = /*@__PURE__*/ (function () {
	    function EveryOperator(predicate, thisArg, source) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	    }
	    EveryOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
	    };
	    return EveryOperator;
	}());
	var EverySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(EverySubscriber, _super);
	    function EverySubscriber(destination, predicate, thisArg, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.thisArg = thisArg;
	        _this.source = source;
	        _this.index = 0;
	        _this.thisArg = thisArg || _this;
	        return _this;
	    }
	    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
	        this.destination.next(everyValueMatch);
	        this.destination.complete();
	    };
	    EverySubscriber.prototype._next = function (value) {
	        var result = false;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (!result) {
	            this.notifyComplete(false);
	        }
	    };
	    EverySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return EverySubscriber;
	}(Subscriber));
	//# sourceMappingURL=every.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function exhaust() {
	    return function (source) { return source.lift(new SwitchFirstOperator()); };
	}
	var SwitchFirstOperator = /*@__PURE__*/ (function () {
	    function SwitchFirstOperator() {
	    }
	    SwitchFirstOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SwitchFirstSubscriber(subscriber));
	    };
	    return SwitchFirstOperator;
	}());
	var SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SwitchFirstSubscriber, _super);
	    function SwitchFirstSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasCompleted = false;
	        _this.hasSubscription = false;
	        return _this;
	    }
	    SwitchFirstSubscriber.prototype._next = function (value) {
	        if (!this.hasSubscription) {
	            this.hasSubscription = true;
	            this.add(subscribeToResult(this, value));
	        }
	    };
	    SwitchFirstSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (!this.hasSubscription) {
	            this.destination.complete();
	        }
	    };
	    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        this.hasSubscription = false;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return SwitchFirstSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=exhaust.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
	function exhaustMap(project, resultSelector) {
	    if (resultSelector) {
	        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from$1(project(a, i)).pipe(map$2(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
	    }
	    return function (source) {
	        return source.lift(new ExhaustMapOperator(project));
	    };
	}
	var ExhaustMapOperator = /*@__PURE__*/ (function () {
	    function ExhaustMapOperator(project) {
	        this.project = project;
	    }
	    ExhaustMapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
	    };
	    return ExhaustMapOperator;
	}());
	var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ExhaustMapSubscriber, _super);
	    function ExhaustMapSubscriber(destination, project) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.hasSubscription = false;
	        _this.hasCompleted = false;
	        _this.index = 0;
	        return _this;
	    }
	    ExhaustMapSubscriber.prototype._next = function (value) {
	        if (!this.hasSubscription) {
	            this.tryNext(value);
	        }
	    };
	    ExhaustMapSubscriber.prototype.tryNext = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.hasSubscription = true;
	        this._innerSub(result, value, index);
	    };
	    ExhaustMapSubscriber.prototype._innerSub = function (result, value, index) {
	        var innerSubscriber = new InnerSubscriber(this, value, index);
	        var destination = this.destination;
	        destination.add(innerSubscriber);
	        var innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);
	        if (innerSubscription !== innerSubscriber) {
	            destination.add(innerSubscription);
	        }
	    };
	    ExhaustMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (!this.hasSubscription) {
	            this.destination.complete();
	        }
	        this.unsubscribe();
	    };
	    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    ExhaustMapSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        var destination = this.destination;
	        destination.remove(innerSub);
	        this.hasSubscription = false;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return ExhaustMapSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=exhaustMap.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function expand(project, concurrent, scheduler) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    if (scheduler === void 0) {
	        scheduler = undefined;
	    }
	    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
	    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };
	}
	var ExpandOperator = /*@__PURE__*/ (function () {
	    function ExpandOperator(project, concurrent, scheduler) {
	        this.project = project;
	        this.concurrent = concurrent;
	        this.scheduler = scheduler;
	    }
	    ExpandOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
	    };
	    return ExpandOperator;
	}());
	var ExpandSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ExpandSubscriber, _super);
	    function ExpandSubscriber(destination, project, concurrent, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.concurrent = concurrent;
	        _this.scheduler = scheduler;
	        _this.index = 0;
	        _this.active = 0;
	        _this.hasCompleted = false;
	        if (concurrent < Number.POSITIVE_INFINITY) {
	            _this.buffer = [];
	        }
	        return _this;
	    }
	    ExpandSubscriber.dispatch = function (arg) {
	        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
	        subscriber.subscribeToProjection(result, value, index);
	    };
	    ExpandSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (destination.closed) {
	            this._complete();
	            return;
	        }
	        var index = this.index++;
	        if (this.active < this.concurrent) {
	            destination.next(value);
	            try {
	                var project = this.project;
	                var result = project(value, index);
	                if (!this.scheduler) {
	                    this.subscribeToProjection(result, value, index);
	                }
	                else {
	                    var state = { subscriber: this, result: result, value: value, index: index };
	                    var destination_1 = this.destination;
	                    destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
	                }
	            }
	            catch (e) {
	                destination.error(e);
	            }
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
	        this.active++;
	        var destination = this.destination;
	        destination.add(subscribeToResult(this, result, value, index));
	    };
	    ExpandSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	        this.unsubscribe();
	    };
	    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this._next(innerValue);
	    };
	    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        var destination = this.destination;
	        destination.remove(innerSub);
	        this.active--;
	        if (buffer && buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    return ExpandSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=expand.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */
	function finalize(callback) {
	    return function (source) { return source.lift(new FinallyOperator(callback)); };
	}
	var FinallyOperator = /*@__PURE__*/ (function () {
	    function FinallyOperator(callback) {
	        this.callback = callback;
	    }
	    FinallyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
	    };
	    return FinallyOperator;
	}());
	var FinallySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(FinallySubscriber, _super);
	    function FinallySubscriber(destination, callback) {
	        var _this = _super.call(this, destination) || this;
	        _this.add(new Subscription(callback));
	        return _this;
	    }
	    return FinallySubscriber;
	}(Subscriber));
	//# sourceMappingURL=finalize.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function find$1(predicate, thisArg) {
	    if (typeof predicate !== 'function') {
	        throw new TypeError('predicate is not a function');
	    }
	    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };
	}
	var FindValueOperator = /*@__PURE__*/ (function () {
	    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
	        this.predicate = predicate;
	        this.source = source;
	        this.yieldIndex = yieldIndex;
	        this.thisArg = thisArg;
	    }
	    FindValueOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
	    };
	    return FindValueOperator;
	}());
	var FindValueSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(FindValueSubscriber, _super);
	    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.source = source;
	        _this.yieldIndex = yieldIndex;
	        _this.thisArg = thisArg;
	        _this.index = 0;
	        return _this;
	    }
	    FindValueSubscriber.prototype.notifyComplete = function (value) {
	        var destination = this.destination;
	        destination.next(value);
	        destination.complete();
	        this.unsubscribe();
	    };
	    FindValueSubscriber.prototype._next = function (value) {
	        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
	        var index = this.index++;
	        try {
	            var result = predicate.call(thisArg || this, value, index, this.source);
	            if (result) {
	                this.notifyComplete(this.yieldIndex ? index : value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    FindValueSubscriber.prototype._complete = function () {
	        this.notifyComplete(this.yieldIndex ? -1 : undefined);
	    };
	    return FindValueSubscriber;
	}(Subscriber));
	//# sourceMappingURL=find.js.map

	/** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */
	function findIndex$1(predicate, thisArg) {
	    return function (source) { return source.lift(new FindValueOperator(predicate, source, true, thisArg)); };
	}
	//# sourceMappingURL=findIndex.js.map

	/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */
	function first(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) { return source.pipe(predicate ? filter$1(function (v, i) { return predicate(v, i, source); }) : identity$1, take$1(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
	}
	//# sourceMappingURL=first.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function ignoreElements() {
	    return function ignoreElementsOperatorFunction(source) {
	        return source.lift(new IgnoreElementsOperator());
	    };
	}
	var IgnoreElementsOperator = /*@__PURE__*/ (function () {
	    function IgnoreElementsOperator() {
	    }
	    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
	    };
	    return IgnoreElementsOperator;
	}());
	var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(IgnoreElementsSubscriber, _super);
	    function IgnoreElementsSubscriber() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    IgnoreElementsSubscriber.prototype._next = function (unused) {
	    };
	    return IgnoreElementsSubscriber;
	}(Subscriber));
	//# sourceMappingURL=ignoreElements.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function isEmpty$1() {
	    return function (source) { return source.lift(new IsEmptyOperator()); };
	}
	var IsEmptyOperator = /*@__PURE__*/ (function () {
	    function IsEmptyOperator() {
	    }
	    IsEmptyOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new IsEmptySubscriber(observer));
	    };
	    return IsEmptyOperator;
	}());
	var IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(IsEmptySubscriber, _super);
	    function IsEmptySubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
	        var destination = this.destination;
	        destination.next(isEmpty);
	        destination.complete();
	    };
	    IsEmptySubscriber.prototype._next = function (value) {
	        this.notifyComplete(false);
	    };
	    IsEmptySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return IsEmptySubscriber;
	}(Subscriber));
	//# sourceMappingURL=isEmpty.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
	function takeLast$1(count) {
	    return function takeLastOperatorFunction(source) {
	        if (count === 0) {
	            return empty$2();
	        }
	        else {
	            return source.lift(new TakeLastOperator(count));
	        }
	    };
	}
	var TakeLastOperator = /*@__PURE__*/ (function () {
	    function TakeLastOperator(total) {
	        this.total = total;
	        if (this.total < 0) {
	            throw new ArgumentOutOfRangeError;
	        }
	    }
	    TakeLastOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
	    };
	    return TakeLastOperator;
	}());
	var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeLastSubscriber, _super);
	    function TakeLastSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.ring = new Array();
	        _this.count = 0;
	        return _this;
	    }
	    TakeLastSubscriber.prototype._next = function (value) {
	        var ring = this.ring;
	        var total = this.total;
	        var count = this.count++;
	        if (ring.length < total) {
	            ring.push(value);
	        }
	        else {
	            var index = count % total;
	            ring[index] = value;
	        }
	    };
	    TakeLastSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        var count = this.count;
	        if (count > 0) {
	            var total = this.count >= this.total ? this.total : this.count;
	            var ring = this.ring;
	            for (var i = 0; i < total; i++) {
	                var idx = (count++) % total;
	                destination.next(ring[idx]);
	            }
	        }
	        destination.complete();
	    };
	    return TakeLastSubscriber;
	}(Subscriber));
	//# sourceMappingURL=takeLast.js.map

	/** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */
	function last$2(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) { return source.pipe(predicate ? filter$1(function (v, i) { return predicate(v, i, source); }) : identity$1, takeLast$1(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
	}
	//# sourceMappingURL=last.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function mapTo(value) {
	    return function (source) { return source.lift(new MapToOperator(value)); };
	}
	var MapToOperator = /*@__PURE__*/ (function () {
	    function MapToOperator(value) {
	        this.value = value;
	    }
	    MapToOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MapToSubscriber(subscriber, this.value));
	    };
	    return MapToOperator;
	}());
	var MapToSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MapToSubscriber, _super);
	    function MapToSubscriber(destination, value) {
	        var _this = _super.call(this, destination) || this;
	        _this.value = value;
	        return _this;
	    }
	    MapToSubscriber.prototype._next = function (x) {
	        this.destination.next(this.value);
	    };
	    return MapToSubscriber;
	}(Subscriber));
	//# sourceMappingURL=mapTo.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
	function materialize() {
	    return function materializeOperatorFunction(source) {
	        return source.lift(new MaterializeOperator());
	    };
	}
	var MaterializeOperator = /*@__PURE__*/ (function () {
	    function MaterializeOperator() {
	    }
	    MaterializeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MaterializeSubscriber(subscriber));
	    };
	    return MaterializeOperator;
	}());
	var MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MaterializeSubscriber, _super);
	    function MaterializeSubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    MaterializeSubscriber.prototype._next = function (value) {
	        this.destination.next(Notification.createNext(value));
	    };
	    MaterializeSubscriber.prototype._error = function (err) {
	        var destination = this.destination;
	        destination.next(Notification.createError(err));
	        destination.complete();
	    };
	    MaterializeSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        destination.next(Notification.createComplete());
	        destination.complete();
	    };
	    return MaterializeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=materialize.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function scan$1(accumulator, seed) {
	    var hasSeed = false;
	    if (arguments.length >= 2) {
	        hasSeed = true;
	    }
	    return function scanOperatorFunction(source) {
	        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
	    };
	}
	var ScanOperator = /*@__PURE__*/ (function () {
	    function ScanOperator(accumulator, seed, hasSeed) {
	        if (hasSeed === void 0) {
	            hasSeed = false;
	        }
	        this.accumulator = accumulator;
	        this.seed = seed;
	        this.hasSeed = hasSeed;
	    }
	    ScanOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
	    };
	    return ScanOperator;
	}());
	var ScanSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ScanSubscriber, _super);
	    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
	        var _this = _super.call(this, destination) || this;
	        _this.accumulator = accumulator;
	        _this._seed = _seed;
	        _this.hasSeed = hasSeed;
	        _this.index = 0;
	        return _this;
	    }
	    Object.defineProperty(ScanSubscriber.prototype, "seed", {
	        get: function () {
	            return this._seed;
	        },
	        set: function (value) {
	            this.hasSeed = true;
	            this._seed = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScanSubscriber.prototype._next = function (value) {
	        if (!this.hasSeed) {
	            this.seed = value;
	            this.destination.next(value);
	        }
	        else {
	            return this._tryNext(value);
	        }
	    };
	    ScanSubscriber.prototype._tryNext = function (value) {
	        var index = this.index++;
	        var result;
	        try {
	            result = this.accumulator(this.seed, value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	        this.seed = result;
	        this.destination.next(result);
	    };
	    return ScanSubscriber;
	}(Subscriber));
	//# sourceMappingURL=scan.js.map

	/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */
	function reduce$1(accumulator, seed) {
	    if (arguments.length >= 2) {
	        return function reduceOperatorFunctionWithSeed(source) {
	            return pipe$1(scan$1(accumulator, seed), takeLast$1(1), defaultIfEmpty(seed))(source);
	        };
	    }
	    return function reduceOperatorFunction(source) {
	        return pipe$1(scan$1(function (acc, value, index) { return accumulator(acc, value, index + 1); }), takeLast$1(1))(source);
	    };
	}
	//# sourceMappingURL=reduce.js.map

	/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
	function max$1(comparer) {
	    var max = (typeof comparer === 'function')
	        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
	        : function (x, y) { return x > y ? x : y; };
	    return reduce$1(max);
	}
	//# sourceMappingURL=max.js.map

	/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */
	function merge$2() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return function (source) { return source.lift.call(merge$1.apply(void 0, [source].concat(observables))); };
	}
	//# sourceMappingURL=merge.js.map

	/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
	function mergeMapTo(innerObservable, resultSelector, concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    if (typeof resultSelector === 'function') {
	        return mergeMap(function () { return innerObservable; }, resultSelector, concurrent);
	    }
	    if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return mergeMap(function () { return innerObservable; }, concurrent);
	}
	//# sourceMappingURL=mergeMapTo.js.map

	/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber PURE_IMPORTS_END */
	function mergeScan(accumulator, seed, concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };
	}
	var MergeScanOperator = /*@__PURE__*/ (function () {
	    function MergeScanOperator(accumulator, seed, concurrent) {
	        this.accumulator = accumulator;
	        this.seed = seed;
	        this.concurrent = concurrent;
	    }
	    MergeScanOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
	    };
	    return MergeScanOperator;
	}());
	var MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MergeScanSubscriber, _super);
	    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
	        var _this = _super.call(this, destination) || this;
	        _this.accumulator = accumulator;
	        _this.acc = acc;
	        _this.concurrent = concurrent;
	        _this.hasValue = false;
	        _this.hasCompleted = false;
	        _this.buffer = [];
	        _this.active = 0;
	        _this.index = 0;
	        return _this;
	    }
	    MergeScanSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            var index = this.index++;
	            var destination = this.destination;
	            var ish = void 0;
	            try {
	                var accumulator = this.accumulator;
	                ish = accumulator(this.acc, value, index);
	            }
	            catch (e) {
	                return destination.error(e);
	            }
	            this.active++;
	            this._innerSub(ish, value, index);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
	        var innerSubscriber = new InnerSubscriber(this, value, index);
	        var destination = this.destination;
	        destination.add(innerSubscriber);
	        var innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);
	        if (innerSubscription !== innerSubscriber) {
	            destination.add(innerSubscription);
	        }
	    };
	    MergeScanSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            if (this.hasValue === false) {
	                this.destination.next(this.acc);
	            }
	            this.destination.complete();
	        }
	        this.unsubscribe();
	    };
	    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var destination = this.destination;
	        this.acc = innerValue;
	        this.hasValue = true;
	        destination.next(innerValue);
	    };
	    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        var destination = this.destination;
	        destination.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            if (this.hasValue === false) {
	                this.destination.next(this.acc);
	            }
	            this.destination.complete();
	        }
	    };
	    return MergeScanSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=mergeScan.js.map

	/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
	function min$1(comparer) {
	    var min = (typeof comparer === 'function')
	        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
	        : function (x, y) { return x < y ? x : y; };
	    return reduce$1(min);
	}
	//# sourceMappingURL=min.js.map

	/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */
	function multicast(subjectOrSubjectFactory, selector) {
	    return function multicastOperatorFunction(source) {
	        var subjectFactory;
	        if (typeof subjectOrSubjectFactory === 'function') {
	            subjectFactory = subjectOrSubjectFactory;
	        }
	        else {
	            subjectFactory = function subjectFactory() {
	                return subjectOrSubjectFactory;
	            };
	        }
	        if (typeof selector === 'function') {
	            return source.lift(new MulticastOperator(subjectFactory, selector));
	        }
	        var connectable = Object.create(source, connectableObservableDescriptor);
	        connectable.source = source;
	        connectable.subjectFactory = subjectFactory;
	        return connectable;
	    };
	}
	var MulticastOperator = /*@__PURE__*/ (function () {
	    function MulticastOperator(subjectFactory, selector) {
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastOperator.prototype.call = function (subscriber, source) {
	        var selector = this.selector;
	        var subject = this.subjectFactory();
	        var subscription = selector(subject).subscribe(subscriber);
	        subscription.add(source.subscribe(subject));
	        return subscription;
	    };
	    return MulticastOperator;
	}());
	//# sourceMappingURL=multicast.js.map

	/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function onErrorResumeNext$1() {
	    var nextSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        nextSources[_i] = arguments[_i];
	    }
	    if (nextSources.length === 1 && isArray(nextSources[0])) {
	        nextSources = nextSources[0];
	    }
	    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };
	}
	var OnErrorResumeNextOperator = /*@__PURE__*/ (function () {
	    function OnErrorResumeNextOperator(nextSources) {
	        this.nextSources = nextSources;
	    }
	    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
	    };
	    return OnErrorResumeNextOperator;
	}());
	var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(OnErrorResumeNextSubscriber, _super);
	    function OnErrorResumeNextSubscriber(destination, nextSources) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.nextSources = nextSources;
	        return _this;
	    }
	    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype._error = function (err) {
	        this.subscribeToNextSource();
	        this.unsubscribe();
	    };
	    OnErrorResumeNextSubscriber.prototype._complete = function () {
	        this.subscribeToNextSource();
	        this.unsubscribe();
	    };
	    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
	        var next = this.nextSources.shift();
	        if (!!next) {
	            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
	            var destination = this.destination;
	            destination.add(innerSubscriber);
	            var innerSubscription = subscribeToResult(this, next, undefined, undefined, innerSubscriber);
	            if (innerSubscription !== innerSubscriber) {
	                destination.add(innerSubscription);
	            }
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    return OnErrorResumeNextSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=onErrorResumeNext.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function pairwise() {
	    return function (source) { return source.lift(new PairwiseOperator()); };
	}
	var PairwiseOperator = /*@__PURE__*/ (function () {
	    function PairwiseOperator() {
	    }
	    PairwiseOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new PairwiseSubscriber(subscriber));
	    };
	    return PairwiseOperator;
	}());
	var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(PairwiseSubscriber, _super);
	    function PairwiseSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasPrev = false;
	        return _this;
	    }
	    PairwiseSubscriber.prototype._next = function (value) {
	        var pair;
	        if (this.hasPrev) {
	            pair = [this.prev, value];
	        }
	        else {
	            this.hasPrev = true;
	        }
	        this.prev = value;
	        if (pair) {
	            this.destination.next(pair);
	        }
	    };
	    return PairwiseSubscriber;
	}(Subscriber));
	//# sourceMappingURL=pairwise.js.map

	/** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */
	function partition$2(predicate, thisArg) {
	    return function (source) {
	        return [
	            filter$1(predicate, thisArg)(source),
	            filter$1(not$1(predicate, thisArg))(source)
	        ];
	    };
	}
	//# sourceMappingURL=partition.js.map

	/** PURE_IMPORTS_START _map PURE_IMPORTS_END */
	function pluck$1() {
	    var properties = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        properties[_i] = arguments[_i];
	    }
	    var length = properties.length;
	    if (length === 0) {
	        throw new Error('list of properties cannot be empty.');
	    }
	    return function (source) { return map$2(plucker(properties, length))(source); };
	}
	function plucker(props, length) {
	    var mapper = function (x) {
	        var currentProp = x;
	        for (var i = 0; i < length; i++) {
	            var p = currentProp != null ? currentProp[props[i]] : undefined;
	            if (p !== void 0) {
	                currentProp = p;
	            }
	            else {
	                return undefined;
	            }
	        }
	        return currentProp;
	    };
	    return mapper;
	}
	//# sourceMappingURL=pluck.js.map

	/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */
	function publish(selector) {
	    return selector ?
	        multicast(function () { return new Subject(); }, selector) :
	        multicast(new Subject());
	}
	//# sourceMappingURL=publish.js.map

	/** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */
	function publishBehavior(value) {
	    return function (source) { return multicast(new BehaviorSubject(value))(source); };
	}
	//# sourceMappingURL=publishBehavior.js.map

	/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */
	function publishLast() {
	    return function (source) { return multicast(new AsyncSubject())(source); };
	}
	//# sourceMappingURL=publishLast.js.map

	/** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */
	function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
	    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
	        scheduler = selectorOrScheduler;
	    }
	    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
	    var subject = new ReplaySubject(bufferSize, windowTime, scheduler);
	    return function (source) { return multicast(function () { return subject; }, selector)(source); };
	}
	//# sourceMappingURL=publishReplay.js.map

	/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */
	function race$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return function raceOperatorFunction(source) {
	        if (observables.length === 1 && isArray(observables[0])) {
	            observables = observables[0];
	        }
	        return source.lift.call(race.apply(void 0, [source].concat(observables)));
	    };
	}
	//# sourceMappingURL=race.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */
	function repeat$1(count) {
	    if (count === void 0) {
	        count = -1;
	    }
	    return function (source) {
	        if (count === 0) {
	            return empty$2();
	        }
	        else if (count < 0) {
	            return source.lift(new RepeatOperator(-1, source));
	        }
	        else {
	            return source.lift(new RepeatOperator(count - 1, source));
	        }
	    };
	}
	var RepeatOperator = /*@__PURE__*/ (function () {
	    function RepeatOperator(count, source) {
	        this.count = count;
	        this.source = source;
	    }
	    RepeatOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
	    };
	    return RepeatOperator;
	}());
	var RepeatSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RepeatSubscriber, _super);
	    function RepeatSubscriber(destination, count, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.count = count;
	        _this.source = source;
	        return _this;
	    }
	    RepeatSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _a = this, source = _a.source, count = _a.count;
	            if (count === 0) {
	                return _super.prototype.complete.call(this);
	            }
	            else if (count > -1) {
	                this.count = count - 1;
	            }
	            source.subscribe(this._unsubscribeAndRecycle());
	        }
	    };
	    return RepeatSubscriber;
	}(Subscriber));
	//# sourceMappingURL=repeat.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function repeatWhen(notifier) {
	    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };
	}
	var RepeatWhenOperator = /*@__PURE__*/ (function () {
	    function RepeatWhenOperator(notifier) {
	        this.notifier = notifier;
	    }
	    RepeatWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
	    };
	    return RepeatWhenOperator;
	}());
	var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RepeatWhenSubscriber, _super);
	    function RepeatWhenSubscriber(destination, notifier, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.notifier = notifier;
	        _this.source = source;
	        _this.sourceIsBeingSubscribedTo = true;
	        return _this;
	    }
	    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.sourceIsBeingSubscribedTo = true;
	        this.source.subscribe(this);
	    };
	    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
	        if (this.sourceIsBeingSubscribedTo === false) {
	            return _super.prototype.complete.call(this);
	        }
	    };
	    RepeatWhenSubscriber.prototype.complete = function () {
	        this.sourceIsBeingSubscribedTo = false;
	        if (!this.isStopped) {
	            if (!this.retries) {
	                this.subscribeToRetries();
	            }
	            if (!this.retriesSubscription || this.retriesSubscription.closed) {
	                return _super.prototype.complete.call(this);
	            }
	            this._unsubscribeAndRecycle();
	            this.notifications.next();
	        }
	    };
	    RepeatWhenSubscriber.prototype._unsubscribe = function () {
	        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
	        if (notifications) {
	            notifications.unsubscribe();
	            this.notifications = null;
	        }
	        if (retriesSubscription) {
	            retriesSubscription.unsubscribe();
	            this.retriesSubscription = null;
	        }
	        this.retries = null;
	    };
	    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
	        var _unsubscribe = this._unsubscribe;
	        this._unsubscribe = null;
	        _super.prototype._unsubscribeAndRecycle.call(this);
	        this._unsubscribe = _unsubscribe;
	        return this;
	    };
	    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
	        this.notifications = new Subject();
	        var retries;
	        try {
	            var notifier = this.notifier;
	            retries = notifier(this.notifications);
	        }
	        catch (e) {
	            return _super.prototype.complete.call(this);
	        }
	        this.retries = retries;
	        this.retriesSubscription = subscribeToResult(this, retries);
	    };
	    return RepeatWhenSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=repeatWhen.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function retry(count) {
	    if (count === void 0) {
	        count = -1;
	    }
	    return function (source) { return source.lift(new RetryOperator(count, source)); };
	}
	var RetryOperator = /*@__PURE__*/ (function () {
	    function RetryOperator(count, source) {
	        this.count = count;
	        this.source = source;
	    }
	    RetryOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
	    };
	    return RetryOperator;
	}());
	var RetrySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RetrySubscriber, _super);
	    function RetrySubscriber(destination, count, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.count = count;
	        _this.source = source;
	        return _this;
	    }
	    RetrySubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _a = this, source = _a.source, count = _a.count;
	            if (count === 0) {
	                return _super.prototype.error.call(this, err);
	            }
	            else if (count > -1) {
	                this.count = count - 1;
	            }
	            source.subscribe(this._unsubscribeAndRecycle());
	        }
	    };
	    return RetrySubscriber;
	}(Subscriber));
	//# sourceMappingURL=retry.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function retryWhen(notifier) {
	    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };
	}
	var RetryWhenOperator = /*@__PURE__*/ (function () {
	    function RetryWhenOperator(notifier, source) {
	        this.notifier = notifier;
	        this.source = source;
	    }
	    RetryWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
	    };
	    return RetryWhenOperator;
	}());
	var RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RetryWhenSubscriber, _super);
	    function RetryWhenSubscriber(destination, notifier, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.notifier = notifier;
	        _this.source = source;
	        return _this;
	    }
	    RetryWhenSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var errors = this.errors;
	            var retries = this.retries;
	            var retriesSubscription = this.retriesSubscription;
	            if (!retries) {
	                errors = new Subject();
	                try {
	                    var notifier = this.notifier;
	                    retries = notifier(errors);
	                }
	                catch (e) {
	                    return _super.prototype.error.call(this, e);
	                }
	                retriesSubscription = subscribeToResult(this, retries);
	            }
	            else {
	                this.errors = null;
	                this.retriesSubscription = null;
	            }
	            this._unsubscribeAndRecycle();
	            this.errors = errors;
	            this.retries = retries;
	            this.retriesSubscription = retriesSubscription;
	            errors.next(err);
	        }
	    };
	    RetryWhenSubscriber.prototype._unsubscribe = function () {
	        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
	        if (errors) {
	            errors.unsubscribe();
	            this.errors = null;
	        }
	        if (retriesSubscription) {
	            retriesSubscription.unsubscribe();
	            this.retriesSubscription = null;
	        }
	        this.retries = null;
	    };
	    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var _unsubscribe = this._unsubscribe;
	        this._unsubscribe = null;
	        this._unsubscribeAndRecycle();
	        this._unsubscribe = _unsubscribe;
	        this.source.subscribe(this);
	    };
	    return RetryWhenSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=retryWhen.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function sample(notifier) {
	    return function (source) { return source.lift(new SampleOperator(notifier)); };
	}
	var SampleOperator = /*@__PURE__*/ (function () {
	    function SampleOperator(notifier) {
	        this.notifier = notifier;
	    }
	    SampleOperator.prototype.call = function (subscriber, source) {
	        var sampleSubscriber = new SampleSubscriber(subscriber);
	        var subscription = source.subscribe(sampleSubscriber);
	        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));
	        return subscription;
	    };
	    return SampleOperator;
	}());
	var SampleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SampleSubscriber, _super);
	    function SampleSubscriber() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.hasValue = false;
	        return _this;
	    }
	    SampleSubscriber.prototype._next = function (value) {
	        this.value = value;
	        this.hasValue = true;
	    };
	    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.emitValue();
	    };
	    SampleSubscriber.prototype.notifyComplete = function () {
	        this.emitValue();
	    };
	    SampleSubscriber.prototype.emitValue = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.value);
	        }
	    };
	    return SampleSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=sample.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
	function sampleTime(period, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };
	}
	var SampleTimeOperator = /*@__PURE__*/ (function () {
	    function SampleTimeOperator(period, scheduler) {
	        this.period = period;
	        this.scheduler = scheduler;
	    }
	    SampleTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
	    };
	    return SampleTimeOperator;
	}());
	var SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SampleTimeSubscriber, _super);
	    function SampleTimeSubscriber(destination, period, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.period = period;
	        _this.scheduler = scheduler;
	        _this.hasValue = false;
	        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
	        return _this;
	    }
	    SampleTimeSubscriber.prototype._next = function (value) {
	        this.lastValue = value;
	        this.hasValue = true;
	    };
	    SampleTimeSubscriber.prototype.notifyNext = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.lastValue);
	        }
	    };
	    return SampleTimeSubscriber;
	}(Subscriber));
	function dispatchNotification(state) {
	    var subscriber = state.subscriber, period = state.period;
	    subscriber.notifyNext();
	    this.schedule(state, period);
	}
	//# sourceMappingURL=sampleTime.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function sequenceEqual(compareTo, comparator) {
	    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparator)); };
	}
	var SequenceEqualOperator = /*@__PURE__*/ (function () {
	    function SequenceEqualOperator(compareTo, comparator) {
	        this.compareTo = compareTo;
	        this.comparator = comparator;
	    }
	    SequenceEqualOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
	    };
	    return SequenceEqualOperator;
	}());
	var SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SequenceEqualSubscriber, _super);
	    function SequenceEqualSubscriber(destination, compareTo, comparator) {
	        var _this = _super.call(this, destination) || this;
	        _this.compareTo = compareTo;
	        _this.comparator = comparator;
	        _this._a = [];
	        _this._b = [];
	        _this._oneComplete = false;
	        _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
	        return _this;
	    }
	    SequenceEqualSubscriber.prototype._next = function (value) {
	        if (this._oneComplete && this._b.length === 0) {
	            this.emit(false);
	        }
	        else {
	            this._a.push(value);
	            this.checkValues();
	        }
	    };
	    SequenceEqualSubscriber.prototype._complete = function () {
	        if (this._oneComplete) {
	            this.emit(this._a.length === 0 && this._b.length === 0);
	        }
	        else {
	            this._oneComplete = true;
	        }
	        this.unsubscribe();
	    };
	    SequenceEqualSubscriber.prototype.checkValues = function () {
	        var _c = this, _a = _c._a, _b = _c._b, comparator = _c.comparator;
	        while (_a.length > 0 && _b.length > 0) {
	            var a = _a.shift();
	            var b = _b.shift();
	            var areEqual = false;
	            try {
	                areEqual = comparator ? comparator(a, b) : a === b;
	            }
	            catch (e) {
	                this.destination.error(e);
	            }
	            if (!areEqual) {
	                this.emit(false);
	            }
	        }
	    };
	    SequenceEqualSubscriber.prototype.emit = function (value) {
	        var destination = this.destination;
	        destination.next(value);
	        destination.complete();
	    };
	    SequenceEqualSubscriber.prototype.nextB = function (value) {
	        if (this._oneComplete && this._a.length === 0) {
	            this.emit(false);
	        }
	        else {
	            this._b.push(value);
	            this.checkValues();
	        }
	    };
	    SequenceEqualSubscriber.prototype.completeB = function () {
	        if (this._oneComplete) {
	            this.emit(this._a.length === 0 && this._b.length === 0);
	        }
	        else {
	            this._oneComplete = true;
	        }
	    };
	    return SequenceEqualSubscriber;
	}(Subscriber));
	var SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SequenceEqualCompareToSubscriber, _super);
	    function SequenceEqualCompareToSubscriber(destination, parent) {
	        var _this = _super.call(this, destination) || this;
	        _this.parent = parent;
	        return _this;
	    }
	    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
	        this.parent.nextB(value);
	    };
	    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	        this.unsubscribe();
	    };
	    SequenceEqualCompareToSubscriber.prototype._complete = function () {
	        this.parent.completeB();
	        this.unsubscribe();
	    };
	    return SequenceEqualCompareToSubscriber;
	}(Subscriber));
	//# sourceMappingURL=sequenceEqual.js.map

	/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */
	function shareSubjectFactory() {
	    return new Subject();
	}
	function share() {
	    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };
	}
	//# sourceMappingURL=share.js.map

	/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */
	function shareReplay(configOrBufferSize, windowTime, scheduler) {
	    var config;
	    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
	        config = configOrBufferSize;
	    }
	    else {
	        config = {
	            bufferSize: configOrBufferSize,
	            windowTime: windowTime,
	            refCount: false,
	            scheduler: scheduler
	        };
	    }
	    return function (source) { return source.lift(shareReplayOperator(config)); };
	}
	function shareReplayOperator(_a) {
	    var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;
	    var subject;
	    var refCount = 0;
	    var subscription;
	    var hasError = false;
	    var isComplete = false;
	    return function shareReplayOperation(source) {
	        refCount++;
	        var innerSub;
	        if (!subject || hasError) {
	            hasError = false;
	            subject = new ReplaySubject(bufferSize, windowTime, scheduler);
	            innerSub = subject.subscribe(this);
	            subscription = source.subscribe({
	                next: function (value) { subject.next(value); },
	                error: function (err) {
	                    hasError = true;
	                    subject.error(err);
	                },
	                complete: function () {
	                    isComplete = true;
	                    subscription = undefined;
	                    subject.complete();
	                },
	            });
	        }
	        else {
	            innerSub = subject.subscribe(this);
	        }
	        this.add(function () {
	            refCount--;
	            innerSub.unsubscribe();
	            if (subscription && !isComplete && useRefCount && refCount === 0) {
	                subscription.unsubscribe();
	                subscription = undefined;
	                subject = undefined;
	            }
	        });
	    };
	}
	//# sourceMappingURL=shareReplay.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */
	function single(predicate) {
	    return function (source) { return source.lift(new SingleOperator(predicate, source)); };
	}
	var SingleOperator = /*@__PURE__*/ (function () {
	    function SingleOperator(predicate, source) {
	        this.predicate = predicate;
	        this.source = source;
	    }
	    SingleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
	    };
	    return SingleOperator;
	}());
	var SingleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SingleSubscriber, _super);
	    function SingleSubscriber(destination, predicate, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.source = source;
	        _this.seenValue = false;
	        _this.index = 0;
	        return _this;
	    }
	    SingleSubscriber.prototype.applySingleValue = function (value) {
	        if (this.seenValue) {
	            this.destination.error('Sequence contains more than one element');
	        }
	        else {
	            this.seenValue = true;
	            this.singleValue = value;
	        }
	    };
	    SingleSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        if (this.predicate) {
	            this.tryNext(value, index);
	        }
	        else {
	            this.applySingleValue(value);
	        }
	    };
	    SingleSubscriber.prototype.tryNext = function (value, index) {
	        try {
	            if (this.predicate(value, index, this.source)) {
	                this.applySingleValue(value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    SingleSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this.index > 0) {
	            destination.next(this.seenValue ? this.singleValue : undefined);
	            destination.complete();
	        }
	        else {
	            destination.error(new EmptyError);
	        }
	    };
	    return SingleSubscriber;
	}(Subscriber));
	//# sourceMappingURL=single.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function skip(count) {
	    return function (source) { return source.lift(new SkipOperator(count)); };
	}
	var SkipOperator = /*@__PURE__*/ (function () {
	    function SkipOperator(total) {
	        this.total = total;
	    }
	    SkipOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SkipSubscriber(subscriber, this.total));
	    };
	    return SkipOperator;
	}());
	var SkipSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SkipSubscriber, _super);
	    function SkipSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.count = 0;
	        return _this;
	    }
	    SkipSubscriber.prototype._next = function (x) {
	        if (++this.count > this.total) {
	            this.destination.next(x);
	        }
	    };
	    return SkipSubscriber;
	}(Subscriber));
	//# sourceMappingURL=skip.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */
	function skipLast(count) {
	    return function (source) { return source.lift(new SkipLastOperator(count)); };
	}
	var SkipLastOperator = /*@__PURE__*/ (function () {
	    function SkipLastOperator(_skipCount) {
	        this._skipCount = _skipCount;
	        if (this._skipCount < 0) {
	            throw new ArgumentOutOfRangeError;
	        }
	    }
	    SkipLastOperator.prototype.call = function (subscriber, source) {
	        if (this._skipCount === 0) {
	            return source.subscribe(new Subscriber(subscriber));
	        }
	        else {
	            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
	        }
	    };
	    return SkipLastOperator;
	}());
	var SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SkipLastSubscriber, _super);
	    function SkipLastSubscriber(destination, _skipCount) {
	        var _this = _super.call(this, destination) || this;
	        _this._skipCount = _skipCount;
	        _this._count = 0;
	        _this._ring = new Array(_skipCount);
	        return _this;
	    }
	    SkipLastSubscriber.prototype._next = function (value) {
	        var skipCount = this._skipCount;
	        var count = this._count++;
	        if (count < skipCount) {
	            this._ring[count] = value;
	        }
	        else {
	            var currentIndex = count % skipCount;
	            var ring = this._ring;
	            var oldValue = ring[currentIndex];
	            ring[currentIndex] = value;
	            this.destination.next(oldValue);
	        }
	    };
	    return SkipLastSubscriber;
	}(Subscriber));
	//# sourceMappingURL=skipLast.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function skipUntil(notifier) {
	    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };
	}
	var SkipUntilOperator = /*@__PURE__*/ (function () {
	    function SkipUntilOperator(notifier) {
	        this.notifier = notifier;
	    }
	    SkipUntilOperator.prototype.call = function (destination, source) {
	        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
	    };
	    return SkipUntilOperator;
	}());
	var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SkipUntilSubscriber, _super);
	    function SkipUntilSubscriber(destination, notifier) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasValue = false;
	        var innerSubscriber = new InnerSubscriber(_this, undefined, undefined);
	        _this.add(innerSubscriber);
	        _this.innerSubscription = innerSubscriber;
	        var innerSubscription = subscribeToResult(_this, notifier, undefined, undefined, innerSubscriber);
	        if (innerSubscription !== innerSubscriber) {
	            _this.add(innerSubscription);
	            _this.innerSubscription = innerSubscription;
	        }
	        return _this;
	    }
	    SkipUntilSubscriber.prototype._next = function (value) {
	        if (this.hasValue) {
	            _super.prototype._next.call(this, value);
	        }
	    };
	    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.hasValue = true;
	        if (this.innerSubscription) {
	            this.innerSubscription.unsubscribe();
	        }
	    };
	    SkipUntilSubscriber.prototype.notifyComplete = function () {
	    };
	    return SkipUntilSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=skipUntil.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function skipWhile(predicate) {
	    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
	}
	var SkipWhileOperator = /*@__PURE__*/ (function () {
	    function SkipWhileOperator(predicate) {
	        this.predicate = predicate;
	    }
	    SkipWhileOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
	    };
	    return SkipWhileOperator;
	}());
	var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SkipWhileSubscriber, _super);
	    function SkipWhileSubscriber(destination, predicate) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.skipping = true;
	        _this.index = 0;
	        return _this;
	    }
	    SkipWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (this.skipping) {
	            this.tryCallPredicate(value);
	        }
	        if (!this.skipping) {
	            destination.next(value);
	        }
	    };
	    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
	        try {
	            var result = this.predicate(value, this.index++);
	            this.skipping = Boolean(result);
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    return SkipWhileSubscriber;
	}(Subscriber));
	//# sourceMappingURL=skipWhile.js.map

	/** PURE_IMPORTS_START _observable_concat,_util_isScheduler PURE_IMPORTS_END */
	function startWith() {
	    var array = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        array[_i] = arguments[_i];
	    }
	    var scheduler = array[array.length - 1];
	    if (isScheduler(scheduler)) {
	        array.pop();
	        return function (source) { return concat$1(array, source, scheduler); };
	    }
	    else {
	        return function (source) { return concat$1(array, source); };
	    }
	}
	//# sourceMappingURL=startWith.js.map

	/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */
	var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
	    __extends(SubscribeOnObservable, _super);
	    function SubscribeOnObservable(source, delayTime, scheduler) {
	        if (delayTime === void 0) {
	            delayTime = 0;
	        }
	        if (scheduler === void 0) {
	            scheduler = asap;
	        }
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.delayTime = delayTime;
	        _this.scheduler = scheduler;
	        if (!isNumeric(delayTime) || delayTime < 0) {
	            _this.delayTime = 0;
	        }
	        if (!scheduler || typeof scheduler.schedule !== 'function') {
	            _this.scheduler = asap;
	        }
	        return _this;
	    }
	    SubscribeOnObservable.create = function (source, delay, scheduler) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (scheduler === void 0) {
	            scheduler = asap;
	        }
	        return new SubscribeOnObservable(source, delay, scheduler);
	    };
	    SubscribeOnObservable.dispatch = function (arg) {
	        var source = arg.source, subscriber = arg.subscriber;
	        return this.add(source.subscribe(subscriber));
	    };
	    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
	        var delay = this.delayTime;
	        var source = this.source;
	        var scheduler = this.scheduler;
	        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
	            source: source, subscriber: subscriber
	        });
	    };
	    return SubscribeOnObservable;
	}(Observable));
	//# sourceMappingURL=SubscribeOnObservable.js.map

	/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */
	function subscribeOn(scheduler, delay) {
	    if (delay === void 0) {
	        delay = 0;
	    }
	    return function subscribeOnOperatorFunction(source) {
	        return source.lift(new SubscribeOnOperator(scheduler, delay));
	    };
	}
	var SubscribeOnOperator = /*@__PURE__*/ (function () {
	    function SubscribeOnOperator(scheduler, delay) {
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    SubscribeOnOperator.prototype.call = function (subscriber, source) {
	        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
	    };
	    return SubscribeOnOperator;
	}());
	//# sourceMappingURL=subscribeOn.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
	function switchMap(project, resultSelector) {
	    if (typeof resultSelector === 'function') {
	        return function (source) { return source.pipe(switchMap(function (a, i) { return from$1(project(a, i)).pipe(map$2(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
	    }
	    return function (source) { return source.lift(new SwitchMapOperator(project)); };
	}
	var SwitchMapOperator = /*@__PURE__*/ (function () {
	    function SwitchMapOperator(project) {
	        this.project = project;
	    }
	    SwitchMapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
	    };
	    return SwitchMapOperator;
	}());
	var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SwitchMapSubscriber, _super);
	    function SwitchMapSubscriber(destination, project) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.index = 0;
	        return _this;
	    }
	    SwitchMapSubscriber.prototype._next = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (error) {
	            this.destination.error(error);
	            return;
	        }
	        this._innerSub(result, value, index);
	    };
	    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	        }
	        var innerSubscriber = new InnerSubscriber(this, value, index);
	        var destination = this.destination;
	        destination.add(innerSubscriber);
	        this.innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);
	        if (this.innerSubscription !== innerSubscriber) {
	            destination.add(this.innerSubscription);
	        }
	    };
	    SwitchMapSubscriber.prototype._complete = function () {
	        var innerSubscription = this.innerSubscription;
	        if (!innerSubscription || innerSubscription.closed) {
	            _super.prototype._complete.call(this);
	        }
	        this.unsubscribe();
	    };
	    SwitchMapSubscriber.prototype._unsubscribe = function () {
	        this.innerSubscription = null;
	    };
	    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        var destination = this.destination;
	        destination.remove(innerSub);
	        this.innerSubscription = null;
	        if (this.isStopped) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    return SwitchMapSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=switchMap.js.map

	/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */
	function switchAll() {
	    return switchMap(identity$1);
	}
	//# sourceMappingURL=switchAll.js.map

	/** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */
	function switchMapTo(innerObservable, resultSelector) {
	    return resultSelector ? switchMap(function () { return innerObservable; }, resultSelector) : switchMap(function () { return innerObservable; });
	}
	//# sourceMappingURL=switchMapTo.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function takeUntil(notifier) {
	    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };
	}
	var TakeUntilOperator = /*@__PURE__*/ (function () {
	    function TakeUntilOperator(notifier) {
	        this.notifier = notifier;
	    }
	    TakeUntilOperator.prototype.call = function (subscriber, source) {
	        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
	        var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);
	        if (notifierSubscription && !takeUntilSubscriber.seenValue) {
	            takeUntilSubscriber.add(notifierSubscription);
	            return source.subscribe(takeUntilSubscriber);
	        }
	        return takeUntilSubscriber;
	    };
	    return TakeUntilOperator;
	}());
	var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeUntilSubscriber, _super);
	    function TakeUntilSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.seenValue = false;
	        return _this;
	    }
	    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.seenValue = true;
	        this.complete();
	    };
	    TakeUntilSubscriber.prototype.notifyComplete = function () {
	    };
	    return TakeUntilSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=takeUntil.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function takeWhile$1(predicate, inclusive) {
	    if (inclusive === void 0) {
	        inclusive = false;
	    }
	    return function (source) {
	        return source.lift(new TakeWhileOperator(predicate, inclusive));
	    };
	}
	var TakeWhileOperator = /*@__PURE__*/ (function () {
	    function TakeWhileOperator(predicate, inclusive) {
	        this.predicate = predicate;
	        this.inclusive = inclusive;
	    }
	    TakeWhileOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
	    };
	    return TakeWhileOperator;
	}());
	var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeWhileSubscriber, _super);
	    function TakeWhileSubscriber(destination, predicate, inclusive) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.inclusive = inclusive;
	        _this.index = 0;
	        return _this;
	    }
	    TakeWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        var result;
	        try {
	            result = this.predicate(value, this.index++);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        this.nextOrComplete(value, result);
	    };
	    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
	        var destination = this.destination;
	        if (Boolean(predicateResult)) {
	            destination.next(value);
	        }
	        else {
	            if (this.inclusive) {
	                destination.next(value);
	            }
	            destination.complete();
	        }
	    };
	    return TakeWhileSubscriber;
	}(Subscriber));
	//# sourceMappingURL=takeWhile.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
	function tap$1(nextOrObserver, error, complete) {
	    return function tapOperatorFunction(source) {
	        return source.lift(new DoOperator(nextOrObserver, error, complete));
	    };
	}
	var DoOperator = /*@__PURE__*/ (function () {
	    function DoOperator(nextOrObserver, error, complete) {
	        this.nextOrObserver = nextOrObserver;
	        this.error = error;
	        this.complete = complete;
	    }
	    DoOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
	    };
	    return DoOperator;
	}());
	var TapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TapSubscriber, _super);
	    function TapSubscriber(destination, observerOrNext, error, complete) {
	        var _this = _super.call(this, destination) || this;
	        _this._tapNext = noop;
	        _this._tapError = noop;
	        _this._tapComplete = noop;
	        _this._tapError = error || noop;
	        _this._tapComplete = complete || noop;
	        if (isFunction(observerOrNext)) {
	            _this._context = _this;
	            _this._tapNext = observerOrNext;
	        }
	        else if (observerOrNext) {
	            _this._context = observerOrNext;
	            _this._tapNext = observerOrNext.next || noop;
	            _this._tapError = observerOrNext.error || noop;
	            _this._tapComplete = observerOrNext.complete || noop;
	        }
	        return _this;
	    }
	    TapSubscriber.prototype._next = function (value) {
	        try {
	            this._tapNext.call(this._context, value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(value);
	    };
	    TapSubscriber.prototype._error = function (err) {
	        try {
	            this._tapError.call(this._context, err);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.error(err);
	    };
	    TapSubscriber.prototype._complete = function () {
	        try {
	            this._tapComplete.call(this._context);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        return this.destination.complete();
	    };
	    return TapSubscriber;
	}(Subscriber));
	//# sourceMappingURL=tap.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var defaultThrottleConfig = {
	    leading: true,
	    trailing: false
	};
	function throttle(durationSelector, config) {
	    if (config === void 0) {
	        config = defaultThrottleConfig;
	    }
	    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };
	}
	var ThrottleOperator = /*@__PURE__*/ (function () {
	    function ThrottleOperator(durationSelector, leading, trailing) {
	        this.durationSelector = durationSelector;
	        this.leading = leading;
	        this.trailing = trailing;
	    }
	    ThrottleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
	    };
	    return ThrottleOperator;
	}());
	var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ThrottleSubscriber, _super);
	    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.durationSelector = durationSelector;
	        _this._leading = _leading;
	        _this._trailing = _trailing;
	        _this._hasValue = false;
	        return _this;
	    }
	    ThrottleSubscriber.prototype._next = function (value) {
	        this._hasValue = true;
	        this._sendValue = value;
	        if (!this._throttled) {
	            if (this._leading) {
	                this.send();
	            }
	            else {
	                this.throttle(value);
	            }
	        }
	    };
	    ThrottleSubscriber.prototype.send = function () {
	        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
	        if (_hasValue) {
	            this.destination.next(_sendValue);
	            this.throttle(_sendValue);
	        }
	        this._hasValue = false;
	        this._sendValue = null;
	    };
	    ThrottleSubscriber.prototype.throttle = function (value) {
	        var duration = this.tryDurationSelector(value);
	        if (!!duration) {
	            this.add(this._throttled = subscribeToResult(this, duration));
	        }
	    };
	    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
	        try {
	            return this.durationSelector(value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return null;
	        }
	    };
	    ThrottleSubscriber.prototype.throttlingDone = function () {
	        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
	        if (_throttled) {
	            _throttled.unsubscribe();
	        }
	        this._throttled = null;
	        if (_trailing) {
	            this.send();
	        }
	    };
	    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.throttlingDone();
	    };
	    ThrottleSubscriber.prototype.notifyComplete = function () {
	        this.throttlingDone();
	    };
	    return ThrottleSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=throttle.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
	function throttleTime(duration, scheduler, config) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    if (config === void 0) {
	        config = defaultThrottleConfig;
	    }
	    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
	}
	var ThrottleTimeOperator = /*@__PURE__*/ (function () {
	    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
	        this.duration = duration;
	        this.scheduler = scheduler;
	        this.leading = leading;
	        this.trailing = trailing;
	    }
	    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
	    };
	    return ThrottleTimeOperator;
	}());
	var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ThrottleTimeSubscriber, _super);
	    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
	        var _this = _super.call(this, destination) || this;
	        _this.duration = duration;
	        _this.scheduler = scheduler;
	        _this.leading = leading;
	        _this.trailing = trailing;
	        _this._hasTrailingValue = false;
	        _this._trailingValue = null;
	        return _this;
	    }
	    ThrottleTimeSubscriber.prototype._next = function (value) {
	        if (this.throttled) {
	            if (this.trailing) {
	                this._trailingValue = value;
	                this._hasTrailingValue = true;
	            }
	        }
	        else {
	            this.add(this.throttled = this.scheduler.schedule(dispatchNext$3, this.duration, { subscriber: this }));
	            if (this.leading) {
	                this.destination.next(value);
	            }
	            else if (this.trailing) {
	                this._trailingValue = value;
	                this._hasTrailingValue = true;
	            }
	        }
	    };
	    ThrottleTimeSubscriber.prototype._complete = function () {
	        if (this._hasTrailingValue) {
	            this.destination.next(this._trailingValue);
	            this.destination.complete();
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
	        var throttled = this.throttled;
	        if (throttled) {
	            if (this.trailing && this._hasTrailingValue) {
	                this.destination.next(this._trailingValue);
	                this._trailingValue = null;
	                this._hasTrailingValue = false;
	            }
	            throttled.unsubscribe();
	            this.remove(throttled);
	            this.throttled = null;
	        }
	    };
	    return ThrottleTimeSubscriber;
	}(Subscriber));
	function dispatchNext$3(arg) {
	    var subscriber = arg.subscriber;
	    subscriber.clearThrottle();
	}
	//# sourceMappingURL=throttleTime.js.map

	/** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */
	function timeInterval(scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) {
	        return defer(function () {
	            return source.pipe(scan$1(function (_a, value) {
	                var current = _a.current;
	                return ({ value: value, current: scheduler.now(), last: current });
	            }, { current: scheduler.now(), value: undefined, last: undefined }), map$2(function (_a) {
	                var current = _a.current, last = _a.last, value = _a.value;
	                return new TimeInterval(value, current - last);
	            }));
	        });
	    };
	}
	var TimeInterval = /*@__PURE__*/ (function () {
	    function TimeInterval(value, interval) {
	        this.value = value;
	        this.interval = interval;
	    }
	    return TimeInterval;
	}());
	//# sourceMappingURL=timeInterval.js.map

	/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function timeoutWith(due, withObservable, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) {
	        var absoluteTimeout = isDate(due);
	        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
	        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
	    };
	}
	var TimeoutWithOperator = /*@__PURE__*/ (function () {
	    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
	        this.waitFor = waitFor;
	        this.absoluteTimeout = absoluteTimeout;
	        this.withObservable = withObservable;
	        this.scheduler = scheduler;
	    }
	    TimeoutWithOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
	    };
	    return TimeoutWithOperator;
	}());
	var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TimeoutWithSubscriber, _super);
	    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.absoluteTimeout = absoluteTimeout;
	        _this.waitFor = waitFor;
	        _this.withObservable = withObservable;
	        _this.scheduler = scheduler;
	        _this.action = null;
	        _this.scheduleTimeout();
	        return _this;
	    }
	    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
	        var withObservable = subscriber.withObservable;
	        subscriber._unsubscribeAndRecycle();
	        subscriber.add(subscribeToResult(subscriber, withObservable));
	    };
	    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
	        var action = this.action;
	        if (action) {
	            this.action = action.schedule(this, this.waitFor);
	        }
	        else {
	            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
	        }
	    };
	    TimeoutWithSubscriber.prototype._next = function (value) {
	        if (!this.absoluteTimeout) {
	            this.scheduleTimeout();
	        }
	        _super.prototype._next.call(this, value);
	    };
	    TimeoutWithSubscriber.prototype._unsubscribe = function () {
	        this.action = null;
	        this.scheduler = null;
	        this.withObservable = null;
	    };
	    return TimeoutWithSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=timeoutWith.js.map

	/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */
	function timeout(due, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return timeoutWith(due, throwError(new TimeoutError()), scheduler);
	}
	//# sourceMappingURL=timeout.js.map

	/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */
	function timestamp(scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return map$2(function (value) { return new Timestamp(value, scheduler.now()); });
	}
	var Timestamp = /*@__PURE__*/ (function () {
	    function Timestamp(value, timestamp) {
	        this.value = value;
	        this.timestamp = timestamp;
	    }
	    return Timestamp;
	}());
	//# sourceMappingURL=timestamp.js.map

	/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
	function toArrayReducer(arr, item, index) {
	    if (index === 0) {
	        return [item];
	    }
	    arr.push(item);
	    return arr;
	}
	function toArray() {
	    return reduce$1(toArrayReducer, []);
	}
	//# sourceMappingURL=toArray.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function window$1(windowBoundaries) {
	    return function windowOperatorFunction(source) {
	        return source.lift(new WindowOperator(windowBoundaries));
	    };
	}
	var WindowOperator = /*@__PURE__*/ (function () {
	    function WindowOperator(windowBoundaries) {
	        this.windowBoundaries = windowBoundaries;
	    }
	    WindowOperator.prototype.call = function (subscriber, source) {
	        var windowSubscriber = new WindowSubscriber(subscriber);
	        var sourceSubscription = source.subscribe(windowSubscriber);
	        if (!sourceSubscription.closed) {
	            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));
	        }
	        return sourceSubscription;
	    };
	    return WindowOperator;
	}());
	var WindowSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WindowSubscriber, _super);
	    function WindowSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.window = new Subject();
	        destination.next(_this.window);
	        return _this;
	    }
	    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.openWindow();
	    };
	    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
	        this._complete();
	    };
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	    };
	    WindowSubscriber.prototype._unsubscribe = function () {
	        this.window = null;
	    };
	    WindowSubscriber.prototype.openWindow = function () {
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var destination = this.destination;
	        var newWindow = this.window = new Subject();
	        destination.next(newWindow);
	    };
	    return WindowSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=window.js.map

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */
	function windowCount(windowSize, startWindowEvery) {
	    if (startWindowEvery === void 0) {
	        startWindowEvery = 0;
	    }
	    return function windowCountOperatorFunction(source) {
	        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
	    };
	}
	var WindowCountOperator = /*@__PURE__*/ (function () {
	    function WindowCountOperator(windowSize, startWindowEvery) {
	        this.windowSize = windowSize;
	        this.startWindowEvery = startWindowEvery;
	    }
	    WindowCountOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
	    };
	    return WindowCountOperator;
	}());
	var WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WindowCountSubscriber, _super);
	    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.windowSize = windowSize;
	        _this.startWindowEvery = startWindowEvery;
	        _this.windows = [new Subject()];
	        _this.count = 0;
	        destination.next(_this.windows[0]);
	        return _this;
	    }
	    WindowCountSubscriber.prototype._next = function (value) {
	        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
	        var destination = this.destination;
	        var windowSize = this.windowSize;
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len && !this.closed; i++) {
	            windows[i].next(value);
	        }
	        var c = this.count - windowSize + 1;
	        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
	            windows.shift().complete();
	        }
	        if (++this.count % startWindowEvery === 0 && !this.closed) {
	            var window_1 = new Subject();
	            windows.push(window_1);
	            destination.next(window_1);
	        }
	    };
	    WindowCountSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        if (windows) {
	            while (windows.length > 0 && !this.closed) {
	                windows.shift().error(err);
	            }
	        }
	        this.destination.error(err);
	    };
	    WindowCountSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        if (windows) {
	            while (windows.length > 0 && !this.closed) {
	                windows.shift().complete();
	            }
	        }
	        this.destination.complete();
	    };
	    WindowCountSubscriber.prototype._unsubscribe = function () {
	        this.count = 0;
	        this.windows = null;
	    };
	    return WindowCountSubscriber;
	}(Subscriber));
	//# sourceMappingURL=windowCount.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
	function windowTime(windowTimeSpan) {
	    var scheduler = async;
	    var windowCreationInterval = null;
	    var maxWindowSize = Number.POSITIVE_INFINITY;
	    if (isScheduler(arguments[3])) {
	        scheduler = arguments[3];
	    }
	    if (isScheduler(arguments[2])) {
	        scheduler = arguments[2];
	    }
	    else if (isNumeric(arguments[2])) {
	        maxWindowSize = Number(arguments[2]);
	    }
	    if (isScheduler(arguments[1])) {
	        scheduler = arguments[1];
	    }
	    else if (isNumeric(arguments[1])) {
	        windowCreationInterval = Number(arguments[1]);
	    }
	    return function windowTimeOperatorFunction(source) {
	        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
	    };
	}
	var WindowTimeOperator = /*@__PURE__*/ (function () {
	    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
	        this.windowTimeSpan = windowTimeSpan;
	        this.windowCreationInterval = windowCreationInterval;
	        this.maxWindowSize = maxWindowSize;
	        this.scheduler = scheduler;
	    }
	    WindowTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
	    };
	    return WindowTimeOperator;
	}());
	var CountedSubject = /*@__PURE__*/ (function (_super) {
	    __extends(CountedSubject, _super);
	    function CountedSubject() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this._numberOfNextedValues = 0;
	        return _this;
	    }
	    CountedSubject.prototype.next = function (value) {
	        this._numberOfNextedValues++;
	        _super.prototype.next.call(this, value);
	    };
	    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
	        get: function () {
	            return this._numberOfNextedValues;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CountedSubject;
	}(Subject));
	var WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WindowTimeSubscriber, _super);
	    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.windowTimeSpan = windowTimeSpan;
	        _this.windowCreationInterval = windowCreationInterval;
	        _this.maxWindowSize = maxWindowSize;
	        _this.scheduler = scheduler;
	        _this.windows = [];
	        var window = _this.openWindow();
	        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
	            var closeState = { subscriber: _this, window: window, context: null };
	            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
	            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
	            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
	        }
	        else {
	            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
	            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
	        }
	        return _this;
	    }
	    WindowTimeSubscriber.prototype._next = function (value) {
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len; i++) {
	            var window_1 = windows[i];
	            if (!window_1.closed) {
	                window_1.next(value);
	                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
	                    this.closeWindow(window_1);
	                }
	            }
	        }
	    };
	    WindowTimeSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().error(err);
	        }
	        this.destination.error(err);
	    };
	    WindowTimeSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            var window_2 = windows.shift();
	            if (!window_2.closed) {
	                window_2.complete();
	            }
	        }
	        this.destination.complete();
	    };
	    WindowTimeSubscriber.prototype.openWindow = function () {
	        var window = new CountedSubject();
	        this.windows.push(window);
	        var destination = this.destination;
	        destination.next(window);
	        return window;
	    };
	    WindowTimeSubscriber.prototype.closeWindow = function (window) {
	        window.complete();
	        var windows = this.windows;
	        windows.splice(windows.indexOf(window), 1);
	    };
	    return WindowTimeSubscriber;
	}(Subscriber));
	function dispatchWindowTimeSpanOnly(state) {
	    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
	    if (window) {
	        subscriber.closeWindow(window);
	    }
	    state.window = subscriber.openWindow();
	    this.schedule(state, windowTimeSpan);
	}
	function dispatchWindowCreation(state) {
	    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
	    var window = subscriber.openWindow();
	    var action = this;
	    var context = { action: action, subscription: null };
	    var timeSpanState = { subscriber: subscriber, window: window, context: context };
	    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
	    action.add(context.subscription);
	    action.schedule(state, windowCreationInterval);
	}
	function dispatchWindowClose(state) {
	    var subscriber = state.subscriber, window = state.window, context = state.context;
	    if (context && context.action && context.subscription) {
	        context.action.remove(context.subscription);
	    }
	    subscriber.closeWindow(window);
	}
	//# sourceMappingURL=windowTime.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function windowToggle(openings, closingSelector) {
	    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };
	}
	var WindowToggleOperator = /*@__PURE__*/ (function () {
	    function WindowToggleOperator(openings, closingSelector) {
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }
	    WindowToggleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
	    };
	    return WindowToggleOperator;
	}());
	var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WindowToggleSubscriber, _super);
	    function WindowToggleSubscriber(destination, openings, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.openings = openings;
	        _this.closingSelector = closingSelector;
	        _this.contexts = [];
	        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
	        return _this;
	    }
	    WindowToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        if (contexts) {
	            var len = contexts.length;
	            for (var i = 0; i < len; i++) {
	                contexts[i].window.next(value);
	            }
	        }
	    };
	    WindowToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context_1 = contexts[index];
	                context_1.window.error(err);
	                context_1.subscription.unsubscribe();
	            }
	        }
	        _super.prototype._error.call(this, err);
	    };
	    WindowToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context_2 = contexts[index];
	                context_2.window.complete();
	                context_2.subscription.unsubscribe();
	            }
	        }
	        _super.prototype._complete.call(this);
	    };
	    WindowToggleSubscriber.prototype._unsubscribe = function () {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context_3 = contexts[index];
	                context_3.window.unsubscribe();
	                context_3.subscription.unsubscribe();
	            }
	        }
	    };
	    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (outerValue === this.openings) {
	            var closingNotifier = void 0;
	            try {
	                var closingSelector = this.closingSelector;
	                closingNotifier = closingSelector(innerValue);
	            }
	            catch (e) {
	                return this.error(e);
	            }
	            var window_1 = new Subject();
	            var subscription = new Subscription();
	            var context_4 = { window: window_1, subscription: subscription };
	            this.contexts.push(context_4);
	            var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
	            if (innerSubscription.closed) {
	                this.closeWindow(this.contexts.length - 1);
	            }
	            else {
	                innerSubscription.context = context_4;
	                subscription.add(innerSubscription);
	            }
	            this.destination.next(window_1);
	        }
	        else {
	            this.closeWindow(this.contexts.indexOf(outerValue));
	        }
	    };
	    WindowToggleSubscriber.prototype.notifyError = function (err) {
	        this.error(err);
	    };
	    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
	        if (inner !== this.openSubscription) {
	            this.closeWindow(this.contexts.indexOf(inner.context));
	        }
	    };
	    WindowToggleSubscriber.prototype.closeWindow = function (index) {
	        if (index === -1) {
	            return;
	        }
	        var contexts = this.contexts;
	        var context = contexts[index];
	        var window = context.window, subscription = context.subscription;
	        contexts.splice(index, 1);
	        window.complete();
	        subscription.unsubscribe();
	    };
	    return WindowToggleSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=windowToggle.js.map

	/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function windowWhen(closingSelector) {
	    return function windowWhenOperatorFunction(source) {
	        return source.lift(new WindowOperator$1(closingSelector));
	    };
	}
	var WindowOperator$1 = /*@__PURE__*/ (function () {
	    function WindowOperator(closingSelector) {
	        this.closingSelector = closingSelector;
	    }
	    WindowOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowSubscriber$1(subscriber, this.closingSelector));
	    };
	    return WindowOperator;
	}());
	var WindowSubscriber$1 = /*@__PURE__*/ (function (_super) {
	    __extends(WindowSubscriber, _super);
	    function WindowSubscriber(destination, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.closingSelector = closingSelector;
	        _this.openWindow();
	        return _this;
	    }
	    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.openWindow(innerSub);
	    };
	    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.openWindow(innerSub);
	    };
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	        this.unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	        this.unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
	        if (this.closingNotification) {
	            this.closingNotification.unsubscribe();
	        }
	    };
	    WindowSubscriber.prototype.openWindow = function (innerSub) {
	        if (innerSub === void 0) {
	            innerSub = null;
	        }
	        if (innerSub) {
	            this.remove(innerSub);
	            innerSub.unsubscribe();
	        }
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var window = this.window = new Subject();
	        this.destination.next(window);
	        var closingNotifier;
	        try {
	            var closingSelector = this.closingSelector;
	            closingNotifier = closingSelector();
	        }
	        catch (e) {
	            this.destination.error(e);
	            this.window.error(e);
	            return;
	        }
	        this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
	    };
	    return WindowSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=windowWhen.js.map

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function withLatestFrom() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    return function (source) {
	        var project;
	        if (typeof args[args.length - 1] === 'function') {
	            project = args.pop();
	        }
	        var observables = args;
	        return source.lift(new WithLatestFromOperator(observables, project));
	    };
	}
	var WithLatestFromOperator = /*@__PURE__*/ (function () {
	    function WithLatestFromOperator(observables, project) {
	        this.observables = observables;
	        this.project = project;
	    }
	    WithLatestFromOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
	    };
	    return WithLatestFromOperator;
	}());
	var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WithLatestFromSubscriber, _super);
	    function WithLatestFromSubscriber(destination, observables, project) {
	        var _this = _super.call(this, destination) || this;
	        _this.observables = observables;
	        _this.project = project;
	        _this.toRespond = [];
	        var len = observables.length;
	        _this.values = new Array(len);
	        for (var i = 0; i < len; i++) {
	            _this.toRespond.push(i);
	        }
	        for (var i = 0; i < len; i++) {
	            var observable = observables[i];
	            _this.add(subscribeToResult(_this, observable, observable, i));
	        }
	        return _this;
	    }
	    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.values[outerIndex] = innerValue;
	        var toRespond = this.toRespond;
	        if (toRespond.length > 0) {
	            var found = toRespond.indexOf(outerIndex);
	            if (found !== -1) {
	                toRespond.splice(found, 1);
	            }
	        }
	    };
	    WithLatestFromSubscriber.prototype.notifyComplete = function () {
	    };
	    WithLatestFromSubscriber.prototype._next = function (value) {
	        if (this.toRespond.length === 0) {
	            var args = [value].concat(this.values);
	            if (this.project) {
	                this._tryProject(args);
	            }
	            else {
	                this.destination.next(args);
	            }
	        }
	    };
	    WithLatestFromSubscriber.prototype._tryProject = function (args) {
	        var result;
	        try {
	            result = this.project.apply(this, args);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return WithLatestFromSubscriber;
	}(OuterSubscriber));
	//# sourceMappingURL=withLatestFrom.js.map

	/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */
	function zip$2() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return function zipOperatorFunction(source) {
	        return source.lift.call(zip$1.apply(void 0, [source].concat(observables)));
	    };
	}
	//# sourceMappingURL=zip.js.map

	/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */
	function zipAll(project) {
	    return function (source) { return source.lift(new ZipOperator(project)); };
	}
	//# sourceMappingURL=zipAll.js.map

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	//# sourceMappingURL=index.js.map

	var index$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		audit: audit,
		auditTime: auditTime,
		buffer: buffer,
		bufferCount: bufferCount,
		bufferTime: bufferTime,
		bufferToggle: bufferToggle,
		bufferWhen: bufferWhen,
		catchError: catchError,
		combineAll: combineAll,
		combineLatest: combineLatest$1,
		concat: concat$2,
		concatAll: concatAll,
		concatMap: concatMap,
		concatMapTo: concatMapTo,
		count: count,
		debounce: debounce,
		debounceTime: debounceTime,
		defaultIfEmpty: defaultIfEmpty,
		delay: delay,
		delayWhen: delayWhen,
		dematerialize: dematerialize,
		distinct: distinct,
		distinctUntilChanged: distinctUntilChanged,
		distinctUntilKeyChanged: distinctUntilKeyChanged,
		elementAt: elementAt,
		endWith: endWith,
		every: every,
		exhaust: exhaust,
		exhaustMap: exhaustMap,
		expand: expand,
		filter: filter$1,
		finalize: finalize,
		find: find$1,
		findIndex: findIndex$1,
		first: first,
		groupBy: groupBy$1,
		ignoreElements: ignoreElements,
		isEmpty: isEmpty$1,
		last: last$2,
		map: map$2,
		mapTo: mapTo,
		materialize: materialize,
		max: max$1,
		merge: merge$2,
		mergeAll: mergeAll$1,
		mergeMap: mergeMap,
		flatMap: flatMap,
		mergeMapTo: mergeMapTo,
		mergeScan: mergeScan,
		min: min$1,
		multicast: multicast,
		observeOn: observeOn,
		onErrorResumeNext: onErrorResumeNext$1,
		pairwise: pairwise,
		partition: partition$2,
		pluck: pluck$1,
		publish: publish,
		publishBehavior: publishBehavior,
		publishLast: publishLast,
		publishReplay: publishReplay,
		race: race$1,
		reduce: reduce$1,
		repeat: repeat$1,
		repeatWhen: repeatWhen,
		retry: retry,
		retryWhen: retryWhen,
		refCount: refCount,
		sample: sample,
		sampleTime: sampleTime,
		scan: scan$1,
		sequenceEqual: sequenceEqual,
		share: share,
		shareReplay: shareReplay,
		single: single,
		skip: skip,
		skipLast: skipLast,
		skipUntil: skipUntil,
		skipWhile: skipWhile,
		startWith: startWith,
		subscribeOn: subscribeOn,
		switchAll: switchAll,
		switchMap: switchMap,
		switchMapTo: switchMapTo,
		take: take$1,
		takeLast: takeLast$1,
		takeUntil: takeUntil,
		takeWhile: takeWhile$1,
		tap: tap$1,
		throttle: throttle,
		throttleTime: throttleTime,
		throwIfEmpty: throwIfEmpty,
		timeInterval: timeInterval,
		timeout: timeout,
		timeoutWith: timeoutWith,
		timestamp: timestamp,
		toArray: toArray,
		window: window$1,
		windowCount: windowCount,
		windowTime: windowTime,
		windowToggle: windowToggle,
		windowWhen: windowWhen,
		withLatestFrom: withLatestFrom,
		zip: zip$2,
		zipAll: zipAll
	});

	let midiAccess;

	// ------------------- WebMidi initialization ----------------------

	let initialize = 
		(sysex = false, 
		 custom_navigator = window.navigator) =>
			custom_navigator
				.requestMIDIAccess({ sysex: sysex })
				.then(m => { 
					midiAccess = m; 
					return midiAccess; 
				});

	let logPorts = () => {
		forEach(
			i => console.log(i[1].name + '  -in->'), 
			[...midiAccess.inputs.entries()]);
		forEach(
			o => console.log('-out->  ' + o[1].name), 
			[...midiAccess.outputs.entries()]);
	};

	// ------------------------- MIDI Input ----------------------------

	let input = n => 
		head$1(
			pipe(
				filter(i => i[1].name.includes(n)),
				map$1(v => {
					let input = fromEvent(
									v[1], 'midimessage'
	              );
					input.name = v[1].name;
					input.id = v[1].id;
					input.manufacturer = v[1].manufacturer;
					input.version = v[1].version;

					return input
				})
			)([...midiAccess.inputs.entries()]));

	// ------------------------- MIDI Output ---------------------------

	let send = out => msg => 
	  seemsArrayOfMIDIMessagesAsObjects (msg) ?
	    forEach (m => out.send (m.data, m.timeStamp)) (msg)
	    : seemsArrayOfMIDIMessagesAsArrays (msg) ?
	      forEach (m => out.send (m)) (msg)
	      : seemsMIDIMessageAsObject (msg) ?
	        out.send (msg.data)
	        : seemsMIDIMessageAsArray (msg) ?
	          out.send (msg)
	          : is (Observable) (msg) ?
	            msg.subscribe (send (out))
	            : null;

	let output = n => 
		head$1(
			pipe(
				map$1( ([k, v]) => v ),
				filter( ({ name }) => name.includes(n) ),
				map$1( v => { v.open(); return v; } ),
				map$1( v => {
					let output = send(v);
					Object.defineProperty(
						output, 
						'name', 
						{ value: v.name });
					output.id = v.id;
					output.manufacturer = v.manufacturer;
					output.version = v.version;

					return output
				}) 
			)([...midiAccess.outputs.entries()]));

	// ---------------------- MIDI File loading ------------------------

	let loadMidiFile =
		(sel = '#preview') => {
			let id = 'local-midi-file-browser';
			var e = document.querySelector(sel);
			e.innerHTML = e.innerHTML + '<input type="file" id="' + id + '" style="display: none">';
			let promise = 
				new Promise((s, r) => 
					MidiParser.parse(document.querySelector('#' + id), o => { 
						document.querySelector('#' + id).remove();
						// Convert data from each event to a format compatible
						// with rest of library
						for (let t of o.track) {
							for (let e of t.event) {
								e.timeStamp = 0;
								if (e.type > 7 && e.type < 14) {
									if (e.data instanceof Array) {
										e.data = [(e.type << 4) + e.channel, ...e.data];
									} else {
										e.data = [(e.type << 4) + e.channel, e.data];
									}
									e.type = 'midimessage';
								} else if (e.type === 255) {
									e.type = 'metaevent';
	                e.data = [ e.data ];
								}
							}
						}

						return s(o)
					}));
			document.querySelector('#' + id).click();
			return promise
		};

	// ------------------------ MIDI Clock -----------------------------

	// TODO: Make this part better

	let createTimer = (resolution, look_ahead) =>
	  timer (0, resolution).pipe (
	    map$2(v => [performance.now (), look_ahead])
	  );

	let MIDIClock = curry ((time_division, bpm) => {
	  let timeDivisionSubject = new BehaviorSubject (time_division);
	  let bpmSubject = new BehaviorSubject (bpm);
	  
	  let op = pipe$1(
	    withLatestFrom (
	      timeDivisionSubject,
	      bpmSubject
	    ),
	    scan$1 ((events, [[now, look_ahead], time_division, bpm]) => {
	      let last_tick_time = prop ('timeStamp', last$1 (events)) || now;
	  
	      return lookAheadClock (
	        time_division, 
	        bpm, 
	        last_tick_time,
	        now,
	        look_ahead)
	    }, [[], null])
	  );

	  op.timeDivision = (v) => timeDivisionSubject.next (v);
	  op.bpm = (v) => bpmSubject.next (v);

	  return op
	});

	let MIDIPlayer = (midifile) => {
	  let player = MIDIFilePlayer (midifile);

	  return pipe$1 (
	    scan$1 (([events, tick], midi_clocks) => {
	      return player (tick, midi_clocks)
	    }, [null, 0]),
	    map$2(([events, tick]) => events)
	  )
	};

	//// --------------------- Other utilities -------------------------

	let QNPM2BPM = (qnpm) => 60 * 1000000 / qnpm;

	let midiToHzs = (n, tuning = 440) => 
		((tuning / 32) * (Math.pow(((n - 9) / 12), 2)));

	var main = /*#__PURE__*/Object.freeze({
		__proto__: null,
		QNPM2BPM: QNPM2BPM,
		midiToHzs: midiToHzs,
		seemsMIDIMessageAsArray: seemsMIDIMessageAsArray,
		seemsMIDIMessageAsObject: seemsMIDIMessageAsObject,
		seemsMIDIMessage: seemsMIDIMessage,
		seemsArrayOfMIDIMessagesAsArrays: seemsArrayOfMIDIMessagesAsArrays,
		seemsArrayOfMIDIMessagesAsObjects: seemsArrayOfMIDIMessagesAsObjects,
		dataEq: dataEq,
		byteEq: byteEq,
		dataEqBy: dataEqBy,
		byteEqBy: byteEqBy,
		isChannelVoiceMessageOfType: isChannelVoiceMessageOfType,
		isNoteOff: isNoteOff,
		isNoteOn: isNoteOn,
		asNoteOn: asNoteOn,
		asNoteOff: asNoteOff,
		isNote: isNote,
		hasVelocity: hasVelocity,
		velocityEq: velocityEq,
		isPolyPressure: isPolyPressure,
		hasNote: hasNote,
		noteEq: noteEq,
		isControlChange: isControlChange,
		controlEq: controlEq,
		valueEq: valueEq,
		isProgramChange: isProgramChange,
		programEq: programEq,
		isChannelPressure: isChannelPressure,
		hasPressure: hasPressure,
		pressureEq: pressureEq,
		isPitchBend: isPitchBend,
		pitchBendEq: pitchBendEq,
		isChannelModeMessage: isChannelModeMessage,
		isAllSoundOff: isAllSoundOff,
		isResetAll: isResetAll,
		isLocalControlOff: isLocalControlOff,
		isLocalControlOn: isLocalControlOn,
		isAllNotesOff: isAllNotesOff,
		isOmniModeOff: isOmniModeOff,
		isOmniModeOn: isOmniModeOn,
		isMonoModeOn: isMonoModeOn,
		isPolyModeOn: isPolyModeOn,
		isChannelMode: isChannelMode,
		isChannelVoice: isChannelVoice,
		isRPN: isRPN,
		isNRPN: isNRPN,
		isChannelMessage: isChannelMessage,
		isOnChannel: isOnChannel,
		isOnChannels: isOnChannels,
		isSystemExclusive: isSystemExclusive,
		isMIDITimeCodeQuarterFrame: isMIDITimeCodeQuarterFrame,
		isSongPositionPointer: isSongPositionPointer,
		isSongSelect: isSongSelect,
		isTuneRequest: isTuneRequest,
		isEndOfExclusive: isEndOfExclusive,
		isMIDIClock: isMIDIClock,
		isStart: isStart,
		isContinue: isContinue,
		isStop: isStop,
		isActiveSensing: isActiveSensing,
		isReset: isReset,
		seemsMIDIMetaEventArray: seemsMIDIMetaEventArray,
		seemsMIDIMetaEventObject: seemsMIDIMetaEventObject,
		seemsMIDIMetaEvent: seemsMIDIMetaEvent,
		metaTypeEq: metaTypeEq,
		isTempoChange: isTempoChange,
		msg: msg,
		from: from,
		off: off,
		on: on,
		pp: pp,
		cc: cc,
		pc: pc,
		cp: cp,
		pb: pb,
		rpn: rpn,
		nrpn: nrpn,
		syx: syx,
		tc: tc,
		spp: spp,
		ss: ss,
		tun: tun,
		mc: mc,
		start: start,
		cont: cont,
		stop: stop,
		as: as,
		rst: rst,
		panic: panic,
		getByte: getByte,
		setByte: setByte,
		timeStamp: timeStamp,
		deltaTime: deltaTime,
		channel: channel,
		note: note,
		velocity: velocity,
		pressure: pressure,
		control: control,
		value: value,
		program: program,
		pitchBend: pitchBend,
		lookAheadClock: lookAheadClock$1,
		seemsMIDIFile: seemsMIDIFile,
		seemsMIDILoop: seemsMIDILoop,
		withAbsoluteDeltaTimes: withAbsoluteDeltaTimes,
		mergeTracks: mergeTracks,
		sortEvents: sortEvents,
		filterTracks: filterTracks,
		createMIDIFile: createMIDIFile,
		createLoop: createLoop,
		MIDIFilePlayer: MIDIFilePlayer$1,
		initialize: initialize,
		logPorts: logPorts,
		input: input,
		send: send,
		output: output,
		loadMidiFile: loadMidiFile,
		createTimer: createTimer,
		MIDIClock: MIDIClock,
		MIDIPlayer: MIDIPlayer
	});

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var Tone = createCommonjsModule(function (module, exports) {
	!function(t,e){module.exports=e();}("undefined"!=typeof self?self:commonjsGlobal,function(){return function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:s});},i.r=function(t){Object.defineProperty(t,"__esModule",{value:!0});},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=148)}([function(t,e,i){i.r(e),function(t){var s=i(93),n=function(){if(!(this instanceof n))throw new Error("constructor needs to be called with the 'new' keyword")};
	/**
	 *  Tone.js
	 *  @author Yotam Mann
	 *  @license http://opensource.org/licenses/MIT MIT License
	 *  @copyright 2014-2019 Yotam Mann
	 */n.prototype.toString=function(){for(var t in n){var e=t[0].match(/^[A-Z]$/),i=n[t]===this.constructor;if(n.isFunction(n[t])&&e&&i)return t}return "Tone"},n.prototype.dispose=function(){return this},n.prototype.set=function(t,e){if(n.isString(t)){var i={};i[t]=e,t=i;}t:for(var s in t){e=t[s];var o=this;if(-1!==s.indexOf(".")){for(var a=s.split("."),r=0;r<a.length-1;r++)if((o=o[a[r]])instanceof n){a.splice(0,r+1);var l=a.join(".");o.set(l,e);continue t}s=a[a.length-1];}var u=o[s];n.isUndef(u)||(n.Signal&&u instanceof n.Signal||n.Param&&u instanceof n.Param?u.value!==e&&(u.value=e):u instanceof AudioParam?u.value!==e&&(u.value=e):n.TimeBase&&u instanceof n.TimeBase?o[s]=e:u instanceof n?u.set(e):u!==e&&(o[s]=e));}return this},n.prototype.get=function(t){n.isUndef(t)?t=this._collectDefaults(this.constructor):n.isString(t)&&(t=[t]);for(var e={},i=0;i<t.length;i++){var s=t[i],o=this,a=e;if(-1!==s.indexOf(".")){for(var r=s.split("."),l=0;l<r.length-1;l++){var u=r[l];a[u]=a[u]||{},a=a[u],o=o[u];}s=r[r.length-1];}var d=o[s];n.isObject(t[s])?a[s]=d.get():n.Signal&&d instanceof n.Signal?a[s]=d.value:n.Param&&d instanceof n.Param?a[s]=d.value:d instanceof AudioParam?a[s]=d.value:d instanceof n?a[s]=d.get():!n.isFunction(d)&&n.isDefined(d)&&(a[s]=d);}return e},n.prototype._collectDefaults=function(t){var e=[];if(n.isDefined(t.defaults)&&(e=Object.keys(t.defaults)),n.isDefined(t._super))for(var i=this._collectDefaults(t._super),s=0;s<i.length;s++)-1===e.indexOf(i[s])&&e.push(i[s]);return e},n.defaults=function(t,e,i){var s={};if(1===t.length&&n.isObject(t[0]))s=t[0];else for(var o=0;o<e.length;o++)s[e[o]]=t[o];return n.isDefined(i.defaults)?n.defaultArg(s,i.defaults):n.isObject(i)?n.defaultArg(s,i):s},n.defaultArg=function(t,e){if(n.isObject(t)&&n.isObject(e)){var i={};for(var s in t)i[s]=n.defaultArg(e[s],t[s]);for(var o in e)i[o]=n.defaultArg(t[o],e[o]);return i}return n.isUndef(t)?e:t},n.prototype.log=function(){if(this.debug||this.toString()===n.global.TONE_DEBUG_CLASS){var t=Array.from(arguments);t.unshift(this.toString()+":"),console.log.apply(void 0,t);}},n.prototype.assert=function(t,e){if(!t)throw new Error(e)},n.connectSeries=function(){for(var t=arguments[0],e=1;e<arguments.length;e++){var i=arguments[e];n.connect(t,i),t=i;}return n},n.connect=function(t,e,i,s){for(;n.isDefined(e.input);)n.isArray(e.input)?(s=n.defaultArg(s,0),e=e.input[s],s=0):e.input&&(e=e.input);return e instanceof AudioParam?t.connect(e,i):e instanceof AudioNode&&t.connect(e,i,s),n},n.disconnect=function(t,e,i,s){if(e){for(var o=!1;!o;)n.isArray(e.input)?(n.isDefined(s)?n.disconnect(t,e.input[s],i):e.input.forEach(function(e){try{n.disconnect(t,e,i);}catch(t){}}),o=!0):e.input?e=e.input:o=!0;e instanceof AudioParam?t.disconnect(e,i):e instanceof AudioNode&&t.disconnect(e,i,s);}else t.disconnect();return n},n.isUndef=function(t){return void 0===t},n.isDefined=function(t){return !n.isUndef(t)},n.isFunction=function(t){return "function"==typeof t},n.isNumber=function(t){return "number"==typeof t},n.isObject=function(t){return "[object Object]"===Object.prototype.toString.call(t)&&t.constructor===Object},n.isBoolean=function(t){return "boolean"==typeof t},n.isArray=function(t){return Array.isArray(t)},n.isString=function(t){return "string"==typeof t},n.isNote=function(t){return n.isString(t)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(t)},n.noOp=function(){},n.prototype._readOnly=function(t){if(Array.isArray(t))for(var e=0;e<t.length;e++)this._readOnly(t[e]);else Object.defineProperty(this,t,{writable:!1,enumerable:!0});},n.prototype._writable=function(t){if(Array.isArray(t))for(var e=0;e<t.length;e++)this._writable(t[e]);else Object.defineProperty(this,t,{writable:!0});},n.State={Started:"started",Stopped:"stopped",Paused:"paused"},n.global=n.isUndef(t)?window:t,n.equalPowerScale=function(t){var e=.5*Math.PI;return Math.sin(t*e)},n.dbToGain=function(t){return Math.pow(10,t/20)},n.gainToDb=function(t){return Math.log(t)/Math.LN10*20},n.intervalToFrequencyRatio=function(t){return Math.pow(2,t/12)},n.prototype.now=function(){return n.context.now()},n.now=function(){return n.context.now()},n.prototype.immediate=function(){return n.context.currentTime},n.immediate=function(){return n.context.currentTime},n.extend=function(t,e){function i(){}n.isUndef(e)&&(e=n),i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t,t._super=e;},n._audioContext=null,n.start=function(){return n.context.resume()},Object.defineProperty(n,"context",{get:function(){return n._audioContext},set:function(t){t.isContext?n._audioContext=t:n._audioContext=new n.Context(t),n.Context.emit("init",n._audioContext);}}),Object.defineProperty(n.prototype,"context",{get:function(){return n.context}}),n.setContext=function(t){n.context=t;},Object.defineProperty(n.prototype,"blockTime",{get:function(){return 128/this.context.sampleRate}}),Object.defineProperty(n.prototype,"sampleTime",{get:function(){return 1/this.context.sampleRate}}),Object.defineProperty(n,"supported",{get:function(){var t=n.global.hasOwnProperty("AudioContext")||n.global.hasOwnProperty("webkitAudioContext"),e=n.global.hasOwnProperty("Promise");return t&&e}}),Object.defineProperty(n,"initialized",{get:function(){return Boolean(n.context)}}),n.getContext=function(t){if(n.initialized)t(n.context);else {var e=function(){t(n.context),n.Context.off("init",e);};n.Context.on("init",e);}return n},n.version=s.a,e.default=n;}.call(this,i(147));},function(t,e,i){i.r(e);var s=i(0);i(20);if(s.default.supported){var n=new OfflineAudioContext(2,1,44100),o=n.createGain(),a=n.createGain();if(o.connect(a)!==a){var r=AudioNode.prototype.connect;AudioNode.prototype.connect=function(){return r.apply(this,arguments),arguments[0]};}}s.default.AudioNode=function(){s.default.call(this);var t=s.default.defaults(arguments,["context"],{context:s.default.context});this._context=t.context;},s.default.extend(s.default.AudioNode),Object.defineProperty(s.default.AudioNode.prototype,"context",{get:function(){return this._context}}),s.default.AudioNode.prototype.createInsOuts=function(t,e){1===t?this.input=this.context.createGain():t>1&&(this.input=new Array(t)),1===e?this.output=this.context.createGain():e>1&&(this.output=new Array(e));},Object.defineProperty(s.default.AudioNode.prototype,"channelCount",{get:function(){return this.output.channelCount},set:function(t){return this.output.channelCount=t}}),Object.defineProperty(s.default.AudioNode.prototype,"channelCountMode",{get:function(){return this.output.channelCountMode},set:function(t){return this.output.channelCountMode=t}}),Object.defineProperty(s.default.AudioNode.prototype,"channelInterpretation",{get:function(){return this.output.channelInterpretation},set:function(t){return this.output.channelInterpretation=t}}),Object.defineProperty(s.default.AudioNode.prototype,"numberOfInputs",{get:function(){return this.input?s.default.isArray(this.input)?this.input.length:1:0}}),Object.defineProperty(s.default.AudioNode.prototype,"numberOfOutputs",{get:function(){return this.output?s.default.isArray(this.output)?this.output.length:1:0}}),s.default.AudioNode.prototype.connect=function(t,e,i){return s.default.isArray(this.output)?(e=s.default.defaultArg(e,0),this.output[e].connect(t,0,i)):s.default.connect(this.output,t,e,i),this},s.default.AudioNode.prototype.disconnect=function(t,e,i){return s.default.isArray(this.output)?(e=s.default.defaultArg(e,0),this.output[e].disconnect(t,0,i)):s.default.disconnect(this.output,t,e,i),this},s.default.AudioNode.prototype.chain=function(){var t=Array.from(arguments);return t.unshift(this),s.default.connectSeries.apply(void 0,t),this},s.default.AudioNode.prototype.fan=function(){for(var t=0;t<arguments.length;t++)this.connect(arguments[t]);return this},s.default.AudioNode.prototype.dispose=function(){return s.default.isDefined(this.input)&&(this.input instanceof AudioNode&&this.input.disconnect(),this.input=null),s.default.isDefined(this.output)&&(this.output instanceof AudioNode&&this.output.disconnect(),this.output=null),this._context=null,this};e.default=s.default.AudioNode;},function(t,e,i){i.r(e);var s=i(0);i(4),i(14),i(30),i(44),i(20),i(3);if(s.default.supported&&!s.default.global.AudioContext.prototype.createConstantSource){var n=function(t){this.context=t;for(var e=t.createBuffer(1,128,t.sampleRate),i=e.getChannelData(0),s=0;s<i.length;s++)i[s]=1;this._bufferSource=t.createBufferSource(),this._bufferSource.channelCount=1,this._bufferSource.channelCountMode="explicit",this._bufferSource.buffer=e,this._bufferSource.loop=!0;var n=this._output=t.createGain();this.offset=n.gain,this._bufferSource.connect(n);};n.prototype.start=function(t){return this._bufferSource.start(t),this},n.prototype.stop=function(t){return this._bufferSource.stop(t),this},n.prototype.connect=function(){return this._output.connect.apply(this._output,arguments),this},n.prototype.disconnect=function(){return this._output.disconnect.apply(this._output,arguments),this},AudioContext.prototype.createConstantSource=function(){return new n(this)},s.default.Context.prototype.createConstantSource=function(){return new n(this)};}s.default.Signal=function(){var t=s.default.defaults(arguments,["value","units"],s.default.Signal);s.default.Param.call(this,t),this._constantSource=this.context.createConstantSource(),this._constantSource.start(0),this._param=this._constantSource.offset,this.value=t.value,this.output=this._constantSource,this.input=this._param=this.output.offset;},s.default.extend(s.default.Signal,s.default.Param),s.default.Signal.defaults={value:0,units:s.default.Type.Default,convert:!0},s.default.Signal.prototype.connect=s.default.SignalBase.prototype.connect,s.default.Signal.prototype.disconnect=s.default.SignalBase.prototype.disconnect,s.default.Signal.prototype.getValueAtTime=function(t){return this._param.getValueAtTime?this._param.getValueAtTime(t):s.default.Param.prototype.getValueAtTime.call(this,t)},s.default.Signal.prototype.dispose=function(){return s.default.Param.prototype.dispose.call(this),this._constantSource.stop(),this._constantSource.disconnect(),this._constantSource=null,this};e.default=s.default.Signal;},function(t,e,i){i.r(e);var s=i(0);i(14),i(4),i(1);s.default.Gain=function(){var t=s.default.defaults(arguments,["gain","units"],s.default.Gain);s.default.AudioNode.call(this,t),this.input=this.output=this._gainNode=this.context.createGain(),this.gain=new s.default.Param({param:this._gainNode.gain,units:t.units,value:t.gain,convert:t.convert}),this._readOnly("gain");},s.default.extend(s.default.Gain,s.default.AudioNode),s.default.Gain.defaults={gain:1,convert:!0},s.default.Gain.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._gainNode.disconnect(),this._gainNode=null,this._writable("gain"),this.gain.dispose(),this.gain=null;},e.default=s.default.Gain;},function(t,e,i){i.r(e);var s=i(0);i(63),i(46),i(45),i(20);s.default.Type={Default:"number",Time:"time",Frequency:"frequency",TransportTime:"transportTime",Ticks:"ticks",NormalRange:"normalRange",AudioRange:"audioRange",Decibels:"db",Interval:"interval",BPM:"bpm",Positive:"positive",Gain:"gain",Cents:"cents",Degrees:"degrees",MIDI:"midi",BarsBeatsSixteenths:"barsBeatsSixteenths",Samples:"samples",Hertz:"hertz",Note:"note",Milliseconds:"milliseconds",Seconds:"seconds",Notation:"notation"},s.default.prototype.toSeconds=function(t){return s.default.isNumber(t)?t:s.default.isUndef(t)?this.now():s.default.isString(t)||s.default.isObject(t)?new s.default.Time(t).toSeconds():t instanceof s.default.TimeBase?t.toSeconds():void 0},s.default.prototype.toFrequency=function(t){return s.default.isNumber(t)?t:s.default.isString(t)||s.default.isUndef(t)||s.default.isObject(t)?new s.default.Frequency(t).valueOf():t instanceof s.default.TimeBase?t.toFrequency():void 0},s.default.prototype.toTicks=function(t){return s.default.isNumber(t)||s.default.isString(t)||s.default.isObject(t)?new s.default.TransportTime(t).toTicks():s.default.isUndef(t)?s.default.Transport.ticks:t instanceof s.default.TimeBase?t.toTicks():void 0},e.default=s.default;},function(t,e,i){i.r(e);var s=i(0);i(14),i(3),i(30);s.default.Multiply=function(t){s.default.Signal.call(this),this.createInsOuts(2,0),this._mult=this.input[0]=this.output=new s.default.Gain,this._param=this.input[1]=this.output.gain,this.value=s.default.defaultArg(t,0);},s.default.extend(s.default.Multiply,s.default.Signal),s.default.Multiply.prototype.dispose=function(){return s.default.Signal.prototype.dispose.call(this),this._mult.dispose(),this._mult=null,this._param=null,this},e.default=s.default.Multiply;},function(t,e,i){i.r(e);var s=i(0);i(16),i(27),i(40),i(4),i(34),i(2),i(1);s.default.Source=function(t){t=s.default.defaultArg(t,s.default.Source.defaults),s.default.AudioNode.call(this),this._volume=this.output=new s.default.Volume(t.volume),this.volume=this._volume.volume,this._readOnly("volume"),this._state=new s.default.TimelineState(s.default.State.Stopped),this._state.memory=100,this._synced=!1,this._scheduled=[],this._volume.output.output.channelCount=2,this._volume.output.output.channelCountMode="explicit",this.mute=t.mute;},s.default.extend(s.default.Source,s.default.AudioNode),s.default.Source.defaults={volume:0,mute:!1},Object.defineProperty(s.default.Source.prototype,"state",{get:function(){return this._synced?s.default.Transport.state===s.default.State.Started?this._state.getValueAtTime(s.default.Transport.seconds):s.default.State.Stopped:this._state.getValueAtTime(this.now())}}),Object.defineProperty(s.default.Source.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t;}}),s.default.Source.prototype._start=s.default.noOp,s.default.Source.prototype.restart=s.default.noOp,s.default.Source.prototype._stop=s.default.noOp,s.default.Source.prototype.start=function(t,e,i){if(s.default.isUndef(t)&&this._synced?t=s.default.Transport.seconds:(t=this.toSeconds(t),t=Math.max(t,this.context.currentTime)),this._state.getValueAtTime(t)===s.default.State.Started)this._state.cancel(t),this._state.setStateAtTime(s.default.State.Started,t),this.restart(t,e,i);else if(this._state.setStateAtTime(s.default.State.Started,t),this._synced){var n=this._state.get(t);n.offset=s.default.defaultArg(e,0),n.duration=i;var o=s.default.Transport.schedule(function(t){this._start(t,e,i);}.bind(this),t);this._scheduled.push(o),s.default.Transport.state===s.default.State.Started&&this._syncedStart(this.now(),s.default.Transport.seconds);}else this._start.apply(this,arguments);return this},s.default.Source.prototype.stop=function(t){if(s.default.isUndef(t)&&this._synced?t=s.default.Transport.seconds:(t=this.toSeconds(t),t=Math.max(t,this.context.currentTime)),this._synced){var e=s.default.Transport.schedule(this._stop.bind(this),t);this._scheduled.push(e);}else this._stop.apply(this,arguments);return this._state.cancel(t),this._state.setStateAtTime(s.default.State.Stopped,t),this},s.default.Source.prototype.sync=function(){return this._synced=!0,this._syncedStart=function(t,e){if(e>0){var i=this._state.get(e);if(i&&i.state===s.default.State.Started&&i.time!==e){var n,o=e-this.toSeconds(i.time);i.duration&&(n=this.toSeconds(i.duration)-o),this._start(t,this.toSeconds(i.offset)+o,n);}}}.bind(this),this._syncedStop=function(t){var e=s.default.Transport.getSecondsAtTime(Math.max(t-this.sampleTime,0));this._state.getValueAtTime(e)===s.default.State.Started&&this._stop(t);}.bind(this),s.default.Transport.on("start loopStart",this._syncedStart),s.default.Transport.on("stop pause loopEnd",this._syncedStop),this},s.default.Source.prototype.unsync=function(){this._synced&&(s.default.Transport.off("stop pause loopEnd",this._syncedStop),s.default.Transport.off("start loopStart",this._syncedStart)),this._synced=!1;for(var t=0;t<this._scheduled.length;t++){var e=this._scheduled[t];s.default.Transport.clear(e);}return this._scheduled=[],this._state.cancel(0),this},s.default.Source.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this.unsync(),this._scheduled=null,this._writable("volume"),this._volume.dispose(),this._volume=null,this.volume=null,this._state.dispose(),this._state=null;},e.default=s.default.Source;},function(t,e,i){i.r(e);var s=i(0);i(30),i(44);if(s.default.supported&&!s.default.global.AudioContext.prototype._native_createWaveShaper){var n=navigator.userAgent.toLowerCase();if(n.includes("safari")&&!n.includes("chrome")){var o=function(t){for(var e in this._internalNode=this.input=this.output=t._native_createWaveShaper(),this._curve=null,this._internalNode)this._defineProperty(this._internalNode,e);};Object.defineProperty(o.prototype,"curve",{get:function(){return this._curve},set:function(t){this._curve=t;var e=new Float32Array(t.length+1);e.set(t,1),e[0]=t[0],this._internalNode.curve=e;}}),o.prototype._defineProperty=function(t,e){s.default.isUndef(this[e])&&Object.defineProperty(this,e,{get:function(){return "function"==typeof t[e]?t[e].bind(t):t[e]},set:function(i){t[e]=i;}});},s.default.global.AudioContext.prototype._native_createWaveShaper=s.default.global.AudioContext.prototype.createWaveShaper,s.default.global.AudioContext.prototype.createWaveShaper=function(){return new o(this)};}}s.default.WaveShaper=function(t,e){s.default.SignalBase.call(this),this._shaper=this.input=this.output=this.context.createWaveShaper(),this._curve=null,Array.isArray(t)?this.curve=t:isFinite(t)||s.default.isUndef(t)?this._curve=new Float32Array(s.default.defaultArg(t,1024)):s.default.isFunction(t)&&(this._curve=new Float32Array(s.default.defaultArg(e,1024)),this.setMap(t));},s.default.extend(s.default.WaveShaper,s.default.SignalBase),s.default.WaveShaper.prototype.setMap=function(t){for(var e=new Array(this._curve.length),i=0,s=this._curve.length;i<s;i++){var n=i/(s-1)*2-1;e[i]=t(n,i);}return this.curve=e,this},Object.defineProperty(s.default.WaveShaper.prototype,"curve",{get:function(){return this._shaper.curve},set:function(t){this._curve=new Float32Array(t),this._shaper.curve=this._curve;}}),Object.defineProperty(s.default.WaveShaper.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){if(!["none","2x","4x"].includes(t))throw new RangeError("Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'");this._shaper.oversample=t;}}),s.default.WaveShaper.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._shaper.disconnect(),this._shaper=null,this._curve=null,this};e.default=s.default.WaveShaper;},function(t,e,i){i.r(e);var s=i(0);i(23),i(1);s.default.Effect=function(){var t=s.default.defaults(arguments,["wet"],s.default.Effect);s.default.AudioNode.call(this),this.createInsOuts(1,1),this._dryWet=new s.default.CrossFade(t.wet),this.wet=this._dryWet.fade,this.effectSend=new s.default.Gain,this.effectReturn=new s.default.Gain,s.default.connect(this.input,this._dryWet.a),s.default.connect(this.input,this.effectSend),this.effectReturn.connect(this._dryWet.b),this._dryWet.connect(this.output),this._readOnly(["wet"]);},s.default.extend(s.default.Effect,s.default.AudioNode),s.default.Effect.defaults={wet:1},s.default.Effect.prototype.connectEffect=function(t){return this.effectSend.chain(t,this.effectReturn),this},s.default.Effect.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._dryWet.dispose(),this._dryWet=null,this.effectSend.dispose(),this.effectSend=null,this.effectReturn.dispose(),this.effectReturn=null,this._writable(["wet"]),this.wet=null,this},e.default=s.default.Effect;},function(t,e,i){i.r(e);var s=i(0);i(2),i(1);s.default.Filter=function(){var t=s.default.defaults(arguments,["frequency","type","rolloff"],s.default.Filter);s.default.AudioNode.call(this),this.createInsOuts(1,1),this._filters=[],this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=new s.default.Signal(0,s.default.Type.Cents),this.gain=new s.default.Signal({value:t.gain,convert:!0,type:s.default.Type.Decibels}),this.Q=new s.default.Signal(t.Q),this._type=t.type,this._rolloff=t.rolloff,this.rolloff=t.rolloff,this._readOnly(["detune","frequency","gain","Q"]);},s.default.extend(s.default.Filter,s.default.AudioNode),s.default.Filter.defaults={type:"lowpass",frequency:350,rolloff:-12,Q:1,gain:0},Object.defineProperty(s.default.Filter.prototype,"type",{get:function(){return this._type},set:function(t){if(-1===["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(t))throw new TypeError("Tone.Filter: invalid type "+t);this._type=t;for(var e=0;e<this._filters.length;e++)this._filters[e].type=t;}}),Object.defineProperty(s.default.Filter.prototype,"rolloff",{get:function(){return this._rolloff},set:function(t){t=parseInt(t,10);var e=[-12,-24,-48,-96].indexOf(t);if(-1===e)throw new RangeError("Tone.Filter: rolloff can only be -12, -24, -48 or -96");e+=1,this._rolloff=t,this.input.disconnect();for(var i=0;i<this._filters.length;i++)this._filters[i].disconnect(),this._filters[i]=null;this._filters=new Array(e);for(var n=0;n<e;n++){var o=this.context.createBiquadFilter();o.type=this._type,this.frequency.connect(o.frequency),this.detune.connect(o.detune),this.Q.connect(o.Q),this.gain.connect(o.gain),this._filters[n]=o;}var a=[this.input].concat(this._filters).concat([this.output]);s.default.connectSeries.apply(s.default,a);}}),s.default.Filter.prototype.getFrequencyResponse=function(t){t=s.default.defaultArg(t,128);for(var e=new Float32Array(t).map(function(){return 1}),i=new Float32Array(t),n=0;n<t;n++){var o=19980*Math.pow(n/t,2)+20;i[n]=o;}var a=new Float32Array(t),r=new Float32Array(t);return this._filters.forEach(function(){var t=this.context.createBiquadFilter();t.type=this._type,t.Q.value=this.Q.value,t.frequency.value=this.frequency.value,t.gain.value=this.gain.value,t.getFrequencyResponse(i,a,r),a.forEach(function(t,i){e[i]*=t;});}.bind(this)),e},s.default.Filter.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this);for(var t=0;t<this._filters.length;t++)this._filters[t].disconnect(),this._filters[t]=null;return this._filters=null,this._writable(["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.frequency=null,this.Q=null,this.detune.dispose(),this.detune=null,this.gain.dispose(),this.gain=null,this},e.default=s.default.Filter;},function(t,e,i){i.r(e);var s=i(0);i(1);s.default.Merge=function(t){t=s.default.defaultArg(t,2),s.default.AudioNode.call(this),this.createInsOuts(t,0),this._merger=this.output=this.context.createChannelMerger(t);for(var e=0;e<t;e++)this.input[e]=new s.default.Gain,this.input[e].connect(this._merger,0,e),this.input[e].channelCount=1,this.input[e].channelCountMode="explicit";this.left=this.input[0],this.right=this.input[1];},s.default.extend(s.default.Merge,s.default.AudioNode),s.default.Merge.prototype.dispose=function(){return this.input.forEach(function(t){t.dispose();}),s.default.AudioNode.prototype.dispose.call(this),this.left=null,this.right=null,this._merger.disconnect(),this._merger=null,this},e.default=s.default.Merge;},function(t,e,i){i.r(e);var s=i(0);i(35),i(4);s.default.supported&&(AudioBuffer.prototype.copyToChannel||(AudioBuffer.prototype.copyToChannel=function(t,e,i){var s=this.getChannelData(e);i=i||0;for(var n=0;n<s.length;n++)s[n+i]=t[n];},AudioBuffer.prototype.copyFromChannel=function(t,e,i){var s=this.getChannelData(e);i=i||0;for(var n=0;n<t.length;n++)t[n]=s[n+i];})),s.default.Buffer=function(){var t=s.default.defaults(arguments,["url","onload","onerror"],s.default.Buffer);s.default.call(this),this._buffer=null,this._reversed=t.reverse,this._xhr=null,this.onload=s.default.noOp,t.url instanceof AudioBuffer||t.url instanceof s.default.Buffer?(this.set(t.url),this.loaded||(this.onload=t.onload)):s.default.isString(t.url)&&this.load(t.url).then(t.onload).catch(t.onerror);},s.default.extend(s.default.Buffer),s.default.Buffer.defaults={url:void 0,reverse:!1,onload:s.default.noOp,onerror:s.default.noOp},s.default.Buffer.prototype.set=function(t){return t instanceof s.default.Buffer?t.loaded?this._buffer=t.get():t.onload=function(){this.set(t),this.onload(this);}.bind(this):this._buffer=t,this._reversed&&this._reverse(),this},s.default.Buffer.prototype.get=function(){return this._buffer},s.default.Buffer.prototype.load=function(t,e,i){return new Promise(function(n,o){this._xhr=s.default.Buffer.load(t,function(t){this._xhr=null,this.set(t),n(this),this.onload(this),e&&e(this);}.bind(this),function(t){this._xhr=null,o(t),i&&i(t);}.bind(this));}.bind(this))},s.default.Buffer.prototype.dispose=function(){return s.default.prototype.dispose.call(this),this._buffer=null,this._xhr&&(s.default.Buffer._removeFromDownloadQueue(this._xhr),this._xhr.abort(),this._xhr=null),this},Object.defineProperty(s.default.Buffer.prototype,"loaded",{get:function(){return this.length>0}}),Object.defineProperty(s.default.Buffer.prototype,"duration",{get:function(){return this._buffer?this._buffer.duration:0}}),Object.defineProperty(s.default.Buffer.prototype,"length",{get:function(){return this._buffer?this._buffer.length:0}}),Object.defineProperty(s.default.Buffer.prototype,"numberOfChannels",{get:function(){return this._buffer?this._buffer.numberOfChannels:0}}),s.default.Buffer.prototype.fromArray=function(t){var e=t[0].length>0,i=e?t.length:1,s=e?t[0].length:t.length,n=this.context.createBuffer(i,s,this.context.sampleRate);e||1!==i||(t=[t]);for(var o=0;o<i;o++)n.copyToChannel(t[o],o);return this._buffer=n,this},s.default.Buffer.prototype.toMono=function(t){if(s.default.isNumber(t))this.fromArray(this.toArray(t));else {for(var e=new Float32Array(this.length),i=this.numberOfChannels,n=0;n<i;n++)for(var o=this.toArray(n),a=0;a<o.length;a++)e[a]+=o[a];e=e.map(function(t){return t/i}),this.fromArray(e);}return this},s.default.Buffer.prototype.toArray=function(t){if(s.default.isNumber(t))return this.getChannelData(t);if(1===this.numberOfChannels)return this.toArray(0);for(var e=[],i=0;i<this.numberOfChannels;i++)e[i]=this.getChannelData(i);return e},s.default.Buffer.prototype.getChannelData=function(t){return this._buffer.getChannelData(t)},s.default.Buffer.prototype.slice=function(t,e){e=s.default.defaultArg(e,this.duration);for(var i=Math.floor(this.context.sampleRate*this.toSeconds(t)),n=Math.floor(this.context.sampleRate*this.toSeconds(e)),o=[],a=0;a<this.numberOfChannels;a++)o[a]=this.toArray(a).slice(i,n);return (new s.default.Buffer).fromArray(o)},s.default.Buffer.prototype._reverse=function(){if(this.loaded)for(var t=0;t<this.numberOfChannels;t++)Array.prototype.reverse.call(this.getChannelData(t));return this},Object.defineProperty(s.default.Buffer.prototype,"reverse",{get:function(){return this._reversed},set:function(t){this._reversed!==t&&(this._reversed=t,this._reverse());}}),s.default.Emitter.mixin(s.default.Buffer),s.default.Buffer._downloadQueue=[],s.default.Buffer.baseUrl="",s.default.Buffer.fromArray=function(t){return (new s.default.Buffer).fromArray(t)},s.default.Buffer.fromUrl=function(t){var e=new s.default.Buffer;return e.load(t).then(function(){return e})},s.default.Buffer._removeFromDownloadQueue=function(t){var e=s.default.Buffer._downloadQueue.indexOf(t);-1!==e&&s.default.Buffer._downloadQueue.splice(e,1);},s.default.Buffer.load=function(t,e,i){e=s.default.defaultArg(e,s.default.noOp);var n=t.match(/\[(.+\|?)+\]$/);if(n){for(var o=n[1].split("|"),a=o[0],r=0;r<o.length;r++)if(s.default.Buffer.supportsType(o[r])){a=o[r];break}t=t.replace(n[0],a);}function l(t){if(s.default.Buffer._removeFromDownloadQueue(d),s.default.Buffer.emit("error",t),!i)throw t;i(t);}function u(){for(var t=0,e=0;e<s.default.Buffer._downloadQueue.length;e++)t+=s.default.Buffer._downloadQueue[e].progress;s.default.Buffer.emit("progress",t/s.default.Buffer._downloadQueue.length);}var d=new XMLHttpRequest;return d.open("GET",s.default.Buffer.baseUrl+t,!0),d.responseType="arraybuffer",d.progress=0,s.default.Buffer._downloadQueue.push(d),d.addEventListener("load",function(){200===d.status?s.default.context.decodeAudioData(d.response).then(function(t){d.progress=1,u(),e(t),s.default.Buffer._removeFromDownloadQueue(d),0===s.default.Buffer._downloadQueue.length&&s.default.Buffer.emit("load");}).catch(function(){s.default.Buffer._removeFromDownloadQueue(d),l("Tone.Buffer: could not decode audio data: "+t);}):l("Tone.Buffer: could not locate file: "+t);}),d.addEventListener("error",l),d.addEventListener("progress",function(t){t.lengthComputable&&(d.progress=t.loaded/t.total*.95,u());}),d.send(),d},s.default.Buffer.cancelDownloads=function(){return s.default.Buffer._downloadQueue.slice().forEach(function(t){s.default.Buffer._removeFromDownloadQueue(t),t.abort();}),s.default.Buffer},s.default.Buffer.supportsType=function(t){var e=t.split(".");return e=e[e.length-1],""!==document.createElement("audio").canPlayType("audio/"+e)},s.default.loaded=function(){var t,e;function i(){s.default.Buffer.off("load",t),s.default.Buffer.off("error",e);}return new Promise(function(i,n){t=function(){i();},e=function(){n();},s.default.Buffer.on("load",t),s.default.Buffer.on("error",e);}).then(i).catch(function(t){throw i(),new Error(t)})};e.default=s.default.Buffer;},function(t,e,i){i.r(e);var s=i(0);i(17),i(26),i(1),i(2),i(22),i(4),i(28);s.default.LFO=function(){var t=s.default.defaults(arguments,["frequency","min","max"],s.default.LFO);s.default.AudioNode.call(this),this._oscillator=new s.default.Oscillator({frequency:t.frequency,type:t.type}),this.frequency=this._oscillator.frequency,this.amplitude=this._oscillator.volume,this.amplitude.units=s.default.Type.NormalRange,this.amplitude.value=t.amplitude,this._stoppedSignal=new s.default.Signal(0,s.default.Type.AudioRange),this._zeros=new s.default.Zero,this._stoppedValue=0,this._a2g=new s.default.AudioToGain,this._scaler=this.output=new s.default.Scale(t.min,t.max),this._units=s.default.Type.Default,this.units=t.units,this._oscillator.chain(this._a2g,this._scaler),this._zeros.connect(this._a2g),this._stoppedSignal.connect(this._a2g),this._readOnly(["amplitude","frequency"]),this.phase=t.phase;},s.default.extend(s.default.LFO,s.default.AudioNode),s.default.LFO.defaults={type:"sine",min:0,max:1,phase:0,frequency:"4n",amplitude:1,units:s.default.Type.Default},s.default.LFO.prototype.start=function(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(0,t),this._oscillator.start(t),this},s.default.LFO.prototype.stop=function(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(this._stoppedValue,t),this._oscillator.stop(t),this},s.default.LFO.prototype.sync=function(){return this._oscillator.sync(),this._oscillator.syncFrequency(),this},s.default.LFO.prototype.unsync=function(){return this._oscillator.unsync(),this._oscillator.unsyncFrequency(),this},Object.defineProperty(s.default.LFO.prototype,"min",{get:function(){return this._toUnits(this._scaler.min)},set:function(t){t=this._fromUnits(t),this._scaler.min=t;}}),Object.defineProperty(s.default.LFO.prototype,"max",{get:function(){return this._toUnits(this._scaler.max)},set:function(t){t=this._fromUnits(t),this._scaler.max=t;}}),Object.defineProperty(s.default.LFO.prototype,"type",{get:function(){return this._oscillator.type},set:function(t){this._oscillator.type=t,this._stoppedValue=this._oscillator._getInitialValue(),this._stoppedSignal.value=this._stoppedValue;}}),Object.defineProperty(s.default.LFO.prototype,"phase",{get:function(){return this._oscillator.phase},set:function(t){this._oscillator.phase=t,this._stoppedValue=this._oscillator._getInitialValue(),this._stoppedSignal.value=this._stoppedValue;}}),Object.defineProperty(s.default.LFO.prototype,"units",{get:function(){return this._units},set:function(t){var e=this.min,i=this.max;this._units=t,this.min=e,this.max=i;}}),Object.defineProperty(s.default.LFO.prototype,"state",{get:function(){return this._oscillator.state}}),s.default.LFO.prototype.connect=function(t){return t.constructor!==s.default.Signal&&t.constructor!==s.default.Param||(this.convert=t.convert,this.units=t.units),s.default.SignalBase.prototype.connect.apply(this,arguments),this},s.default.LFO.prototype._fromUnits=s.default.Param.prototype._fromUnits,s.default.LFO.prototype._toUnits=s.default.Param.prototype._toUnits,s.default.LFO.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["amplitude","frequency"]),this._oscillator.dispose(),this._oscillator=null,this._stoppedSignal.dispose(),this._stoppedSignal=null,this._zeros.dispose(),this._zeros=null,this._scaler.dispose(),this._scaler=null,this._a2g.dispose(),this._a2g=null,this.frequency=null,this.amplitude=null,this},e.default=s.default.LFO;},function(t,e,i){i.r(e);var s=i(0);i(29),i(90),i(2),i(3);s.default.Subtract=function(t){s.default.Signal.call(this),this.createInsOuts(2,0),this._sum=this.input[0]=this.output=new s.default.Gain,this._neg=new s.default.Negate,this._param=this.input[1]=new s.default.Signal(t),this._param.chain(this._neg,this._sum);},s.default.extend(s.default.Subtract,s.default.Signal),s.default.Subtract.prototype.dispose=function(){return s.default.Signal.prototype.dispose.call(this),this._neg.dispose(),this._neg=null,this._sum.disconnect(),this._sum=null,this},e.default=s.default.Subtract;},function(t,e,i){i.r(e);var s=i(0);i(4),i(1),i(24);s.default.Param=function(){var t=s.default.defaults(arguments,["param","units","convert"],s.default.Param);s.default.AudioNode.call(this,t),this._param=this.input=t.param,this.units=t.units,this.convert=t.convert,this.overridden=!1,this._events=new s.default.Timeline(1e3),s.default.isDefined(t.value)&&this._param&&this.setValueAtTime(t.value,0);},s.default.extend(s.default.Param,s.default.AudioNode),s.default.Param.defaults={units:s.default.Type.Default,convert:!0,param:void 0},Object.defineProperty(s.default.Param.prototype,"value",{get:function(){var t=this.now();return this._toUnits(this.getValueAtTime(t))},set:function(t){this._initialValue=this._fromUnits(t),this.cancelScheduledValues(this.now()),this.setValueAtTime(t,this.now());}}),Object.defineProperty(s.default.Param.prototype,"minValue",{get:function(){return this.units===s.default.Type.Time||this.units===s.default.Type.Frequency||this.units===s.default.Type.NormalRange||this.units===s.default.Type.Positive||this.units===s.default.Type.BPM?0:this.units===s.default.Type.AudioRange?-1:this.units===s.default.Type.Decibels?-1/0:this._param.minValue}}),Object.defineProperty(s.default.Param.prototype,"maxValue",{get:function(){return this.units===s.default.Type.NormalRange||this.units===s.default.Type.AudioRange?1:this._param.maxValue}}),s.default.Param.prototype._fromUnits=function(t){if(!this.convert&&!s.default.isUndef(this.convert)||this.overridden)return t;switch(this.units){case s.default.Type.Time:return this.toSeconds(t);case s.default.Type.Frequency:return this.toFrequency(t);case s.default.Type.Decibels:return s.default.dbToGain(t);case s.default.Type.NormalRange:return Math.min(Math.max(t,0),1);case s.default.Type.AudioRange:return Math.min(Math.max(t,-1),1);case s.default.Type.Positive:return Math.max(t,0);default:return t}},s.default.Param.prototype._toUnits=function(t){if(!this.convert&&!s.default.isUndef(this.convert))return t;switch(this.units){case s.default.Type.Decibels:return s.default.gainToDb(t);default:return t}},s.default.Param.prototype._minOutput=1e-5,s.default.Param.AutomationType={Linear:"linearRampToValueAtTime",Exponential:"exponentialRampToValueAtTime",Target:"setTargetAtTime",SetValue:"setValueAtTime",Cancel:"cancelScheduledValues"},s.default.Param.prototype.setValueAtTime=function(t,e){return e=this.toSeconds(e),t=this._fromUnits(t),this._events.add({type:s.default.Param.AutomationType.SetValue,value:t,time:e}),this.log(s.default.Param.AutomationType.SetValue,t,e),this._param.setValueAtTime(t,e),this},s.default.Param.prototype.getValueAtTime=function(t){t=this.toSeconds(t);var e=this._events.getAfter(t),i=this._events.get(t),n=s.default.defaultArg(this._initialValue,this._param.defaultValue),o=n;if(null===i)o=n;else if(i.type===s.default.Param.AutomationType.Target){var a,r=this._events.getBefore(i.time);a=null===r?n:r.value,o=this._exponentialApproach(i.time,a,i.value,i.constant,t);}else o=null===e?i.value:e.type===s.default.Param.AutomationType.Linear?this._linearInterpolate(i.time,i.value,e.time,e.value,t):e.type===s.default.Param.AutomationType.Exponential?this._exponentialInterpolate(i.time,i.value,e.time,e.value,t):i.value;return o},s.default.Param.prototype.setRampPoint=function(t){t=this.toSeconds(t);var e=this.getValueAtTime(t);return this.cancelAndHoldAtTime(t),0===e&&(e=this._minOutput),this.setValueAtTime(this._toUnits(e),t),this},s.default.Param.prototype.linearRampToValueAtTime=function(t,e){return t=this._fromUnits(t),e=this.toSeconds(e),this._events.add({type:s.default.Param.AutomationType.Linear,value:t,time:e}),this.log(s.default.Param.AutomationType.Linear,t,e),this._param.linearRampToValueAtTime(t,e),this},s.default.Param.prototype.exponentialRampToValueAtTime=function(t,e){return t=this._fromUnits(t),t=Math.max(this._minOutput,t),e=this.toSeconds(e),this._events.add({type:s.default.Param.AutomationType.Exponential,time:e,value:t}),this.log(s.default.Param.AutomationType.Exponential,t,e),this._param.exponentialRampToValueAtTime(t,e),this},s.default.Param.prototype.exponentialRampTo=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.exponentialRampToValueAtTime(t,i+this.toSeconds(e)),this},s.default.Param.prototype.linearRampTo=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.linearRampToValueAtTime(t,i+this.toSeconds(e)),this},s.default.Param.prototype.targetRampTo=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.exponentialApproachValueAtTime(t,i,e),this},s.default.Param.prototype.exponentialApproachValueAtTime=function(t,e,i){var s=Math.log(this.toSeconds(i)+1)/Math.log(200);return e=this.toSeconds(e),this.setTargetAtTime(t,e,s),this.cancelAndHoldAtTime(e+.9*i),this.linearRampToValueAtTime(t,e+i),this},s.default.Param.prototype.setTargetAtTime=function(t,e,i){if(t=this._fromUnits(t),i<=0)throw new Error("timeConstant must be greater than 0");return e=this.toSeconds(e),this._events.add({type:s.default.Param.AutomationType.Target,value:t,time:e,constant:i}),this.log(s.default.Param.AutomationType.Target,t,e,i),this._param.setTargetAtTime(t,e,i),this},s.default.Param.prototype.setValueCurveAtTime=function(t,e,i,n){n=s.default.defaultArg(n,1),i=this.toSeconds(i),e=this.toSeconds(e),this.setValueAtTime(t[0]*n,e);for(var o=i/(t.length-1),a=1;a<t.length;a++)this.linearRampToValueAtTime(t[a]*n,e+a*o);return this},s.default.Param.prototype.cancelScheduledValues=function(t){return t=this.toSeconds(t),this._events.cancel(t),this._param.cancelScheduledValues(t),this.log(s.default.Param.AutomationType.Cancel,t),this},s.default.Param.prototype.cancelAndHoldAtTime=function(t){t=this.toSeconds(t);var e=this.getValueAtTime(t);this.log("cancelAndHoldAtTime",t,"value="+e),this._param.cancelScheduledValues(t);var i=this._events.get(t),n=this._events.getAfter(t);return i&&i.time===t?n?this._events.cancel(n.time):this._events.cancel(t+this.sampleTime):n&&(this._events.cancel(n.time),n.type===s.default.Param.AutomationType.Linear?this.linearRampToValueAtTime(e,t):n.type===s.default.Param.AutomationType.Exponential&&this.exponentialRampToValueAtTime(e,t)),this._events.add({type:s.default.Param.AutomationType.SetValue,value:e,time:t}),this._param.setValueAtTime(e,t),this},s.default.Param.prototype.rampTo=function(t,e,i){return e=s.default.defaultArg(e,.1),this.units===s.default.Type.Frequency||this.units===s.default.Type.BPM||this.units===s.default.Type.Decibels?this.exponentialRampTo(t,e,i):this.linearRampTo(t,e,i),this},s.default.Param.prototype._exponentialApproach=function(t,e,i,s,n){return i+(e-i)*Math.exp(-(n-t)/s)},s.default.Param.prototype._linearInterpolate=function(t,e,i,s,n){return e+(n-t)/(i-t)*(s-e)},s.default.Param.prototype._exponentialInterpolate=function(t,e,i,s,n){return e*Math.pow(s/e,(n-t)/(i-t))},s.default.Param.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._param=null,this._events=null,this},e.default=s.default.Param;},function(t,e,i){i.r(e);var s=i(0);i(8),i(19),i(10),i(23);s.default.StereoEffect=function(){s.default.AudioNode.call(this);var t=s.default.defaults(arguments,["wet"],s.default.Effect);this.createInsOuts(1,1),this._dryWet=new s.default.CrossFade(t.wet),this.wet=this._dryWet.fade,this._split=new s.default.Split,this.effectSendL=this._split.left,this.effectSendR=this._split.right,this._merge=new s.default.Merge,this.effectReturnL=this._merge.left,this.effectReturnR=this._merge.right,s.default.connect(this.input,this._split),s.default.connect(this.input,this._dryWet,0,0),this._merge.connect(this._dryWet,0,1),this._dryWet.connect(this.output),this._readOnly(["wet"]);},s.default.extend(s.default.StereoEffect,s.default.Effect),s.default.StereoEffect.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._dryWet.dispose(),this._dryWet=null,this._split.dispose(),this._split=null,this._merge.dispose(),this._merge=null,this.effectSendL=null,this.effectSendR=null,this.effectReturnL=null,this.effectReturnR=null,this._writable(["wet"]),this.wet=null,this},e.default=s.default.StereoEffect;},function(t,e,i){i.r(e);var s=i(0);i(83),i(4),i(24),i(35),i(3),i(81),i(80),i(56);s.default.Transport=function(){s.default.Emitter.call(this),s.default.getContext(function(){this.loop=!1,this._loopStart=0,this._loopEnd=0,this._ppq=n.defaults.PPQ,this._clock=new s.default.Clock({callback:this._processTick.bind(this),frequency:0}),this._bindClockEvents(),this.bpm=this._clock.frequency,this.bpm._toUnits=this._toUnits.bind(this),this.bpm._fromUnits=this._fromUnits.bind(this),this.bpm.units=s.default.Type.BPM,this.bpm.value=n.defaults.bpm,this._readOnly("bpm"),this._timeSignature=n.defaults.timeSignature,this._scheduledEvents={},this._timeline=new s.default.Timeline,this._repeatedEvents=new s.default.IntervalTimeline,this._syncedSignals=[],this._swingTicks=n.defaults.PPQ/2,this._swingAmount=0,this.context.transport=this;}.bind(this));},s.default.extend(s.default.Transport,s.default.Emitter),s.default.Transport.defaults={bpm:120,swing:0,swingSubdivision:"8n",timeSignature:4,loopStart:0,loopEnd:"4m",PPQ:192},s.default.Transport.prototype.isTransport=!0,s.default.Transport.prototype._processTick=function(t,e){if(this._swingAmount>0&&e%this._ppq!=0&&e%(2*this._swingTicks)!=0){var i=e%(2*this._swingTicks)/(2*this._swingTicks),n=Math.sin(i*Math.PI)*this._swingAmount;t+=s.default.Ticks(2*this._swingTicks/3).toSeconds()*n;}this.loop&&e>=this._loopEnd&&(this.emit("loopEnd",t),this._clock.setTicksAtTime(this._loopStart,t),e=this._loopStart,this.emit("loopStart",t,this._clock.getSecondsAtTime(t)),this.emit("loop",t)),this._timeline.forEachAtTime(e,function(e){e.invoke(t);});},s.default.Transport.prototype.schedule=function(t,e){var i=new s.default.TransportEvent(this,{time:s.default.TransportTime(e),callback:t});return this._addEvent(i,this._timeline)},s.default.Transport.prototype.scheduleRepeat=function(t,e,i,n){var o=new s.default.TransportRepeatEvent(this,{callback:t,interval:s.default.Time(e),time:s.default.TransportTime(i),duration:s.default.Time(s.default.defaultArg(n,1/0))});return this._addEvent(o,this._repeatedEvents)},s.default.Transport.prototype.scheduleOnce=function(t,e){var i=new s.default.TransportEvent(this,{time:s.default.TransportTime(e),callback:t,once:!0});return this._addEvent(i,this._timeline)},s.default.Transport.prototype.clear=function(t){if(this._scheduledEvents.hasOwnProperty(t)){var e=this._scheduledEvents[t.toString()];e.timeline.remove(e.event),e.event.dispose(),delete this._scheduledEvents[t.toString()];}return this},s.default.Transport.prototype._addEvent=function(t,e){return this._scheduledEvents[t.id.toString()]={event:t,timeline:e},e.add(t),t.id},s.default.Transport.prototype.cancel=function(t){return t=s.default.defaultArg(t,0),t=this.toTicks(t),this._timeline.forEachFrom(t,function(t){this.clear(t.id);}.bind(this)),this._repeatedEvents.forEachFrom(t,function(t){this.clear(t.id);}.bind(this)),this},s.default.Transport.prototype._bindClockEvents=function(){this._clock.on("start",function(t,e){e=s.default.Ticks(e).toSeconds(),this.emit("start",t,e);}.bind(this)),this._clock.on("stop",function(t){this.emit("stop",t);}.bind(this)),this._clock.on("pause",function(t){this.emit("pause",t);}.bind(this));},Object.defineProperty(s.default.Transport.prototype,"state",{get:function(){return this._clock.getStateAtTime(this.now())}}),s.default.Transport.prototype.start=function(t,e){return s.default.isDefined(e)&&(e=this.toTicks(e)),this._clock.start(t,e),this},s.default.Transport.prototype.stop=function(t){return this._clock.stop(t),this},s.default.Transport.prototype.pause=function(t){return this._clock.pause(t),this},s.default.Transport.prototype.toggle=function(t){return t=this.toSeconds(t),this._clock.getStateAtTime(t)!==s.default.State.Started?this.start(t):this.stop(t),this},Object.defineProperty(s.default.Transport.prototype,"timeSignature",{get:function(){return this._timeSignature},set:function(t){s.default.isArray(t)&&(t=t[0]/t[1]*4),this._timeSignature=t;}}),Object.defineProperty(s.default.Transport.prototype,"loopStart",{get:function(){return s.default.Ticks(this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t);}}),Object.defineProperty(s.default.Transport.prototype,"loopEnd",{get:function(){return s.default.Ticks(this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t);}}),s.default.Transport.prototype.setLoopPoints=function(t,e){return this.loopStart=t,this.loopEnd=e,this},Object.defineProperty(s.default.Transport.prototype,"swing",{get:function(){return this._swingAmount},set:function(t){this._swingAmount=t;}}),Object.defineProperty(s.default.Transport.prototype,"swingSubdivision",{get:function(){return s.default.Ticks(this._swingTicks).toNotation()},set:function(t){this._swingTicks=this.toTicks(t);}}),Object.defineProperty(s.default.Transport.prototype,"position",{get:function(){var t=this.now(),e=this._clock.getTicksAtTime(t);return s.default.Ticks(e).toBarsBeatsSixteenths()},set:function(t){var e=this.toTicks(t);this.ticks=e;}}),Object.defineProperty(s.default.Transport.prototype,"seconds",{get:function(){return this._clock.seconds},set:function(t){var e=this.now(),i=this.bpm.timeToTicks(t,e);this.ticks=i;}}),Object.defineProperty(s.default.Transport.prototype,"progress",{get:function(){if(this.loop){var t=this.now();return (this._clock.getTicksAtTime(t)-this._loopStart)/(this._loopEnd-this._loopStart)}return 0}}),Object.defineProperty(s.default.Transport.prototype,"ticks",{get:function(){return this._clock.ticks},set:function(t){if(this._clock.ticks!==t){var e=this.now();this.state===s.default.State.Started?(this.emit("stop",e),this._clock.setTicksAtTime(t,e),this.emit("start",e,this.seconds)):this._clock.setTicksAtTime(t,e);}}}),s.default.Transport.prototype.getTicksAtTime=function(t){return Math.round(this._clock.getTicksAtTime(t))},s.default.Transport.prototype.getSecondsAtTime=function(t){return this._clock.getSecondsAtTime(t)},Object.defineProperty(s.default.Transport.prototype,"PPQ",{get:function(){return this._ppq},set:function(t){var e=this.bpm.value;this._ppq=t,this.bpm.value=e;}}),s.default.Transport.prototype._fromUnits=function(t){return 1/(60/t/this.PPQ)},s.default.Transport.prototype._toUnits=function(t){return t/this.PPQ*60},s.default.Transport.prototype.nextSubdivision=function(t){if(t=this.toTicks(t),this.state!==s.default.State.Started)return 0;var e=this.now(),i=t-this.getTicksAtTime(e)%t;return this._clock.nextTickTime(i,e)},s.default.Transport.prototype.syncSignal=function(t,e){if(!e){var i=this.now();e=0!==t.getValueAtTime(i)?t.getValueAtTime(i)/this.bpm.getValueAtTime(i):0;}var n=new s.default.Gain(e);return this.bpm.chain(n,t._param),this._syncedSignals.push({ratio:n,signal:t,initial:t.value}),t.value=0,this},s.default.Transport.prototype.unsyncSignal=function(t){for(var e=this._syncedSignals.length-1;e>=0;e--){var i=this._syncedSignals[e];i.signal===t&&(i.ratio.dispose(),i.signal.value=i.initial,this._syncedSignals.splice(e,1));}return this},s.default.Transport.prototype.dispose=function(){return s.default.Emitter.prototype.dispose.call(this),this._clock.dispose(),this._clock=null,this._writable("bpm"),this.bpm=null,this._timeline.dispose(),this._timeline=null,this._repeatedEvents.dispose(),this._repeatedEvents=null,this};var n=s.default.Transport;s.default.Transport=new n,s.default.Context.on("init",function(t){t.transport&&t.transport.isTransport?s.default.Transport=t.transport:s.default.Transport=new n;}),s.default.Context.on("close",function(t){t.transport&&t.transport.isTransport&&t.transport.dispose();}),e.default=s.default.Transport;},function(t,e,i){i.r(e);var s=i(0);i(2),i(6),i(16),i(64);s.default.Oscillator=function(){var t=s.default.defaults(arguments,["frequency","type"],s.default.Oscillator);s.default.Source.call(this,t),this._oscillator=null,this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this._wave=null,this._partials=t.partials,this._partialCount=t.partialCount,this._phase=t.phase,this._type=t.type,t.partialCount&&t.type!==s.default.Oscillator.Type.Custom&&(this._type=this.baseType+t.partialCount.toString()),this.phase=this._phase,this._readOnly(["frequency","detune"]);},s.default.extend(s.default.Oscillator,s.default.Source),s.default.Oscillator.defaults={type:"sine",frequency:440,detune:0,phase:0,partials:[],partialCount:0},s.default.Oscillator.Type={Sine:"sine",Triangle:"triangle",Sawtooth:"sawtooth",Square:"square",Custom:"custom"},s.default.Oscillator.prototype._start=function(t){this.log("start",t);var e=new s.default.OscillatorNode;this._oscillator=e,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),t=this.toSeconds(t),this._oscillator.start(t);},s.default.Oscillator.prototype._stop=function(t){return this.log("stop",t),this._oscillator&&(t=this.toSeconds(t),this._oscillator.stop(t)),this},s.default.Oscillator.prototype.restart=function(t){return this._oscillator&&this._oscillator.cancelStop(),this._state.cancel(this.toSeconds(t)),this},s.default.Oscillator.prototype.syncFrequency=function(){return s.default.Transport.syncSignal(this.frequency),this},s.default.Oscillator.prototype.unsyncFrequency=function(){return s.default.Transport.unsyncSignal(this.frequency),this},Object.defineProperty(s.default.Oscillator.prototype,"type",{get:function(){return this._type},set:function(t){var e=[s.default.Oscillator.Type.Sine,s.default.Oscillator.Type.Square,s.default.Oscillator.Type.Triangle,s.default.Oscillator.Type.Sawtooth].includes(t);if(0===this._phase&&e)this._wave=null,this._partialCount=0,null!==this._oscillator&&(this._oscillator.type=t);else {var i=this._getRealImaginary(t,this._phase),n=this.context.createPeriodicWave(i[0],i[1]);this._wave=n,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave);}this._type=t;}}),Object.defineProperty(s.default.Oscillator.prototype,"baseType",{get:function(){return this._type.replace(this.partialCount,"")},set:function(t){this.partialCount&&this._type!==s.default.Oscillator.Type.Custom&&t!==s.default.Oscillator.Type.Custom?this.type=t+this.partialCount:this.type=t;}}),Object.defineProperty(s.default.Oscillator.prototype,"partialCount",{get:function(){return this._partialCount},set:function(t){var e=this._type,i=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);i&&(e=i[1]),this._type!==s.default.Oscillator.Type.Custom&&(this.type=0===t?e:e+t.toString());}}),s.default.Oscillator.prototype.get=function(){var t=s.default.prototype.get.apply(this,arguments);return t.type!==s.default.Oscillator.Type.Custom&&delete t.partials,t},s.default.Oscillator.prototype._getRealImaginary=function(t,e){var i=2048,n=new Float32Array(i),o=new Float32Array(i),a=1;if(t===s.default.Oscillator.Type.Custom)a=this._partials.length+1,this._partialCount=this._partials.length,i=a;else {var r=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(t);r?(a=parseInt(r[2])+1,this._partialCount=parseInt(r[2]),t=r[1],i=a=Math.max(a,2)):this._partialCount=0,this._partials=[];}for(var l=1;l<i;++l){var u,d=2/(l*Math.PI);switch(t){case s.default.Oscillator.Type.Sine:u=l<=a?1:0,this._partials[l-1]=u;break;case s.default.Oscillator.Type.Square:u=1&l?2*d:0,this._partials[l-1]=u;break;case s.default.Oscillator.Type.Sawtooth:u=d*(1&l?1:-1),this._partials[l-1]=u;break;case s.default.Oscillator.Type.Triangle:u=1&l?d*d*2*(l-1>>1&1?-1:1):0,this._partials[l-1]=u;break;case s.default.Oscillator.Type.Custom:u=this._partials[l-1];break;default:throw new TypeError("Tone.Oscillator: invalid type: "+t)}0!==u?(n[l]=-u*Math.sin(e*l),o[l]=u*Math.cos(e*l)):(n[l]=0,o[l]=0);}return [n,o]},s.default.Oscillator.prototype._inverseFFT=function(t,e,i){for(var s=0,n=t.length,o=0;o<n;o++)s+=t[o]*Math.cos(o*i)+e[o]*Math.sin(o*i);return s},s.default.Oscillator.prototype._getInitialValue=function(){for(var t=this._getRealImaginary(this._type,0),e=t[0],i=t[1],s=0,n=2*Math.PI,o=0;o<8;o++)s=Math.max(this._inverseFFT(e,i,o/8*n),s);return -this._inverseFFT(e,i,this._phase)/s},Object.defineProperty(s.default.Oscillator.prototype,"partials",{get:function(){return this._partials},set:function(t){this._partials=t,this.type=s.default.Oscillator.Type.Custom;}}),Object.defineProperty(s.default.Oscillator.prototype,"phase",{get:function(){return this._phase*(180/Math.PI)},set:function(t){this._phase=t*Math.PI/180,this.type=this._type;}}),s.default.Oscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),null!==this._oscillator&&(this._oscillator.dispose(),this._oscillator=null),this._wave=null,this._writable(["frequency","detune"]),this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this._partials=null,this},e.default=s.default.Oscillator;},function(t,e,i){i.r(e);var s=i(0);i(14),i(1);s.default.Delay=function(){var t=s.default.defaults(arguments,["delayTime","maxDelay"],s.default.Delay);s.default.AudioNode.call(this,t),this._maxDelay=Math.max(this.toSeconds(t.maxDelay),this.toSeconds(t.delayTime)),this._delayNode=this.input=this.output=this.context.createDelay(this._maxDelay),this.delayTime=new s.default.Param({param:this._delayNode.delayTime,units:s.default.Type.Time,value:t.delayTime}),this._readOnly("delayTime");},s.default.extend(s.default.Delay,s.default.AudioNode),s.default.Delay.defaults={maxDelay:1,delayTime:0},Object.defineProperty(s.default.Delay.prototype,"maxDelay",{get:function(){return this._maxDelay}}),s.default.Delay.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._delayNode.disconnect(),this._delayNode=null,this._writable("delayTime"),this.delayTime=null,this},e.default=s.default.Delay;},function(t,e,i){i.r(e);var s=i(0);i(3),i(1);s.default.Split=function(t){t=s.default.defaultArg(t,2),s.default.AudioNode.call(this),this.createInsOuts(0,t),this._splitter=this.input=this.context.createChannelSplitter(t);for(var e=0;e<t;e++)this.output[e]=new s.default.Gain,s.default.connect(this._splitter,this.output[e],e,0),this.output[e].channelCount=1,this.output[e].channelCountMode="explicit";this.left=this.output[0],this.right=this.output[1];},s.default.extend(s.default.Split,s.default.AudioNode),s.default.Split.prototype.dispose=function(){return this.output.forEach(function(t){t.dispose();}),s.default.AudioNode.prototype.dispose.call(this),this._splitter.disconnect(),this.left=null,this.right=null,this._splitter=null,this},e.default=s.default.Split;},function(t,e,i){i.r(e);var s=i(0),n=(i(35),i(24),i(44),["baseLatency","destination","currentTime","sampleRate","listener","state"]),o=["suspend","close","resume","getOutputTimestamp","createMediaElementSource","createMediaStreamSource","createMediaStreamDestination","createBuffer","decodeAudioData","createBufferSource","createConstantSource","createGain","createDelay","createBiquadFilter","createIIRFilter","createWaveShaper","createPanner","createConvolver","createDynamicsCompressor","createAnalyser","createScriptProcessor","createStereoPanner","createOscillator","createPeriodicWave","createChannelSplitter","createChannelMerger","audioWorklet"];s.default.Context=function(){s.default.Emitter.call(this);var t=s.default.defaults(arguments,["context"],s.default.Context);if(!t.context&&(t.context=new s.default.global.AudioContext,!t.context))throw new Error("could not create AudioContext. Possibly too many AudioContexts running already.");for(this._context=t.context;this._context.rawContext;)this._context=this._context.rawContext;n.forEach(function(t){this._defineProperty(this._context,t);}.bind(this)),o.forEach(function(t){this._defineMethod(this._context,t);}.bind(this)),this._latencyHint=t.latencyHint,this._constants={},this.lookAhead=t.lookAhead,this._computedUpdateInterval=0,this._ticker=new a(this.emit.bind(this,"tick"),t.clockSource,t.updateInterval),this._timeouts=new s.default.Timeline,this._timeoutIds=0,this.on("tick",this._timeoutLoop.bind(this)),this._context.onstatechange=function(t){this.emit("statechange",t);}.bind(this);},s.default.extend(s.default.Context,s.default.Emitter),s.default.Emitter.mixin(s.default.Context),s.default.Context.defaults={clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.03},s.default.Context.prototype.isContext=!0,s.default.Context.prototype._defineProperty=function(t,e){s.default.isUndef(this[e])&&Object.defineProperty(this,e,{get:function(){return t[e]},set:function(i){t[e]=i;}});},s.default.Context.prototype._defineMethod=function(t,e){s.default.isUndef(this[e])&&Object.defineProperty(this,e,{get:function(){return t[e].bind(t)}});},s.default.Context.prototype.now=function(){return this._context.currentTime+this.lookAhead},Object.defineProperty(s.default.Context.prototype,"destination",{get:function(){return this.master?this.master:this._context.destination}}),s.default.Context.prototype.resume=function(){return "suspended"===this._context.state&&this._context instanceof AudioContext?this._context.resume():Promise.resolve()},s.default.Context.prototype.close=function(){var t=Promise.resolve();return this!==s.default.global.TONE_AUDIO_CONTEXT&&(t=this.rawContext.close()),t.then(function(){s.default.Context.emit("close",this);}.bind(this))},s.default.Context.prototype.getConstant=function(t){if(this._constants[t])return this._constants[t];for(var e=this._context.createBuffer(1,128,this._context.sampleRate),i=e.getChannelData(0),s=0;s<i.length;s++)i[s]=t;var n=this._context.createBufferSource();return n.channelCount=1,n.channelCountMode="explicit",n.buffer=e,n.loop=!0,n.start(0),this._constants[t]=n,n},s.default.Context.prototype._timeoutLoop=function(){for(var t=this.now();this._timeouts&&this._timeouts.length&&this._timeouts.peek().time<=t;)this._timeouts.shift().callback();},s.default.Context.prototype.setTimeout=function(t,e){this._timeoutIds++;var i=this.now();return this._timeouts.add({callback:t,time:i+e,id:this._timeoutIds}),this._timeoutIds},s.default.Context.prototype.clearTimeout=function(t){return this._timeouts.forEach(function(e){e.id===t&&this.remove(e);}),this},Object.defineProperty(s.default.Context.prototype,"updateInterval",{get:function(){return this._ticker.updateInterval},set:function(t){this._ticker.updateInterval=t;}}),Object.defineProperty(s.default.Context.prototype,"rawContext",{get:function(){return this._context}}),Object.defineProperty(s.default.Context.prototype,"clockSource",{get:function(){return this._ticker.type},set:function(t){this._ticker.type=t;}}),Object.defineProperty(s.default.Context.prototype,"latencyHint",{get:function(){return this._latencyHint},set:function(t){var e=t;if(this._latencyHint=t,s.default.isString(t))switch(t){case"interactive":e=.1,this._context.latencyHint=t;break;case"playback":e=.8,this._context.latencyHint=t;break;case"balanced":e=.25,this._context.latencyHint=t;break;case"fastest":this._context.latencyHint="interactive",e=.01;}this.lookAhead=e,this.updateInterval=e/3;}}),s.default.Context.prototype.dispose=function(){return this.close().then(function(){for(var t in s.default.Emitter.prototype.dispose.call(this),this._ticker.dispose(),this._ticker=null,this._timeouts.dispose(),this._timeouts=null,this._constants)this._constants[t].disconnect();this._constants=null;}.bind(this))};var a=function(t,e,i){this._type=e,this._updateInterval=i,this._callback=s.default.defaultArg(t,s.default.noOp),this._createClock();};if(a.Type={Worker:"worker",Timeout:"timeout",Offline:"offline"},a.prototype._createWorker=function(){s.default.global.URL=s.default.global.URL||s.default.global.webkitURL;var t=new Blob(["var timeoutTime = "+(1e3*this._updateInterval).toFixed(1)+";self.onmessage = function(msg){\ttimeoutTime = parseInt(msg.data);};function tick(){\tsetTimeout(tick, timeoutTime);\tself.postMessage('tick');}tick();"]),e=URL.createObjectURL(t),i=new Worker(e);i.onmessage=this._callback.bind(this),this._worker=i;},a.prototype._createTimeout=function(){this._timeout=setTimeout(function(){this._createTimeout(),this._callback();}.bind(this),1e3*this._updateInterval);},a.prototype._createClock=function(){if(this._type===a.Type.Worker)try{this._createWorker();}catch(t){this._type=a.Type.Timeout,this._createClock();}else this._type===a.Type.Timeout&&this._createTimeout();},Object.defineProperty(a.prototype,"updateInterval",{get:function(){return this._updateInterval},set:function(t){this._updateInterval=Math.max(t,128/44100),this._type===a.Type.Worker&&this._worker.postMessage(Math.max(1e3*t,1));}}),Object.defineProperty(a.prototype,"type",{get:function(){return this._type},set:function(t){this._disposeClock(),this._type=t,this._createClock();}}),a.prototype._disposeClock=function(){this._timeout&&(clearTimeout(this._timeout),this._timeout=null),this._worker&&(this._worker.terminate(),this._worker.onmessage=null,this._worker=null);},a.prototype.dispose=function(){this._disposeClock(),this._callback=null;},s.default.supported&&!s.default.initialized){if(s.default.global.TONE_AUDIO_CONTEXT||(s.default.global.TONE_AUDIO_CONTEXT=new s.default.Context),s.default.context=s.default.global.TONE_AUDIO_CONTEXT,!s.default.global.TONE_SILENCE_LOGGING){var r="v";"dev"===s.default.version&&(r="");var l=" * Tone.js "+r+s.default.version+" * ";console.log("%c"+l,"background: #000; color: #fff");}}else s.default.supported||s.default.global.TONE_SILENCE_LOGGING||console.warn("This browser does not support Tone.js");e.default=s.default.Context;},function(t,e,i){i.r(e);var s=i(0);i(4),i(40);s.default.Instrument=function(t){t=s.default.defaultArg(t,s.default.Instrument.defaults),s.default.AudioNode.call(this),this._volume=this.output=new s.default.Volume(t.volume),this.volume=this._volume.volume,this._readOnly("volume"),this._scheduledEvents=[];},s.default.extend(s.default.Instrument,s.default.AudioNode),s.default.Instrument.defaults={volume:0},s.default.Instrument.prototype.triggerAttack=s.default.noOp,s.default.Instrument.prototype.triggerRelease=s.default.noOp,s.default.Instrument.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0),this},s.default.Instrument.prototype._syncMethod=function(t,e){var i=this["_original_"+t]=this[t];this[t]=function(){var t=Array.prototype.slice.call(arguments),n=t[e],o=s.default.Transport.schedule(function(s){t[e]=s,i.apply(this,t);}.bind(this),n);this._scheduledEvents.push(o);}.bind(this);},s.default.Instrument.prototype.unsync=function(){return this._scheduledEvents.forEach(function(t){s.default.Transport.clear(t);}),this._scheduledEvents=[],this._original_triggerAttack&&(this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease),this},s.default.Instrument.prototype.triggerAttackRelease=function(t,e,i,s){return i=this.toSeconds(i),e=this.toSeconds(e),this.triggerAttack(t,i,s),this.triggerRelease(i+e),this},s.default.Instrument.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._volume.dispose(),this._volume=null,this._writable(["volume"]),this.volume=null,this.unsync(),this._scheduledEvents=null,this},e.default=s.default.Instrument;},function(t,e,i){i.r(e);var s=i(0);i(7),i(2);s.default.AudioToGain=function(){s.default.SignalBase.call(this),this._norm=this.input=this.output=new s.default.WaveShaper(function(t){return (t+1)/2});},s.default.extend(s.default.AudioToGain,s.default.SignalBase),s.default.AudioToGain.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._norm.dispose(),this._norm=null,this},e.default=s.default.AudioToGain;},function(t,e,i){i.r(e);var s=i(0);i(2),i(13),i(89),i(3),i(1);s.default.CrossFade=function(t){s.default.AudioNode.call(this),this.createInsOuts(2,1),this.a=this.input[0]=new s.default.Gain,this.b=this.input[1]=new s.default.Gain,this.fade=new s.default.Signal(s.default.defaultArg(t,.5),s.default.Type.NormalRange),this._equalPowerA=new s.default.EqualPowerGain,this._equalPowerB=new s.default.EqualPowerGain,this._one=this.context.getConstant(1),this._invert=new s.default.Subtract,this.a.connect(this.output),this.b.connect(this.output),this.fade.chain(this._equalPowerB,this.b.gain),s.default.connect(this._one,this._invert,0,0),this.fade.connect(this._invert,0,1),this._invert.chain(this._equalPowerA,this.a.gain),this._readOnly("fade");},s.default.extend(s.default.CrossFade,s.default.AudioNode),s.default.CrossFade.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable("fade"),this._equalPowerA.dispose(),this._equalPowerA=null,this._equalPowerB.dispose(),this._equalPowerB=null,this.fade.dispose(),this.fade=null,this._invert.dispose(),this._invert=null,this._one=null,this.a.dispose(),this.a=null,this.b.dispose(),this.b=null,this},e.default=s.default.CrossFade;},function(t,e,i){i.r(e);var s=i(0);s.default.Timeline=function(){var t=s.default.defaults(arguments,["memory"],s.default.Timeline);s.default.call(this),this._timeline=[],this.memory=t.memory;},s.default.extend(s.default.Timeline),s.default.Timeline.defaults={memory:1/0},Object.defineProperty(s.default.Timeline.prototype,"length",{get:function(){return this._timeline.length}}),s.default.Timeline.prototype.add=function(t){if(s.default.isUndef(t.time))throw new Error("Tone.Timeline: events must have a time attribute");t.time=t.time.valueOf();var e=this._search(t.time);if(this._timeline.splice(e+1,0,t),this.length>this.memory){var i=this.length-this.memory;this._timeline.splice(0,i);}return this},s.default.Timeline.prototype.remove=function(t){var e=this._timeline.indexOf(t);return -1!==e&&this._timeline.splice(e,1),this},s.default.Timeline.prototype.get=function(t,e){e=s.default.defaultArg(e,"time");var i=this._search(t,e);return -1!==i?this._timeline[i]:null},s.default.Timeline.prototype.peek=function(){return this._timeline[0]},s.default.Timeline.prototype.shift=function(){return this._timeline.shift()},s.default.Timeline.prototype.getAfter=function(t,e){e=s.default.defaultArg(e,"time");var i=this._search(t,e);return i+1<this._timeline.length?this._timeline[i+1]:null},s.default.Timeline.prototype.getBefore=function(t,e){e=s.default.defaultArg(e,"time");var i=this._timeline.length;if(i>0&&this._timeline[i-1][e]<t)return this._timeline[i-1];var n=this._search(t,e);return n-1>=0?this._timeline[n-1]:null},s.default.Timeline.prototype.cancel=function(t){if(this._timeline.length>1){var e=this._search(t);if(e>=0)if(this._timeline[e].time===t){for(var i=e;i>=0&&this._timeline[i].time===t;i--)e=i;this._timeline=this._timeline.slice(0,e);}else this._timeline=this._timeline.slice(0,e+1);else this._timeline=[];}else 1===this._timeline.length&&this._timeline[0].time>=t&&(this._timeline=[]);return this},s.default.Timeline.prototype.cancelBefore=function(t){var e=this._search(t);return e>=0&&(this._timeline=this._timeline.slice(e+1)),this},s.default.Timeline.prototype.previousEvent=function(t){var e=this._timeline.indexOf(t);return e>0?this._timeline[e-1]:null},s.default.Timeline.prototype._search=function(t,e){if(0===this._timeline.length)return -1;e=s.default.defaultArg(e,"time");var i=0,n=this._timeline.length,o=n;if(n>0&&this._timeline[n-1][e]<=t)return n-1;for(;i<o;){var a=Math.floor(i+(o-i)/2),r=this._timeline[a],l=this._timeline[a+1];if(r[e]===t){for(var u=a;u<this._timeline.length;u++){this._timeline[u][e]===t&&(a=u);}return a}if(r[e]<t&&l[e]>t)return a;r[e]>t?o=a:i=a+1;}return -1},s.default.Timeline.prototype._iterate=function(t,e,i){e=s.default.defaultArg(e,0),i=s.default.defaultArg(i,this._timeline.length-1),this._timeline.slice(e,i+1).forEach(function(e){t.call(this,e);}.bind(this));},s.default.Timeline.prototype.forEach=function(t){return this._iterate(t),this},s.default.Timeline.prototype.forEachBefore=function(t,e){var i=this._search(t);return -1!==i&&this._iterate(e,0,i),this},s.default.Timeline.prototype.forEachAfter=function(t,e){var i=this._search(t);return this._iterate(e,i+1),this},s.default.Timeline.prototype.forEachBetween=function(t,e,i){var s=this._search(t),n=this._search(e);return -1!==s&&-1!==n?(this._timeline[s].time!==t&&(s+=1),this._timeline[n].time===e&&(n-=1),this._iterate(i,s,n)):-1===s&&this._iterate(i,0,n),this},s.default.Timeline.prototype.forEachFrom=function(t,e){for(var i=this._search(t);i>=0&&this._timeline[i].time>=t;)i--;return this._iterate(e,i+1),this},s.default.Timeline.prototype.forEachAtTime=function(t,e){var i=this._search(t);return -1!==i&&this._iterate(function(i){i.time===t&&e.call(this,i);},0,i),this},s.default.Timeline.prototype.dispose=function(){return s.default.prototype.dispose.call(this),this._timeline=null,this},e.default=s.default.Timeline;},function(t,e,i){i.r(e);var s=i(0);i(21),i(2);s.default.Monophonic=function(t){t=s.default.defaultArg(t,s.default.Monophonic.defaults),s.default.Instrument.call(this,t),this.portamento=t.portamento;},s.default.extend(s.default.Monophonic,s.default.Instrument),s.default.Monophonic.defaults={portamento:0},s.default.Monophonic.prototype.triggerAttack=function(t,e,i){return this.log("triggerAttack",t,e,i),e=this.toSeconds(e),this._triggerEnvelopeAttack(e,i),this.setNote(t,e),this},s.default.Monophonic.prototype.triggerRelease=function(t){return this.log("triggerRelease",t),t=this.toSeconds(t),this._triggerEnvelopeRelease(t),this},s.default.Monophonic.prototype._triggerEnvelopeAttack=function(){},s.default.Monophonic.prototype._triggerEnvelopeRelease=function(){},s.default.Monophonic.prototype.getLevelAtTime=function(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)},s.default.Monophonic.prototype.setNote=function(t,e){if(e=this.toSeconds(e),this.portamento>0&&this.getLevelAtTime(e)>.05){var i=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(t,i,e);}else this.frequency.setValueAtTime(t,e);return this},e.default=s.default.Monophonic;},function(t,e,i){i.r(e);var s=i(0);i(29),i(5),i(2);s.default.Scale=function(t,e){s.default.SignalBase.call(this),this._outputMin=s.default.defaultArg(t,0),this._outputMax=s.default.defaultArg(e,1),this._scale=this.input=new s.default.Multiply(1),this._add=this.output=new s.default.Add(0),this._scale.connect(this._add),this._setRange();},s.default.extend(s.default.Scale,s.default.SignalBase),Object.defineProperty(s.default.Scale.prototype,"min",{get:function(){return this._outputMin},set:function(t){this._outputMin=t,this._setRange();}}),Object.defineProperty(s.default.Scale.prototype,"max",{get:function(){return this._outputMax},set:function(t){this._outputMax=t,this._setRange();}}),s.default.Scale.prototype._setRange=function(){this._add.value=this._outputMin,this._scale.value=this._outputMax-this._outputMin;},s.default.Scale.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._add.dispose(),this._add=null,this._scale.dispose(),this._scale=null,this},e.default=s.default.Scale;},function(t,e,i){i.r(e);var s=i(0);i(2),i(3),i(1);s.default.Volume=function(){var t=s.default.defaults(arguments,["volume"],s.default.Volume);s.default.AudioNode.call(this,t),this.output=this.input=new s.default.Gain(t.volume,s.default.Type.Decibels),this._unmutedVolume=t.volume,this.volume=this.output.gain,this._readOnly("volume"),this.mute=t.mute;},s.default.extend(s.default.Volume,s.default.AudioNode),s.default.Volume.defaults={volume:0,mute:!1},Object.defineProperty(s.default.Volume.prototype,"mute",{get:function(){return this.volume.value===-1/0},set:function(t){!this.mute&&t?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!t&&(this.volume.value=this._unmutedVolume);}}),s.default.Volume.prototype.dispose=function(){return this.input.dispose(),s.default.AudioNode.prototype.dispose.call(this),this._writable("volume"),this.volume.dispose(),this.volume=null,this},e.default=s.default.Volume;},function(t,e,i){i.r(e);var s=i(0);i(3),i(30);s.default.Zero=function(){s.default.SignalBase.call(this),this._gain=this.input=this.output=new s.default.Gain,s.default.connect(this.context.getConstant(0),this._gain);},s.default.extend(s.default.Zero,s.default.SignalBase),s.default.Zero.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._gain.dispose(),this._gain=null,this},e.default=s.default.Zero;},function(t,e,i){i.r(e);var s=i(0);i(2),i(3);s.default.Add=function(t){s.default.Signal.call(this),this.createInsOuts(2,0),this._sum=this.input[0]=this.input[1]=this.output=new s.default.Gain,this._param=this.input[1]=new s.default.Signal(t),this._param.connect(this._sum);},s.default.extend(s.default.Add,s.default.Signal),s.default.Add.prototype.dispose=function(){return s.default.Signal.prototype.dispose.call(this),this._sum.dispose(),this._sum=null,this},e.default=s.default.Add;},function(t,e,i){i.r(e);var s=i(0);i(1);s.default.SignalBase=function(){s.default.AudioNode.call(this);},s.default.extend(s.default.SignalBase,s.default.AudioNode),s.default.SignalBase.prototype.connect=function(t,e,i){return s.default.Signal&&s.default.Signal===t.constructor||s.default.Param&&s.default.Param===t.constructor?(t._param.cancelScheduledValues(0),t._param.setValueAtTime(0,0),t.overridden=!0):t instanceof AudioParam&&(t.cancelScheduledValues(0),t.setValueAtTime(0,0)),s.default.AudioNode.prototype.connect.call(this,t,e,i),this},e.default=s.default.SignalBase;},function(t,e,i){i.r(e);var s=i(0);i(47),i(3);s.default.AmplitudeEnvelope=function(){s.default.Envelope.apply(this,arguments),this.input=this.output=new s.default.Gain,this._sig.connect(this.output.gain);},s.default.extend(s.default.AmplitudeEnvelope,s.default.Envelope),s.default.AmplitudeEnvelope.prototype.dispose=function(){return s.default.Envelope.prototype.dispose.call(this),this},e.default=s.default.AmplitudeEnvelope;},function(t,e,i){i.r(e);var s=i(0);i(11),i(6),i(3),i(1);s.default.BufferSource=function(){var t=s.default.defaults(arguments,["buffer","onload"],s.default.BufferSource);s.default.AudioNode.call(this,t),this.onended=t.onended,this._startTime=-1,this._sourceStarted=!1,this._sourceStopped=!1,this._stopTime=-1,this._gainNode=this.output=new s.default.Gain(0),this._source=this.context.createBufferSource(),s.default.connect(this._source,this._gainNode),this._source.onended=this._onended.bind(this),this._buffer=new s.default.Buffer(t.buffer,t.onload),this.playbackRate=new s.default.Param({param:this._source.playbackRate,units:s.default.Type.Positive,value:t.playbackRate}),this.fadeIn=t.fadeIn,this.fadeOut=t.fadeOut,this.curve=t.curve,this._onendedTimeout=-1,this.loop=t.loop,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd;},s.default.extend(s.default.BufferSource,s.default.AudioNode),s.default.BufferSource.defaults={onended:s.default.noOp,onload:s.default.noOp,loop:!1,loopStart:0,loopEnd:0,fadeIn:0,fadeOut:0,curve:"linear",playbackRate:1},Object.defineProperty(s.default.BufferSource.prototype,"state",{get:function(){return this.getStateAtTime(this.now())}}),s.default.BufferSource.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),-1!==this._startTime&&this._startTime<=t&&(-1===this._stopTime||t<this._stopTime)&&!this._sourceStopped?s.default.State.Started:s.default.State.Stopped},s.default.BufferSource.prototype.start=function(t,e,i,n){this.log("start",t,e,i,n),this.assert(-1===this._startTime,"can only be started once"),this.assert(this.buffer.loaded,"buffer is either not set or not loaded"),this.assert(!this._sourceStopped,"source is already stopped"),t=this.toSeconds(t),e=this.loop?s.default.defaultArg(e,this.loopStart):s.default.defaultArg(e,0),e=this.toSeconds(e),e=Math.max(e,0),n=s.default.defaultArg(n,1);var o=this.toSeconds(this.fadeIn);if(o>0?(this._gainNode.gain.setValueAtTime(0,t),"linear"===this.curve?this._gainNode.gain.linearRampToValueAtTime(n,t+o):this._gainNode.gain.exponentialApproachValueAtTime(n,t,o)):this._gainNode.gain.setValueAtTime(n,t),this._startTime=t,s.default.isDefined(i)){var a=this.toSeconds(i);a=Math.max(a,0),this.stop(t+a);}if(this.loop){var r=this.loopEnd||this.buffer.duration,l=this.loopStart;e>=r&&(e=(e-l)%(r-l)+l);}return this._source.buffer=this.buffer.get(),this._source.loopEnd=this.loopEnd||this.buffer.duration,e<this.buffer.duration&&(this._sourceStarted=!0,this._source.start(t,e)),this},s.default.BufferSource.prototype.stop=function(t){this.log("stop",t),this.assert(this.buffer.loaded,"buffer is either not set or not loaded"),this.assert(!this._sourceStopped,"source is already stopped"),t=this.toSeconds(t),-1!==this._stopTime&&this.cancelStop();var e=this.toSeconds(this.fadeOut);return this._stopTime=t+e,e>0?"linear"===this.curve?this._gainNode.gain.linearRampTo(0,e,t):this._gainNode.gain.targetRampTo(0,e,t):(this._gainNode.gain.cancelAndHoldAtTime(t),this._gainNode.gain.setValueAtTime(0,t)),s.default.context.clearTimeout(this._onendedTimeout),this._onendedTimeout=s.default.context.setTimeout(this._onended.bind(this),this._stopTime-this.now()),this},s.default.BufferSource.prototype.cancelStop=function(){if(-1!==this._startTime&&!this._sourceStopped){var t=this.toSeconds(this.fadeIn);this._gainNode.gain.cancelScheduledValues(this._startTime+t+this.sampleTime),this.context.clearTimeout(this._onendedTimeout),this._stopTime=-1;}return this},s.default.BufferSource.prototype._onended=function(){if(!this._sourceStopped){this._sourceStopped=!0;var t="exponential"===this.curve?2*this.fadeOut:0;this._sourceStarted&&-1!==this._stopTime&&this._source.stop(this._stopTime+t),this.onended(this),setTimeout(function(){this._source&&(this._source.disconnect(),this._gainNode.disconnect());}.bind(this),1e3*t+100);}},Object.defineProperty(s.default.BufferSource.prototype,"loopStart",{get:function(){return this._source.loopStart},set:function(t){this._source.loopStart=this.toSeconds(t);}}),Object.defineProperty(s.default.BufferSource.prototype,"loopEnd",{get:function(){return this._source.loopEnd},set:function(t){this._source.loopEnd=this.toSeconds(t);}}),Object.defineProperty(s.default.BufferSource.prototype,"buffer",{get:function(){return this._buffer},set:function(t){this._buffer.set(t);}}),Object.defineProperty(s.default.BufferSource.prototype,"loop",{get:function(){return this._source.loop},set:function(t){this._source.loop=t,this.cancelStop();}}),s.default.BufferSource.prototype.dispose=function(){return this._wasDisposed||(this._wasDisposed=!0,s.default.AudioNode.prototype.dispose.call(this),this.onended=null,this._source.onended=null,this._source.disconnect(),this._source=null,this._gainNode.dispose(),this._gainNode=null,this._buffer.dispose(),this._buffer=null,this._startTime=-1,this.playbackRate=null,s.default.context.clearTimeout(this._onendedTimeout)),this},e.default=s.default.BufferSource;},function(t,e,i){i.r(e);var s=i(0);i(8),i(2),i(5),i(3);s.default.FeedbackEffect=function(){var t=s.default.defaults(arguments,["feedback"],s.default.FeedbackEffect);s.default.Effect.call(this,t),this._feedbackGain=new s.default.Gain(t.feedback,s.default.Type.NormalRange),this.feedback=this._feedbackGain.gain,this.effectReturn.chain(this._feedbackGain,this.effectSend),this._readOnly(["feedback"]);},s.default.extend(s.default.FeedbackEffect,s.default.Effect),s.default.FeedbackEffect.defaults={feedback:.125},s.default.FeedbackEffect.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._writable(["feedback"]),this._feedbackGain.dispose(),this._feedbackGain=null,this.feedback=null,this},e.default=s.default.FeedbackEffect;},function(t,e,i){i.r(e);var s=i(0);i(24),i(4);s.default.TimelineState=function(t){s.default.Timeline.call(this),this._initial=t;},s.default.extend(s.default.TimelineState,s.default.Timeline),s.default.TimelineState.prototype.getValueAtTime=function(t){var e=this.get(t);return null!==e?e.state:this._initial},s.default.TimelineState.prototype.setStateAtTime=function(t,e){return this.add({state:t,time:e}),this},s.default.TimelineState.prototype.getLastState=function(t,e){e=this.toSeconds(e);for(var i=this._search(e);i>=0;i--){var s=this._timeline[i];if(s.state===t)return s}},s.default.TimelineState.prototype.getNextState=function(t,e){e=this.toSeconds(e);var i=this._search(e);if(-1!==i)for(var s=i;s<this._timeline.length;s++){var n=this._timeline[s];if(n.state===t)return n}},e.default=s.default.TimelineState;},function(t,e,i){i.r(e);var s=i(0);s.default.Emitter=function(){s.default.call(this),this._events={};},s.default.extend(s.default.Emitter),s.default.Emitter.prototype.on=function(t,e){for(var i=t.split(/\W+/),s=0;s<i.length;s++){var n=i[s];this._events.hasOwnProperty(n)||(this._events[n]=[]),this._events[n].push(e);}return this},s.default.Emitter.prototype.once=function(t,e){var i=function(){e.apply(this,arguments),this.off(t,i);}.bind(this);return this.on(t,i),this},s.default.Emitter.prototype.off=function(t,e){for(var i=t.split(/\W+/),n=0;n<i.length;n++)if(t=i[n],this._events.hasOwnProperty(t))if(s.default.isUndef(e))this._events[t]=[];else for(var o=this._events[t],a=0;a<o.length;a++)o[a]===e&&o.splice(a,1);return this},s.default.Emitter.prototype.emit=function(t){if(this._events){var e=Array.apply(null,arguments).slice(1);if(this._events.hasOwnProperty(t))for(var i=this._events[t].slice(0),s=0,n=i.length;s<n;s++)i[s].apply(this,e);}return this},s.default.Emitter.mixin=function(t){var e=["on","once","off","emit"];t._events={};for(var i=0;i<e.length;i++){var n=e[i],o=s.default.Emitter.prototype[n];t[n]=o;}return s.default.Emitter},s.default.Emitter.prototype.dispose=function(){return s.default.prototype.dispose.call(this),this._events=null,this},e.default=s.default.Emitter;},function(t,e,i){i.r(e);var s=i(0);i(1),i(44);s.default.supported&&(AnalyserNode.prototype.getFloatTimeDomainData||(AnalyserNode.prototype.getFloatTimeDomainData=function(t){var e=new Uint8Array(t.length);this.getByteTimeDomainData(e);for(var i=0;i<e.length;i++)t[i]=(e[i]-128)/128;})),s.default.Analyser=function(){var t=s.default.defaults(arguments,["type","size"],s.default.Analyser);s.default.AudioNode.call(this),this._analyser=this.input=this.output=this.context.createAnalyser(),this._type=t.type,this._buffer=null,this.size=t.size,this.type=t.type;},s.default.extend(s.default.Analyser,s.default.AudioNode),s.default.Analyser.defaults={size:1024,type:"fft",smoothing:.8},s.default.Analyser.Type={Waveform:"waveform",FFT:"fft"},s.default.Analyser.prototype.getValue=function(){return this._type===s.default.Analyser.Type.FFT?this._analyser.getFloatFrequencyData(this._buffer):this._type===s.default.Analyser.Type.Waveform&&this._analyser.getFloatTimeDomainData(this._buffer),this._buffer},Object.defineProperty(s.default.Analyser.prototype,"size",{get:function(){return this._analyser.frequencyBinCount},set:function(t){this._analyser.fftSize=2*t,this._buffer=new Float32Array(t);}}),Object.defineProperty(s.default.Analyser.prototype,"type",{get:function(){return this._type},set:function(t){if(t!==s.default.Analyser.Type.Waveform&&t!==s.default.Analyser.Type.FFT)throw new TypeError("Tone.Analyser: invalid type: "+t);this._type=t;}}),Object.defineProperty(s.default.Analyser.prototype,"smoothing",{get:function(){return this._analyser.smoothingTimeConstant},set:function(t){this._analyser.smoothingTimeConstant=t;}}),s.default.Analyser.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._analyser.disconnect(),this._analyser=null,this._buffer=null;};e.default=s.default.Analyser;},function(t,e,i){i.r(e);var s=i(0);i(6),i(17),i(50),i(69),i(49),i(68),i(67);s.default.OmniOscillator=function(){var t=s.default.defaults(arguments,["frequency","type"],s.default.OmniOscillator);s.default.Source.call(this,t),this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this._sourceType=void 0,this._oscillator=null,this.type=t.type,this._readOnly(["frequency","detune"]),this.set(t);},s.default.extend(s.default.OmniOscillator,s.default.Source),s.default.OmniOscillator.defaults={frequency:440,detune:0,type:"sine",phase:0};var n="PulseOscillator",o="PWMOscillator",a="Oscillator",r="FMOscillator",l="AMOscillator",u="FatOscillator";s.default.OmniOscillator.prototype._start=function(t){this._oscillator.start(t);},s.default.OmniOscillator.prototype._stop=function(t){this._oscillator.stop(t);},s.default.OmniOscillator.prototype.restart=function(t){this._oscillator.restart(t);},Object.defineProperty(s.default.OmniOscillator.prototype,"type",{get:function(){var t="";return this._sourceType===r?t="fm":this._sourceType===l?t="am":this._sourceType===u&&(t="fat"),t+this._oscillator.type},set:function(t){"fm"===t.substr(0,2)?(this._createNewOscillator(r),this._oscillator.type=t.substr(2)):"am"===t.substr(0,2)?(this._createNewOscillator(l),this._oscillator.type=t.substr(2)):"fat"===t.substr(0,3)?(this._createNewOscillator(u),this._oscillator.type=t.substr(3)):"pwm"===t?this._createNewOscillator(o):"pulse"===t?this._createNewOscillator(n):(this._createNewOscillator(a),this._oscillator.type=t);}}),Object.defineProperty(s.default.OmniOscillator.prototype,"partials",{get:function(){return this._oscillator.partials},set:function(t){this._oscillator.partials=t;}}),Object.defineProperty(s.default.OmniOscillator.prototype,"partialCount",{get:function(){return this._oscillator.partialCount},set:function(t){this._oscillator.partialCount=t;}}),s.default.OmniOscillator.prototype.set=function(t,e){return "type"===t?this.type=e:s.default.isObject(t)&&t.hasOwnProperty("type")&&(this.type=t.type),s.default.prototype.set.apply(this,arguments),this},s.default.OmniOscillator.prototype.get=function(t){var e=this._oscillator.get(t);return e.type=this.type,e},s.default.OmniOscillator.prototype._createNewOscillator=function(t){if(t!==this._sourceType){this._sourceType=t;var e=s.default[t],i=this.now();if(null!==this._oscillator){var n=this._oscillator;n.stop(i),this.context.setTimeout(function(){n.dispose(),n=null;},this.blockTime);}this._oscillator=new e,this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this.state===s.default.State.Started&&this._oscillator.start(i);}},Object.defineProperty(s.default.OmniOscillator.prototype,"phase",{get:function(){return this._oscillator.phase},set:function(t){this._oscillator.phase=t;}});var d={PulseOscillator:"pulse",PWMOscillator:"pwm",Oscillator:"oscillator",FMOscillator:"fm",AMOscillator:"am",FatOscillator:"fat"};Object.defineProperty(s.default.OmniOscillator.prototype,"sourceType",{get:function(){return d[this._sourceType]},set:function(t){var e="sine";"pwm"!==this._oscillator.type&&"pulse"!==this._oscillator.type&&(e=this._oscillator.type),t===d.FMOscillator?this.type="fm"+e:t===d.AMOscillator?this.type="am"+e:t===d.FatOscillator?this.type="fat"+e:t===d.Oscillator?this.type=e:t===d.PulseOscillator?this.type="pulse":t===d.PWMOscillator&&(this.type="pwm");}}),Object.defineProperty(s.default.OmniOscillator.prototype,"baseType",{get:function(){return this._oscillator.baseType},set:function(t){this.sourceType!==d.PulseOscillator&&this.sourceType!==d.PWMOscillator&&(this._oscillator.baseType=t);}}),Object.defineProperty(s.default.OmniOscillator.prototype,"width",{get:function(){return this._sourceType===n?this._oscillator.width:void 0}}),Object.defineProperty(s.default.OmniOscillator.prototype,"count",{get:function(){return this._sourceType===u?this._oscillator.count:void 0},set:function(t){this._sourceType===u&&(this._oscillator.count=t);}}),Object.defineProperty(s.default.OmniOscillator.prototype,"spread",{get:function(){return this._sourceType===u?this._oscillator.spread:void 0},set:function(t){this._sourceType===u&&(this._oscillator.spread=t);}}),Object.defineProperty(s.default.OmniOscillator.prototype,"modulationType",{get:function(){return this._sourceType===r||this._sourceType===l?this._oscillator.modulationType:void 0},set:function(t){this._sourceType!==r&&this._sourceType!==l||(this._oscillator.modulationType=t);}}),Object.defineProperty(s.default.OmniOscillator.prototype,"modulationIndex",{get:function(){return this._sourceType===r?this._oscillator.modulationIndex:void 0}}),Object.defineProperty(s.default.OmniOscillator.prototype,"harmonicity",{get:function(){return this._sourceType===r||this._sourceType===l?this._oscillator.harmonicity:void 0}}),Object.defineProperty(s.default.OmniOscillator.prototype,"modulationFrequency",{get:function(){return this._sourceType===o?this._oscillator.modulationFrequency:void 0}}),s.default.OmniOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._writable(["frequency","detune"]),this.detune.dispose(),this.detune=null,this.frequency.dispose(),this.frequency=null,this._oscillator.dispose(),this._oscillator=null,this._sourceType=null,this},e.default=s.default.OmniOscillator;},function(t,e,i){i.r(e);var s=i(0);i(31),i(37),i(25);s.default.Synth=function(t){t=s.default.defaultArg(t,s.default.Synth.defaults),s.default.Monophonic.call(this,t),this.oscillator=new s.default.OmniOscillator(t.oscillator),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.envelope=new s.default.AmplitudeEnvelope(t.envelope),this.oscillator.chain(this.envelope,this.output),this._readOnly(["oscillator","frequency","detune","envelope"]);},s.default.extend(s.default.Synth,s.default.Monophonic),s.default.Synth.defaults={oscillator:{type:"triangle"},envelope:{attack:.005,decay:.1,sustain:.3,release:1}},s.default.Synth.prototype._triggerEnvelopeAttack=function(t,e){return this.envelope.triggerAttack(t,e),this.oscillator.start(t),0===this.envelope.sustain&&this.oscillator.stop(t+this.toSeconds(this.envelope.attack)+this.toSeconds(this.envelope.decay)),this},s.default.Synth.prototype._triggerEnvelopeRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.oscillator.stop(t+this.toSeconds(this.envelope.release)),this},s.default.Synth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["oscillator","frequency","detune","envelope"]),this.oscillator.dispose(),this.oscillator=null,this.envelope.dispose(),this.envelope=null,this.frequency=null,this.detune=null,this},e.default=s.default.Synth;},function(t,e,i){i.r(e);var s=i(0);i(6),i(11),i(32);s.default.Noise=function(){var t=s.default.defaults(arguments,["type"],s.default.Noise);s.default.Source.call(this,t),this._source=null,this._type=t.type,this._playbackRate=t.playbackRate;},s.default.extend(s.default.Noise,s.default.Source),s.default.Noise.defaults={type:"white",playbackRate:1},Object.defineProperty(s.default.Noise.prototype,"type",{get:function(){return this._type},set:function(t){if(this._type!==t){if(!(t in n))throw new TypeError("Tone.Noise: invalid type: "+t);if(this._type=t,this.state===s.default.State.Started){var e=this.now();this._stop(e),this._start(e);}}}}),Object.defineProperty(s.default.Noise.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._source&&(this._source.playbackRate.value=t);}}),s.default.Noise.prototype._start=function(t){var e=n[this._type];this._source=new s.default.BufferSource(e).connect(this.output),this._source.loop=!0,this._source.playbackRate.value=this._playbackRate,this._source.start(this.toSeconds(t),Math.random()*(e.duration-.001));},s.default.Noise.prototype._stop=function(t){this._source&&(this._source.stop(this.toSeconds(t)),this._source=null);},s.default.Noise.prototype.restart=function(t){return this._stop(t),this._start(t),this},s.default.Noise.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),null!==this._source&&(this._source.disconnect(),this._source=null),this._buffer=null,this};var n={},o={};Object.defineProperty(n,"pink",{get:function(){if(!o.pink){for(var t=[],e=0;e<2;e++){var i,n,a,r,l,u,d,f=new Float32Array(220500);t[e]=f,i=n=a=r=l=u=d=0;for(var h=0;h<220500;h++){var c=2*Math.random()-1;i=.99886*i+.0555179*c,n=.99332*n+.0750759*c,a=.969*a+.153852*c,r=.8665*r+.3104856*c,l=.55*l+.5329522*c,u=-.7616*u-.016898*c,f[h]=i+n+a+r+l+u+d+.5362*c,f[h]*=.11,d=.115926*c;}}o.pink=(new s.default.Buffer).fromArray(t);}return o.pink}}),Object.defineProperty(n,"brown",{get:function(){if(!o.brown){for(var t=[],e=0;e<2;e++){var i=new Float32Array(220500);t[e]=i;for(var n=0,a=0;a<220500;a++){var r=2*Math.random()-1;i[a]=(n+.02*r)/1.02,n=i[a],i[a]*=3.5;}}o.brown=(new s.default.Buffer).fromArray(t);}return o.brown}}),Object.defineProperty(n,"white",{get:function(){if(!o.white){for(var t=[],e=0;e<2;e++){var i=new Float32Array(220500);t[e]=i;for(var n=0;n<220500;n++)i[n]=2*Math.random()-1;}o.white=(new s.default.Buffer).fromArray(t);}return o.white}}),e.default=s.default.Noise;},function(t,e,i){i.r(e);var s=i(0);i(27),i(20),i(1);s.default.Master=function(){s.default.AudioNode.call(this),s.default.getContext(function(){this.createInsOuts(1,0),this._volume=this.output=new s.default.Volume,this.volume=this._volume.volume,this._readOnly("volume"),s.default.connectSeries(this.input,this.output,this.context.destination),this.context.master=this;}.bind(this));},s.default.extend(s.default.Master,s.default.AudioNode),s.default.Master.defaults={volume:0,mute:!1},s.default.Master.prototype.isMaster=!0,Object.defineProperty(s.default.Master.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t;}}),s.default.Master.prototype.chain=function(){this.input.disconnect();var t=Array.from(arguments);t.unshift(this.input),t.push(this.output),s.default.connectSeries.apply(void 0,t);},s.default.Master.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._writable("volume"),this._volume.dispose(),this._volume=null,this.volume=null;},s.default.AudioNode.prototype.toMaster=function(){return this.connect(this.context.master),this};var n=s.default.Master;s.default.Master=new n,s.default.Context.on("init",function(t){t.master&&t.master.isMaster?s.default.Master=t.master:s.default.Master=new n;}),s.default.Context.on("close",function(t){t.master&&t.master.isMaster&&t.master.dispose();}),e.default=s.default.Master;},function(t,e,i){i.r(e);var s=i(0);i(86),i(47);s.default.FrequencyEnvelope=function(){var t=s.default.defaults(arguments,["attack","decay","sustain","release"],s.default.Envelope);t=s.default.defaultArg(t,s.default.FrequencyEnvelope.defaults),s.default.ScaledEnvelope.call(this,t),this._octaves=t.octaves,this.baseFrequency=t.baseFrequency,this.octaves=t.octaves,this.exponent=t.exponent;},s.default.extend(s.default.FrequencyEnvelope,s.default.Envelope),s.default.FrequencyEnvelope.defaults={baseFrequency:200,octaves:4,exponent:1},Object.defineProperty(s.default.FrequencyEnvelope.prototype,"baseFrequency",{get:function(){return this._scale.min},set:function(t){this._scale.min=this.toFrequency(t),this.octaves=this._octaves;}}),Object.defineProperty(s.default.FrequencyEnvelope.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._scale.max=this.baseFrequency*Math.pow(2,t);}}),Object.defineProperty(s.default.FrequencyEnvelope.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t;}}),s.default.FrequencyEnvelope.prototype.dispose=function(){return s.default.ScaledEnvelope.prototype.dispose.call(this),this},e.default=s.default.FrequencyEnvelope;},function(t,e,i){i.r(e);var s=i(0);i(26),i(61);s.default.ScaleExp=function(t,e,i){s.default.SignalBase.call(this),this._scale=this.output=new s.default.Scale(t,e),this._exp=this.input=new s.default.Pow(s.default.defaultArg(i,2)),this._exp.connect(this._scale);},s.default.extend(s.default.ScaleExp,s.default.SignalBase),Object.defineProperty(s.default.ScaleExp.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t;}}),Object.defineProperty(s.default.ScaleExp.prototype,"min",{get:function(){return this._scale.min},set:function(t){this._scale.min=t;}}),Object.defineProperty(s.default.ScaleExp.prototype,"max",{get:function(){return this._scale.max},set:function(t){this._scale.max=t;}}),s.default.ScaleExp.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._exp.dispose(),this._exp=null,this},e.default=s.default.ScaleExp;},function(t,e,i){i.r(e);var s=i(0);i(14),i(1);s.default.Compressor=function(){var t=s.default.defaults(arguments,["threshold","ratio"],s.default.Compressor);s.default.AudioNode.call(this),this._compressor=this.input=this.output=this.context.createDynamicsCompressor(),this.threshold=new s.default.Param({param:this._compressor.threshold,units:s.default.Type.Decibels,convert:!1}),this.attack=new s.default.Param(this._compressor.attack,s.default.Type.Time),this.release=new s.default.Param(this._compressor.release,s.default.Type.Time),this.knee=new s.default.Param({param:this._compressor.knee,units:s.default.Type.Decibels,convert:!1}),this.ratio=new s.default.Param({param:this._compressor.ratio,convert:!1}),this._readOnly(["knee","release","attack","ratio","threshold"]),this.set(t);},s.default.extend(s.default.Compressor,s.default.AudioNode),s.default.Compressor.defaults={ratio:12,threshold:-24,release:.25,attack:.003,knee:30},s.default.Compressor.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["knee","release","attack","ratio","threshold"]),this._compressor.disconnect(),this._compressor=null,this.attack.dispose(),this.attack=null,this.release.dispose(),this.release=null,this.threshold.dispose(),this.threshold=null,this.ratio.dispose(),this.ratio=null,this.knee.dispose(),this.knee=null,this},e.default=s.default.Compressor;},function(t,e,i){var s=i(0);i(92);if(s.default.supported){!s.default.global.hasOwnProperty("AudioContext")&&s.default.global.hasOwnProperty("webkitAudioContext")&&(s.default.global.AudioContext=s.default.global.webkitAudioContext),AudioContext.prototype.close||(AudioContext.prototype.close=function(){return s.default.isFunction(this.suspend)&&this.suspend(),Promise.resolve()}),AudioContext.prototype.resume||(AudioContext.prototype.resume=function(){var t=this.createBuffer(1,1,this.sampleRate),e=this.createBufferSource();return e.buffer=t,e.connect(this.destination),e.start(0),Promise.resolve()}),!AudioContext.prototype.createGain&&AudioContext.prototype.createGainNode&&(AudioContext.prototype.createGain=AudioContext.prototype.createGainNode),!AudioContext.prototype.createDelay&&AudioContext.prototype.createDelayNode&&(AudioContext.prototype.createDelay=AudioContext.prototype.createDelayNode);var n=!1,o=new OfflineAudioContext(1,1,44100),a=new Uint32Array([1179011410,48,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,8,0,0,0,0]).buffer;try{var r=o.decodeAudioData(a);r&&s.default.isFunction(r.then)&&(n=!0);}catch(t){n=!1;}n||(AudioContext.prototype._native_decodeAudioData=AudioContext.prototype.decodeAudioData,AudioContext.prototype.decodeAudioData=function(t){return new Promise(function(e,i){this._native_decodeAudioData(t,e,i);}.bind(this))});}},function(t,e,i){i.r(e);var s=i(0);i(63);s.default.TransportTime=function(t,e){if(!(this instanceof s.default.TransportTime))return new s.default.TransportTime(t,e);s.default.Time.call(this,t,e);},s.default.extend(s.default.TransportTime,s.default.Time),s.default.TransportTime.prototype._now=function(){return s.default.Transport.seconds},e.default=s.default.TransportTime;},function(t,e,i){i.r(e);var s=i(0);i(62);s.default.Frequency=function(t,e){if(!(this instanceof s.default.Frequency))return new s.default.Frequency(t,e);s.default.TimeBase.call(this,t,e);},s.default.extend(s.default.Frequency,s.default.TimeBase),s.default.Frequency.prototype._expressions=Object.assign({},s.default.TimeBase.prototype._expressions,{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method:function(t){return "midi"===this._defaultUnits?t:s.default.Frequency.mtof(t)}},note:{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method:function(t,e){var i=n[t.toLowerCase()]+12*(parseInt(e)+1);return "midi"===this._defaultUnits?i:s.default.Frequency.mtof(i)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method:function(t,e,i){var s=1;return t&&"0"!==t&&(s*=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(s*=this._beatsToUnits(parseFloat(e))),i&&"0"!==i&&(s*=this._beatsToUnits(parseFloat(i)/4)),s}}}),s.default.Frequency.prototype.transpose=function(t){return new this.constructor(this.valueOf()*s.default.intervalToFrequencyRatio(t))},s.default.Frequency.prototype.harmonize=function(t){return t.map(function(t){return this.transpose(t)}.bind(this))},s.default.Frequency.prototype.toMidi=function(){return s.default.Frequency.ftom(this.valueOf())},s.default.Frequency.prototype.toNote=function(){var t=this.toFrequency(),e=Math.log2(t/s.default.Frequency.A4),i=Math.round(12*e)+57,n=Math.floor(i/12);return n<0&&(i+=-12*n),o[i%12]+n.toString()},s.default.Frequency.prototype.toSeconds=function(){return 1/s.default.TimeBase.prototype.toSeconds.call(this)},s.default.Frequency.prototype.toFrequency=function(){return s.default.TimeBase.prototype.toFrequency.call(this)},s.default.Frequency.prototype.toTicks=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.floor(e*s.default.Transport.PPQ)},s.default.Frequency.prototype._noArg=function(){return 0},s.default.Frequency.prototype._frequencyToUnits=function(t){return t},s.default.Frequency.prototype._ticksToUnits=function(t){return 1/(60*t/(s.default.Transport.bpm.value*s.default.Transport.PPQ))},s.default.Frequency.prototype._beatsToUnits=function(t){return 1/s.default.TimeBase.prototype._beatsToUnits.call(this,t)},s.default.Frequency.prototype._secondsToUnits=function(t){return 1/t},s.default.Frequency.prototype._defaultUnits="hz";var n={cbb:-2,cb:-1,c:0,"c#":1,cx:2,dbb:0,db:1,d:2,"d#":3,dx:4,ebb:2,eb:3,e:4,"e#":5,ex:6,fbb:3,fb:4,f:5,"f#":6,fx:7,gbb:5,gb:6,g:7,"g#":8,gx:9,abb:7,ab:8,a:9,"a#":10,ax:11,bbb:9,bb:10,b:11,"b#":12,bx:13},o=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];s.default.Frequency.A4=440,s.default.Frequency.mtof=function(t){return s.default.Frequency.A4*Math.pow(2,(t-69)/12)},s.default.Frequency.ftom=function(t){return 69+Math.round(12*Math.log2(t/s.default.Frequency.A4))},e.default=s.default.Frequency;},function(t,e,i){i.r(e);var s=i(0);i(2),i(61),i(4),i(1);s.default.Envelope=function(){var t=s.default.defaults(arguments,["attack","decay","sustain","release"],s.default.Envelope);s.default.AudioNode.call(this),this.attack=t.attack,this.decay=t.decay,this.sustain=t.sustain,this.release=t.release,this._attackCurve="linear",this._releaseCurve="exponential",this._sig=this.output=new s.default.Signal(0),this.attackCurve=t.attackCurve,this.releaseCurve=t.releaseCurve,this.decayCurve=t.decayCurve;},s.default.extend(s.default.Envelope,s.default.AudioNode),s.default.Envelope.defaults={attack:.01,decay:.1,sustain:.5,release:1,attackCurve:"linear",decayCurve:"exponential",releaseCurve:"exponential"},Object.defineProperty(s.default.Envelope.prototype,"value",{get:function(){return this.getValueAtTime(this.now())}}),s.default.Envelope.prototype._getCurve=function(t,e){if(s.default.isString(t))return t;if(s.default.isArray(t))for(var i in s.default.Envelope.Type)if(s.default.Envelope.Type[i][e]===t)return i},s.default.Envelope.prototype._setCurve=function(t,e,i){if(s.default.Envelope.Type.hasOwnProperty(i)){var n=s.default.Envelope.Type[i];s.default.isObject(n)?this[t]=n[e]:this[t]=n;}else {if(!s.default.isArray(i))throw new Error("Tone.Envelope: invalid curve: "+i);this[t]=i;}},Object.defineProperty(s.default.Envelope.prototype,"attackCurve",{get:function(){return this._getCurve(this._attackCurve,"In")},set:function(t){this._setCurve("_attackCurve","In",t);}}),Object.defineProperty(s.default.Envelope.prototype,"releaseCurve",{get:function(){return this._getCurve(this._releaseCurve,"Out")},set:function(t){this._setCurve("_releaseCurve","Out",t);}}),Object.defineProperty(s.default.Envelope.prototype,"decayCurve",{get:function(){return this._decayCurve},set:function(t){if(!["linear","exponential"].includes(t))throw new Error("Tone.Envelope: invalid curve: "+t);this._decayCurve=t;}}),s.default.Envelope.prototype.triggerAttack=function(t,e){this.log("triggerAttack",t,e),t=this.toSeconds(t);var i=this.toSeconds(this.attack),n=this.toSeconds(this.decay);e=s.default.defaultArg(e,1);var o=this.getValueAtTime(t);o>0&&(i=(1-o)/(1/i));if(0===i)this._sig.setValueAtTime(e,t);else if("linear"===this._attackCurve)this._sig.linearRampTo(e,i,t);else if("exponential"===this._attackCurve)this._sig.targetRampTo(e,i,t);else if(i>0){this._sig.cancelAndHoldAtTime(t);for(var a=this._attackCurve,r=1;r<a.length;r++)if(a[r-1]<=o&&o<=a[r]){(a=this._attackCurve.slice(r))[0]=o;break}this._sig.setValueCurveAtTime(a,t,i,e);}if(n){var l=e*this.sustain,u=t+i;this.log("decay",u),"linear"===this._decayCurve?this._sig.linearRampTo(l,n,u+this.sampleTime):"exponential"===this._decayCurve&&this._sig.exponentialApproachValueAtTime(l,u,n);}return this},s.default.Envelope.prototype.triggerRelease=function(t){this.log("triggerRelease",t),t=this.toSeconds(t);var e=this.getValueAtTime(t);if(e>0){var i=this.toSeconds(this.release);if("linear"===this._releaseCurve)this._sig.linearRampTo(0,i,t);else if("exponential"===this._releaseCurve)this._sig.targetRampTo(0,i,t);else {var n=this._releaseCurve;s.default.isArray(n)&&(this._sig.cancelAndHoldAtTime(t),this._sig.setValueCurveAtTime(n,t,i,e));}}return this},s.default.Envelope.prototype.getValueAtTime=function(t){return this._sig.getValueAtTime(t)},s.default.Envelope.prototype.triggerAttackRelease=function(t,e,i){return e=this.toSeconds(e),this.triggerAttack(e,i),this.triggerRelease(e+this.toSeconds(t)),this},s.default.Envelope.prototype.cancel=function(t){return this._sig.cancelScheduledValues(t),this},s.default.Envelope.prototype.connect=s.default.SignalBase.prototype.connect,function(){var t,e,i=[];for(t=0;t<128;t++)i[t]=Math.sin(t/127*(Math.PI/2));var n=[];for(t=0;t<127;t++){e=t/127;var o=Math.sin(e*(2*Math.PI)*6.4-Math.PI/2)+1;n[t]=o/10+.83*e;}n[127]=1;var a=[];for(t=0;t<128;t++)a[t]=Math.ceil(t/127*5)/5;var r=[];for(t=0;t<128;t++)e=t/127,r[t]=.5*(1-Math.cos(Math.PI*e));var l,u=[];for(t=0;t<128;t++){e=t/127;var d=4*Math.pow(e,3)+.2,f=Math.cos(d*Math.PI*2*e);u[t]=Math.abs(f*(1-e));}function h(t){for(var e=new Array(t.length),i=0;i<t.length;i++)e[i]=1-t[i];return e}s.default.Envelope.Type={linear:"linear",exponential:"exponential",bounce:{In:h(u),Out:u},cosine:{In:i,Out:(l=i,l.slice(0).reverse())},step:{In:a,Out:h(a)},ripple:{In:n,Out:h(n)},sine:{In:r,Out:h(r)}};}(),s.default.Envelope.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._sig.dispose(),this._sig=null,this._attackCurve=null,this._releaseCurve=null,this},e.default=s.default.Envelope;},function(t,e,i){i.r(e);var s=i(0);i(23),i(10),i(19),i(7),i(28),i(3),i(2),i(20);if(s.default.supported&&!s.default.global.AudioContext.prototype.createStereoPanner){var n=function(t){this.context=t,this.pan=new s.default.Signal(0,s.default.Type.AudioRange);var e=new s.default.WaveShaper(function(t){return s.default.equalPowerScale((t+1)/2)},4096),i=new s.default.WaveShaper(function(t){return s.default.equalPowerScale(1-(t+1)/2)},4096),n=new s.default.Gain,o=new s.default.Gain,a=this.input=new s.default.Split;a._splitter.channelCountMode="explicit",(new s.default.Zero).fan(e,i);var r=this.output=new s.default.Merge;a.left.chain(n,r.left),a.right.chain(o,r.right),this.pan.chain(i,n.gain),this.pan.chain(e,o.gain);};n.prototype.disconnect=function(){this.output.disconnect.apply(this.output,arguments);},n.prototype.connect=function(){this.output.connect.apply(this.output,arguments);},AudioContext.prototype.createStereoPanner=function(){return new n(this)},s.default.Context.prototype.createStereoPanner=function(){return new n(this)};}i(22),i(1);s.default.Panner=function(){var t=s.default.defaults(arguments,["pan"],s.default.Panner);s.default.AudioNode.call(this),this._panner=this.input=this.output=this.context.createStereoPanner(),this.pan=this._panner.pan,this.pan.value=t.pan,this._readOnly("pan");},s.default.extend(s.default.Panner,s.default.AudioNode),s.default.Panner.defaults={pan:0},s.default.Panner.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable("pan"),this._panner.disconnect(),this._panner=null,this.pan=null,this};e.default=s.default.Panner;},function(t,e,i){i.r(e);var s=i(0);i(6),i(17),i(5),i(3);s.default.FMOscillator=function(){var t=s.default.defaults(arguments,["frequency","type","modulationType"],s.default.FMOscillator);s.default.Source.call(this,t),this._carrier=new s.default.Oscillator(t.frequency,t.type),this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=this._carrier.detune,this.detune.value=t.detune,this.modulationIndex=new s.default.Multiply(t.modulationIndex),this.modulationIndex.units=s.default.Type.Positive,this._modulator=new s.default.Oscillator(t.frequency,t.modulationType),this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this._modulationNode=new s.default.Gain(0),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this.detune.connect(this._modulator.detune),this.phase=t.phase,this._readOnly(["modulationIndex","frequency","detune","harmonicity"]);},s.default.extend(s.default.FMOscillator,s.default.Source),s.default.FMOscillator.defaults={frequency:440,detune:0,phase:0,type:"sine",modulationIndex:2,modulationType:"square",harmonicity:1},s.default.FMOscillator.prototype._start=function(t){this._modulator.start(t),this._carrier.start(t);},s.default.FMOscillator.prototype._stop=function(t){this._modulator.stop(t),this._carrier.stop(t);},s.default.FMOscillator.prototype.restart=function(t){this._modulator.restart(t),this._carrier.restart(t);},Object.defineProperty(s.default.FMOscillator.prototype,"type",{get:function(){return this._carrier.type},set:function(t){this._carrier.type=t;}}),Object.defineProperty(s.default.FMOscillator.prototype,"baseType",{get:function(){return this._carrier.baseType},set:function(t){this._carrier.baseType=t;}}),Object.defineProperty(s.default.FMOscillator.prototype,"partialCount",{get:function(){return this._carrier.partialCount},set:function(t){this._carrier.partialCount=t;}}),Object.defineProperty(s.default.FMOscillator.prototype,"modulationType",{get:function(){return this._modulator.type},set:function(t){this._modulator.type=t;}}),Object.defineProperty(s.default.FMOscillator.prototype,"phase",{get:function(){return this._carrier.phase},set:function(t){this._carrier.phase=t,this._modulator.phase=t;}}),Object.defineProperty(s.default.FMOscillator.prototype,"partials",{get:function(){return this._carrier.partials},set:function(t){this._carrier.partials=t;}}),s.default.FMOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._writable(["modulationIndex","frequency","detune","harmonicity"]),this.frequency.dispose(),this.frequency=null,this.detune=null,this.harmonicity.dispose(),this.harmonicity=null,this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this._modulationNode.dispose(),this._modulationNode=null,this.modulationIndex.dispose(),this.modulationIndex=null,this},e.default=s.default.FMOscillator;},function(t,e,i){i.r(e);var s=i(0);i(6),i(17),i(2),i(7),i(3);s.default.PulseOscillator=function(){var t=s.default.defaults(arguments,["frequency","width"],s.default.Oscillator);s.default.Source.call(this,t),this.width=new s.default.Signal(t.width,s.default.Type.NormalRange),this._widthGate=new s.default.Gain(0),this._sawtooth=new s.default.Oscillator({frequency:t.frequency,detune:t.detune,type:"sawtooth",phase:t.phase}),this.frequency=this._sawtooth.frequency,this.detune=this._sawtooth.detune,this._thresh=new s.default.WaveShaper(function(t){return t<0?-1:1}),this._sawtooth.chain(this._thresh,this.output),this.width.chain(this._widthGate,this._thresh),this._readOnly(["width","frequency","detune"]);},s.default.extend(s.default.PulseOscillator,s.default.Source),s.default.PulseOscillator.defaults={frequency:440,detune:0,phase:0,width:.2},s.default.PulseOscillator.prototype._start=function(t){t=this.toSeconds(t),this._sawtooth.start(t),this._widthGate.gain.setValueAtTime(1,t);},s.default.PulseOscillator.prototype._stop=function(t){t=this.toSeconds(t),this._sawtooth.stop(t),this._widthGate.gain.setValueAtTime(0,t);},s.default.PulseOscillator.prototype.restart=function(t){this._sawtooth.restart(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(1,t);},Object.defineProperty(s.default.PulseOscillator.prototype,"phase",{get:function(){return this._sawtooth.phase},set:function(t){this._sawtooth.phase=t;}}),Object.defineProperty(s.default.PulseOscillator.prototype,"type",{get:function(){return "pulse"}}),Object.defineProperty(s.default.PulseOscillator.prototype,"baseType",{get:function(){return "pulse"}}),Object.defineProperty(s.default.PulseOscillator.prototype,"partials",{get:function(){return []}}),s.default.PulseOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._sawtooth.dispose(),this._sawtooth=null,this._writable(["width","frequency","detune"]),this.width.dispose(),this.width=null,this._widthGate.dispose(),this._widthGate=null,this._thresh.dispose(),this._thresh=null,this.frequency=null,this.detune=null,this},e.default=s.default.PulseOscillator;},function(t,e,i){i.r(e);var s=i(0);i(16),i(4),i(34);s.default.Event=function(){var t=s.default.defaults(arguments,["callback","value"],s.default.Event);s.default.call(this),this._loop=t.loop,this.callback=t.callback,this.value=t.value,this._loopStart=this.toTicks(t.loopStart),this._loopEnd=this.toTicks(t.loopEnd),this._state=new s.default.TimelineState(s.default.State.Stopped),this._playbackRate=1,this._startOffset=0,this._probability=t.probability,this._humanize=t.humanize,this.mute=t.mute,this.playbackRate=t.playbackRate;},s.default.extend(s.default.Event),s.default.Event.defaults={callback:s.default.noOp,loop:!1,loopEnd:"1m",loopStart:0,playbackRate:1,value:null,probability:1,mute:!1,humanize:!1},s.default.Event.prototype._rescheduleEvents=function(t){return t=s.default.defaultArg(t,-1),this._state.forEachFrom(t,function(t){var e;if(t.state===s.default.State.Started){s.default.isDefined(t.id)&&s.default.Transport.clear(t.id);var i=t.time+Math.round(this.startOffset/this._playbackRate);if(!0===this._loop||s.default.isNumber(this._loop)&&this._loop>1){e=1/0,s.default.isNumber(this._loop)&&(e=this._loop*this._getLoopDuration());var n=this._state.getAfter(i);null!==n&&(e=Math.min(e,n.time-i)),e!==1/0&&(this._state.setStateAtTime(s.default.State.Stopped,i+e+1),e=s.default.Ticks(e));var o=s.default.Ticks(this._getLoopDuration());t.id=s.default.Transport.scheduleRepeat(this._tick.bind(this),o,s.default.Ticks(i),e);}else t.id=s.default.Transport.schedule(this._tick.bind(this),s.default.Ticks(i));}}.bind(this)),this},Object.defineProperty(s.default.Event.prototype,"state",{get:function(){return this._state.getValueAtTime(s.default.Transport.ticks)}}),Object.defineProperty(s.default.Event.prototype,"startOffset",{get:function(){return this._startOffset},set:function(t){this._startOffset=t;}}),Object.defineProperty(s.default.Event.prototype,"probability",{get:function(){return this._probability},set:function(t){this._probability=t;}}),Object.defineProperty(s.default.Event.prototype,"humanize",{get:function(){return this._humanize},set:function(t){this._humanize=t;}}),s.default.Event.prototype.start=function(t){return t=this.toTicks(t),this._state.getValueAtTime(t)===s.default.State.Stopped&&(this._state.add({state:s.default.State.Started,time:t,id:void 0}),this._rescheduleEvents(t)),this},s.default.Event.prototype.stop=function(t){if(this.cancel(t),t=this.toTicks(t),this._state.getValueAtTime(t)===s.default.State.Started){this._state.setStateAtTime(s.default.State.Stopped,t);var e=this._state.getBefore(t),i=t;null!==e&&(i=e.time),this._rescheduleEvents(i);}return this},s.default.Event.prototype.cancel=function(t){return t=s.default.defaultArg(t,-1/0),t=this.toTicks(t),this._state.forEachFrom(t,function(t){s.default.Transport.clear(t.id);}),this._state.cancel(t),this},s.default.Event.prototype._tick=function(t){var e=s.default.Transport.getTicksAtTime(t);if(!this.mute&&this._state.getValueAtTime(e)===s.default.State.Started){if(this.probability<1&&Math.random()>this.probability)return;if(this.humanize){var i=.02;s.default.isBoolean(this.humanize)||(i=this.toSeconds(this.humanize)),t+=(2*Math.random()-1)*i;}this.callback(t,this.value);}},s.default.Event.prototype._getLoopDuration=function(){return Math.round((this._loopEnd-this._loopStart)/this._playbackRate)},Object.defineProperty(s.default.Event.prototype,"loop",{get:function(){return this._loop},set:function(t){this._loop=t,this._rescheduleEvents();}}),Object.defineProperty(s.default.Event.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._rescheduleEvents();}}),Object.defineProperty(s.default.Event.prototype,"loopEnd",{get:function(){return s.default.Ticks(this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t),this._loop&&this._rescheduleEvents();}}),Object.defineProperty(s.default.Event.prototype,"loopStart",{get:function(){return s.default.Ticks(this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t),this._loop&&this._rescheduleEvents();}}),Object.defineProperty(s.default.Event.prototype,"progress",{get:function(){if(this._loop){var t=s.default.Transport.ticks,e=this._state.get(t);if(null!==e&&e.state===s.default.State.Started){var i=this._getLoopDuration();return (t-e.time)%i/i}return 0}return 0}}),s.default.Event.prototype.dispose=function(){this.cancel(),this._state.dispose(),this._state=null,this.callback=null,this.value=null;},e.default=s.default.Event;},function(t,e,i){i.r(e);var s=i(0);i(2),i(13),i(29),i(10),i(3),i(1);s.default.MidSideMerge=function(){s.default.AudioNode.call(this),this.createInsOuts(2,0),this.mid=this.input[0]=new s.default.Gain,this._left=new s.default.Add,this._timesTwoLeft=new s.default.Multiply(Math.SQRT1_2),this.side=this.input[1]=new s.default.Gain,this._right=new s.default.Subtract,this._timesTwoRight=new s.default.Multiply(Math.SQRT1_2),this._merge=this.output=new s.default.Merge,this.mid.connect(this._left,0,0),this.side.connect(this._left,0,1),this.mid.connect(this._right,0,0),this.side.connect(this._right,0,1),this._left.connect(this._timesTwoLeft),this._right.connect(this._timesTwoRight),this._timesTwoLeft.connect(this._merge,0,0),this._timesTwoRight.connect(this._merge,0,1);},s.default.extend(s.default.MidSideMerge,s.default.AudioNode),s.default.MidSideMerge.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this.mid.dispose(),this.mid=null,this.side.dispose(),this.side=null,this._left.dispose(),this._left=null,this._timesTwoLeft.dispose(),this._timesTwoLeft=null,this._right.dispose(),this._right=null,this._timesTwoRight.dispose(),this._timesTwoRight=null,this._merge.dispose(),this._merge=null,this},e.default=s.default.MidSideMerge;},function(t,e,i){i.r(e);var s=i(0);i(29),i(13),i(2),i(19),i(1);s.default.MidSideSplit=function(){s.default.AudioNode.call(this),this.createInsOuts(0,2),this._split=this.input=new s.default.Split,this._midAdd=new s.default.Add,this.mid=this.output[0]=new s.default.Multiply(Math.SQRT1_2),this._sideSubtract=new s.default.Subtract,this.side=this.output[1]=new s.default.Multiply(Math.SQRT1_2),this._split.connect(this._midAdd,0,0),this._split.connect(this._midAdd,1,1),this._split.connect(this._sideSubtract,0,0),this._split.connect(this._sideSubtract,1,1),this._midAdd.connect(this.mid),this._sideSubtract.connect(this.side);},s.default.extend(s.default.MidSideSplit,s.default.AudioNode),s.default.MidSideSplit.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this.mid.dispose(),this.mid=null,this.side.dispose(),this.side=null,this._midAdd.dispose(),this._midAdd=null,this._sideSubtract.dispose(),this._sideSubtract=null,this._split.dispose(),this._split=null,this},e.default=s.default.MidSideSplit;},function(t,e,i){i.r(e);var s=i(0);i(2),i(9),i(1),i(59);s.default.LowpassCombFilter=function(){var t=s.default.defaults(arguments,["delayTime","resonance","dampening"],s.default.LowpassCombFilter);s.default.AudioNode.call(this),this._combFilter=this.output=new s.default.FeedbackCombFilter(t.delayTime,t.resonance),this.delayTime=this._combFilter.delayTime,this._lowpass=this.input=new s.default.Filter({frequency:t.dampening,type:"lowpass",Q:0,rolloff:-12}),this.dampening=this._lowpass.frequency,this.resonance=this._combFilter.resonance,this._lowpass.connect(this._combFilter),this._readOnly(["dampening","resonance","delayTime"]);},s.default.extend(s.default.LowpassCombFilter,s.default.AudioNode),s.default.LowpassCombFilter.defaults={delayTime:.1,resonance:.5,dampening:3e3},s.default.LowpassCombFilter.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["dampening","resonance","delayTime"]),this._combFilter.dispose(),this._combFilter=null,this.resonance=null,this.delayTime=null,this._lowpass.dispose(),this._lowpass=null,this.dampening=null,this},e.default=s.default.LowpassCombFilter;},function(t,e,i){i.r(e);var s=i(0);i(45);s.default.Ticks=function(t,e){if(!(this instanceof s.default.Ticks))return new s.default.Ticks(t,e);s.default.TransportTime.call(this,t,e);},s.default.extend(s.default.Ticks,s.default.TransportTime),s.default.Ticks.prototype._defaultUnits="i",s.default.Ticks.prototype._now=function(){return s.default.Transport.ticks},s.default.Ticks.prototype._beatsToUnits=function(t){return this._getPPQ()*t},s.default.Ticks.prototype._secondsToUnits=function(t){return Math.floor(t/(60/this._getBpm())*this._getPPQ())},s.default.Ticks.prototype._ticksToUnits=function(t){return t},s.default.Ticks.prototype.toTicks=function(){return this.valueOf()},s.default.Ticks.prototype.toSeconds=function(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())},e.default=s.default.Ticks;},function(t,e,i){i.r(e);var s=i(0);i(55);s.default.TransportEvent=function(t,e){e=s.default.defaultArg(e,s.default.TransportEvent.defaults),s.default.call(this),this.Transport=t,this.id=s.default.TransportEvent._eventId++,this.time=s.default.Ticks(e.time),this.callback=e.callback,this._once=e.once;},s.default.extend(s.default.TransportEvent),s.default.TransportEvent.defaults={once:!1,callback:s.default.noOp},s.default.TransportEvent._eventId=0,s.default.TransportEvent.prototype.invoke=function(t){this.callback&&(this.callback(t),this._once&&this.Transport&&this.Transport.clear(this.id));},s.default.TransportEvent.prototype.dispose=function(){return s.default.prototype.dispose.call(this),this.Transport=null,this.callback=null,this.time=null,this},e.default=s.default.TransportEvent;},function(t,e,i){i.r(e);var s=i(0);i(82),i(34),i(24),i(14);s.default.TickSource=function(){var t=s.default.defaults(arguments,["frequency"],s.default.TickSource);this.frequency=new s.default.TickSignal(t.frequency),this._readOnly("frequency"),this._state=new s.default.TimelineState(s.default.State.Stopped),this._state.setStateAtTime(s.default.State.Stopped,0),this._tickOffset=new s.default.Timeline,this.setTicksAtTime(0,0);},s.default.extend(s.default.TickSource),s.default.TickSource.defaults={frequency:1},Object.defineProperty(s.default.TickSource.prototype,"state",{get:function(){return this._state.getValueAtTime(this.now())}}),s.default.TickSource.prototype.start=function(t,e){return t=this.toSeconds(t),this._state.getValueAtTime(t)!==s.default.State.Started&&(this._state.setStateAtTime(s.default.State.Started,t),s.default.isDefined(e)&&this.setTicksAtTime(e,t)),this},s.default.TickSource.prototype.stop=function(t){if(t=this.toSeconds(t),this._state.getValueAtTime(t)===s.default.State.Stopped){var e=this._state.get(t);e.time>0&&(this._tickOffset.cancel(e.time),this._state.cancel(e.time));}return this._state.cancel(t),this._state.setStateAtTime(s.default.State.Stopped,t),this.setTicksAtTime(0,t),this},s.default.TickSource.prototype.pause=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)===s.default.State.Started&&this._state.setStateAtTime(s.default.State.Paused,t),this},s.default.TickSource.prototype.cancel=function(t){return t=this.toSeconds(t),this._state.cancel(t),this._tickOffset.cancel(t),this},s.default.TickSource.prototype.getTicksAtTime=function(t){t=this.toSeconds(t);var e=this._state.getLastState(s.default.State.Stopped,t),i={state:s.default.State.Paused,time:t};this._state.add(i);var n=e,o=0;return this._state.forEachBetween(e.time,t+this.sampleTime,function(t){var e=n.time,i=this._tickOffset.get(t.time);i.time>=n.time&&(o=i.ticks,e=i.time),n.state===s.default.State.Started&&t.state!==s.default.State.Started&&(o+=this.frequency.getTicksAtTime(t.time)-this.frequency.getTicksAtTime(e)),n=t;}.bind(this)),this._state.remove(i),o},Object.defineProperty(s.default.TickSource.prototype,"ticks",{get:function(){return this.getTicksAtTime(this.now())},set:function(t){this.setTicksAtTime(t,this.now());}}),Object.defineProperty(s.default.TickSource.prototype,"seconds",{get:function(){return this.getSecondsAtTime(this.now())},set:function(t){var e=this.now(),i=this.frequency.timeToTicks(t,e);this.setTicksAtTime(i,e);}}),s.default.TickSource.prototype.getSecondsAtTime=function(t){t=this.toSeconds(t);var e=this._state.getLastState(s.default.State.Stopped,t),i={state:s.default.State.Paused,time:t};this._state.add(i);var n=e,o=0;return this._state.forEachBetween(e.time,t+this.sampleTime,function(t){var e=n.time,i=this._tickOffset.get(t.time);i.time>=n.time&&(o=i.seconds,e=i.time),n.state===s.default.State.Started&&t.state!==s.default.State.Started&&(o+=t.time-e),n=t;}.bind(this)),this._state.remove(i),o},s.default.TickSource.prototype.setTicksAtTime=function(t,e){return e=this.toSeconds(e),this._tickOffset.cancel(e),this._tickOffset.add({time:e,ticks:t,seconds:this.frequency.getDurationOfTicks(t,e)}),this},s.default.TickSource.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)},s.default.TickSource.prototype.getTimeOfTick=function(t,e){e=s.default.defaultArg(e,this.now());var i=this._tickOffset.get(e),n=this._state.get(e),o=Math.max(i.time,n.time),a=this.frequency.getTicksAtTime(o)+t-i.ticks;return this.frequency.getTimeOfTick(a)},s.default.TickSource.prototype.forEachTickBetween=function(t,e,i){var n=this._state.get(t);if(this._state.forEachBetween(t,e,function(e){n.state===s.default.State.Started&&e.state!==s.default.State.Started&&this.forEachTickBetween(Math.max(n.time,t),e.time-this.sampleTime,i),n=e;}.bind(this)),t=Math.max(n.time,t),n.state===s.default.State.Started&&this._state){var o=this.frequency.getTicksAtTime(t),a=(o-this.frequency.getTicksAtTime(n.time))%1;0!==a&&(a=1-a);for(var r=this.frequency.getTimeOfTick(o+a),l=null;r<e&&this._state;){try{i(r,Math.round(this.getTicksAtTime(r)));}catch(t){l=t;break}this._state&&(r+=this.frequency.getDurationOfTicks(1,r));}}if(l)throw l;return this},s.default.TickSource.prototype.dispose=function(){return s.default.Param.prototype.dispose.call(this),this._state.dispose(),this._state=null,this._tickOffset.dispose(),this._tickOffset=null,this._writable("frequency"),this.frequency.dispose(),this.frequency=null,this},e.default=s.default.TickSource;},function(t,e,i){i.r(e);var s=i(0);i(87),i(13),i(2),i(4),i(18),i(1);s.default.Follower=function(){var t=s.default.defaults(arguments,["smoothing"],s.default.Follower);s.default.AudioNode.call(this),this.createInsOuts(1,1),this._abs=new s.default.Abs,this._filter=this.context.createBiquadFilter(),this._filter.type="lowpass",this._filter.frequency.value=0,this._filter.Q.value=0,this._sub=new s.default.Subtract,this._delay=new s.default.Delay(this.blockTime),this._smoothing=t.smoothing,s.default.connect(this.input,this._delay),s.default.connect(this.input,this._sub,0,1),this._sub.chain(this._abs,this._filter,this.output),this.smoothing=t.smoothing;},s.default.extend(s.default.Follower,s.default.AudioNode),s.default.Follower.defaults={smoothing:.05},Object.defineProperty(s.default.Follower.prototype,"smoothing",{get:function(){return this._smoothing},set:function(t){this._smoothing=t,this._filter.frequency.value=.5*s.default.Time(t).toFrequency();}}),s.default.Follower.prototype.connect=s.default.SignalBase.prototype.connect,s.default.Follower.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._filter.disconnect(),this._filter=null,this._delay.dispose(),this._delay=null,this._sub.disconnect(),this._sub=null,this._abs.dispose(),this._abs=null,this},e.default=s.default.Follower;},function(t,e,i){i.r(e);var s=i(0);i(42),i(2),i(14),i(18),i(3),i(1);s.default.FeedbackCombFilter=function(){var t=s.default.defaults(arguments,["delayTime","resonance"],s.default.FeedbackCombFilter);s.default.AudioNode.call(this),this._delay=this.input=this.output=new s.default.Delay(t.delayTime),this.delayTime=this._delay.delayTime,this._feedback=new s.default.Gain(t.resonance,s.default.Type.NormalRange),this.resonance=this._feedback.gain,this._delay.chain(this._feedback,this._delay),this._readOnly(["resonance","delayTime"]);},s.default.extend(s.default.FeedbackCombFilter,s.default.AudioNode),s.default.FeedbackCombFilter.defaults={delayTime:.1,resonance:.5},s.default.FeedbackCombFilter.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["resonance","delayTime"]),this._delay.dispose(),this._delay=null,this.delayTime=null,this._feedback.dispose(),this._feedback=null,this.resonance=null,this},e.default=s.default.FeedbackCombFilter;},function(t,e,i){i.r(e);var s=i(0);i(9),i(2),i(3),i(1);s.default.MultibandSplit=function(){var t=s.default.defaults(arguments,["lowFrequency","highFrequency"],s.default.MultibandSplit);s.default.AudioNode.call(this),this.input=new s.default.Gain,this.output=new Array(3),this.low=this.output[0]=new s.default.Filter(0,"lowpass"),this._lowMidFilter=new s.default.Filter(0,"highpass"),this.mid=this.output[1]=new s.default.Filter(0,"lowpass"),this.high=this.output[2]=new s.default.Filter(0,"highpass"),this.lowFrequency=new s.default.Signal(t.lowFrequency,s.default.Type.Frequency),this.highFrequency=new s.default.Signal(t.highFrequency,s.default.Type.Frequency),this.Q=new s.default.Signal(t.Q),this.input.fan(this.low,this.high),this.input.chain(this._lowMidFilter,this.mid),this.lowFrequency.connect(this.low.frequency),this.lowFrequency.connect(this._lowMidFilter.frequency),this.highFrequency.connect(this.mid.frequency),this.highFrequency.connect(this.high.frequency),this.Q.connect(this.low.Q),this.Q.connect(this._lowMidFilter.Q),this.Q.connect(this.mid.Q),this.Q.connect(this.high.Q),this._readOnly(["high","mid","low","highFrequency","lowFrequency"]);},s.default.extend(s.default.MultibandSplit,s.default.AudioNode),s.default.MultibandSplit.defaults={lowFrequency:400,highFrequency:2500,Q:1},s.default.MultibandSplit.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this.low=null,this._lowMidFilter.dispose(),this._lowMidFilter=null,this.mid.dispose(),this.mid=null,this.high.dispose(),this.high=null,this.lowFrequency.dispose(),this.lowFrequency=null,this.highFrequency.dispose(),this.highFrequency=null,this.Q.dispose(),this.Q=null,this},e.default=s.default.MultibandSplit;},function(t,e,i){i.r(e);var s=i(0);i(7);s.default.Pow=function(t){s.default.SignalBase.call(this),this._exp=s.default.defaultArg(t,1),this._expScaler=this.input=this.output=new s.default.WaveShaper(this._expFunc(this._exp),8192);},s.default.extend(s.default.Pow,s.default.SignalBase),Object.defineProperty(s.default.Pow.prototype,"value",{get:function(){return this._exp},set:function(t){this._exp=t,this._expScaler.setMap(this._expFunc(this._exp));}}),s.default.Pow.prototype._expFunc=function(t){return function(e){return Math.pow(Math.abs(e),t)}},s.default.Pow.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._expScaler.dispose(),this._expScaler=null,this},e.default=s.default.Pow;},function(t,e,i){i.r(e);var s=i(0);s.default.TimeBase=function(t,e){if(!(this instanceof s.default.TimeBase))return new s.default.TimeBase(t,e);if(this._val=t,this._units=e,s.default.isUndef(this._units)&&s.default.isString(this._val)&&parseFloat(this._val)==this._val&&"+"!==this._val.charAt(0))this._val=parseFloat(this._val),this._units=this._defaultUnits;else if(t&&t.constructor===this.constructor)this._val=t._val,this._units=t._units;else if(t instanceof s.default.TimeBase)switch(this._defaultUnits){case"s":this._val=t.toSeconds();break;case"i":this._val=t.toTicks();break;case"hz":this._val=t.toFrequency();break;case"midi":this._val=t.toMidi();break;default:throw new Error("Unrecognized default units "+this._defaultUnits)}},s.default.extend(s.default.TimeBase),s.default.TimeBase.prototype._expressions={n:{regexp:/^(\d+)n(\.?)$/i,method:function(t,e){t=parseInt(t);var i="."===e?1.5:1;return 1===t?this._beatsToUnits(this._getTimeSignature())*i:this._beatsToUnits(4/t)*i}},t:{regexp:/^(\d+)t$/i,method:function(t){return t=parseInt(t),this._beatsToUnits(8/(3*parseInt(t)))}},m:{regexp:/^(\d+)m$/i,method:function(t){return this._beatsToUnits(parseInt(t)*this._getTimeSignature())}},i:{regexp:/^(\d+)i$/i,method:function(t){return this._ticksToUnits(parseInt(t))}},hz:{regexp:/^(\d+(?:\.\d+)?)hz$/i,method:function(t){return this._frequencyToUnits(parseFloat(t))}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/,method:function(t,e,i){var s=0;return t&&"0"!==t&&(s+=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(s+=this._beatsToUnits(parseFloat(e))),i&&"0"!==i&&(s+=this._beatsToUnits(parseFloat(i)/4)),s}},s:{regexp:/^(\d+(?:\.\d+)?)s$/,method:function(t){return this._secondsToUnits(parseFloat(t))}},samples:{regexp:/^(\d+)samples$/,method:function(t){return parseInt(t)/this.context.sampleRate}},default:{regexp:/^(\d+(?:\.\d+)?)$/,method:function(t){return this._expressions[this._defaultUnits].method.call(this,t)}}},s.default.TimeBase.prototype._defaultUnits="s",s.default.TimeBase.prototype._getBpm=function(){return s.default.Transport?s.default.Transport.bpm.value:120},s.default.TimeBase.prototype._getTimeSignature=function(){return s.default.Transport?s.default.Transport.timeSignature:4},s.default.TimeBase.prototype._getPPQ=function(){return s.default.Transport?s.default.Transport.PPQ:192},s.default.TimeBase.prototype._now=function(){return this.now()},s.default.TimeBase.prototype._frequencyToUnits=function(t){return 1/t},s.default.TimeBase.prototype._beatsToUnits=function(t){return 60/this._getBpm()*t},s.default.TimeBase.prototype._secondsToUnits=function(t){return t},s.default.TimeBase.prototype._ticksToUnits=function(t){return t*(this._beatsToUnits(1)/this._getPPQ())},s.default.TimeBase.prototype._noArg=function(){return this._now()},s.default.TimeBase.prototype.valueOf=function(){if(s.default.isUndef(this._val))return this._noArg();if(s.default.isString(this._val)&&s.default.isUndef(this._units)){for(var t in this._expressions)if(this._expressions[t].regexp.test(this._val.trim())){this._units=t;break}}else if(s.default.isObject(this._val)){var e=0;for(var i in this._val){var n=this._val[i];e+=new this.constructor(i).valueOf()*n;}return e}if(s.default.isDefined(this._units)){var o=this._expressions[this._units],a=this._val.toString().trim().match(o.regexp);return a?o.method.apply(this,a.slice(1)):o.method.call(this,parseFloat(this._val))}return this._val},s.default.TimeBase.prototype.toSeconds=function(){return this.valueOf()},s.default.TimeBase.prototype.toFrequency=function(){return 1/this.toSeconds()},s.default.TimeBase.prototype.toSamples=function(){return this.toSeconds()*this.context.sampleRate},s.default.TimeBase.prototype.toMilliseconds=function(){return 1e3*this.toSeconds()},s.default.TimeBase.prototype.dispose=function(){this._val=null,this._units=null;},e.default=s.default.TimeBase;},function(t,e,i){i.r(e);var s=i(0);i(62),i(46);s.default.Time=function(t,e){if(!(this instanceof s.default.Time))return new s.default.Time(t,e);s.default.TimeBase.call(this,t,e);},s.default.extend(s.default.Time,s.default.TimeBase),s.default.Time.prototype._expressions=Object.assign({},s.default.TimeBase.prototype._expressions,{quantize:{regexp:/^@(.+)/,method:function(t){if(s.default.Transport){var e=new this.constructor(t);return this._secondsToUnits(s.default.Transport.nextSubdivision(e))}return 0}},now:{regexp:/^\+(.+)/,method:function(t){return this._now()+new this.constructor(t)}}}),s.default.Time.prototype.quantize=function(t,e){e=s.default.defaultArg(e,1);var i=new this.constructor(t),n=this.valueOf();return n+(Math.round(n/i)*i-n)*e},s.default.Time.prototype.toNotation=function(){for(var t=this.toSeconds(),e=["1m"],i=1;i<8;i++){var n=Math.pow(2,i);e.push(n+"n."),e.push(n+"n"),e.push(n+"t");}e.push("0");var o=e[0],a=s.default.Time(e[0]).toSeconds();return e.forEach(function(e){var i=s.default.Time(e).toSeconds();Math.abs(i-t)<Math.abs(a-t)&&(o=e,a=i);}),o},s.default.Time.prototype.toBarsBeatsSixteenths=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;e=parseFloat(e.toFixed(4));var i=Math.floor(e/this._getTimeSignature()),s=e%1*4;return e=Math.floor(e)%this._getTimeSignature(),(s=s.toString()).length>3&&(s=parseFloat(parseFloat(s).toFixed(3))),[i,e,s].join(":")},s.default.Time.prototype.toTicks=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.round(e*this._getPPQ())},s.default.Time.prototype.toSeconds=function(){return this.valueOf()},s.default.Time.prototype.toMidi=function(){return s.default.Frequency.ftom(this.toFrequency())},e.default=s.default.Time;},function(t,e,i){i.r(e);var s=i(0);i(11),i(6),i(3),i(1);s.default.supported&&(OscillatorNode.prototype.setPeriodicWave||(OscillatorNode.prototype.setPeriodicWave=OscillatorNode.prototype.setWaveTable),AudioContext.prototype.createPeriodicWave||(AudioContext.prototype.createPeriodicWave=AudioContext.prototype.createWaveTable)),s.default.OscillatorNode=function(){var t=s.default.defaults(arguments,["frequency","type"],s.default.OscillatorNode);s.default.AudioNode.call(this,t),this.onended=t.onended,this._startTime=-1,this._stopTime=-1,this._gainNode=this.output=new s.default.Gain(0),this._oscillator=this.context.createOscillator(),s.default.connect(this._oscillator,this._gainNode),this.type=t.type,this.frequency=new s.default.Param({param:this._oscillator.frequency,units:s.default.Type.Frequency,value:t.frequency}),this.detune=new s.default.Param({param:this._oscillator.detune,units:s.default.Type.Cents,value:t.detune}),this._gain=1;},s.default.extend(s.default.OscillatorNode,s.default.AudioNode),s.default.OscillatorNode.defaults={frequency:440,detune:0,type:"sine",onended:s.default.noOp},Object.defineProperty(s.default.OscillatorNode.prototype,"state",{get:function(){return this.getStateAtTime(this.now())}}),s.default.OscillatorNode.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),-1!==this._startTime&&t>=this._startTime&&(-1===this._stopTime||t<=this._stopTime)?s.default.State.Started:s.default.State.Stopped},s.default.OscillatorNode.prototype.start=function(t){if(this.log("start",t),-1!==this._startTime)throw new Error("cannot call OscillatorNode.start more than once");return this._startTime=this.toSeconds(t),this._startTime=Math.max(this._startTime,this.context.currentTime),this._oscillator.start(this._startTime),this._gainNode.gain.setValueAtTime(1,this._startTime),this},s.default.OscillatorNode.prototype.setPeriodicWave=function(t){return this._oscillator.setPeriodicWave(t),this},s.default.OscillatorNode.prototype.stop=function(t){return this.log("stop",t),this.assert(-1!==this._startTime,"'start' must be called before 'stop'"),this.cancelStop(),this._stopTime=this.toSeconds(t),this._stopTime=Math.max(this._stopTime,this.context.currentTime),this._stopTime>this._startTime?(this._gainNode.gain.setValueAtTime(0,this._stopTime),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout(function(){this._oscillator.stop(this.now()),this.onended(),setTimeout(function(){this._oscillator&&(this._oscillator.disconnect(),this._gainNode.disconnect());}.bind(this),100);}.bind(this),this._stopTime-this.context.currentTime)):this._gainNode.gain.cancelScheduledValues(this._startTime),this},s.default.OscillatorNode.prototype.cancelStop=function(){return -1!==this._startTime&&(this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this.context.clearTimeout(this._timeout),this._stopTime=-1),this},Object.defineProperty(s.default.OscillatorNode.prototype,"type",{get:function(){return this._oscillator.type},set:function(t){this._oscillator.type=t;}}),s.default.OscillatorNode.prototype.dispose=function(){return this._wasDisposed||(this._wasDisposed=!0,this.context.clearTimeout(this._timeout),s.default.AudioNode.prototype.dispose.call(this),this.onended=null,this._oscillator.disconnect(),this._oscillator=null,this._gainNode.dispose(),this._gainNode=null,this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null),this};e.default=s.default.OscillatorNode;},function(t,e,i){i.r(e);var s=i(0);i(11),i(6),i(57),i(32);s.default.Player=function(t){var e;t instanceof s.default.Buffer&&t.loaded?(t=t.get(),e=s.default.Player.defaults):e=s.default.defaults(arguments,["url","onload"],s.default.Player),s.default.Source.call(this,e),this.autostart=e.autostart,this._buffer=new s.default.Buffer({url:e.url,onload:this._onload.bind(this,e.onload),reverse:e.reverse}),t instanceof AudioBuffer&&this._buffer.set(t),this._loop=e.loop,this._loopStart=e.loopStart,this._loopEnd=e.loopEnd,this._playbackRate=e.playbackRate,this._activeSources=[],this.fadeIn=e.fadeIn,this.fadeOut=e.fadeOut;},s.default.extend(s.default.Player,s.default.Source),s.default.Player.defaults={onload:s.default.noOp,playbackRate:1,loop:!1,autostart:!1,loopStart:0,loopEnd:0,reverse:!1,fadeIn:0,fadeOut:0},s.default.Player.prototype.load=function(t,e){return this._buffer.load(t,this._onload.bind(this,e))},s.default.Player.prototype._onload=function(t){(t=s.default.defaultArg(t,s.default.noOp))(this),this.autostart&&this.start();},s.default.Player.prototype._onSourceEnd=function(t){var e=this._activeSources.indexOf(t);this._activeSources.splice(e,1),0!==this._activeSources.length||this._synced||this._state.setStateAtTime(s.default.State.Stopped,s.default.now());},s.default.Player.prototype._start=function(t,e,i){e=this._loop?s.default.defaultArg(e,this._loopStart):s.default.defaultArg(e,0),e=this.toSeconds(e),this._synced&&(e*=this._playbackRate);var n=s.default.defaultArg(i,Math.max(this._buffer.duration-e,0));n=this.toSeconds(n),n/=this._playbackRate,t=this.toSeconds(t);var o=new s.default.BufferSource({buffer:this._buffer,loop:this._loop,loopStart:this._loopStart,loopEnd:this._loopEnd,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate,fadeIn:this.fadeIn,fadeOut:this.fadeOut}).connect(this.output);return this._loop||this._synced||this._state.setStateAtTime(s.default.State.Stopped,t+n),this._activeSources.push(o),this._loop&&s.default.isUndef(i)?o.start(t,e):o.start(t,e,n-this.toSeconds(this.fadeOut)),this},s.default.Player.prototype._stop=function(t){return t=this.toSeconds(t),this._activeSources.forEach(function(e){e.stop(t);}),this},s.default.Player.prototype.restart=function(t,e,i){return this._stop(t),this._start(t,e,i),this},s.default.Player.prototype.seek=function(t,e){return e=this.toSeconds(e),this._state.getValueAtTime(e)===s.default.State.Started&&(t=this.toSeconds(t),this._stop(e),this._start(e,t)),this},s.default.Player.prototype.setLoopPoints=function(t,e){return this.loopStart=t,this.loopEnd=e,this},Object.defineProperty(s.default.Player.prototype,"loopStart",{get:function(){return this._loopStart},set:function(t){this._loopStart=t,this._activeSources.forEach(function(e){e.loopStart=t;});}}),Object.defineProperty(s.default.Player.prototype,"loopEnd",{get:function(){return this._loopEnd},set:function(t){this._loopEnd=t,this._activeSources.forEach(function(e){e.loopEnd=t;});}}),Object.defineProperty(s.default.Player.prototype,"buffer",{get:function(){return this._buffer},set:function(t){this._buffer.set(t);}}),Object.defineProperty(s.default.Player.prototype,"loop",{get:function(){return this._loop},set:function(t){if(this._loop!==t&&(this._loop=t,this._activeSources.forEach(function(e){e.loop=t;}),t)){var e=this._state.getNextState(s.default.State.Stopped,this.now());e&&this._state.cancel(e.time);}}}),Object.defineProperty(s.default.Player.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t;var e=this.now(),i=this._state.getNextState(s.default.State.Stopped,e);i&&this._state.cancel(i.time),this._activeSources.forEach(function(i){i.cancelStop(),i.playbackRate.setValueAtTime(t,e);});}}),Object.defineProperty(s.default.Player.prototype,"reverse",{get:function(){return this._buffer.reverse},set:function(t){this._buffer.reverse=t;}}),Object.defineProperty(s.default.Player.prototype,"loaded",{get:function(){return this._buffer.loaded}}),s.default.Player.prototype.dispose=function(){return this._activeSources.forEach(function(t){t.dispose();}),this._activeSources=null,s.default.Source.prototype.dispose.call(this),this._buffer.dispose(),this._buffer=null,this},e.default=s.default.Player;},function(t,e,i){i.r(e);var s=i(0);i(31),i(41),i(37),i(2),i(9),i(25);s.default.MonoSynth=function(t){t=s.default.defaultArg(t,s.default.MonoSynth.defaults),s.default.Monophonic.call(this,t),this.oscillator=new s.default.OmniOscillator(t.oscillator),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.filter=new s.default.Filter(t.filter),this.filter.frequency.value=5e3,this.filterEnvelope=new s.default.FrequencyEnvelope(t.filterEnvelope),this.envelope=new s.default.AmplitudeEnvelope(t.envelope),this.oscillator.chain(this.filter,this.envelope,this.output),this.filterEnvelope.connect(this.filter.frequency),this._readOnly(["oscillator","frequency","detune","filter","filterEnvelope","envelope"]);},s.default.extend(s.default.MonoSynth,s.default.Monophonic),s.default.MonoSynth.defaults={frequency:"C4",detune:0,oscillator:{type:"square"},filter:{Q:6,type:"lowpass",rolloff:-24},envelope:{attack:.005,decay:.1,sustain:.9,release:1},filterEnvelope:{attack:.06,decay:.2,sustain:.5,release:2,baseFrequency:200,octaves:7,exponent:2}},s.default.MonoSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this.envelope.triggerAttack(t,e),this.filterEnvelope.triggerAttack(t),this.oscillator.start(t),0===this.envelope.sustain&&this.oscillator.stop(t+this.envelope.attack+this.envelope.decay),this},s.default.MonoSynth.prototype._triggerEnvelopeRelease=function(t){return this.envelope.triggerRelease(t),this.filterEnvelope.triggerRelease(t),this.oscillator.stop(t+this.envelope.release),this},s.default.MonoSynth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["oscillator","frequency","detune","filter","filterEnvelope","envelope"]),this.oscillator.dispose(),this.oscillator=null,this.envelope.dispose(),this.envelope=null,this.filterEnvelope.dispose(),this.filterEnvelope=null,this.filter.dispose(),this.filter=null,this.frequency=null,this.detune=null,this},e.default=s.default.MonoSynth;},function(t,e,i){i.r(e);var s=i(0);i(6),i(17),i(5),i(3);s.default.FatOscillator=function(){var t=s.default.defaults(arguments,["frequency","type","spread"],s.default.FatOscillator);s.default.Source.call(this,t),this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this._oscillators=[],this._spread=t.spread,this._type=t.type,this._phase=t.phase,this._partials=t.partials,this._partialCount=t.partialCount,this.count=t.count,this._readOnly(["frequency","detune"]);},s.default.extend(s.default.FatOscillator,s.default.Source),s.default.FatOscillator.defaults={frequency:440,detune:0,phase:0,spread:20,count:3,type:"sawtooth",partials:[],partialCount:0},s.default.FatOscillator.prototype._start=function(t){t=this.toSeconds(t),this._forEach(function(e){e.start(t);});},s.default.FatOscillator.prototype._stop=function(t){t=this.toSeconds(t),this._forEach(function(e){e.stop(t);});},s.default.FatOscillator.prototype.restart=function(t){t=this.toSeconds(t),this._forEach(function(e){e.restart(t);});},s.default.FatOscillator.prototype._forEach=function(t){for(var e=0;e<this._oscillators.length;e++)t.call(this,this._oscillators[e],e);},Object.defineProperty(s.default.FatOscillator.prototype,"type",{get:function(){return this._type},set:function(t){this._type=t,this._forEach(function(e){e.type=t;});}}),Object.defineProperty(s.default.FatOscillator.prototype,"spread",{get:function(){return this._spread},set:function(t){if(this._spread=t,this._oscillators.length>1){var e=-t/2,i=t/(this._oscillators.length-1);this._forEach(function(t,s){t.detune.value=e+i*s;});}}}),Object.defineProperty(s.default.FatOscillator.prototype,"count",{get:function(){return this._oscillators.length},set:function(t){if(t=Math.max(t,1),this._oscillators.length!==t){this._forEach(function(t){t.dispose();}),this._oscillators=[];for(var e=0;e<t;e++){var i=new s.default.Oscillator;this.type===s.default.Oscillator.Type.Custom?i.partials=this._partials:i.type=this._type,i.partialCount=this._partialCount,i.phase=this._phase+e/t*360,i.volume.value=-6-1.1*t,this.frequency.connect(i.frequency),this.detune.connect(i.detune),i.connect(this.output),this._oscillators[e]=i;}this.spread=this._spread,this.state===s.default.State.Started&&this._forEach(function(t){t.start();});}}}),Object.defineProperty(s.default.FatOscillator.prototype,"phase",{get:function(){return this._phase},set:function(t){this._phase=t,this._forEach(function(e){e.phase=t;});}}),Object.defineProperty(s.default.FatOscillator.prototype,"baseType",{get:function(){return this._oscillators[0].baseType},set:function(t){this._forEach(function(e){e.baseType=t;}),this._type=this._oscillators[0].type;}}),Object.defineProperty(s.default.FatOscillator.prototype,"partials",{get:function(){return this._oscillators[0].partials},set:function(t){this._partials=t,this._type=s.default.Oscillator.Type.Custom,this._forEach(function(e){e.partials=t;});}}),Object.defineProperty(s.default.FatOscillator.prototype,"partialCount",{get:function(){return this._oscillators[0].partialCount},set:function(t){this._partialCount=t,this._forEach(function(e){e.partialCount=t;}),this._type=this._oscillators[0].type;}}),s.default.FatOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._writable(["frequency","detune"]),this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this._forEach(function(t){t.dispose();}),this._oscillators=null,this._partials=null,this},e.default=s.default.FatOscillator;},function(t,e,i){i.r(e);var s=i(0);i(6),i(17),i(5),i(3),i(22);s.default.AMOscillator=function(){var t=s.default.defaults(arguments,["frequency","type","modulationType"],s.default.AMOscillator);s.default.Source.call(this,t),this._carrier=new s.default.Oscillator(t.frequency,t.type),this.frequency=this._carrier.frequency,this.detune=this._carrier.detune,this.detune.value=t.detune,this._modulator=new s.default.Oscillator(t.frequency,t.modulationType),this._modulationScale=new s.default.AudioToGain,this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this._modulationNode=new s.default.Gain(0),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.connect(this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),this.phase=t.phase,this._readOnly(["frequency","detune","harmonicity"]);},s.default.extend(s.default.AMOscillator,s.default.Oscillator),s.default.AMOscillator.defaults={frequency:440,detune:0,phase:0,type:"sine",modulationType:"square",harmonicity:1},s.default.AMOscillator.prototype._start=function(t){this._modulator.start(t),this._carrier.start(t);},s.default.AMOscillator.prototype._stop=function(t){this._modulator.stop(t),this._carrier.stop(t);},s.default.AMOscillator.prototype.restart=function(t){this._modulator.restart(t),this._carrier.restart(t);},Object.defineProperty(s.default.AMOscillator.prototype,"type",{get:function(){return this._carrier.type},set:function(t){this._carrier.type=t;}}),Object.defineProperty(s.default.AMOscillator.prototype,"baseType",{get:function(){return this._carrier.baseType},set:function(t){this._carrier.baseType=t;}}),Object.defineProperty(s.default.AMOscillator.prototype,"partialCount",{get:function(){return this._carrier.partialCount},set:function(t){this._carrier.partialCount=t;}}),Object.defineProperty(s.default.AMOscillator.prototype,"modulationType",{get:function(){return this._modulator.type},set:function(t){this._modulator.type=t;}}),Object.defineProperty(s.default.AMOscillator.prototype,"phase",{get:function(){return this._carrier.phase},set:function(t){this._carrier.phase=t,this._modulator.phase=t;}}),Object.defineProperty(s.default.AMOscillator.prototype,"partials",{get:function(){return this._carrier.partials},set:function(t){this._carrier.partials=t;}}),s.default.AMOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._writable(["frequency","detune","harmonicity"]),this.frequency=null,this.detune=null,this.harmonicity.dispose(),this.harmonicity=null,this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this._modulationNode.dispose(),this._modulationNode=null,this._modulationScale.dispose(),this._modulationScale=null,this},e.default=s.default.AMOscillator;},function(t,e,i){i.r(e);var s=i(0);i(6),i(50),i(17),i(5);s.default.PWMOscillator=function(){var t=s.default.defaults(arguments,["frequency","modulationFrequency"],s.default.PWMOscillator);s.default.Source.call(this,t),this._pulse=new s.default.PulseOscillator(t.modulationFrequency),this._pulse._sawtooth.type="sine",this._modulator=new s.default.Oscillator({frequency:t.frequency,detune:t.detune,phase:t.phase}),this._scale=new s.default.Multiply(2),this.frequency=this._modulator.frequency,this.detune=this._modulator.detune,this.modulationFrequency=this._pulse.frequency,this._modulator.chain(this._scale,this._pulse.width),this._pulse.connect(this.output),this._readOnly(["modulationFrequency","frequency","detune"]);},s.default.extend(s.default.PWMOscillator,s.default.Source),s.default.PWMOscillator.defaults={frequency:440,detune:0,phase:0,modulationFrequency:.4},s.default.PWMOscillator.prototype._start=function(t){t=this.toSeconds(t),this._modulator.start(t),this._pulse.start(t);},s.default.PWMOscillator.prototype._stop=function(t){t=this.toSeconds(t),this._modulator.stop(t),this._pulse.stop(t);},s.default.PWMOscillator.prototype.restart=function(t){this._modulator.restart(t),this._pulse.restart(t);},Object.defineProperty(s.default.PWMOscillator.prototype,"type",{get:function(){return "pwm"}}),Object.defineProperty(s.default.PWMOscillator.prototype,"baseType",{get:function(){return "pwm"}}),Object.defineProperty(s.default.PWMOscillator.prototype,"partials",{get:function(){return []}}),Object.defineProperty(s.default.PWMOscillator.prototype,"phase",{get:function(){return this._modulator.phase},set:function(t){this._modulator.phase=t;}}),s.default.PWMOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._pulse.dispose(),this._pulse=null,this._scale.dispose(),this._scale=null,this._modulator.dispose(),this._modulator=null,this._writable(["modulationFrequency","frequency","detune"]),this.frequency=null,this.detune=null,this.modulationFrequency=null,this},e.default=s.default.PWMOscillator;},function(t,e,i){i.r(e);var s=i(0);i(51),i(4),i(16);s.default.Part=function(){var t=s.default.defaults(arguments,["callback","events"],s.default.Part);s.default.Event.call(this,t),this._events=[];for(var e=0;e<t.events.length;e++)Array.isArray(t.events[e])?this.add(t.events[e][0],t.events[e][1]):this.add(t.events[e]);},s.default.extend(s.default.Part,s.default.Event),s.default.Part.defaults={callback:s.default.noOp,loop:!1,loopEnd:"1m",loopStart:0,playbackRate:1,probability:1,humanize:!1,mute:!1,events:[]},s.default.Part.prototype.start=function(t,e){var i=this.toTicks(t);return this._state.getValueAtTime(i)!==s.default.State.Started&&(e=this._loop?s.default.defaultArg(e,this._loopStart):s.default.defaultArg(e,0),e=this.toTicks(e),this._state.add({state:s.default.State.Started,time:i,offset:e}),this._forEach(function(t){this._startNote(t,i,e);})),this},s.default.Part.prototype._startNote=function(t,e,i){e-=i,this._loop?t.startOffset>=this._loopStart&&t.startOffset<this._loopEnd?(t.startOffset<i&&(e+=this._getLoopDuration()),t.start(s.default.Ticks(e))):t.startOffset<this._loopStart&&t.startOffset>=i&&(t.loop=!1,t.start(s.default.Ticks(e))):t.startOffset>=i&&t.start(s.default.Ticks(e));},Object.defineProperty(s.default.Part.prototype,"startOffset",{get:function(){return this._startOffset},set:function(t){this._startOffset=t,this._forEach(function(t){t.startOffset+=this._startOffset;});}}),s.default.Part.prototype.stop=function(t){var e=this.toTicks(t);return this._state.cancel(e),this._state.setStateAtTime(s.default.State.Stopped,e),this._forEach(function(e){e.stop(t);}),this},s.default.Part.prototype.at=function(t,e){t=s.default.TransportTime(t);for(var i=s.default.Ticks(1).toSeconds(),n=0;n<this._events.length;n++){var o=this._events[n];if(Math.abs(t.toTicks()-o.startOffset)<i)return s.default.isDefined(e)&&(o.value=e),o}return s.default.isDefined(e)?(this.add(t,e),this._events[this._events.length-1]):null},s.default.Part.prototype.add=function(t,e){var i;return t.hasOwnProperty("time")&&(t=(e=t).time),t=this.toTicks(t),e instanceof s.default.Event?(i=e).callback=this._tick.bind(this):i=new s.default.Event({callback:this._tick.bind(this),value:e}),i.startOffset=t,i.set({loopEnd:this.loopEnd,loopStart:this.loopStart,loop:this.loop,humanize:this.humanize,playbackRate:this.playbackRate,probability:this.probability}),this._events.push(i),this._restartEvent(i),this},s.default.Part.prototype._restartEvent=function(t){this._state.forEach(function(e){e.state===s.default.State.Started?this._startNote(t,e.time,e.offset):t.stop(s.default.Ticks(e.time));}.bind(this));},s.default.Part.prototype.remove=function(t,e){t.hasOwnProperty("time")&&(t=(e=t).time),t=this.toTicks(t);for(var i=this._events.length-1;i>=0;i--){var n=this._events[i];n.startOffset===t&&(s.default.isUndef(e)||s.default.isDefined(e)&&n.value===e)&&(this._events.splice(i,1),n.dispose());}return this},s.default.Part.prototype.removeAll=function(){return this._forEach(function(t){t.dispose();}),this._events=[],this},s.default.Part.prototype.cancel=function(t){return this._forEach(function(e){e.cancel(t);}),this._state.cancel(this.toTicks(t)),this},s.default.Part.prototype._forEach=function(t,e){if(this._events){e=s.default.defaultArg(e,this);for(var i=this._events.length-1;i>=0;i--){var n=this._events[i];n instanceof s.default.Part?n._forEach(t,e):t.call(e,n);}}return this},s.default.Part.prototype._setAll=function(t,e){this._forEach(function(i){i[t]=e;});},s.default.Part.prototype._tick=function(t,e){this.mute||this.callback(t,e);},s.default.Part.prototype._testLoopBoundries=function(t){this._loop&&(t.startOffset<this._loopStart||t.startOffset>=this._loopEnd)?t.cancel(0):t.state===s.default.State.Stopped&&this._restartEvent(t);},Object.defineProperty(s.default.Part.prototype,"probability",{get:function(){return this._probability},set:function(t){this._probability=t,this._setAll("probability",t);}}),Object.defineProperty(s.default.Part.prototype,"humanize",{get:function(){return this._humanize},set:function(t){this._humanize=t,this._setAll("humanize",t);}}),Object.defineProperty(s.default.Part.prototype,"loop",{get:function(){return this._loop},set:function(t){this._loop=t,this._forEach(function(e){e._loopStart=this._loopStart,e._loopEnd=this._loopEnd,e.loop=t,this._testLoopBoundries(e);});}}),Object.defineProperty(s.default.Part.prototype,"loopEnd",{get:function(){return s.default.Ticks(this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t),this._loop&&this._forEach(function(e){e.loopEnd=t,this._testLoopBoundries(e);});}}),Object.defineProperty(s.default.Part.prototype,"loopStart",{get:function(){return s.default.Ticks(this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t),this._loop&&this._forEach(function(t){t.loopStart=this.loopStart,this._testLoopBoundries(t);});}}),Object.defineProperty(s.default.Part.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._setAll("playbackRate",t);}}),Object.defineProperty(s.default.Part.prototype,"length",{get:function(){return this._events.length}}),s.default.Part.prototype.dispose=function(){return s.default.Event.prototype.dispose.call(this),this.removeAll(),this.callback=null,this._events=null,this},e.default=s.default.Part;},function(t,e,i){i.r(e);var s=i(0);i(51);s.default.Loop=function(){var t=s.default.defaults(arguments,["callback","interval"],s.default.Loop);s.default.call(this),this._event=new s.default.Event({callback:this._tick.bind(this),loop:!0,loopEnd:t.interval,playbackRate:t.playbackRate,probability:t.probability}),this.callback=t.callback,this.iterations=t.iterations;},s.default.extend(s.default.Loop),s.default.Loop.defaults={interval:"4n",callback:s.default.noOp,playbackRate:1,iterations:1/0,probability:!0,mute:!1},s.default.Loop.prototype.start=function(t){return this._event.start(t),this},s.default.Loop.prototype.stop=function(t){return this._event.stop(t),this},s.default.Loop.prototype.cancel=function(t){return this._event.cancel(t),this},s.default.Loop.prototype._tick=function(t){this.callback(t);},Object.defineProperty(s.default.Loop.prototype,"state",{get:function(){return this._event.state}}),Object.defineProperty(s.default.Loop.prototype,"progress",{get:function(){return this._event.progress}}),Object.defineProperty(s.default.Loop.prototype,"interval",{get:function(){return this._event.loopEnd},set:function(t){this._event.loopEnd=t;}}),Object.defineProperty(s.default.Loop.prototype,"playbackRate",{get:function(){return this._event.playbackRate},set:function(t){this._event.playbackRate=t;}}),Object.defineProperty(s.default.Loop.prototype,"humanize",{get:function(){return this._event.humanize},set:function(t){this._event.humanize=t;}}),Object.defineProperty(s.default.Loop.prototype,"probability",{get:function(){return this._event.probability},set:function(t){this._event.probability=t;}}),Object.defineProperty(s.default.Loop.prototype,"mute",{get:function(){return this._event.mute},set:function(t){this._event.mute=t;}}),Object.defineProperty(s.default.Loop.prototype,"iterations",{get:function(){return !0===this._event.loop?1/0:this._event.loop},set:function(t){this._event.loop=t===1/0||t;}}),s.default.Loop.prototype.dispose=function(){this._event.dispose(),this._event=null,this.callback=null;},e.default=s.default.Loop;},function(t,e,i){i.r(e);var s=i(0);i(15),i(33);s.default.StereoXFeedbackEffect=function(){var t=s.default.defaults(arguments,["feedback"],s.default.FeedbackEffect);s.default.StereoEffect.call(this,t),this.feedback=new s.default.Signal(t.feedback,s.default.Type.NormalRange),this._feedbackLR=new s.default.Gain,this._feedbackRL=new s.default.Gain,this.effectReturnL.chain(this._feedbackLR,this.effectSendR),this.effectReturnR.chain(this._feedbackRL,this.effectSendL),this.feedback.fan(this._feedbackLR.gain,this._feedbackRL.gain),this._readOnly(["feedback"]);},s.default.extend(s.default.StereoXFeedbackEffect,s.default.StereoEffect),s.default.StereoXFeedbackEffect.prototype.dispose=function(){return s.default.StereoEffect.prototype.dispose.call(this),this._writable(["feedback"]),this.feedback.dispose(),this.feedback=null,this._feedbackLR.dispose(),this._feedbackLR=null,this._feedbackRL.dispose(),this._feedbackRL=null,this},e.default=s.default.StereoXFeedbackEffect;},function(t,e,i){i.r(e);var s=i(0);i(8),i(53),i(52);s.default.MidSideEffect=function(){s.default.Effect.apply(this,arguments),this._midSideSplit=new s.default.MidSideSplit,this._midSideMerge=new s.default.MidSideMerge,this.midSend=this._midSideSplit.mid,this.sideSend=this._midSideSplit.side,this.midReturn=this._midSideMerge.mid,this.sideReturn=this._midSideMerge.side,this.effectSend.connect(this._midSideSplit),this._midSideMerge.connect(this.effectReturn);},s.default.extend(s.default.MidSideEffect,s.default.Effect),s.default.MidSideEffect.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._midSideSplit.dispose(),this._midSideSplit=null,this._midSideMerge.dispose(),this._midSideMerge=null,this.midSend=null,this.sideSend=null,this.midReturn=null,this.sideReturn=null,this},e.default=s.default.MidSideEffect;},function(t,e,i){i.r(e);var s=i(0);i(11),i(8);s.default.Convolver=function(){var t=s.default.defaults(arguments,["url","onload"],s.default.Convolver);s.default.Effect.call(this,t),this._convolver=this.context.createConvolver(),this._buffer=new s.default.Buffer(t.url,function(e){this.buffer=e.get(),t.onload();}.bind(this)),this._buffer.loaded&&(this.buffer=this._buffer),this.normalize=t.normalize,this.connectEffect(this._convolver);},s.default.extend(s.default.Convolver,s.default.Effect),s.default.Convolver.defaults={onload:s.default.noOp,normalize:!0},Object.defineProperty(s.default.Convolver.prototype,"buffer",{get:function(){return this._buffer.length?this._buffer:null},set:function(t){this._buffer.set(t),this._convolver.buffer&&(this.effectSend.disconnect(),this._convolver.disconnect(),this._convolver=this.context.createConvolver(),this.connectEffect(this._convolver)),this._convolver.buffer=this._buffer.get();}}),Object.defineProperty(s.default.Convolver.prototype,"normalize",{get:function(){return this._convolver.normalize},set:function(t){this._convolver.normalize=t;}}),s.default.Convolver.prototype.load=function(t,e){return this._buffer.load(t,function(t){this.buffer=t,e&&e();}.bind(this))},s.default.Convolver.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._buffer.dispose(),this._buffer=null,this._convolver.disconnect(),this._convolver=null,this},e.default=s.default.Convolver;},function(t,e,i){i.r(e);var s=i(0);i(7),i(5),i(13);s.default.Modulo=function(t){s.default.SignalBase.call(this),this.createInsOuts(1,0),this._shaper=new s.default.WaveShaper(Math.pow(2,16)),this._multiply=new s.default.Multiply,this._subtract=this.output=new s.default.Subtract,this._modSignal=new s.default.Signal(t),s.default.connect(this.input,this._shaper),s.default.connect(this.input,this._subtract),this._modSignal.connect(this._multiply,0,0),this._shaper.connect(this._multiply,0,1),this._multiply.connect(this._subtract,0,1),this._setWaveShaper(t);},s.default.extend(s.default.Modulo,s.default.SignalBase),s.default.Modulo.prototype._setWaveShaper=function(t){this._shaper.setMap(function(e){return Math.floor((e+1e-4)/t)});},Object.defineProperty(s.default.Modulo.prototype,"value",{get:function(){return this._modSignal.value},set:function(t){this._modSignal.value=t,this._setWaveShaper(t);}}),s.default.Modulo.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this._multiply.dispose(),this._multiply=null,this._subtract.dispose(),this._subtract=null,this._modSignal.dispose(),this._modSignal=null,this},e.default=s.default.Modulo;},function(t,e,i){i.r(e);var s=i(0);i(20),i(92);s.default.OfflineContext=function(t,e,i){var n=new OfflineAudioContext(t,e*i,i);s.default.Context.call(this,{context:n,clockSource:"offline",lookAhead:0,updateInterval:128/i}),this._duration=e,this._currentTime=0;},s.default.extend(s.default.OfflineContext,s.default.Context),s.default.OfflineContext.prototype.now=function(){return this._currentTime},s.default.OfflineContext.prototype.resume=function(){return Promise.resolve()},s.default.OfflineContext.prototype.render=function(){for(;this._duration-this._currentTime>=0;)this.emit("tick"),this._currentTime+=.005;return this._context.startRendering()},s.default.OfflineContext.prototype.close=function(){return this._context=null,Promise.resolve()},e.default=s.default.OfflineContext;},function(t,e,i){i.r(e);var s=i(0);i(16),i(11),i(76),i(40);s.default.Offline=function(t,e){var i=s.default.context.sampleRate,n=s.default.context,o=new s.default.OfflineContext(2,e,i);s.default.context=o;var a=t(s.default.Transport),r=null;return r=a&&s.default.isFunction(a.then)?a.then(function(){return o.render()}):o.render(),s.default.context=n,r.then(function(t){return new s.default.Buffer(t)})},e.default=s.default.Offline;},function(t,e,i){i.r(e);var s=i(0);i(11);s.default.Buffers=function(t){var e=Array.prototype.slice.call(arguments);e.shift();var i=s.default.defaults(e,["onload","baseUrl"],s.default.Buffers);for(var n in s.default.call(this),this._buffers={},this.baseUrl=i.baseUrl,this._loadingCount=0,t)this._loadingCount++,this.add(n,t[n],this._bufferLoaded.bind(this,i.onload));},s.default.extend(s.default.Buffers),s.default.Buffers.defaults={onload:s.default.noOp,baseUrl:""},s.default.Buffers.prototype.has=function(t){return this._buffers.hasOwnProperty(t)},s.default.Buffers.prototype.get=function(t){if(this.has(t))return this._buffers[t];throw new Error("Tone.Buffers: no buffer named "+t)},s.default.Buffers.prototype._bufferLoaded=function(t){this._loadingCount--,0===this._loadingCount&&t&&t(this);},Object.defineProperty(s.default.Buffers.prototype,"loaded",{get:function(){var t=!0;for(var e in this._buffers){var i=this.get(e);t=t&&i.loaded;}return t}}),s.default.Buffers.prototype.add=function(t,e,i){return i=s.default.defaultArg(i,s.default.noOp),e instanceof s.default.Buffer?(this._buffers[t]=e,i(this)):e instanceof AudioBuffer?(this._buffers[t]=new s.default.Buffer(e),i(this)):s.default.isString(e)&&(this._buffers[t]=new s.default.Buffer(this.baseUrl+e,i)),this},s.default.Buffers.prototype.dispose=function(){for(var t in s.default.prototype.dispose.call(this),this._buffers)this._buffers[t].dispose();return this._buffers=null,this},e.default=s.default.Buffers;},function(t,e,i){i.r(e);var s=i(0);s.default.CtrlPattern=function(){var t=s.default.defaults(arguments,["values","type"],s.default.CtrlPattern);s.default.call(this),this.values=t.values,this.index=0,this._type=null,this._shuffled=null,this._direction=null,this.type=t.type;},s.default.extend(s.default.CtrlPattern),s.default.CtrlPattern.Type={Up:"up",Down:"down",UpDown:"upDown",DownUp:"downUp",AlternateUp:"alternateUp",AlternateDown:"alternateDown",Random:"random",RandomWalk:"randomWalk",RandomOnce:"randomOnce"},s.default.CtrlPattern.defaults={type:s.default.CtrlPattern.Type.Up,values:[]},Object.defineProperty(s.default.CtrlPattern.prototype,"value",{get:function(){if(0!==this.values.length){if(1===this.values.length)return this.values[0];this.index=Math.min(this.index,this.values.length-1);var t=this.values[this.index];return this.type===s.default.CtrlPattern.Type.RandomOnce&&(this.values.length!==this._shuffled.length&&this._shuffleValues(),t=this.values[this._shuffled[this.index]]),t}}}),Object.defineProperty(s.default.CtrlPattern.prototype,"type",{get:function(){return this._type},set:function(t){this._type=t,this._shuffled=null,this._type===s.default.CtrlPattern.Type.Up||this._type===s.default.CtrlPattern.Type.UpDown||this._type===s.default.CtrlPattern.Type.RandomOnce||this._type===s.default.CtrlPattern.Type.AlternateUp?this.index=0:this._type!==s.default.CtrlPattern.Type.Down&&this._type!==s.default.CtrlPattern.Type.DownUp&&this._type!==s.default.CtrlPattern.Type.AlternateDown||(this.index=this.values.length-1),this._type===s.default.CtrlPattern.Type.UpDown||this._type===s.default.CtrlPattern.Type.AlternateUp?this._direction=s.default.CtrlPattern.Type.Up:this._type!==s.default.CtrlPattern.Type.DownUp&&this._type!==s.default.CtrlPattern.Type.AlternateDown||(this._direction=s.default.CtrlPattern.Type.Down),this._type===s.default.CtrlPattern.Type.RandomOnce?this._shuffleValues():this._type===s.default.CtrlPattern.Type.Random&&(this.index=Math.floor(Math.random()*this.values.length));}}),s.default.CtrlPattern.prototype.next=function(){var t=this.type;return t===s.default.CtrlPattern.Type.Up?(this.index++,this.index>=this.values.length&&(this.index=0)):t===s.default.CtrlPattern.Type.Down?(this.index--,this.index<0&&(this.index=this.values.length-1)):t===s.default.CtrlPattern.Type.UpDown||t===s.default.CtrlPattern.Type.DownUp?(this._direction===s.default.CtrlPattern.Type.Up?this.index++:this.index--,this.index<0?(this.index=1,this._direction=s.default.CtrlPattern.Type.Up):this.index>=this.values.length&&(this.index=this.values.length-2,this._direction=s.default.CtrlPattern.Type.Down)):t===s.default.CtrlPattern.Type.Random?this.index=Math.floor(Math.random()*this.values.length):t===s.default.CtrlPattern.Type.RandomWalk?Math.random()<.5?(this.index--,this.index=Math.max(this.index,0)):(this.index++,this.index=Math.min(this.index,this.values.length-1)):t===s.default.CtrlPattern.Type.RandomOnce?(this.index++,this.index>=this.values.length&&(this.index=0,this._shuffleValues())):t===s.default.CtrlPattern.Type.AlternateUp?(this._direction===s.default.CtrlPattern.Type.Up?(this.index+=2,this._direction=s.default.CtrlPattern.Type.Down):(this.index-=1,this._direction=s.default.CtrlPattern.Type.Up),this.index>=this.values.length&&(this.index=0,this._direction=s.default.CtrlPattern.Type.Up)):t===s.default.CtrlPattern.Type.AlternateDown&&(this._direction===s.default.CtrlPattern.Type.Up?(this.index+=1,this._direction=s.default.CtrlPattern.Type.Down):(this.index-=2,this._direction=s.default.CtrlPattern.Type.Up),this.index<0&&(this.index=this.values.length-1,this._direction=s.default.CtrlPattern.Type.Down)),this.value},s.default.CtrlPattern.prototype._shuffleValues=function(){var t=[];this._shuffled=[];for(var e=0;e<this.values.length;e++)t[e]=e;for(;t.length>0;){var i=t.splice(Math.floor(t.length*Math.random()),1);this._shuffled.push(i[0]);}},s.default.CtrlPattern.prototype.dispose=function(){this._shuffled=null,this.values=null;},e.default=s.default.CtrlPattern;},function(t,e,i){i.r(e);var s=i(0);i(56),i(55);s.default.TransportRepeatEvent=function(t,e){s.default.TransportEvent.call(this,t,e),e=s.default.defaultArg(e,s.default.TransportRepeatEvent.defaults),this.duration=s.default.Ticks(e.duration),this._interval=s.default.Ticks(e.interval),this._currentId=-1,this._nextId=-1,this._nextTick=this.time,this._boundRestart=this._restart.bind(this),this.Transport.on("start loopStart",this._boundRestart),this._restart();},s.default.extend(s.default.TransportRepeatEvent,s.default.TransportEvent),s.default.TransportRepeatEvent.defaults={duration:1/0,interval:1},s.default.TransportRepeatEvent.prototype.invoke=function(t){this._createEvents(t),s.default.TransportEvent.prototype.invoke.call(this,t);},s.default.TransportRepeatEvent.prototype._createEvents=function(t){var e=this.Transport.getTicksAtTime(t);e>=this.time&&e>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.Transport.scheduleOnce(this.invoke.bind(this),s.default.Ticks(this._nextTick)));},s.default.TransportRepeatEvent.prototype._restart=function(t){this.Transport.clear(this._currentId),this.Transport.clear(this._nextId),this._nextTick=this.time;var e=this.Transport.getTicksAtTime(t);e>this.time&&(this._nextTick=this.time+Math.ceil((e-this.time)/this._interval)*this._interval),this._currentId=this.Transport.scheduleOnce(this.invoke.bind(this),s.default.Ticks(this._nextTick)),this._nextTick+=this._interval,this._nextId=this.Transport.scheduleOnce(this.invoke.bind(this),s.default.Ticks(this._nextTick));},s.default.TransportRepeatEvent.prototype.dispose=function(){return this.Transport.clear(this._currentId),this.Transport.clear(this._nextId),this.Transport.off("start loopStart",this._boundRestart),this._boundCreateEvents=null,s.default.TransportEvent.prototype.dispose.call(this),this.duration=null,this._interval=null,this},e.default=s.default.TransportRepeatEvent;},function(t,e,i){i.r(e);var s=i(0);i(4);s.default.IntervalTimeline=function(){s.default.call(this),this._root=null,this._length=0;},s.default.extend(s.default.IntervalTimeline),s.default.IntervalTimeline.prototype.add=function(t){if(s.default.isUndef(t.time)||s.default.isUndef(t.duration))throw new Error("Tone.IntervalTimeline: events must have time and duration parameters");t.time=t.time.valueOf();var e=new n(t.time,t.time+t.duration,t);for(null===this._root?this._root=e:this._root.insert(e),this._length++;null!==e;)e.updateHeight(),e.updateMax(),this._rebalance(e),e=e.parent;return this},s.default.IntervalTimeline.prototype.remove=function(t){if(null!==this._root){var e=[];this._root.search(t.time,e);for(var i=0;i<e.length;i++){var s=e[i];if(s.event===t){this._removeNode(s),this._length--;break}}}return this},Object.defineProperty(s.default.IntervalTimeline.prototype,"length",{get:function(){return this._length}}),s.default.IntervalTimeline.prototype.cancel=function(t){return this.forEachFrom(t,function(t){this.remove(t);}.bind(this)),this},s.default.IntervalTimeline.prototype._setRoot=function(t){this._root=t,null!==this._root&&(this._root.parent=null);},s.default.IntervalTimeline.prototype._replaceNodeInParent=function(t,e){null!==t.parent?(t.isLeftChild()?t.parent.left=e:t.parent.right=e,this._rebalance(t.parent)):this._setRoot(e);},s.default.IntervalTimeline.prototype._removeNode=function(t){if(null===t.left&&null===t.right)this._replaceNodeInParent(t,null);else if(null===t.right)this._replaceNodeInParent(t,t.left);else if(null===t.left)this._replaceNodeInParent(t,t.right);else {var e,i;if(t.getBalance()>0)if(null===t.left.right)(e=t.left).right=t.right,i=e;else {for(e=t.left.right;null!==e.right;)e=e.right;e.parent.right=e.left,i=e.parent,e.left=t.left,e.right=t.right;}else if(null===t.right.left)(e=t.right).left=t.left,i=e;else {for(e=t.right.left;null!==e.left;)e=e.left;e.parent.left=e.right,i=e.parent,e.left=t.left,e.right=t.right;}null!==t.parent?t.isLeftChild()?t.parent.left=e:t.parent.right=e:this._setRoot(e),this._rebalance(i);}t.dispose();},s.default.IntervalTimeline.prototype._rotateLeft=function(t){var e=t.parent,i=t.isLeftChild(),s=t.right;t.right=s.left,s.left=t,null!==e?i?e.left=s:e.right=s:this._setRoot(s);},s.default.IntervalTimeline.prototype._rotateRight=function(t){var e=t.parent,i=t.isLeftChild(),s=t.left;t.left=s.right,s.right=t,null!==e?i?e.left=s:e.right=s:this._setRoot(s);},s.default.IntervalTimeline.prototype._rebalance=function(t){var e=t.getBalance();e>1?t.left.getBalance()<0?this._rotateLeft(t.left):this._rotateRight(t):e<-1&&(t.right.getBalance()>0?this._rotateRight(t.right):this._rotateLeft(t));},s.default.IntervalTimeline.prototype.get=function(t){if(null!==this._root){var e=[];if(this._root.search(t,e),e.length>0){for(var i=e[0],s=1;s<e.length;s++)e[s].low>i.low&&(i=e[s]);return i.event}}return null},s.default.IntervalTimeline.prototype.forEach=function(t){if(null!==this._root){var e=[];this._root.traverse(function(t){e.push(t);});for(var i=0;i<e.length;i++){var s=e[i].event;s&&t(s);}}return this},s.default.IntervalTimeline.prototype.forEachAtTime=function(t,e){if(null!==this._root){var i=[];this._root.search(t,i);for(var s=i.length-1;s>=0;s--){var n=i[s].event;n&&e(n);}}return this},s.default.IntervalTimeline.prototype.forEachFrom=function(t,e){if(null!==this._root){var i=[];this._root.searchAfter(t,i);for(var s=i.length-1;s>=0;s--){e(i[s].event);}}return this},s.default.IntervalTimeline.prototype.dispose=function(){var t=[];null!==this._root&&this._root.traverse(function(e){t.push(e);});for(var e=0;e<t.length;e++)t[e].dispose();return t=null,this._root=null,this};var n=function(t,e,i){this.event=i,this.low=t,this.high=e,this.max=this.high,this._left=null,this._right=null,this.parent=null,this.height=0;};n.prototype.insert=function(t){t.low<=this.low?null===this.left?this.left=t:this.left.insert(t):null===this.right?this.right=t:this.right.insert(t);},n.prototype.search=function(t,e){t>this.max||(null!==this.left&&this.left.search(t,e),this.low<=t&&this.high>t&&e.push(this),this.low>t||null!==this.right&&this.right.search(t,e));},n.prototype.searchAfter=function(t,e){this.low>=t&&(e.push(this),null!==this.left&&this.left.searchAfter(t,e)),null!==this.right&&this.right.searchAfter(t,e);},n.prototype.traverse=function(t){t(this),null!==this.left&&this.left.traverse(t),null!==this.right&&this.right.traverse(t);},n.prototype.updateHeight=function(){null!==this.left&&null!==this.right?this.height=Math.max(this.left.height,this.right.height)+1:null!==this.right?this.height=this.right.height+1:null!==this.left?this.height=this.left.height+1:this.height=0;},n.prototype.updateMax=function(){this.max=this.high,null!==this.left&&(this.max=Math.max(this.max,this.left.max)),null!==this.right&&(this.max=Math.max(this.max,this.right.max));},n.prototype.getBalance=function(){var t=0;return null!==this.left&&null!==this.right?t=this.left.height-this.right.height:null!==this.left?t=this.left.height+1:null!==this.right&&(t=-(this.right.height+1)),t},n.prototype.isLeftChild=function(){return null!==this.parent&&this.parent.left===this},Object.defineProperty(n.prototype,"left",{get:function(){return this._left},set:function(t){this._left=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax();}}),Object.defineProperty(n.prototype,"right",{get:function(){return this._right},set:function(t){this._right=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax();}}),n.prototype.dispose=function(){this.parent=null,this._left=null,this._right=null,this.event=null;},e.default=s.default.IntervalTimeline;},function(t,e,i){i.r(e);var s=i(0);i(2);function n(t){return function(e,i){i=this.toSeconds(i),t.apply(this,arguments);var s=this._events.get(i),n=this._events.previousEvent(s),o=this._getTicksUntilEvent(n,i);return s.ticks=Math.max(o,0),this}}s.default.TickSignal=function(t){t=s.default.defaultArg(t,1),s.default.Signal.call(this,{units:s.default.Type.Ticks,value:t}),this._events.memory=1/0,this.cancelScheduledValues(0),this._events.add({type:s.default.Param.AutomationType.SetValue,time:0,value:t});},s.default.extend(s.default.TickSignal,s.default.Signal),s.default.TickSignal.prototype.setValueAtTime=n(s.default.Signal.prototype.setValueAtTime),s.default.TickSignal.prototype.linearRampToValueAtTime=n(s.default.Signal.prototype.linearRampToValueAtTime),s.default.TickSignal.prototype.setTargetAtTime=function(t,e,i){e=this.toSeconds(e),this.setRampPoint(e),t=this._fromUnits(t);for(var s=this._events.get(e),n=Math.round(Math.max(1/i,1)),o=0;o<=n;o++){var a=i*o+e,r=this._exponentialApproach(s.time,s.value,t,i,a);this.linearRampToValueAtTime(this._toUnits(r),a);}return this},s.default.TickSignal.prototype.exponentialRampToValueAtTime=function(t,e){e=this.toSeconds(e),t=this._fromUnits(t);for(var i=this._events.get(e),s=Math.round(Math.max(10*(e-i.time),1)),n=(e-i.time)/s,o=0;o<=s;o++){var a=n*o+i.time,r=this._exponentialInterpolate(i.time,i.value,e,t,a);this.linearRampToValueAtTime(this._toUnits(r),a);}return this},s.default.TickSignal.prototype._getTicksUntilEvent=function(t,e){if(null===t)t={ticks:0,time:0};else if(s.default.isUndef(t.ticks)){var i=this._events.previousEvent(t);t.ticks=this._getTicksUntilEvent(i,t.time);}var n=this.getValueAtTime(t.time),o=this.getValueAtTime(e);return this._events.get(e).time===e&&this._events.get(e).type===s.default.Param.AutomationType.SetValue&&(o=this.getValueAtTime(e-this.sampleTime)),.5*(e-t.time)*(n+o)+t.ticks},s.default.TickSignal.prototype.getTicksAtTime=function(t){t=this.toSeconds(t);var e=this._events.get(t);return Math.max(this._getTicksUntilEvent(e,t),0)},s.default.TickSignal.prototype.getDurationOfTicks=function(t,e){e=this.toSeconds(e);var i=this.getTicksAtTime(e);return this.getTimeOfTick(i+t)-e},s.default.TickSignal.prototype.getTimeOfTick=function(t){var e=this._events.get(t,"ticks"),i=this._events.getAfter(t,"ticks");if(e&&e.ticks===t)return e.time;if(e&&i&&i.type===s.default.Param.AutomationType.Linear&&e.value!==i.value){var n=this.getValueAtTime(e.time),o=(this.getValueAtTime(i.time)-n)/(i.time-e.time),a=Math.sqrt(Math.pow(n,2)-2*o*(e.ticks-t)),r=(-n+a)/o;return (r>0?r:(-n-a)/o)+e.time}return e?0===e.value?1/0:e.time+(t-e.ticks)/e.value:t/this._initialValue},s.default.TickSignal.prototype.ticksToTime=function(t,e){return e=this.toSeconds(e),new s.default.Time(this.getDurationOfTicks(t,e))},s.default.TickSignal.prototype.timeToTicks=function(t,e){e=this.toSeconds(e),t=this.toSeconds(t);var i=this.getTicksAtTime(e),n=this.getTicksAtTime(e+t);return new s.default.Ticks(n-i)},e.default=s.default.TickSignal;},function(t,e,i){i.r(e);var s=i(0);i(57),i(34),i(35),i(20);s.default.Clock=function(){var t=s.default.defaults(arguments,["callback","frequency"],s.default.Clock);s.default.Emitter.call(this),this.callback=t.callback,this._nextTick=0,this._tickSource=new s.default.TickSource(t.frequency),this._lastUpdate=0,this.frequency=this._tickSource.frequency,this._readOnly("frequency"),this._state=new s.default.TimelineState(s.default.State.Stopped),this._state.setStateAtTime(s.default.State.Stopped,0),this._boundLoop=this._loop.bind(this),this.context.on("tick",this._boundLoop);},s.default.extend(s.default.Clock,s.default.Emitter),s.default.Clock.defaults={callback:s.default.noOp,frequency:1},Object.defineProperty(s.default.Clock.prototype,"state",{get:function(){return this._state.getValueAtTime(this.now())}}),s.default.Clock.prototype.start=function(t,e){return this.context.resume(),t=this.toSeconds(t),this._state.getValueAtTime(t)!==s.default.State.Started&&(this._state.setStateAtTime(s.default.State.Started,t),this._tickSource.start(t,e),t<this._lastUpdate&&this.emit("start",t,e)),this},s.default.Clock.prototype.stop=function(t){return t=this.toSeconds(t),this._state.cancel(t),this._state.setStateAtTime(s.default.State.Stopped,t),this._tickSource.stop(t),t<this._lastUpdate&&this.emit("stop",t),this},s.default.Clock.prototype.pause=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)===s.default.State.Started&&(this._state.setStateAtTime(s.default.State.Paused,t),this._tickSource.pause(t),t<this._lastUpdate&&this.emit("pause",t)),this},Object.defineProperty(s.default.Clock.prototype,"ticks",{get:function(){return Math.ceil(this.getTicksAtTime(this.now()))},set:function(t){this._tickSource.ticks=t;}}),Object.defineProperty(s.default.Clock.prototype,"seconds",{get:function(){return this._tickSource.seconds},set:function(t){this._tickSource.seconds=t;}}),s.default.Clock.prototype.getSecondsAtTime=function(t){return this._tickSource.getSecondsAtTime(t)},s.default.Clock.prototype.setTicksAtTime=function(t,e){return this._tickSource.setTicksAtTime(t,e),this},s.default.Clock.prototype.getTicksAtTime=function(t){return this._tickSource.getTicksAtTime(t)},s.default.Clock.prototype.nextTickTime=function(t,e){e=this.toSeconds(e);var i=this.getTicksAtTime(e);return this._tickSource.getTimeOfTick(i+t,e)},s.default.Clock.prototype._loop=function(){var t=this._lastUpdate,e=this.now();this._lastUpdate=e,t!==e&&(this._state.forEachBetween(t,e,function(t){switch(t.state){case s.default.State.Started:var e=this._tickSource.getTicksAtTime(t.time);this.emit("start",t.time,e);break;case s.default.State.Stopped:0!==t.time&&this.emit("stop",t.time);break;case s.default.State.Paused:this.emit("pause",t.time);}}.bind(this)),this._tickSource.forEachTickBetween(t,e,function(t,e){this.callback(t,e);}.bind(this)));},s.default.Clock.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)},s.default.Clock.prototype.dispose=function(){s.default.Emitter.prototype.dispose.call(this),this.context.off("tick",this._boundLoop),this._writable("frequency"),this._tickSource.dispose(),this._tickSource=null,this.frequency=null,this._boundLoop=null,this._nextTick=1/0,this.callback=null,this._state.dispose(),this._state=null;},e.default=s.default.Clock;},function(t,e,i){i.r(e);var s=i(0);i(2),i(5),i(7);s.default.GreaterThanZero=function(){s.default.SignalBase.call(this),this._thresh=this.output=new s.default.WaveShaper(function(t){return t<=0?0:1},127),this._scale=this.input=new s.default.Multiply(1e4),this._scale.connect(this._thresh);},s.default.extend(s.default.GreaterThanZero,s.default.SignalBase),s.default.GreaterThanZero.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._thresh.dispose(),this._thresh=null,this},e.default=s.default.GreaterThanZero;},function(t,e,i){i.r(e);var s=i(0);i(84),i(13),i(2);s.default.GreaterThan=function(t){s.default.Signal.call(this),this.createInsOuts(2,0),this._param=this.input[0]=new s.default.Subtract(t),this.input[1]=this._param.input[1],this._gtz=this.output=new s.default.GreaterThanZero,this._param.connect(this._gtz);},s.default.extend(s.default.GreaterThan,s.default.Signal),s.default.GreaterThan.prototype.dispose=function(){return s.default.Signal.prototype.dispose.call(this),this._gtz.dispose(),this._gtz=null,this},e.default=s.default.GreaterThan;},function(t,e,i){i.r(e);var s=i(0);i(47),i(26);s.default.ScaledEnvelope=function(){var t=s.default.defaults(arguments,["attack","decay","sustain","release"],s.default.Envelope);s.default.Envelope.call(this,t),t=s.default.defaultArg(t,s.default.ScaledEnvelope.defaults),this._exp=this.output=new s.default.Pow(t.exponent),this._scale=this.output=new s.default.Scale(t.min,t.max),this._sig.chain(this._exp,this._scale);},s.default.extend(s.default.ScaledEnvelope,s.default.Envelope),s.default.ScaledEnvelope.defaults={min:0,max:1,exponent:1},Object.defineProperty(s.default.ScaledEnvelope.prototype,"min",{get:function(){return this._scale.min},set:function(t){this._scale.min=t;}}),Object.defineProperty(s.default.ScaledEnvelope.prototype,"max",{get:function(){return this._scale.max},set:function(t){this._scale.max=t;}}),Object.defineProperty(s.default.ScaledEnvelope.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t;}}),s.default.ScaledEnvelope.prototype.dispose=function(){return s.default.Envelope.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._exp.dispose(),this._exp=null,this},e.default=s.default.ScaledEnvelope;},function(t,e,i){i.r(e);var s=i(0);i(7),i(30);s.default.Abs=function(){s.default.SignalBase.call(this),this._abs=this.input=this.output=new s.default.WaveShaper(function(t){return Math.abs(t)<.001?0:Math.abs(t)},1024);},s.default.extend(s.default.Abs,s.default.SignalBase),s.default.Abs.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._abs.dispose(),this._abs=null,this},e.default=s.default.Abs;},function(t,e,i){i.r(e);var s=i(0);i(3),i(1);s.default.Solo=function(){var t=s.default.defaults(arguments,["solo"],s.default.Solo);s.default.AudioNode.call(this),this.input=this.output=new s.default.Gain,this._soloBind=this._soloed.bind(this),this.context.on("solo",this._soloBind),this.solo=t.solo;},s.default.extend(s.default.Solo,s.default.AudioNode),s.default.Solo.defaults={solo:!1},Object.defineProperty(s.default.Solo.prototype,"solo",{get:function(){return this._isSoloed()},set:function(t){t?this._addSolo():this._removeSolo(),this.context.emit("solo",this);}}),Object.defineProperty(s.default.Solo.prototype,"muted",{get:function(){return 0===this.input.gain.value}}),s.default.Solo.prototype._addSolo=function(){s.default.isArray(this.context._currentSolo)||(this.context._currentSolo=[]),this._isSoloed()||this.context._currentSolo.push(this);},s.default.Solo.prototype._removeSolo=function(){if(this._isSoloed()){var t=this.context._currentSolo.indexOf(this);this.context._currentSolo.splice(t,1);}},s.default.Solo.prototype._isSoloed=function(){return !!s.default.isArray(this.context._currentSolo)&&(0!==this.context._currentSolo.length&&-1!==this.context._currentSolo.indexOf(this))},s.default.Solo.prototype._noSolos=function(){return !s.default.isArray(this.context._currentSolo)||0===this.context._currentSolo.length},s.default.Solo.prototype._soloed=function(){this._isSoloed()?this.input.gain.value=1:this._noSolos()?this.input.gain.value=1:this.input.gain.value=0;},s.default.Solo.prototype.dispose=function(){return this.context.off("solo",this._soloBind),this._removeSolo(),this._soloBind=null,s.default.AudioNode.prototype.dispose.call(this),this},e.default=s.default.Solo;},function(t,e,i){i.r(e);var s=i(0);i(7);s.default.EqualPowerGain=function(){s.default.SignalBase.call(this),this._eqPower=this.input=this.output=new s.default.WaveShaper(function(t){return Math.abs(t)<.001?0:s.default.equalPowerScale(t)}.bind(this),4096);},s.default.extend(s.default.EqualPowerGain,s.default.SignalBase),s.default.EqualPowerGain.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._eqPower.dispose(),this._eqPower=null,this},e.default=s.default.EqualPowerGain;},function(t,e,i){i.r(e);var s=i(0);i(5),i(2);s.default.Negate=function(){s.default.SignalBase.call(this),this._multiply=this.input=this.output=new s.default.Multiply(-1);},s.default.extend(s.default.Negate,s.default.SignalBase),s.default.Negate.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._multiply.dispose(),this._multiply=null,this},e.default=s.default.Negate;},function(t,e,i){i.r(e);var s=i(0);i(48),i(27),i(1);s.default.PanVol=function(){var t=s.default.defaults(arguments,["pan","volume"],s.default.PanVol);s.default.AudioNode.call(this),this._panner=this.input=new s.default.Panner(t.pan),this.pan=this._panner.pan,this._volume=this.output=new s.default.Volume(t.volume),this.volume=this._volume.volume,this._panner.connect(this._volume),this.mute=t.mute,this._readOnly(["pan","volume"]);},s.default.extend(s.default.PanVol,s.default.AudioNode),s.default.PanVol.defaults={pan:0,volume:0,mute:!1},Object.defineProperty(s.default.PanVol.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t;}}),s.default.PanVol.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["pan","volume"]),this._panner.dispose(),this._panner=null,this.pan=null,this._volume.dispose(),this._volume=null,this.volume=null,this},e.default=s.default.PanVol;},function(t,e,i){var s=i(0);if(s.default.supported){!s.default.global.hasOwnProperty("OfflineAudioContext")&&s.default.global.hasOwnProperty("webkitOfflineAudioContext")&&(s.default.global.OfflineAudioContext=s.default.global.webkitOfflineAudioContext);var n=new OfflineAudioContext(1,1,44100).startRendering();n&&s.default.isFunction(n.then)||(OfflineAudioContext.prototype._native_startRendering=OfflineAudioContext.prototype.startRendering,OfflineAudioContext.prototype.startRendering=function(){return new Promise(function(t){this.oncomplete=function(e){t(e.renderedBuffer);},this._native_startRendering();}.bind(this))});}},function(t,e,i){e.a="13.8.25";},function(t,e,i){i.r(e);var s=i(0);i(46);s.default.Midi=function(t,e){if(!(this instanceof s.default.Midi))return new s.default.Midi(t,e);s.default.Frequency.call(this,t,e);},s.default.extend(s.default.Midi,s.default.Frequency),s.default.Midi.prototype._defaultUnits="midi",s.default.Midi.prototype._frequencyToUnits=function(t){return s.default.Frequency.ftom(s.default.Frequency.prototype._frequencyToUnits.call(this,t))},s.default.Midi.prototype._ticksToUnits=function(t){return s.default.Frequency.ftom(s.default.Frequency.prototype._ticksToUnits.call(this,t))},s.default.Midi.prototype._beatsToUnits=function(t){return s.default.Frequency.ftom(s.default.Frequency.prototype._beatsToUnits.call(this,t))},s.default.Midi.prototype._secondsToUnits=function(t){return s.default.Frequency.ftom(s.default.Frequency.prototype._secondsToUnits.call(this,t))},s.default.Midi.prototype.toMidi=function(){return this.valueOf()},s.default.Midi.prototype.toFrequency=function(){return s.default.Frequency.mtof(this.toMidi())},s.default.Midi.prototype.transpose=function(t){return new this.constructor(this.toMidi()+t)},e.default=s.default.Midi;},function(t,e,i){i.r(e);var s=i(0);i(27),i(1);s.default.UserMedia=function(){var t=s.default.defaults(arguments,["volume"],s.default.UserMedia);s.default.AudioNode.call(this),this._mediaStream=null,this._stream=null,this._device=null,this._volume=this.output=new s.default.Volume(t.volume),this.volume=this._volume.volume,this._readOnly("volume"),this.mute=t.mute;},s.default.extend(s.default.UserMedia,s.default.AudioNode),s.default.UserMedia.defaults={volume:0,mute:!1},s.default.UserMedia.prototype.open=function(t){return this.state===s.default.State.Started&&this.close(),s.default.UserMedia.enumerateDevices().then(function(e){var i;if(s.default.isNumber(t))i=e[t];else if(!(i=e.find(function(e){return e.label===t||e.deviceId===t}))&&e.length>0)i=e[0];else if(!i&&s.default.isDefined(t))throw new Error("Tone.UserMedia: no matching device: "+t);this._device=i;var n={audio:{echoCancellation:!1,sampleRate:this.context.sampleRate,noiseSuppression:!1,mozNoiseSuppression:!1}};return i&&(n.audio.deviceId=i.deviceId),navigator.mediaDevices.getUserMedia(n).then(function(t){return this._stream||(this._stream=t,this._mediaStream=this.context.createMediaStreamSource(t),s.default.connect(this._mediaStream,this.output)),this}.bind(this))}.bind(this))},s.default.UserMedia.prototype.close=function(){return this._stream&&(this._stream.getAudioTracks().forEach(function(t){t.stop();}),this._stream=null,this._mediaStream.disconnect(),this._mediaStream=null),this._device=null,this},s.default.UserMedia.enumerateDevices=function(){return navigator.mediaDevices.enumerateDevices().then(function(t){return t.filter(function(t){return "audioinput"===t.kind})})},Object.defineProperty(s.default.UserMedia.prototype,"state",{get:function(){return this._stream&&this._stream.active?s.default.State.Started:s.default.State.Stopped}}),Object.defineProperty(s.default.UserMedia.prototype,"deviceId",{get:function(){return this._device?this._device.deviceId:null}}),Object.defineProperty(s.default.UserMedia.prototype,"groupId",{get:function(){return this._device?this._device.groupId:null}}),Object.defineProperty(s.default.UserMedia.prototype,"label",{get:function(){return this._device?this._device.label:null}}),Object.defineProperty(s.default.UserMedia.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t;}}),s.default.UserMedia.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this.close(),this._writable("volume"),this._volume.dispose(),this._volume=null,this.volume=null,this},Object.defineProperty(s.default.UserMedia,"supported",{get:function(){return s.default.isDefined(navigator.mediaDevices)&&s.default.isFunction(navigator.mediaDevices.getUserMedia)}}),e.default=s.default.UserMedia;},function(t,e,i){i.r(e);var s=i(0);i(65),i(27),i(1);s.default.Players=function(t){var e=Array.prototype.slice.call(arguments);e.shift();var i=s.default.defaults(e,["onload"],s.default.Players);for(var n in s.default.AudioNode.call(this,i),this._volume=this.output=new s.default.Volume(i.volume),this.volume=this._volume.volume,this._readOnly("volume"),this._volume.output.output.channelCount=2,this._volume.output.output.channelCountMode="explicit",this.mute=i.mute,this._players={},this._loadingCount=0,this._fadeIn=i.fadeIn,this._fadeOut=i.fadeOut,t)this._loadingCount++,this.add(n,t[n],this._bufferLoaded.bind(this,i.onload));},s.default.extend(s.default.Players,s.default.AudioNode),s.default.Players.defaults={volume:0,mute:!1,onload:s.default.noOp,fadeIn:0,fadeOut:0},s.default.Players.prototype._bufferLoaded=function(t){this._loadingCount--,0===this._loadingCount&&t&&t(this);},Object.defineProperty(s.default.Players.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t;}}),Object.defineProperty(s.default.Players.prototype,"fadeIn",{get:function(){return this._fadeIn},set:function(t){this._fadeIn=t,this._forEach(function(e){e.fadeIn=t;});}}),Object.defineProperty(s.default.Players.prototype,"fadeOut",{get:function(){return this._fadeOut},set:function(t){this._fadeOut=t,this._forEach(function(e){e.fadeOut=t;});}}),Object.defineProperty(s.default.Players.prototype,"state",{get:function(){var t=!1;return this._forEach(function(e){t=t||e.state===s.default.State.Started;}),t?s.default.State.Started:s.default.State.Stopped}}),s.default.Players.prototype.has=function(t){return this._players.hasOwnProperty(t)},s.default.Players.prototype.get=function(t){if(this.has(t))return this._players[t];throw new Error("Tone.Players: no player named "+t)},s.default.Players.prototype._forEach=function(t){for(var e in this._players)t(this._players[e],e);return this},Object.defineProperty(s.default.Players.prototype,"loaded",{get:function(){var t=!0;return this._forEach(function(e){t=t&&e.loaded;}),t}}),s.default.Players.prototype.add=function(t,e,i){return this._players[t]=new s.default.Player(e,i).connect(this.output),this._players[t].fadeIn=this._fadeIn,this._players[t].fadeOut=this._fadeOut,this},s.default.Players.prototype.stopAll=function(t){this._forEach(function(e){e.stop(t);});},s.default.Players.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._volume.dispose(),this._volume=null,this._writable("volume"),this.volume=null,this.output=null,this._forEach(function(t){t.dispose();}),this._players=null,this},e.default=s.default.Players;},function(t,e,i){i.r(e);var s=i(0);i(6),i(11),i(32);s.default.GrainPlayer=function(){var t=s.default.defaults(arguments,["url","onload"],s.default.GrainPlayer);s.default.Source.call(this,t),this.buffer=new s.default.Buffer(t.url,t.onload.bind(void 0,this)),this._clock=new s.default.Clock(this._tick.bind(this),t.grainSize),this._loopStart=0,this._loopEnd=0,this._activeSources=[],this._playbackRate=t.playbackRate,this._grainSize=t.grainSize,this._overlap=t.overlap,this.detune=t.detune,this.overlap=t.overlap,this.loop=t.loop,this.playbackRate=t.playbackRate,this.grainSize=t.grainSize,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd,this.reverse=t.reverse,this._clock.on("stop",this._onstop.bind(this));},s.default.extend(s.default.GrainPlayer,s.default.Source),s.default.GrainPlayer.defaults={onload:s.default.noOp,overlap:.1,grainSize:.2,playbackRate:1,detune:0,loop:!1,loopStart:0,loopEnd:0,reverse:!1},s.default.GrainPlayer.prototype._start=function(t,e,i){e=s.default.defaultArg(e,0),e=this.toSeconds(e),t=this.toSeconds(t),this._offset=e,this._clock.start(t),i&&this.stop(t+this.toSeconds(i));},s.default.GrainPlayer.prototype._stop=function(t){this._clock.stop(t);},s.default.GrainPlayer.prototype._onstop=function(t){this._activeSources.forEach(function(e){e.fadeOut=0,e.stop(t);});},s.default.GrainPlayer.prototype._tick=function(t){if(!this.loop&&this._offset>this.buffer.duration)this.stop(t);else {var e=this._offset<this._overlap?0:this._overlap,i=new s.default.BufferSource({buffer:this.buffer,fadeIn:e,fadeOut:this._overlap,loop:this.loop,loopStart:this._loopStart,loopEnd:this._loopEnd,playbackRate:s.default.intervalToFrequencyRatio(this.detune/100)}).connect(this.output);i.start(t,this._offset),this._offset+=this.grainSize,i.stop(t+this.grainSize/this.playbackRate),this._activeSources.push(i),i.onended=function(){var t=this._activeSources.indexOf(i);-1!==t&&this._activeSources.splice(t,1);}.bind(this);}},Object.defineProperty(s.default.GrainPlayer.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this.grainSize=this._grainSize;}}),Object.defineProperty(s.default.GrainPlayer.prototype,"loopStart",{get:function(){return this._loopStart},set:function(t){this._loopStart=this.toSeconds(t);}}),Object.defineProperty(s.default.GrainPlayer.prototype,"loopEnd",{get:function(){return this._loopEnd},set:function(t){this._loopEnd=this.toSeconds(t);}}),Object.defineProperty(s.default.GrainPlayer.prototype,"reverse",{get:function(){return this.buffer.reverse},set:function(t){this.buffer.reverse=t;}}),Object.defineProperty(s.default.GrainPlayer.prototype,"grainSize",{get:function(){return this._grainSize},set:function(t){this._grainSize=this.toSeconds(t),this._clock.frequency.value=this._playbackRate/this._grainSize;}}),Object.defineProperty(s.default.GrainPlayer.prototype,"overlap",{get:function(){return this._overlap},set:function(t){this._overlap=this.toSeconds(t);}}),Object.defineProperty(s.default.GrainPlayer.prototype,"loaded",{get:function(){return this.buffer.loaded}}),s.default.GrainPlayer.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this.buffer.dispose(),this.buffer=null,this._clock.dispose(),this._clock=null,this._activeSources.forEach(function(t){t.dispose();}),this._activeSources=null,this},e.default=s.default.GrainPlayer;},function(t,e,i){i.r(e);var s=i(0);i(16),i(2),i(45);s.default.TransportTimelineSignal=function(){s.default.Signal.apply(this,arguments),this.output=this._outputSig=new s.default.Signal(this._initialValue),this._lastVal=this.value,this._synced=s.default.Transport.scheduleRepeat(this._onTick.bind(this),"1i"),this._bindAnchorValue=this._anchorValue.bind(this),s.default.Transport.on("start stop pause",this._bindAnchorValue),this._events.memory=1/0;},s.default.extend(s.default.TransportTimelineSignal,s.default.Signal),s.default.TransportTimelineSignal.prototype._onTick=function(t){var e=this.getValueAtTime(s.default.Transport.seconds);this._lastVal!==e&&(this._lastVal=e,this._outputSig.linearRampToValueAtTime(e,t));},s.default.TransportTimelineSignal.prototype._anchorValue=function(t){var e=this.getValueAtTime(s.default.Transport.seconds);return this._lastVal=e,this._outputSig.cancelScheduledValues(t),this._outputSig.setValueAtTime(e,t),this},s.default.TransportTimelineSignal.prototype.getValueAtTime=function(t){return t=s.default.TransportTime(t),s.default.Signal.prototype.getValueAtTime.call(this,t)},s.default.TransportTimelineSignal.prototype.setValueAtTime=function(t,e){return e=s.default.TransportTime(e),s.default.Signal.prototype.setValueAtTime.call(this,t,e),this},s.default.TransportTimelineSignal.prototype.linearRampToValueAtTime=function(t,e){return e=s.default.TransportTime(e),s.default.Signal.prototype.linearRampToValueAtTime.call(this,t,e),this},s.default.TransportTimelineSignal.prototype.exponentialRampToValueAtTime=function(t,e){return e=s.default.TransportTime(e),s.default.Signal.prototype.exponentialRampToValueAtTime.call(this,t,e),this},s.default.TransportTimelineSignal.prototype.setTargetAtTime=function(t,e,i){return e=s.default.TransportTime(e),s.default.Signal.prototype.setTargetAtTime.call(this,t,e,i),this},s.default.TransportTimelineSignal.prototype.cancelScheduledValues=function(t){return t=s.default.TransportTime(t),s.default.Signal.prototype.cancelScheduledValues.call(this,t),this},s.default.TransportTimelineSignal.prototype.setValueCurveAtTime=function(t,e,i,n){return e=s.default.TransportTime(e),i=s.default.TransportTime(i),s.default.Signal.prototype.setValueCurveAtTime.call(this,t,e,i,n),this},s.default.TransportTimelineSignal.prototype.cancelAndHoldAtTime=function(t){return s.default.Signal.prototype.cancelAndHoldAtTime.call(this,s.default.TransportTime(t))},s.default.TransportTimelineSignal.prototype.dispose=function(){s.default.Transport.clear(this._synced),s.default.Transport.off("start stop pause",this._syncedCallback),this._events.cancel(0),s.default.Signal.prototype.dispose.call(this),this._outputSig.dispose(),this._outputSig=null;},e.default=s.default.TransportTimelineSignal;},function(t,e,i){i.r(e);var s=i(0);i(29),i(5);s.default.Normalize=function(t,e){s.default.SignalBase.call(this),this._inputMin=s.default.defaultArg(t,0),this._inputMax=s.default.defaultArg(e,1),this._sub=this.input=new s.default.Add(0),this._div=this.output=new s.default.Multiply(1),this._sub.connect(this._div),this._setRange();},s.default.extend(s.default.Normalize,s.default.SignalBase),Object.defineProperty(s.default.Normalize.prototype,"min",{get:function(){return this._inputMin},set:function(t){this._inputMin=t,this._setRange();}}),Object.defineProperty(s.default.Normalize.prototype,"max",{get:function(){return this._inputMax},set:function(t){this._inputMax=t,this._setRange();}}),s.default.Normalize.prototype._setRange=function(){this._sub.value=-this._inputMin,this._div.value=1/(this._inputMax-this._inputMin);},s.default.Normalize.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._sub.dispose(),this._sub=null,this._div.dispose(),this._div=null,this},e.default=s.default.Normalize;},function(t,e,i){i.r(e);var s=i(0);i(7),i(2);s.default.GainToAudio=function(){s.default.SignalBase.call(this),this._norm=this.input=this.output=new s.default.WaveShaper(function(t){return 2*Math.abs(t)-1});},s.default.extend(s.default.GainToAudio,s.default.SignalBase),s.default.GainToAudio.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._norm.dispose(),this._norm=null,this},e.default=s.default.GainToAudio;},function(t,e,i){i.r(e);var s=i(0);i(21),i(78),i(32);s.default.Sampler=function(t){var e=Array.prototype.slice.call(arguments);e.shift();var i=s.default.defaults(e,["onload","baseUrl"],s.default.Sampler);s.default.Instrument.call(this,i);var n={};for(var o in t)if(s.default.isNote(o)){n[s.default.Frequency(o).toMidi()]=t[o];}else {if(isNaN(parseFloat(o)))throw new Error("Tone.Sampler: url keys must be the note's pitch");n[o]=t[o];}this._buffers=new s.default.Buffers(n,i.onload,i.baseUrl),this._activeSources={},this.attack=i.attack,this.release=i.release,this.curve=i.curve;},s.default.extend(s.default.Sampler,s.default.Instrument),s.default.Sampler.defaults={attack:0,release:.1,onload:s.default.noOp,baseUrl:"",curve:"exponential"},s.default.Sampler.prototype._findClosest=function(t){for(var e=0;e<96;){if(this._buffers.has(t+e))return -e;if(this._buffers.has(t-e))return e;e++;}throw new Error("No available buffers for note: "+t)},s.default.Sampler.prototype.triggerAttack=function(t,e,i){this.log("triggerAttack",t,e,i),Array.isArray(t)||(t=[t]);for(var n=0;n<t.length;n++){var o=s.default.Frequency(t[n]).toMidi(),a=this._findClosest(o),r=o-a,l=this._buffers.get(r),u=s.default.intervalToFrequencyRatio(a),d=new s.default.BufferSource({buffer:l,playbackRate:u,fadeIn:this.attack,fadeOut:this.release,curve:this.curve}).connect(this.output);d.start(e,0,l.duration/u,i),s.default.isArray(this._activeSources[o])||(this._activeSources[o]=[]),this._activeSources[o].push(d),d.onended=function(){if(this._activeSources&&this._activeSources[o]){var t=this._activeSources[o].indexOf(d);-1!==t&&this._activeSources[o].splice(t,1);}}.bind(this);}return this},s.default.Sampler.prototype.triggerRelease=function(t,e){this.log("triggerRelease",t,e),Array.isArray(t)||(t=[t]);for(var i=0;i<t.length;i++){var n=s.default.Frequency(t[i]).toMidi();this._activeSources[n]&&this._activeSources[n].length&&(e=this.toSeconds(e),this._activeSources[n].forEach(function(t){t.stop(e);}),this._activeSources[n]=[]);}return this},s.default.Sampler.prototype.releaseAll=function(t){for(var e in t=this.toSeconds(t),this._activeSources)for(var i=this._activeSources[e];i.length;){i.shift().stop(t);}return this},s.default.Sampler.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this},s.default.Sampler.prototype.triggerAttackRelease=function(t,e,i,n){if(i=this.toSeconds(i),this.triggerAttack(t,i,n),s.default.isArray(e)&&s.default.isArray(t))for(var o=0;o<t.length;o++){var a=e[Math.min(o,e.length-1)];this.triggerRelease(t[o],i+this.toSeconds(a));}else this.triggerRelease(t,i+this.toSeconds(e));return this},s.default.Sampler.prototype.add=function(t,e,i){if(s.default.isNote(t)){var n=s.default.Frequency(t).toMidi();this._buffers.add(n,e,i);}else {if(isNaN(parseFloat(t)))throw new Error("Tone.Sampler: note must be the note's pitch. Instead got "+t);this._buffers.add(t,e,i);}},Object.defineProperty(s.default.Sampler.prototype,"loaded",{get:function(){return this._buffers.loaded}}),s.default.Sampler.prototype.dispose=function(){for(var t in s.default.Instrument.prototype.dispose.call(this),this._buffers.dispose(),this._buffers=null,this._activeSources)this._activeSources[t].forEach(function(t){t.dispose();});return this._activeSources=null,this},e.default=s.default.Sampler;},function(t,e,i){i.r(e);var s=i(0);i(38),i(6);s.default.PolySynth=function(){var t=s.default.defaults(arguments,["polyphony","voice"],s.default.PolySynth);s.default.Instrument.call(this,t),(t=s.default.defaultArg(t,s.default.Instrument.defaults)).polyphony=Math.min(s.default.PolySynth.MAX_POLYPHONY,t.polyphony),this.voices=new Array(t.polyphony),this.assert(t.polyphony>0,"polyphony must be greater than 0"),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this._readOnly("detune");for(var e=0;e<t.polyphony;e++){var i=new t.voice(arguments[2],arguments[3]);if(!(i instanceof s.default.Monophonic))throw new Error("Synth constructor must be instance of Tone.Monophonic");this.voices[e]=i,i.index=e,i.connect(this.output),i.hasOwnProperty("detune")&&this.detune.connect(i.detune);}},s.default.extend(s.default.PolySynth,s.default.Instrument),s.default.PolySynth.defaults={polyphony:4,volume:0,detune:0,voice:s.default.Synth},s.default.PolySynth.prototype._getClosestVoice=function(t,e){var i=this.voices.find(function(i){if(Math.abs(i.frequency.getValueAtTime(t)-s.default.Frequency(e))<1e-4&&i.getLevelAtTime(t)>1e-5)return i});return i||this.voices.slice().sort(function(e,i){var s=e.getLevelAtTime(t+this.blockTime),n=i.getLevelAtTime(t+this.blockTime);return s<1e-5&&(s=0),n<1e-5&&(n=0),s-n}.bind(this))[0]},s.default.PolySynth.prototype.triggerAttack=function(t,e,i){return Array.isArray(t)||(t=[t]),e=this.toSeconds(e),t.forEach(function(t){var s=this._getClosestVoice(e,t);s.triggerAttack(t,e,i),this.log("triggerAttack",s.index,t);}.bind(this)),this},s.default.PolySynth.prototype.triggerRelease=function(t,e){return Array.isArray(t)||(t=[t]),e=this.toSeconds(e),t.forEach(function(t){var i=this._getClosestVoice(e,t);this.log("triggerRelease",i.index,t),i.triggerRelease(e);}.bind(this)),this},s.default.PolySynth.prototype.triggerAttackRelease=function(t,e,i,n){if(i=this.toSeconds(i),this.triggerAttack(t,i,n),s.default.isArray(e)&&s.default.isArray(t))for(var o=0;o<t.length;o++){var a=e[Math.min(o,e.length-1)];this.triggerRelease(t[o],i+this.toSeconds(a));}else this.triggerRelease(t,i+this.toSeconds(e));return this},s.default.PolySynth.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this},s.default.PolySynth.prototype.set=function(t,e,i){for(var s=0;s<this.voices.length;s++)this.voices[s].set(t,e,i);return this},s.default.PolySynth.prototype.get=function(t){return this.voices[0].get(t)},s.default.PolySynth.prototype.releaseAll=function(t){return t=this.toSeconds(t),this.voices.forEach(function(e){e.triggerRelease(t);}),this},s.default.PolySynth.prototype.dispose=function(){return s.default.Instrument.prototype.dispose.call(this),this.voices.forEach(function(t){t.dispose();}),this._writable("detune"),this.detune.dispose(),this.detune=null,this.voices=null,this},s.default.PolySynth.MAX_POLYPHONY=20,e.default=s.default.PolySynth;},function(t,e,i){i.r(e);var s=i(0);i(21),i(39),i(54);s.default.PluckSynth=function(t){t=s.default.defaultArg(t,s.default.PluckSynth.defaults),s.default.Instrument.call(this,t),this._noise=new s.default.Noise("pink"),this.attackNoise=t.attackNoise,this._lfcf=new s.default.LowpassCombFilter({resonance:t.resonance,dampening:t.dampening}),this.resonance=this._lfcf.resonance,this.dampening=this._lfcf.dampening,this._noise.connect(this._lfcf),this._lfcf.connect(this.output),this._readOnly(["resonance","dampening"]);},s.default.extend(s.default.PluckSynth,s.default.Instrument),s.default.PluckSynth.defaults={attackNoise:1,dampening:4e3,resonance:.7},s.default.PluckSynth.prototype.triggerAttack=function(t,e){t=this.toFrequency(t),e=this.toSeconds(e);var i=1/t;return this._lfcf.delayTime.setValueAtTime(i,e),this._noise.start(e),this._noise.stop(e+i*this.attackNoise),this},s.default.PluckSynth.prototype.dispose=function(){return s.default.Instrument.prototype.dispose.call(this),this._noise.dispose(),this._lfcf.dispose(),this._noise=null,this._lfcf=null,this._writable(["resonance","dampening"]),this.dampening=null,this.resonance=null,this},e.default=s.default.PluckSynth;},function(t,e,i){i.r(e);var s=i(0);i(31),i(41),i(39),i(2),i(9),i(21);s.default.NoiseSynth=function(t){t=s.default.defaultArg(t,s.default.NoiseSynth.defaults),s.default.Instrument.call(this,t),this.noise=new s.default.Noise(t.noise),this.envelope=new s.default.AmplitudeEnvelope(t.envelope),this.noise.chain(this.envelope,this.output),this._readOnly(["noise","envelope"]);},s.default.extend(s.default.NoiseSynth,s.default.Instrument),s.default.NoiseSynth.defaults={noise:{type:"white"},envelope:{attack:.005,decay:.1,sustain:0}},s.default.NoiseSynth.prototype.triggerAttack=function(t,e){return t=this.toSeconds(t),this.envelope.triggerAttack(t,e),this.noise.start(t),0===this.envelope.sustain&&this.noise.stop(t+this.envelope.attack+this.envelope.decay),this},s.default.NoiseSynth.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.noise.stop(t+this.envelope.release),this},s.default.NoiseSynth.prototype.sync=function(){return this._syncMethod("triggerAttack",0),this._syncMethod("triggerRelease",0),this},s.default.NoiseSynth.prototype.triggerAttackRelease=function(t,e,i){return e=this.toSeconds(e),t=this.toSeconds(t),this.triggerAttack(e,i),this.triggerRelease(e+t),this},s.default.NoiseSynth.prototype.dispose=function(){return s.default.Instrument.prototype.dispose.call(this),this._writable(["noise","envelope"]),this.noise.dispose(),this.noise=null,this.envelope.dispose(),this.envelope=null,this},e.default=s.default.NoiseSynth;},function(t,e,i){i.r(e);var s=i(0),n=(i(21),i(49),i(9),i(41),i(31),i(3),i(26),i(5),[1,1.483,1.932,2.546,2.63,3.897]);s.default.MetalSynth=function(t){t=s.default.defaultArg(t,s.default.MetalSynth.defaults),s.default.Instrument.call(this,t),this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this._oscillators=[],this._freqMultipliers=[],this._amplitue=new s.default.Gain(0).connect(this.output),this._highpass=new s.default.Filter({type:"highpass",Q:-3.0102999566398125}).connect(this._amplitue),this._octaves=t.octaves,this._filterFreqScaler=new s.default.Scale(t.resonance,7e3),this.envelope=new s.default.Envelope({attack:t.envelope.attack,attackCurve:"linear",decay:t.envelope.decay,sustain:0,release:t.envelope.release}).chain(this._filterFreqScaler,this._highpass.frequency),this.envelope.connect(this._amplitue.gain);for(var e=0;e<n.length;e++){var i=new s.default.FMOscillator({type:"square",modulationType:"square",harmonicity:t.harmonicity,modulationIndex:t.modulationIndex});i.connect(this._highpass),this._oscillators[e]=i;var o=new s.default.Multiply(n[e]);this._freqMultipliers[e]=o,this.frequency.chain(o,i.frequency);}this.octaves=t.octaves;},s.default.extend(s.default.MetalSynth,s.default.Instrument),s.default.MetalSynth.defaults={frequency:200,envelope:{attack:.001,decay:1.4,release:.2},harmonicity:5.1,modulationIndex:32,resonance:4e3,octaves:1.5},s.default.MetalSynth.prototype.triggerAttack=function(t,e){return t=this.toSeconds(t),e=s.default.defaultArg(e,1),this.envelope.triggerAttack(t,e),this._oscillators.forEach(function(e){e.start(t);}),0===this.envelope.sustain&&this._oscillators.forEach(function(e){e.stop(t+this.envelope.attack+this.envelope.decay);}.bind(this)),this},s.default.MetalSynth.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this._oscillators.forEach(function(e){e.stop(t+this.envelope.release);}.bind(this)),this},s.default.MetalSynth.prototype.sync=function(){return this._syncMethod("triggerAttack",0),this._syncMethod("triggerRelease",0),this},s.default.MetalSynth.prototype.triggerAttackRelease=function(t,e,i){return e=this.toSeconds(e),t=this.toSeconds(t),this.triggerAttack(e,i),this.triggerRelease(e+t),this},Object.defineProperty(s.default.MetalSynth.prototype,"modulationIndex",{get:function(){return this._oscillators[0].modulationIndex.value},set:function(t){for(var e=0;e<this._oscillators.length;e++)this._oscillators[e].modulationIndex.value=t;}}),Object.defineProperty(s.default.MetalSynth.prototype,"harmonicity",{get:function(){return this._oscillators[0].harmonicity.value},set:function(t){for(var e=0;e<this._oscillators.length;e++)this._oscillators[e].harmonicity.value=t;}}),Object.defineProperty(s.default.MetalSynth.prototype,"resonance",{get:function(){return this._filterFreqScaler.min},set:function(t){this._filterFreqScaler.min=t,this.octaves=this._octaves;}}),Object.defineProperty(s.default.MetalSynth.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._filterFreqScaler.max=this._filterFreqScaler.min*Math.pow(2,t);}}),s.default.MetalSynth.prototype.dispose=function(){s.default.Instrument.prototype.dispose.call(this);for(var t=0;t<this._oscillators.length;t++)this._oscillators[t].dispose(),this._freqMultipliers[t].dispose();this._oscillators=null,this._freqMultipliers=null,this.frequency.dispose(),this.frequency=null,this._filterFreqScaler.dispose(),this._filterFreqScaler=null,this._amplitue.dispose(),this._amplitue=null,this.envelope.dispose(),this.envelope=null,this._highpass.dispose(),this._highpass=null;},e.default=s.default.MetalSynth;},function(t,e,i){i.r(e);var s=i(0);i(37),i(21),i(31);s.default.MembraneSynth=function(t){t=s.default.defaultArg(t,s.default.MembraneSynth.defaults),s.default.Instrument.call(this,t),this.oscillator=new s.default.OmniOscillator(t.oscillator),this.envelope=new s.default.AmplitudeEnvelope(t.envelope),this.octaves=t.octaves,this.pitchDecay=t.pitchDecay,this.oscillator.chain(this.envelope,this.output),this._readOnly(["oscillator","envelope"]);},s.default.extend(s.default.MembraneSynth,s.default.Instrument),s.default.MembraneSynth.defaults={pitchDecay:.05,octaves:10,oscillator:{type:"sine"},envelope:{attack:.001,decay:.4,sustain:.01,release:1.4,attackCurve:"exponential"}},s.default.MembraneSynth.prototype.triggerAttack=function(t,e,i){e=this.toSeconds(e);var s=(t=this.toFrequency(t))*this.octaves;return this.oscillator.frequency.setValueAtTime(s,e),this.oscillator.frequency.exponentialRampToValueAtTime(t,e+this.toSeconds(this.pitchDecay)),this.envelope.triggerAttack(e,i),this.oscillator.start(e),0===this.envelope.sustain&&this.oscillator.stop(e+this.envelope.attack+this.envelope.decay),this},s.default.MembraneSynth.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.oscillator.stop(t+this.envelope.release),this},s.default.MembraneSynth.prototype.dispose=function(){return s.default.Instrument.prototype.dispose.call(this),this._writable(["oscillator","envelope"]),this.oscillator.dispose(),this.oscillator=null,this.envelope.dispose(),this.envelope=null,this},e.default=s.default.MembraneSynth;},function(t,e,i){i.r(e);var s=i(0);i(38),i(2),i(5),i(25);s.default.FMSynth=function(t){t=s.default.defaultArg(t,s.default.FMSynth.defaults),s.default.Monophonic.call(this,t),this._carrier=new s.default.Synth(t.carrier),this._carrier.volume.value=-10,this.oscillator=this._carrier.oscillator,this.envelope=this._carrier.envelope.set(t.envelope),this._modulator=new s.default.Synth(t.modulator),this._modulator.volume.value=-10,this.modulation=this._modulator.oscillator.set(t.modulation),this.modulationEnvelope=this._modulator.envelope.set(t.modulationEnvelope),this.frequency=new s.default.Signal(440,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this.modulationIndex=new s.default.Multiply(t.modulationIndex),this.modulationIndex.units=s.default.Type.Positive,this._modulationNode=new s.default.Gain(0),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this._readOnly(["frequency","harmonicity","modulationIndex","oscillator","envelope","modulation","modulationEnvelope","detune"]);},s.default.extend(s.default.FMSynth,s.default.Monophonic),s.default.FMSynth.defaults={harmonicity:3,modulationIndex:10,detune:0,oscillator:{type:"sine"},envelope:{attack:.01,decay:.01,sustain:1,release:.5},modulation:{type:"square"},modulationEnvelope:{attack:.5,decay:0,sustain:1,release:.5}},s.default.FMSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t),this},s.default.FMSynth.prototype._triggerEnvelopeRelease=function(t){return t=this.toSeconds(t),this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this},s.default.FMSynth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["frequency","harmonicity","modulationIndex","oscillator","envelope","modulation","modulationEnvelope","detune"]),this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this.modulationIndex.dispose(),this.modulationIndex=null,this.harmonicity.dispose(),this.harmonicity=null,this._modulationNode.dispose(),this._modulationNode=null,this.oscillator=null,this.envelope=null,this.modulationEnvelope=null,this.modulation=null,this},e.default=s.default.FMSynth;},function(t,e,i){i.r(e);var s=i(0);i(66),i(12),i(2),i(5),i(25),i(14);s.default.DuoSynth=function(t){t=s.default.defaultArg(t,s.default.DuoSynth.defaults),s.default.Monophonic.call(this,t),this.voice0=new s.default.MonoSynth(t.voice0),this.voice0.volume.value=-10,this.voice1=new s.default.MonoSynth(t.voice1),this.voice1.volume.value=-10,this._vibrato=new s.default.LFO(t.vibratoRate,-50,50),this._vibrato.start(),this.vibratoRate=this._vibrato.frequency,this._vibratoGain=new s.default.Gain(t.vibratoAmount,s.default.Type.Positive),this.vibratoAmount=this._vibratoGain.gain,this.frequency=new s.default.Signal(440,s.default.Type.Frequency),this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this.frequency.connect(this.voice0.frequency),this.frequency.chain(this.harmonicity,this.voice1.frequency),this._vibrato.connect(this._vibratoGain),this._vibratoGain.fan(this.voice0.detune,this.voice1.detune),this.voice0.connect(this.output),this.voice1.connect(this.output),this._readOnly(["voice0","voice1","frequency","vibratoAmount","vibratoRate"]);},s.default.extend(s.default.DuoSynth,s.default.Monophonic),s.default.DuoSynth.defaults={vibratoAmount:.5,vibratoRate:5,harmonicity:1.5,voice0:{volume:-10,portamento:0,oscillator:{type:"sine"},filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}},voice1:{volume:-10,portamento:0,oscillator:{type:"sine"},filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}}},s.default.DuoSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this.voice0._triggerEnvelopeAttack(t,e),this.voice1._triggerEnvelopeAttack(t,e),this},s.default.DuoSynth.prototype._triggerEnvelopeRelease=function(t){return this.voice0._triggerEnvelopeRelease(t),this.voice1._triggerEnvelopeRelease(t),this},s.default.DuoSynth.prototype.getLevelAtTime=function(t){return (this.voice0.getLevelAtTime(t)+this.voice1.getLevelAtTime(t))/2},s.default.DuoSynth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["voice0","voice1","frequency","vibratoAmount","vibratoRate"]),this.voice0.dispose(),this.voice0=null,this.voice1.dispose(),this.voice1=null,this.frequency.dispose(),this.frequency=null,this._vibratoGain.dispose(),this._vibratoGain=null,this._vibrato=null,this.harmonicity.dispose(),this.harmonicity=null,this.vibratoAmount.dispose(),this.vibratoAmount=null,this.vibratoRate=null,this},e.default=s.default.DuoSynth;},function(t,e,i){i.r(e);var s=i(0);i(38),i(2),i(5),i(25),i(22),i(3);s.default.AMSynth=function(t){t=s.default.defaultArg(t,s.default.AMSynth.defaults),s.default.Monophonic.call(this,t),this._carrier=new s.default.Synth,this._carrier.volume.value=-10,this.oscillator=this._carrier.oscillator.set(t.oscillator),this.envelope=this._carrier.envelope.set(t.envelope),this._modulator=new s.default.Synth,this._modulator.volume.value=-10,this.modulation=this._modulator.oscillator.set(t.modulation),this.modulationEnvelope=this._modulator.envelope.set(t.modulationEnvelope),this.frequency=new s.default.Signal(440,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this._modulationScale=new s.default.AudioToGain,this._modulationNode=new s.default.Gain,this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),this._readOnly(["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"]);},s.default.extend(s.default.AMSynth,s.default.Monophonic),s.default.AMSynth.defaults={harmonicity:3,detune:0,oscillator:{type:"sine"},envelope:{attack:.01,decay:.01,sustain:1,release:.5},modulation:{type:"square"},modulationEnvelope:{attack:.5,decay:0,sustain:1,release:.5}},s.default.AMSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t),this},s.default.AMSynth.prototype._triggerEnvelopeRelease=function(t){return this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this},s.default.AMSynth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"]),this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this.harmonicity.dispose(),this.harmonicity=null,this._modulationScale.dispose(),this._modulationScale=null,this._modulationNode.dispose(),this._modulationNode=null,this.oscillator=null,this.envelope=null,this.modulationEnvelope=null,this.modulation=null,this},e.default=s.default.AMSynth;},function(t,e,i){i.r(e);var s=i(0);i(70),i(16);s.default.Sequence=function(){var t=s.default.defaults(arguments,["callback","events","subdivision"],s.default.Sequence),e=t.events;if(delete t.events,s.default.Part.call(this,t),this._subdivision=this.toTicks(t.subdivision),s.default.isUndef(t.loopEnd)&&s.default.isDefined(e)&&(this._loopEnd=e.length*this._subdivision),this._loop=!0,s.default.isDefined(e))for(var i=0;i<e.length;i++)this.add(i,e[i]);},s.default.extend(s.default.Sequence,s.default.Part),s.default.Sequence.defaults={subdivision:"4n"},Object.defineProperty(s.default.Sequence.prototype,"subdivision",{get:function(){return s.default.Ticks(this._subdivision).toSeconds()}}),s.default.Sequence.prototype.at=function(t,e){return s.default.isArray(e)&&this.remove(t),s.default.Part.prototype.at.call(this,this._indexTime(t),e)},s.default.Sequence.prototype.add=function(t,e){if(null===e)return this;if(s.default.isArray(e)){var i=Math.round(this._subdivision/e.length);e=new s.default.Sequence(this._tick.bind(this),e,s.default.Ticks(i));}return s.default.Part.prototype.add.call(this,this._indexTime(t),e),this},s.default.Sequence.prototype.remove=function(t,e){return s.default.Part.prototype.remove.call(this,this._indexTime(t),e),this},s.default.Sequence.prototype._indexTime=function(t){return t instanceof s.default.TransportTime?t:s.default.Ticks(t*this._subdivision+this.startOffset).toSeconds()},s.default.Sequence.prototype.dispose=function(){return s.default.Part.prototype.dispose.call(this),this},e.default=s.default.Sequence;},function(t,e,i){i.r(e);var s=i(0);i(71),i(79);s.default.Pattern=function(){var t=s.default.defaults(arguments,["callback","values","pattern"],s.default.Pattern);s.default.Loop.call(this,t),this._pattern=new s.default.CtrlPattern({values:t.values,type:t.pattern,index:t.index});},s.default.extend(s.default.Pattern,s.default.Loop),s.default.Pattern.defaults={pattern:s.default.CtrlPattern.Type.Up,callback:s.default.noOp,values:[]},s.default.Pattern.prototype._tick=function(t){this.callback(t,this._pattern.value),this._pattern.next();},Object.defineProperty(s.default.Pattern.prototype,"index",{get:function(){return this._pattern.index},set:function(t){this._pattern.index=t;}}),Object.defineProperty(s.default.Pattern.prototype,"values",{get:function(){return this._pattern.values},set:function(t){this._pattern.values=t;}}),Object.defineProperty(s.default.Pattern.prototype,"value",{get:function(){return this._pattern.value}}),Object.defineProperty(s.default.Pattern.prototype,"pattern",{get:function(){return this._pattern.type},set:function(t){this._pattern.type=t;}}),s.default.Pattern.prototype.dispose=function(){s.default.Loop.prototype.dispose.call(this),this._pattern.dispose(),this._pattern=null;},e.default=s.default.Pattern;},function(t,e,i){i.r(e);var s=i(0);i(8),i(18),i(12);s.default.Vibrato=function(){var t=s.default.defaults(arguments,["frequency","depth"],s.default.Vibrato);s.default.Effect.call(this,t),this._delayNode=new s.default.Delay(0,t.maxDelay),this._lfo=new s.default.LFO({type:t.type,min:0,max:t.maxDelay,frequency:t.frequency,phase:-90}).start().connect(this._delayNode.delayTime),this.frequency=this._lfo.frequency,this.depth=this._lfo.amplitude,this.depth.value=t.depth,this._readOnly(["frequency","depth"]),this.effectSend.chain(this._delayNode,this.effectReturn);},s.default.extend(s.default.Vibrato,s.default.Effect),s.default.Vibrato.defaults={maxDelay:.005,frequency:5,depth:.1,type:"sine"},Object.defineProperty(s.default.Vibrato.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t;}}),s.default.Vibrato.prototype.dispose=function(){s.default.Effect.prototype.dispose.call(this),this._delayNode.dispose(),this._delayNode=null,this._lfo.dispose(),this._lfo=null,this._writable(["frequency","depth"]),this.frequency=null,this.depth=null;},e.default=s.default.Vibrato;},function(t,e,i){i.r(e);var s=i(0);i(12),i(15);s.default.Tremolo=function(){var t=s.default.defaults(arguments,["frequency","depth"],s.default.Tremolo);s.default.StereoEffect.call(this,t),this._lfoL=new s.default.LFO({phase:t.spread,min:1,max:0}),this._lfoR=new s.default.LFO({phase:t.spread,min:1,max:0}),this._amplitudeL=new s.default.Gain,this._amplitudeR=new s.default.Gain,this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.depth=new s.default.Signal(t.depth,s.default.Type.NormalRange),this._readOnly(["frequency","depth"]),this.effectSendL.chain(this._amplitudeL,this.effectReturnL),this.effectSendR.chain(this._amplitudeR,this.effectReturnR),this._lfoL.connect(this._amplitudeL.gain),this._lfoR.connect(this._amplitudeR.gain),this.frequency.fan(this._lfoL.frequency,this._lfoR.frequency),this.depth.fan(this._lfoR.amplitude,this._lfoL.amplitude),this.type=t.type,this.spread=t.spread;},s.default.extend(s.default.Tremolo,s.default.StereoEffect),s.default.Tremolo.defaults={frequency:10,type:"sine",depth:.5,spread:180},s.default.Tremolo.prototype.start=function(t){return this._lfoL.start(t),this._lfoR.start(t),this},s.default.Tremolo.prototype.stop=function(t){return this._lfoL.stop(t),this._lfoR.stop(t),this},s.default.Tremolo.prototype.sync=function(t){return this._lfoL.sync(t),this._lfoR.sync(t),s.default.Transport.syncSignal(this.frequency),this},s.default.Tremolo.prototype.unsync=function(){return this._lfoL.unsync(),this._lfoR.unsync(),s.default.Transport.unsyncSignal(this.frequency),this},Object.defineProperty(s.default.Tremolo.prototype,"type",{get:function(){return this._lfoL.type},set:function(t){this._lfoL.type=t,this._lfoR.type=t;}}),Object.defineProperty(s.default.Tremolo.prototype,"spread",{get:function(){return this._lfoR.phase-this._lfoL.phase},set:function(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90;}}),s.default.Tremolo.prototype.dispose=function(){return s.default.StereoEffect.prototype.dispose.call(this),this._writable(["frequency","depth"]),this._lfoL.dispose(),this._lfoL=null,this._lfoR.dispose(),this._lfoR=null,this._amplitudeL.dispose(),this._amplitudeL=null,this._amplitudeR.dispose(),this._amplitudeR=null,this.frequency=null,this.depth=null,this},e.default=s.default.Tremolo;},function(t,e,i){i.r(e);var s=i(0);i(73),i(2),i(5),i(13);s.default.StereoWidener=function(){var t=s.default.defaults(arguments,["width"],s.default.StereoWidener);s.default.MidSideEffect.call(this,t),this.width=new s.default.Signal(t.width,s.default.Type.NormalRange),this._readOnly(["width"]),this._twoTimesWidthMid=new s.default.Multiply(2),this._twoTimesWidthSide=new s.default.Multiply(2),this._midMult=new s.default.Multiply,this._twoTimesWidthMid.connect(this._midMult,0,1),this.midSend.chain(this._midMult,this.midReturn),this._oneMinusWidth=new s.default.Subtract,this._oneMinusWidth.connect(this._twoTimesWidthMid),s.default.connect(this.context.getConstant(1),this._oneMinusWidth,0,0),this.width.connect(this._oneMinusWidth,0,1),this._sideMult=new s.default.Multiply,this.width.connect(this._twoTimesWidthSide),this._twoTimesWidthSide.connect(this._sideMult,0,1),this.sideSend.chain(this._sideMult,this.sideReturn);},s.default.extend(s.default.StereoWidener,s.default.MidSideEffect),s.default.StereoWidener.defaults={width:.5},s.default.StereoWidener.prototype.dispose=function(){return s.default.MidSideEffect.prototype.dispose.call(this),this._writable(["width"]),this.width.dispose(),this.width=null,this._midMult.dispose(),this._midMult=null,this._sideMult.dispose(),this._sideMult=null,this._twoTimesWidthMid.dispose(),this._twoTimesWidthMid=null,this._twoTimesWidthSide.dispose(),this._twoTimesWidthSide=null,this._oneMinusWidth.dispose(),this._oneMinusWidth=null,this},e.default=s.default.StereoWidener;},function(t,e,i){i.r(e);var s=i(0);i(15),i(33),i(3);s.default.StereoFeedbackEffect=function(){var t=s.default.defaults(arguments,["feedback"],s.default.FeedbackEffect);s.default.StereoEffect.call(this,t),this.feedback=new s.default.Signal(t.feedback,s.default.Type.NormalRange),this._feedbackL=new s.default.Gain,this._feedbackR=new s.default.Gain,this.effectReturnL.chain(this._feedbackL,this.effectSendL),this.effectReturnR.chain(this._feedbackR,this.effectSendR),this.feedback.fan(this._feedbackL.gain,this._feedbackR.gain),this._readOnly(["feedback"]);},s.default.extend(s.default.StereoFeedbackEffect,s.default.StereoEffect),s.default.StereoFeedbackEffect.prototype.dispose=function(){return s.default.StereoEffect.prototype.dispose.call(this),this._writable(["feedback"]),this.feedback.dispose(),this.feedback=null,this._feedbackL.dispose(),this._feedbackL=null,this._feedbackR.dispose(),this._feedbackR=null,this},e.default=s.default.StereoFeedbackEffect;},function(t,e,i){i.r(e);var s=i(0);i(77),i(9),i(10),i(39),i(3),i(74);s.default.Reverb=function(){var t=s.default.defaults(arguments,["decay"],s.default.Reverb);s.default.Effect.call(this,t),this._convolver=this.context.createConvolver(),this.decay=t.decay,this.preDelay=t.preDelay,this.connectEffect(this._convolver);},s.default.extend(s.default.Reverb,s.default.Effect),s.default.Reverb.defaults={decay:1.5,preDelay:.01},s.default.Reverb.prototype.generate=function(){return s.default.Offline(function(){var t=new s.default.Noise,e=new s.default.Noise,i=new s.default.Merge;t.connect(i.left),e.connect(i.right);var n=(new s.default.Gain).toMaster();i.connect(n),t.start(0),e.start(0),n.gain.setValueAtTime(0,0),n.gain.setValueAtTime(1,this.preDelay),n.gain.exponentialApproachValueAtTime(0,this.preDelay,this.decay+this.preDelay);}.bind(this),this.decay+this.preDelay).then(function(t){return this._convolver.buffer=t.get(),this}.bind(this))},s.default.Reverb.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._convolver.disconnect(),this._convolver=null,this},e.default=s.default.Reverb;},function(t,e,i){i.r(e);var s=i(0);i(12),i(23),i(2),i(33),i(18);s.default.PitchShift=function(){var t=s.default.defaults(arguments,["pitch"],s.default.PitchShift);s.default.FeedbackEffect.call(this,t),this._frequency=new s.default.Signal(0),this._delayA=new s.default.Delay(0,1),this._lfoA=new s.default.LFO({min:0,max:.1,type:"sawtooth"}).connect(this._delayA.delayTime),this._delayB=new s.default.Delay(0,1),this._lfoB=new s.default.LFO({min:0,max:.1,type:"sawtooth",phase:180}).connect(this._delayB.delayTime),this._crossFade=new s.default.CrossFade,this._crossFadeLFO=new s.default.LFO({min:0,max:1,type:"triangle",phase:90}).connect(this._crossFade.fade),this._feedbackDelay=new s.default.Delay(t.delayTime),this.delayTime=this._feedbackDelay.delayTime,this._readOnly("delayTime"),this._pitch=t.pitch,this._windowSize=t.windowSize,this._delayA.connect(this._crossFade.a),this._delayB.connect(this._crossFade.b),this._frequency.fan(this._lfoA.frequency,this._lfoB.frequency,this._crossFadeLFO.frequency),this.effectSend.fan(this._delayA,this._delayB),this._crossFade.chain(this._feedbackDelay,this.effectReturn);var e=this.now();this._lfoA.start(e),this._lfoB.start(e),this._crossFadeLFO.start(e),this.windowSize=this._windowSize;},s.default.extend(s.default.PitchShift,s.default.FeedbackEffect),s.default.PitchShift.defaults={pitch:0,windowSize:.1,delayTime:0,feedback:0},Object.defineProperty(s.default.PitchShift.prototype,"pitch",{get:function(){return this._pitch},set:function(t){this._pitch=t;var e=0;t<0?(this._lfoA.min=0,this._lfoA.max=this._windowSize,this._lfoB.min=0,this._lfoB.max=this._windowSize,e=s.default.intervalToFrequencyRatio(t-1)+1):(this._lfoA.min=this._windowSize,this._lfoA.max=0,this._lfoB.min=this._windowSize,this._lfoB.max=0,e=s.default.intervalToFrequencyRatio(t)-1),this._frequency.value=e*(1.2/this._windowSize);}}),Object.defineProperty(s.default.PitchShift.prototype,"windowSize",{get:function(){return this._windowSize},set:function(t){this._windowSize=this.toSeconds(t),this.pitch=this._pitch;}}),s.default.PitchShift.prototype.dispose=function(){return s.default.FeedbackEffect.prototype.dispose.call(this),this._frequency.dispose(),this._frequency=null,this._delayA.disconnect(),this._delayA=null,this._delayB.disconnect(),this._delayB=null,this._lfoA.dispose(),this._lfoA=null,this._lfoB.dispose(),this._lfoB=null,this._crossFade.dispose(),this._crossFade=null,this._crossFadeLFO.dispose(),this._crossFadeLFO=null,this._writable("delayTime"),this._feedbackDelay.dispose(),this._feedbackDelay=null,this.delayTime=null,this},e.default=s.default.PitchShift;},function(t,e,i){i.r(e);var s=i(0);i(72),i(2),i(18);s.default.PingPongDelay=function(){var t=s.default.defaults(arguments,["delayTime","feedback"],s.default.PingPongDelay);s.default.StereoXFeedbackEffect.call(this,t),this._leftDelay=new s.default.Delay(0,t.maxDelayTime),this._rightDelay=new s.default.Delay(0,t.maxDelayTime),this._rightPreDelay=new s.default.Delay(0,t.maxDelayTime),this.delayTime=new s.default.Signal(t.delayTime,s.default.Type.Time),this.effectSendL.chain(this._leftDelay,this.effectReturnL),this.effectSendR.chain(this._rightPreDelay,this._rightDelay,this.effectReturnR),this.delayTime.fan(this._leftDelay.delayTime,this._rightDelay.delayTime,this._rightPreDelay.delayTime),this._feedbackLR.disconnect(),this._feedbackLR.connect(this._rightDelay),this._readOnly(["delayTime"]);},s.default.extend(s.default.PingPongDelay,s.default.StereoXFeedbackEffect),s.default.PingPongDelay.defaults={delayTime:.25,maxDelayTime:1},s.default.PingPongDelay.prototype.dispose=function(){return s.default.StereoXFeedbackEffect.prototype.dispose.call(this),this._leftDelay.dispose(),this._leftDelay=null,this._rightDelay.dispose(),this._rightDelay=null,this._rightPreDelay.dispose(),this._rightPreDelay=null,this._writable(["delayTime"]),this.delayTime.dispose(),this.delayTime=null,this},e.default=s.default.PingPongDelay;},function(t,e,i){i.r(e);var s=i(0);i(12),i(9),i(15);s.default.Phaser=function(){var t=s.default.defaults(arguments,["frequency","octaves","baseFrequency"],s.default.Phaser);s.default.StereoEffect.call(this,t),this._lfoL=new s.default.LFO(t.frequency,0,1),this._lfoR=new s.default.LFO(t.frequency,0,1),this._lfoR.phase=180,this._baseFrequency=t.baseFrequency,this._octaves=t.octaves,this.Q=new s.default.Signal(t.Q,s.default.Type.Positive),this._filtersL=this._makeFilters(t.stages,this._lfoL,this.Q),this._filtersR=this._makeFilters(t.stages,this._lfoR,this.Q),this.frequency=this._lfoL.frequency,this.frequency.value=t.frequency,this.effectSendL.connect(this._filtersL[0]),this.effectSendR.connect(this._filtersR[0]),s.default.connect(this._filtersL[t.stages-1],this.effectReturnL),s.default.connect(this._filtersR[t.stages-1],this.effectReturnR),this._lfoL.frequency.connect(this._lfoR.frequency),this.baseFrequency=t.baseFrequency,this.octaves=t.octaves,this._lfoL.start(),this._lfoR.start(),this._readOnly(["frequency","Q"]);},s.default.extend(s.default.Phaser,s.default.StereoEffect),s.default.Phaser.defaults={frequency:.5,octaves:3,stages:10,Q:10,baseFrequency:350},s.default.Phaser.prototype._makeFilters=function(t,e,i){for(var n=new Array(t),o=0;o<t;o++){var a=this.context.createBiquadFilter();a.type="allpass",i.connect(a.Q),e.connect(a.frequency),n[o]=a;}return s.default.connectSeries.apply(s.default,n),n},Object.defineProperty(s.default.Phaser.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t;var e=this._baseFrequency*Math.pow(2,t);this._lfoL.max=e,this._lfoR.max=e;}}),Object.defineProperty(s.default.Phaser.prototype,"baseFrequency",{get:function(){return this._baseFrequency},set:function(t){this._baseFrequency=t,this._lfoL.min=t,this._lfoR.min=t,this.octaves=this._octaves;}}),s.default.Phaser.prototype.dispose=function(){s.default.StereoEffect.prototype.dispose.call(this),this._writable(["frequency","Q"]),this.Q.dispose(),this.Q=null,this._lfoL.dispose(),this._lfoL=null,this._lfoR.dispose(),this._lfoR=null;for(var t=0;t<this._filtersL.length;t++)this._filtersL[t].disconnect(),this._filtersL[t]=null;this._filtersL=null;for(var e=0;e<this._filtersR.length;e++)this._filtersR[e].disconnect(),this._filtersR[e]=null;return this._filtersR=null,this.frequency=null,this},e.default=s.default.Phaser;},function(t,e,i){i.r(e);var s=i(0),n=(i(59),i(15),i(26),[.06748,.06404,.08212,.09004]),o=[.773,.802,.753,.733],a=[347,113,37];s.default.JCReverb=function(){var t=s.default.defaults(arguments,["roomSize"],s.default.JCReverb);s.default.StereoEffect.call(this,t),this.roomSize=new s.default.Signal(t.roomSize,s.default.Type.NormalRange),this._scaleRoomSize=new s.default.Scale(-.733,.197),this._allpassFilters=[],this._feedbackCombFilters=[];for(var e=0;e<a.length;e++){var i=this.context.createBiquadFilter();i.type="allpass",i.frequency.value=a[e],this._allpassFilters.push(i);}for(var r=0;r<n.length;r++){var l=new s.default.FeedbackCombFilter(n[r],.1);this._scaleRoomSize.connect(l.resonance),l.resonance.value=o[r],s.default.connect(this._allpassFilters[this._allpassFilters.length-1],l),r<n.length/2?l.connect(this.effectReturnL):l.connect(this.effectReturnR),this._feedbackCombFilters.push(l);}this.roomSize.connect(this._scaleRoomSize),s.default.connectSeries.apply(s.default,this._allpassFilters),this.effectSendL.connect(this._allpassFilters[0]),this.effectSendR.connect(this._allpassFilters[0]),this._readOnly(["roomSize"]);},s.default.extend(s.default.JCReverb,s.default.StereoEffect),s.default.JCReverb.defaults={roomSize:.5},s.default.JCReverb.prototype.dispose=function(){s.default.StereoEffect.prototype.dispose.call(this);for(var t=0;t<this._allpassFilters.length;t++)this._allpassFilters[t].disconnect(),this._allpassFilters[t]=null;this._allpassFilters=null;for(var e=0;e<this._feedbackCombFilters.length;e++)this._feedbackCombFilters[e].dispose(),this._feedbackCombFilters[e]=null;return this._feedbackCombFilters=null,this._writable(["roomSize"]),this.roomSize.dispose(),this.roomSize=null,this._scaleRoomSize.dispose(),this._scaleRoomSize=null,this},e.default=s.default.JCReverb;},function(t,e,i){i.r(e);var s=i(0),n=(i(54),i(15),i(2),i(19),i(10),i(42),[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100]),o=[225,556,441,341];s.default.Freeverb=function(){var t=s.default.defaults(arguments,["roomSize","dampening"],s.default.Freeverb);s.default.StereoEffect.call(this,t),this.roomSize=new s.default.Signal(t.roomSize,s.default.Type.NormalRange),this.dampening=new s.default.Signal(t.dampening,s.default.Type.Frequency),this._combFilters=[],this._allpassFiltersL=[],this._allpassFiltersR=[];for(var e=0;e<o.length;e++){var i=this.context.createBiquadFilter();i.type="allpass",i.frequency.value=o[e],this._allpassFiltersL.push(i);}for(var a=0;a<o.length;a++){var r=this.context.createBiquadFilter();r.type="allpass",r.frequency.value=o[a],this._allpassFiltersR.push(r);}for(var l=0;l<n.length;l++){var u=new s.default.LowpassCombFilter(n[l]);l<n.length/2?this.effectSendL.chain(u,this._allpassFiltersL[0]):this.effectSendR.chain(u,this._allpassFiltersR[0]),this.roomSize.connect(u.resonance),this.dampening.connect(u.dampening),this._combFilters.push(u);}s.default.connectSeries.apply(s.default,this._allpassFiltersL),s.default.connectSeries.apply(s.default,this._allpassFiltersR),s.default.connect(this._allpassFiltersL[this._allpassFiltersL.length-1],this.effectReturnL),s.default.connect(this._allpassFiltersR[this._allpassFiltersR.length-1],this.effectReturnR),this._readOnly(["roomSize","dampening"]);},s.default.extend(s.default.Freeverb,s.default.StereoEffect),s.default.Freeverb.defaults={roomSize:.7,dampening:3e3},s.default.Freeverb.prototype.dispose=function(){s.default.StereoEffect.prototype.dispose.call(this);for(var t=0;t<this._allpassFiltersL.length;t++)this._allpassFiltersL[t].disconnect(),this._allpassFiltersL[t]=null;this._allpassFiltersL=null;for(var e=0;e<this._allpassFiltersR.length;e++)this._allpassFiltersR[e].disconnect(),this._allpassFiltersR[e]=null;this._allpassFiltersR=null;for(var i=0;i<this._combFilters.length;i++)this._combFilters[i].dispose(),this._combFilters[i]=null;return this._combFilters=null,this._writable(["roomSize","dampening"]),this.roomSize.dispose(),this.roomSize=null,this.dampening.dispose(),this.dampening=null,this},e.default=s.default.Freeverb;},function(t,e,i){i.r(e);var s=i(0);i(33),i(2),i(18);s.default.FeedbackDelay=function(){var t=s.default.defaults(arguments,["delayTime","feedback"],s.default.FeedbackDelay);s.default.FeedbackEffect.call(this,t),this._delayNode=new s.default.Delay(t.delayTime,t.maxDelay),this.delayTime=this._delayNode.delayTime,this.connectEffect(this._delayNode),this._readOnly(["delayTime"]);},s.default.extend(s.default.FeedbackDelay,s.default.FeedbackEffect),s.default.FeedbackDelay.defaults={delayTime:.25,maxDelay:1},s.default.FeedbackDelay.prototype.dispose=function(){return s.default.FeedbackEffect.prototype.dispose.call(this),this._delayNode.dispose(),this._delayNode=null,this._writable(["delayTime"]),this.delayTime=null,this},e.default=s.default.FeedbackDelay;},function(t,e,i){i.r(e);var s=i(0);i(8),i(7);s.default.Distortion=function(){var t=s.default.defaults(arguments,["distortion"],s.default.Distortion);s.default.Effect.call(this,t),this._shaper=new s.default.WaveShaper(4096),this._distortion=t.distortion,this.connectEffect(this._shaper),this.distortion=t.distortion,this.oversample=t.oversample;},s.default.extend(s.default.Distortion,s.default.Effect),s.default.Distortion.defaults={distortion:.4,oversample:"none"},Object.defineProperty(s.default.Distortion.prototype,"distortion",{get:function(){return this._distortion},set:function(t){this._distortion=t;var e=100*t,i=Math.PI/180;this._shaper.setMap(function(t){return Math.abs(t)<.001?0:(3+e)*t*20*i/(Math.PI+e*Math.abs(t))});}}),Object.defineProperty(s.default.Distortion.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){this._shaper.oversample=t;}}),s.default.Distortion.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this},e.default=s.default.Distortion;},function(t,e,i){i.r(e);var s=i(0);i(12),i(15),i(18);s.default.Chorus=function(){var t=s.default.defaults(arguments,["frequency","delayTime","depth"],s.default.Chorus);s.default.StereoEffect.call(this,t),this._depth=t.depth,this._delayTime=t.delayTime/1e3,this._lfoL=new s.default.LFO({frequency:t.frequency,min:0,max:1}),this._lfoR=new s.default.LFO({frequency:t.frequency,min:0,max:1,phase:180}),this._delayNodeL=new s.default.Delay,this._delayNodeR=new s.default.Delay,this.frequency=this._lfoL.frequency,this.effectSendL.chain(this._delayNodeL,this.effectReturnL),this.effectSendR.chain(this._delayNodeR,this.effectReturnR),this.effectSendL.connect(this.effectReturnL),this.effectSendR.connect(this.effectReturnR),this._lfoL.connect(this._delayNodeL.delayTime),this._lfoR.connect(this._delayNodeR.delayTime),this._lfoL.start(),this._lfoR.start(),this._lfoL.frequency.connect(this._lfoR.frequency),this.depth=this._depth,this.frequency.value=t.frequency,this.type=t.type,this._readOnly(["frequency"]),this.spread=t.spread;},s.default.extend(s.default.Chorus,s.default.StereoEffect),s.default.Chorus.defaults={frequency:1.5,delayTime:3.5,depth:.7,type:"sine",spread:180},Object.defineProperty(s.default.Chorus.prototype,"depth",{get:function(){return this._depth},set:function(t){this._depth=t;var e=this._delayTime*t;this._lfoL.min=Math.max(this._delayTime-e,0),this._lfoL.max=this._delayTime+e,this._lfoR.min=Math.max(this._delayTime-e,0),this._lfoR.max=this._delayTime+e;}}),Object.defineProperty(s.default.Chorus.prototype,"delayTime",{get:function(){return 1e3*this._delayTime},set:function(t){this._delayTime=t/1e3,this.depth=this._depth;}}),Object.defineProperty(s.default.Chorus.prototype,"type",{get:function(){return this._lfoL.type},set:function(t){this._lfoL.type=t,this._lfoR.type=t;}}),Object.defineProperty(s.default.Chorus.prototype,"spread",{get:function(){return this._lfoR.phase-this._lfoL.phase},set:function(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90;}}),s.default.Chorus.prototype.dispose=function(){return s.default.StereoEffect.prototype.dispose.call(this),this._lfoL.dispose(),this._lfoL=null,this._lfoR.dispose(),this._lfoR=null,this._delayNodeL.dispose(),this._delayNodeL=null,this._delayNodeR.dispose(),this._delayNodeR=null,this._writable("frequency"),this.frequency=null,this},e.default=s.default.Chorus;},function(t,e,i){i.r(e);var s=i(0);i(8),i(7);s.default.Chebyshev=function(){var t=s.default.defaults(arguments,["order"],s.default.Chebyshev);s.default.Effect.call(this,t),this._shaper=new s.default.WaveShaper(4096),this._order=t.order,this.connectEffect(this._shaper),this.order=t.order,this.oversample=t.oversample;},s.default.extend(s.default.Chebyshev,s.default.Effect),s.default.Chebyshev.defaults={order:1,oversample:"none"},s.default.Chebyshev.prototype._getCoefficient=function(t,e,i){return i.hasOwnProperty(e)?i[e]:(i[e]=0===e?0:1===e?t:2*t*this._getCoefficient(t,e-1,i)-this._getCoefficient(t,e-2,i),i[e])},Object.defineProperty(s.default.Chebyshev.prototype,"order",{get:function(){return this._order},set:function(t){this._order=t;for(var e=new Array(4096),i=e.length,s=0;s<i;++s){var n=2*s/i-1;e[s]=0===n?0:this._getCoefficient(n,t,{});}this._shaper.curve=e;}}),Object.defineProperty(s.default.Chebyshev.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){this._shaper.oversample=t;}}),s.default.Chebyshev.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this},e.default=s.default.Chebyshev;},function(t,e,i){i.r(e);var s=i(0);i(8),i(13),i(75);s.default.BitCrusher=function(){var t=s.default.defaults(arguments,["bits"],s.default.BitCrusher);s.default.Effect.call(this,t);var e=1/Math.pow(2,t.bits-1);this._subtract=new s.default.Subtract,this._modulo=new s.default.Modulo(e),this._bits=t.bits,this.effectSend.fan(this._subtract,this._modulo),this._modulo.connect(this._subtract,0,1),this._subtract.connect(this.effectReturn);},s.default.extend(s.default.BitCrusher,s.default.Effect),s.default.BitCrusher.defaults={bits:4},Object.defineProperty(s.default.BitCrusher.prototype,"bits",{get:function(){return this._bits},set:function(t){this._bits=t;var e=1/Math.pow(2,t-1);this._modulo.value=e;}}),s.default.BitCrusher.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._subtract.dispose(),this._subtract=null,this._modulo.dispose(),this._modulo=null,this},e.default=s.default.BitCrusher;},function(t,e,i){i.r(e);var s=i(0);i(58),i(42),i(8),i(9);s.default.AutoWah=function(){var t=s.default.defaults(arguments,["baseFrequency","octaves","sensitivity"],s.default.AutoWah);s.default.Effect.call(this,t),this.follower=new s.default.Follower(t.follower),this._sweepRange=new s.default.ScaleExp(0,1,.5),this._baseFrequency=t.baseFrequency,this._octaves=t.octaves,this._inputBoost=new s.default.Gain,this._bandpass=new s.default.Filter({rolloff:-48,frequency:0,Q:t.Q}),this._peaking=new s.default.Filter(0,"peaking"),this._peaking.gain.value=t.gain,this.gain=this._peaking.gain,this.Q=this._bandpass.Q,this.effectSend.chain(this._inputBoost,this.follower,this._sweepRange),this._sweepRange.connect(this._bandpass.frequency),this._sweepRange.connect(this._peaking.frequency),this.effectSend.chain(this._bandpass,this._peaking,this.effectReturn),this._setSweepRange(),this.sensitivity=t.sensitivity,this._readOnly(["gain","Q"]);},s.default.extend(s.default.AutoWah,s.default.Effect),s.default.AutoWah.defaults={baseFrequency:100,octaves:6,sensitivity:0,Q:2,gain:2,follower:{attack:.3,release:.5}},Object.defineProperty(s.default.AutoWah.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._setSweepRange();}}),Object.defineProperty(s.default.AutoWah.prototype,"baseFrequency",{get:function(){return this._baseFrequency},set:function(t){this._baseFrequency=t,this._setSweepRange();}}),Object.defineProperty(s.default.AutoWah.prototype,"sensitivity",{get:function(){return s.default.gainToDb(1/this._inputBoost.gain.value)},set:function(t){this._inputBoost.gain.value=1/s.default.dbToGain(t);}}),s.default.AutoWah.prototype._setSweepRange=function(){this._sweepRange.min=this._baseFrequency,this._sweepRange.max=Math.min(this._baseFrequency*Math.pow(2,this._octaves),this.context.sampleRate/2);},s.default.AutoWah.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this.follower.dispose(),this.follower=null,this._sweepRange.dispose(),this._sweepRange=null,this._bandpass.dispose(),this._bandpass=null,this._peaking.dispose(),this._peaking=null,this._inputBoost.dispose(),this._inputBoost=null,this._writable(["gain","Q"]),this.gain=null,this.Q=null,this},e.default=s.default.AutoWah;},function(t,e,i){i.r(e);var s=i(0);i(8),i(12),i(48);s.default.AutoPanner=function(){var t=s.default.defaults(arguments,["frequency"],s.default.AutoPanner);s.default.Effect.call(this,t),this._lfo=new s.default.LFO({frequency:t.frequency,amplitude:t.depth,min:-1,max:1}),this.depth=this._lfo.amplitude,this._panner=new s.default.Panner,this.frequency=this._lfo.frequency,this.connectEffect(this._panner),this._lfo.connect(this._panner.pan),this.type=t.type,this._readOnly(["depth","frequency"]);},s.default.extend(s.default.AutoPanner,s.default.Effect),s.default.AutoPanner.defaults={frequency:1,type:"sine",depth:1},s.default.AutoPanner.prototype.start=function(t){return this._lfo.start(t),this},s.default.AutoPanner.prototype.stop=function(t){return this._lfo.stop(t),this},s.default.AutoPanner.prototype.sync=function(t){return this._lfo.sync(t),this},s.default.AutoPanner.prototype.unsync=function(){return this._lfo.unsync(),this},Object.defineProperty(s.default.AutoPanner.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t;}}),s.default.AutoPanner.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._lfo.dispose(),this._lfo=null,this._panner.dispose(),this._panner=null,this._writable(["depth","frequency"]),this.frequency=null,this.depth=null,this},e.default=s.default.AutoPanner;},function(t,e,i){i.r(e);var s=i(0);i(8),i(12),i(9);s.default.AutoFilter=function(){var t=s.default.defaults(arguments,["frequency","baseFrequency","octaves"],s.default.AutoFilter);s.default.Effect.call(this,t),this._lfo=new s.default.LFO({frequency:t.frequency,amplitude:t.depth}),this.depth=this._lfo.amplitude,this.frequency=this._lfo.frequency,this.filter=new s.default.Filter(t.filter),this._octaves=0,this.connectEffect(this.filter),this._lfo.connect(this.filter.frequency),this.type=t.type,this._readOnly(["frequency","depth"]),this.octaves=t.octaves,this.baseFrequency=t.baseFrequency;},s.default.extend(s.default.AutoFilter,s.default.Effect),s.default.AutoFilter.defaults={frequency:1,type:"sine",depth:1,baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}},s.default.AutoFilter.prototype.start=function(t){return this._lfo.start(t),this},s.default.AutoFilter.prototype.stop=function(t){return this._lfo.stop(t),this},s.default.AutoFilter.prototype.sync=function(t){return this._lfo.sync(t),this},s.default.AutoFilter.prototype.unsync=function(){return this._lfo.unsync(),this},Object.defineProperty(s.default.AutoFilter.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t;}}),Object.defineProperty(s.default.AutoFilter.prototype,"baseFrequency",{get:function(){return this._lfo.min},set:function(t){this._lfo.min=this.toFrequency(t),this.octaves=this._octaves;}}),Object.defineProperty(s.default.AutoFilter.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._lfo.max=this.baseFrequency*Math.pow(2,t);}}),s.default.AutoFilter.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._lfo.dispose(),this._lfo=null,this.filter.dispose(),this.filter=null,this._writable(["frequency","depth"]),this.frequency=null,this.depth=null,this},e.default=s.default.AutoFilter;},function(t,e,i){i.r(e);var s=i(0);i(23),i(10),i(19),i(2),i(22),i(28);s.default.Listener=function(){s.default.call(this),this._orientation=[0,0,0,0,0,0],this._position=[0,0,0],s.default.getContext(function(){this.set(n.defaults);}.bind(this));},s.default.extend(s.default.Listener),s.default.Listener.defaults={positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:1,upX:0,upY:1,upZ:0},s.default.Listener.prototype.isListener=!0,s.default.Listener.prototype._rampTimeConstant=.01,s.default.Listener.prototype.setPosition=function(t,e,i){if(this.context.rawContext.listener.positionX){var s=this.now();this.context.rawContext.listener.positionX.setTargetAtTime(t,s,this._rampTimeConstant),this.context.rawContext.listener.positionY.setTargetAtTime(e,s,this._rampTimeConstant),this.context.rawContext.listener.positionZ.setTargetAtTime(i,s,this._rampTimeConstant);}else this.context.rawContext.listener.setPosition(t,e,i);return this._position=Array.prototype.slice.call(arguments),this},s.default.Listener.prototype.setOrientation=function(t,e,i,s,n,o){if(this.context.rawContext.listener.forwardX){var a=this.now();this.context.rawContext.listener.forwardX.setTargetAtTime(t,a,this._rampTimeConstant),this.context.rawContext.listener.forwardY.setTargetAtTime(e,a,this._rampTimeConstant),this.context.rawContext.listener.forwardZ.setTargetAtTime(i,a,this._rampTimeConstant),this.context.rawContext.listener.upX.setTargetAtTime(s,a,this._rampTimeConstant),this.context.rawContext.listener.upY.setTargetAtTime(n,a,this._rampTimeConstant),this.context.rawContext.listener.upZ.setTargetAtTime(o,a,this._rampTimeConstant);}else this.context.rawContext.listener.setOrientation(t,e,i,s,n,o);return this._orientation=Array.prototype.slice.call(arguments),this},Object.defineProperty(s.default.Listener.prototype,"positionX",{set:function(t){this._position[0]=t,this.setPosition.apply(this,this._position);},get:function(){return this._position[0]}}),Object.defineProperty(s.default.Listener.prototype,"positionY",{set:function(t){this._position[1]=t,this.setPosition.apply(this,this._position);},get:function(){return this._position[1]}}),Object.defineProperty(s.default.Listener.prototype,"positionZ",{set:function(t){this._position[2]=t,this.setPosition.apply(this,this._position);},get:function(){return this._position[2]}}),Object.defineProperty(s.default.Listener.prototype,"forwardX",{set:function(t){this._orientation[0]=t,this.setOrientation.apply(this,this._orientation);},get:function(){return this._orientation[0]}}),Object.defineProperty(s.default.Listener.prototype,"forwardY",{set:function(t){this._orientation[1]=t,this.setOrientation.apply(this,this._orientation);},get:function(){return this._orientation[1]}}),Object.defineProperty(s.default.Listener.prototype,"forwardZ",{set:function(t){this._orientation[2]=t,this.setOrientation.apply(this,this._orientation);},get:function(){return this._orientation[2]}}),Object.defineProperty(s.default.Listener.prototype,"upX",{set:function(t){this._orientation[3]=t,this.setOrientation.apply(this,this._orientation);},get:function(){return this._orientation[3]}}),Object.defineProperty(s.default.Listener.prototype,"upY",{set:function(t){this._orientation[4]=t,this.setOrientation.apply(this,this._orientation);},get:function(){return this._orientation[4]}}),Object.defineProperty(s.default.Listener.prototype,"upZ",{set:function(t){this._orientation[5]=t,this.setOrientation.apply(this,this._orientation);},get:function(){return this._orientation[5]}}),s.default.Listener.prototype.dispose=function(){return this._orientation=null,this._position=null,this};var n=s.default.Listener;s.default.Listener=new n,s.default.Context.on("init",function(t){t.listener&&t.listener.isListener?s.default.Listener=t.listener:s.default.Listener=new n;}),e.default=s.default.Listener;},function(t,e,i){i.r(e);var s=i(0);i(24);s.default.Draw=function(){s.default.call(this),this._events=new s.default.Timeline,this.expiration=.25,this.anticipation=.008,this._boundDrawLoop=this._drawLoop.bind(this);},s.default.extend(s.default.Draw),s.default.Draw.prototype.schedule=function(t,e){return this._events.add({callback:t,time:this.toSeconds(e)}),1===this._events.length&&requestAnimationFrame(this._boundDrawLoop),this},s.default.Draw.prototype.cancel=function(t){return this._events.cancel(this.toSeconds(t)),this},s.default.Draw.prototype._drawLoop=function(){for(var t=s.default.context.currentTime;this._events.length&&this._events.peek().time-this.anticipation<=t;){var e=this._events.shift();t-e.time<=this.expiration&&e.callback();}this._events.length>0&&requestAnimationFrame(this._boundDrawLoop);},s.default.Draw=new s.default.Draw,e.default=s.default.Draw;},function(t,e,i){i.r(e);var s=i(0),n=(i(3),{});s.default.prototype.send=function(t,e){n.hasOwnProperty(t)||(n[t]=this.context.createGain()),e=s.default.defaultArg(e,0);var i=new s.default.Gain(e,s.default.Type.Decibels);return this.connect(i),i.connect(n[t]),i},s.default.prototype.receive=function(t,e){return n.hasOwnProperty(t)||(n[t]=this.context.createGain()),s.default.connect(n[t],this,0,e),this},s.default.Context.on("init",function(t){t.buses?n=t.buses:(n={},t.buses=n);}),e.default=s.default;},function(t,e,i){i.r(e);var s=i(0);i(4);s.default.CtrlRandom=function(){var t=s.default.defaults(arguments,["min","max"],s.default.CtrlRandom);s.default.call(this),this.min=t.min,this.max=t.max,this.integer=t.integer;},s.default.extend(s.default.CtrlRandom),s.default.CtrlRandom.defaults={min:0,max:1,integer:!1},Object.defineProperty(s.default.CtrlRandom.prototype,"value",{get:function(){var t=this.toSeconds(this.min),e=this.toSeconds(this.max),i=Math.random(),s=i*t+(1-i)*e;return this.integer&&(s=Math.floor(s)),s}}),e.default=s.default.CtrlRandom;},function(t,e,i){i.r(e);var s=i(0);s.default.CtrlMarkov=function(t,e){s.default.call(this),this.values=s.default.defaultArg(t,{}),this.value=s.default.defaultArg(e,Object.keys(this.values)[0]);},s.default.extend(s.default.CtrlMarkov),s.default.CtrlMarkov.prototype.next=function(){if(this.values.hasOwnProperty(this.value)){var t=this.values[this.value];if(s.default.isArray(t))for(var e=this._getProbDistribution(t),i=Math.random(),n=0,o=0;o<e.length;o++){var a=e[o];if(i>n&&i<n+a){var r=t[o];s.default.isObject(r)?this.value=r.value:this.value=r;}n+=a;}else this.value=t;}return this.value},s.default.CtrlMarkov.prototype._getProbDistribution=function(t){for(var e=[],i=0,n=!1,o=0;o<t.length;o++){var a=t[o];s.default.isObject(a)?(n=!0,e[o]=a.probability):e[o]=1/t.length,i+=e[o];}if(n)for(var r=0;r<e.length;r++)e[r]=e[r]/i;return e},s.default.CtrlMarkov.prototype.dispose=function(){this.values=null;},e.default=s.default.CtrlMarkov;},function(t,e,i){i.r(e);var s=i(0);i(4);s.default.CtrlInterpolate=function(){var t=s.default.defaults(arguments,["values","index"],s.default.CtrlInterpolate);s.default.call(this),this.values=t.values,this.index=t.index;},s.default.extend(s.default.CtrlInterpolate),s.default.CtrlInterpolate.defaults={index:0,values:[]},Object.defineProperty(s.default.CtrlInterpolate.prototype,"value",{get:function(){var t=this.index;t=Math.min(t,this.values.length-1);var e=Math.floor(t),i=this.values[e],s=this.values[Math.ceil(t)];return this._interpolate(t-e,i,s)}}),s.default.CtrlInterpolate.prototype._interpolate=function(t,e,i){if(s.default.isArray(e)){for(var n=[],o=0;o<e.length;o++)n[o]=this._interpolate(t,e[o],i[o]);return n}if(s.default.isObject(e)){var a={};for(var r in e)a[r]=this._interpolate(t,e[r],i[r]);return a}return (1-t)*(e=this._toNumber(e))+t*(i=this._toNumber(i))},s.default.CtrlInterpolate.prototype._toNumber=function(t){return s.default.isNumber(t)?t:this.toSeconds(t)},s.default.CtrlInterpolate.prototype.dispose=function(){this.values=null;},e.default=s.default.CtrlInterpolate;},function(t,e,i){i.r(e);var s=i(0);i(36),i(1);s.default.Waveform=function(){var t=s.default.defaults(arguments,["size"],s.default.Waveform);t.type=s.default.Analyser.Type.Waveform,s.default.AudioNode.call(this),this._analyser=this.input=this.output=new s.default.Analyser(t);},s.default.extend(s.default.Waveform,s.default.AudioNode),s.default.Waveform.defaults={size:1024},s.default.Waveform.prototype.getValue=function(){return this._analyser.getValue()},Object.defineProperty(s.default.Waveform.prototype,"size",{get:function(){return this._analyser.size},set:function(t){this._analyser.size=t;}}),s.default.Waveform.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._analyser.dispose(),this._analyser=null;},e.default=s.default.Waveform;},function(t,e,i){i.r(e);var s=i(0);i(23),i(10),i(19),i(2),i(22),i(28),i(1);s.default.Panner3D=function(){var t=s.default.defaults(arguments,["positionX","positionY","positionZ"],s.default.Panner3D);s.default.AudioNode.call(this),this._panner=this.input=this.output=this.context.createPanner(),this._panner.panningModel=t.panningModel,this._panner.maxDistance=t.maxDistance,this._panner.distanceModel=t.distanceModel,this._panner.coneOuterGain=t.coneOuterGain,this._panner.coneOuterAngle=t.coneOuterAngle,this._panner.coneInnerAngle=t.coneInnerAngle,this._panner.refDistance=t.refDistance,this._panner.rolloffFactor=t.rolloffFactor,this._orientation=[t.orientationX,t.orientationY,t.orientationZ],this._position=[t.positionX,t.positionY,t.positionZ],this.orientationX=t.orientationX,this.orientationY=t.orientationY,this.orientationZ=t.orientationZ,this.positionX=t.positionX,this.positionY=t.positionY,this.positionZ=t.positionZ;},s.default.extend(s.default.Panner3D,s.default.AudioNode),s.default.Panner3D.defaults={positionX:0,positionY:0,positionZ:0,orientationX:0,orientationY:0,orientationZ:0,panningModel:"equalpower",maxDistance:1e4,distanceModel:"inverse",coneOuterGain:0,coneOuterAngle:360,coneInnerAngle:360,refDistance:1,rolloffFactor:1},s.default.Panner3D.prototype._rampTimeConstant=.01,s.default.Panner3D.prototype.setPosition=function(t,e,i){if(this._panner.positionX){var s=this.now();this._panner.positionX.setTargetAtTime(t,s,this._rampTimeConstant),this._panner.positionY.setTargetAtTime(e,s,this._rampTimeConstant),this._panner.positionZ.setTargetAtTime(i,s,this._rampTimeConstant);}else this._panner.setPosition(t,e,i);return this._position=Array.prototype.slice.call(arguments),this},s.default.Panner3D.prototype.setOrientation=function(t,e,i){if(this._panner.orientationX){var s=this.now();this._panner.orientationX.setTargetAtTime(t,s,this._rampTimeConstant),this._panner.orientationY.setTargetAtTime(e,s,this._rampTimeConstant),this._panner.orientationZ.setTargetAtTime(i,s,this._rampTimeConstant);}else this._panner.setOrientation(t,e,i);return this._orientation=Array.prototype.slice.call(arguments),this},Object.defineProperty(s.default.Panner3D.prototype,"positionX",{set:function(t){this._position[0]=t,this.setPosition.apply(this,this._position);},get:function(){return this._position[0]}}),Object.defineProperty(s.default.Panner3D.prototype,"positionY",{set:function(t){this._position[1]=t,this.setPosition.apply(this,this._position);},get:function(){return this._position[1]}}),Object.defineProperty(s.default.Panner3D.prototype,"positionZ",{set:function(t){this._position[2]=t,this.setPosition.apply(this,this._position);},get:function(){return this._position[2]}}),Object.defineProperty(s.default.Panner3D.prototype,"orientationX",{set:function(t){this._orientation[0]=t,this.setOrientation.apply(this,this._orientation);},get:function(){return this._orientation[0]}}),Object.defineProperty(s.default.Panner3D.prototype,"orientationY",{set:function(t){this._orientation[1]=t,this.setOrientation.apply(this,this._orientation);},get:function(){return this._orientation[1]}}),Object.defineProperty(s.default.Panner3D.prototype,"orientationZ",{set:function(t){this._orientation[2]=t,this.setOrientation.apply(this,this._orientation);},get:function(){return this._orientation[2]}}),s.default.Panner3D._aliasProperty=function(t){Object.defineProperty(s.default.Panner3D.prototype,t,{set:function(e){this._panner[t]=e;},get:function(){return this._panner[t]}});},s.default.Panner3D._aliasProperty("panningModel"),s.default.Panner3D._aliasProperty("refDistance"),s.default.Panner3D._aliasProperty("rolloffFactor"),s.default.Panner3D._aliasProperty("distanceModel"),s.default.Panner3D._aliasProperty("coneInnerAngle"),s.default.Panner3D._aliasProperty("coneOuterAngle"),s.default.Panner3D._aliasProperty("coneOuterGain"),s.default.Panner3D._aliasProperty("maxDistance"),s.default.Panner3D.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._panner.disconnect(),this._panner=null,this._orientation=null,this._position=null,this},e.default=s.default.Panner3D;},function(t,e,i){i.r(e);var s=i(0);i(60),i(43),i(1);s.default.MultibandCompressor=function(t){s.default.AudioNode.call(this),t=s.default.defaultArg(arguments,s.default.MultibandCompressor.defaults),this._splitter=this.input=new s.default.MultibandSplit({lowFrequency:t.lowFrequency,highFrequency:t.highFrequency}),this.lowFrequency=this._splitter.lowFrequency,this.highFrequency=this._splitter.highFrequency,this.output=new s.default.Gain,this.low=new s.default.Compressor(t.low),this.mid=new s.default.Compressor(t.mid),this.high=new s.default.Compressor(t.high),this._splitter.low.chain(this.low,this.output),this._splitter.mid.chain(this.mid,this.output),this._splitter.high.chain(this.high,this.output),this._readOnly(["high","mid","low","highFrequency","lowFrequency"]);},s.default.extend(s.default.MultibandCompressor,s.default.AudioNode),s.default.MultibandCompressor.defaults={low:s.default.Compressor.defaults,mid:s.default.Compressor.defaults,high:s.default.Compressor.defaults,lowFrequency:250,highFrequency:2e3},s.default.MultibandCompressor.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._splitter.dispose(),this._writable(["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this._splitter=null,this.low=null,this.mid=null,this.high=null,this.lowFrequency=null,this.highFrequency=null,this},e.default=s.default.MultibandCompressor;},function(t,e,i){i.r(e);var s=i(0);i(10),i(1);s.default.Mono=function(){s.default.AudioNode.call(this),this.createInsOuts(1,0),this._merge=this.output=new s.default.Merge,s.default.connect(this.input,this._merge,0,0),s.default.connect(this.input,this._merge,0,1);},s.default.extend(s.default.Mono,s.default.AudioNode),s.default.Mono.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._merge.dispose(),this._merge=null,this},e.default=s.default.Mono;},function(t,e,i){i.r(e);var s=i(0);i(53),i(52),i(43),i(1);s.default.MidSideCompressor=function(t){s.default.AudioNode.call(this),t=s.default.defaultArg(t,s.default.MidSideCompressor.defaults),this._midSideSplit=this.input=new s.default.MidSideSplit,this._midSideMerge=this.output=new s.default.MidSideMerge,this.mid=new s.default.Compressor(t.mid),this.side=new s.default.Compressor(t.side),this._midSideSplit.mid.chain(this.mid,this._midSideMerge.mid),this._midSideSplit.side.chain(this.side,this._midSideMerge.side),this._readOnly(["mid","side"]);},s.default.extend(s.default.MidSideCompressor,s.default.AudioNode),s.default.MidSideCompressor.defaults={mid:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16},side:{ratio:6,threshold:-30,release:.25,attack:.03,knee:10}},s.default.MidSideCompressor.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["mid","side"]),this.mid.dispose(),this.mid=null,this.side.dispose(),this.side=null,this._midSideSplit.dispose(),this._midSideSplit=null,this._midSideMerge.dispose(),this._midSideMerge=null,this},e.default=s.default.MidSideCompressor;},function(t,e,i){i.r(e);var s=i(0);i(36),i(1);s.default.Meter=function(){var t=s.default.defaults(arguments,["smoothing"],s.default.Meter);s.default.AudioNode.call(this),this.smoothing=t.smoothing,this._rms=0,this.input=this.output=this._analyser=new s.default.Analyser("waveform",256);},s.default.extend(s.default.Meter,s.default.AudioNode),s.default.Meter.defaults={smoothing:.8},s.default.Meter.prototype.getLevel=function(){for(var t=this._analyser.getValue(),e=0,i=0;i<t.length;i++){var n=t[i];e+=n*n;}var o=Math.sqrt(e/t.length);return this._rms=Math.max(o,this._rms*this.smoothing),s.default.gainToDb(this._rms)},s.default.Meter.prototype.getValue=function(){return this._analyser.getValue()[0]},s.default.Meter.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._analyser.dispose(),this._analyser=null,this},e.default=s.default.Meter;},function(t,e,i){i.r(e);var s=i(0);i(43),i(1);s.default.Limiter=function(){var t=s.default.defaults(arguments,["threshold"],s.default.Limiter);s.default.AudioNode.call(this),this._compressor=this.input=this.output=new s.default.Compressor({attack:.001,decay:.001,threshold:t.threshold}),this.threshold=this._compressor.threshold,this._readOnly("threshold");},s.default.extend(s.default.Limiter,s.default.AudioNode),s.default.Limiter.defaults={threshold:-12},s.default.Limiter.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._compressor.dispose(),this._compressor=null,this._writable("threshold"),this.threshold=null,this},e.default=s.default.Limiter;},function(t,e,i){i.r(e);var s=i(0);i(58),i(85),i(1);s.default.Gate=function(){var t=s.default.defaults(arguments,["threshold","smoothing"],s.default.Gate);s.default.AudioNode.call(this),this.createInsOuts(1,1),this._follower=new s.default.Follower(t.smoothing),this._gt=new s.default.GreaterThan(s.default.dbToGain(t.threshold)),s.default.connect(this.input,this.output),s.default.connectSeries(this.input,this._follower,this._gt,this.output.gain);},s.default.extend(s.default.Gate,s.default.AudioNode),s.default.Gate.defaults={smoothing:.1,threshold:-40},Object.defineProperty(s.default.Gate.prototype,"threshold",{get:function(){return s.default.gainToDb(this._gt.value)},set:function(t){this._gt.value=s.default.dbToGain(t);}}),Object.defineProperty(s.default.Gate.prototype,"smoothing",{get:function(){return this._follower.smoothing},set:function(t){this._follower.smoothing=t;}}),s.default.Gate.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._follower.dispose(),this._gt.dispose(),this._follower=null,this._gt=null,this},e.default=s.default.Gate;},function(t,e,i){i.r(e);var s=i(0);i(36),i(1);s.default.FFT=function(){var t=s.default.defaults(arguments,["size"],s.default.FFT);t.type=s.default.Analyser.Type.FFT,s.default.AudioNode.call(this),this._analyser=this.input=this.output=new s.default.Analyser(t);},s.default.extend(s.default.FFT,s.default.AudioNode),s.default.FFT.defaults={size:1024},s.default.FFT.prototype.getValue=function(){return this._analyser.getValue()},Object.defineProperty(s.default.FFT.prototype,"size",{get:function(){return this._analyser.size},set:function(t){this._analyser.size=t;}}),s.default.FFT.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._analyser.dispose(),this._analyser=null;},e.default=s.default.FFT;},function(t,e,i){i.r(e);var s=i(0);i(60),i(3),i(1);s.default.EQ3=function(){var t=s.default.defaults(arguments,["low","mid","high"],s.default.EQ3);s.default.AudioNode.call(this),this.output=new s.default.Gain,this._multibandSplit=this.input=new s.default.MultibandSplit({lowFrequency:t.lowFrequency,highFrequency:t.highFrequency}),this._lowGain=new s.default.Gain(t.low,s.default.Type.Decibels),this._midGain=new s.default.Gain(t.mid,s.default.Type.Decibels),this._highGain=new s.default.Gain(t.high,s.default.Type.Decibels),this.low=this._lowGain.gain,this.mid=this._midGain.gain,this.high=this._highGain.gain,this.Q=this._multibandSplit.Q,this.lowFrequency=this._multibandSplit.lowFrequency,this.highFrequency=this._multibandSplit.highFrequency,this._multibandSplit.low.chain(this._lowGain,this.output),this._multibandSplit.mid.chain(this._midGain,this.output),this._multibandSplit.high.chain(this._highGain,this.output),this._readOnly(["low","mid","high","lowFrequency","highFrequency"]);},s.default.extend(s.default.EQ3,s.default.AudioNode),s.default.EQ3.defaults={low:0,mid:0,high:0,lowFrequency:400,highFrequency:2500},s.default.EQ3.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["low","mid","high","lowFrequency","highFrequency"]),this._multibandSplit.dispose(),this._multibandSplit=null,this.lowFrequency=null,this.highFrequency=null,this._lowGain.dispose(),this._lowGain=null,this._midGain.dispose(),this._midGain=null,this._highGain.dispose(),this._highGain=null,this.low=null,this.mid=null,this.high=null,this.Q=null,this},e.default=s.default.EQ3;},function(t,e,i){i.r(e);var s=i(0);i(91),i(88),i(1);s.default.Channel=function(){var t=s.default.defaults(arguments,["volume","pan"],s.default.PanVol);s.default.AudioNode.call(this,t),this._solo=this.input=new s.default.Solo(t.solo),this._panVol=this.output=new s.default.PanVol({pan:t.pan,volume:t.volume,mute:t.mute}),this.pan=this._panVol.pan,this.volume=this._panVol.volume,this._solo.connect(this._panVol),this._readOnly(["pan","volume"]);},s.default.extend(s.default.Channel,s.default.AudioNode),s.default.Channel.defaults={pan:0,volume:0,mute:!1,solo:!1},Object.defineProperty(s.default.Channel.prototype,"solo",{get:function(){return this._solo.solo},set:function(t){this._solo.solo=t;}}),Object.defineProperty(s.default.Channel.prototype,"muted",{get:function(){return this._solo.muted||this.mute}}),Object.defineProperty(s.default.Channel.prototype,"mute",{get:function(){return this._panVol.mute},set:function(t){this._panVol.mute=t;}}),s.default.Channel.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["pan","volume"]),this._panVol.dispose(),this._panVol=null,this.pan=null,this.volume=null,this._solo.dispose(),this._solo=null,this},e.default=s.default.Channel;},function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this");}catch(t){"object"==typeof window&&(i=window);}t.exports=i;},function(t,e,i){i(31),i(36),i(146),i(43),i(23),i(47),i(145),i(59),i(144),i(9),i(58),i(41),i(143),i(12),i(142),i(54),i(10),i(141),i(140),i(52),i(53),i(139),i(138),i(60),i(48),i(137),i(91),i(86),i(88),i(19),i(27),i(136),i(135),i(134),i(79),i(133),i(1),i(11),i(78),i(132),i(83),i(20),i(18),i(131),i(35),i(3),i(81),i(130),i(40),i(77),i(76),i(14),i(24),i(34),i(16),i(56),i(80),i(129),i(128),i(127),i(126),i(125),i(124),i(74),i(123),i(8),i(122),i(33),i(121),i(120),i(73),i(119),i(118),i(117),i(116),i(15),i(115),i(114),i(72),i(113),i(112),i(51),i(71),i(70),i(111),i(110),i(109),i(108),i(107),i(21),i(106),i(105),i(25),i(66),i(104),i(103),i(102),i(101),i(38),i(87),i(29),i(22),i(89),i(100),i(85),i(84),i(75),i(5),i(90),i(99),i(61),i(26),i(42),i(2),i(30),i(13),i(82),i(98),i(7),i(28),i(68),i(32),i(67),i(49),i(97),i(39),i(37),i(17),i(64),i(65),i(96),i(50),i(69),i(6),i(57),i(95),i(46),i(94),i(55),i(63),i(62),i(45),i(4),t.exports=i(0).default;}])});
	//# sourceMappingURL=Tone.js.map
	});

	var Tone$1 = unwrapExports(Tone);
	var Tone_1 = Tone.Tone;

	var Tone$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': Tone$1,
		__moduleExports: Tone,
		Tone: Tone_1
	});

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var camelToDashMap = new Map();
	function camelToDash(str) {
	  var result = camelToDashMap.get(str);

	  if (result === undefined) {
	    result = str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
	    camelToDashMap.set(str, result);
	  }

	  return result;
	}
	function pascalToDash(str) {
	  return camelToDash(str.replace(/((?!([A-Z]{2}|^))[A-Z])/g, "-$1"));
	}
	function dispatch$9(host, eventType) {
	  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  return host.dispatchEvent(new CustomEvent(eventType, _objectSpread({
	    bubbles: false
	  }, options)));
	}
	function shadyCSS(fn, fallback) {
	  var shady = window.ShadyCSS;
	  /* istanbul ignore next */

	  if (shady && !shady.nativeShadow) {
	    return fn(shady);
	  }

	  return fallback;
	}
	function stringifyElement(target) {
	  return "<".concat(String(target.tagName).toLowerCase(), ">");
	}
	var IS_IE = ("ActiveXObject" in window);
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJjYW1lbFRvRGFzaE1hcCIsIk1hcCIsImNhbWVsVG9EYXNoIiwic3RyIiwicmVzdWx0IiwiZ2V0IiwidW5kZWZpbmVkIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwic2V0IiwicGFzY2FsVG9EYXNoIiwiZGlzcGF0Y2giLCJob3N0IiwiZXZlbnRUeXBlIiwib3B0aW9ucyIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJzaGFkeUNTUyIsImZuIiwiZmFsbGJhY2siLCJzaGFkeSIsIndpbmRvdyIsIlNoYWR5Q1NTIiwibmF0aXZlU2hhZG93Iiwic3RyaW5naWZ5RWxlbWVudCIsInRhcmdldCIsIlN0cmluZyIsInRhZ05hbWUiLCJJU19JRSIsImRlZmVycmVkIiwiUHJvbWlzZSIsInJlc29sdmUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU1BLGNBQWMsR0FBRyxJQUFJQyxHQUFKLEVBQXZCO0FBQ0EsT0FBTyxTQUFTQyxXQUFULENBQXFCQyxHQUFyQixFQUEwQjtBQUMvQixNQUFJQyxNQUFNLEdBQUdKLGNBQWMsQ0FBQ0ssR0FBZixDQUFtQkYsR0FBbkIsQ0FBYjs7QUFDQSxNQUFJQyxNQUFNLEtBQUtFLFNBQWYsRUFBMEI7QUFDeEJGLElBQUFBLE1BQU0sR0FBR0QsR0FBRyxDQUFDSSxPQUFKLENBQVksaUJBQVosRUFBK0IsT0FBL0IsRUFBd0NDLFdBQXhDLEVBQVQ7QUFDQVIsSUFBQUEsY0FBYyxDQUFDUyxHQUFmLENBQW1CTixHQUFuQixFQUF3QkMsTUFBeEI7QUFDRDs7QUFDRCxTQUFPQSxNQUFQO0FBQ0Q7QUFFRCxPQUFPLFNBQVNNLFlBQVQsQ0FBc0JQLEdBQXRCLEVBQTJCO0FBQ2hDLFNBQU9ELFdBQVcsQ0FBQ0MsR0FBRyxDQUFDSSxPQUFKLENBQVksMEJBQVosRUFBd0MsS0FBeEMsQ0FBRCxDQUFsQjtBQUNEO0FBRUQsT0FBTyxTQUFTSSxRQUFULENBQWtCQyxJQUFsQixFQUF3QkMsU0FBeEIsRUFBaUQ7QUFBQSxNQUFkQyxPQUFjLHVFQUFKLEVBQUk7QUFDdEQsU0FBT0YsSUFBSSxDQUFDRyxhQUFMLENBQ0wsSUFBSUMsV0FBSixDQUFnQkgsU0FBaEI7QUFBNkJJLElBQUFBLE9BQU8sRUFBRTtBQUF0QyxLQUFnREgsT0FBaEQsRUFESyxDQUFQO0FBR0Q7QUFFRCxPQUFPLFNBQVNJLFFBQVQsQ0FBa0JDLEVBQWxCLEVBQXNCQyxRQUF0QixFQUFnQztBQUNyQyxNQUFNQyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsUUFBckI7QUFFQTs7QUFDQSxNQUFJRixLQUFLLElBQUksQ0FBQ0EsS0FBSyxDQUFDRyxZQUFwQixFQUFrQztBQUNoQyxXQUFPTCxFQUFFLENBQUNFLEtBQUQsQ0FBVDtBQUNEOztBQUVELFNBQU9ELFFBQVA7QUFDRDtBQUVELE9BQU8sU0FBU0ssZ0JBQVQsQ0FBMEJDLE1BQTFCLEVBQWtDO0FBQ3ZDLG9CQUFXQyxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBUixDQUFOLENBQXVCcEIsV0FBdkIsRUFBWDtBQUNEO0FBRUQsT0FBTyxJQUFNcUIsS0FBSyxJQUFHLG1CQUFtQlAsTUFBdEIsQ0FBWDtBQUNQLE9BQU8sSUFBTVEsUUFBUSxHQUFHQyxPQUFPLENBQUNDLE9BQVIsRUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjYW1lbFRvRGFzaE1hcCA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBjYW1lbFRvRGFzaChzdHIpIHtcbiAgbGV0IHJlc3VsdCA9IGNhbWVsVG9EYXNoTWFwLmdldChzdHIpO1xuICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXN1bHQgPSBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNhbWVsVG9EYXNoTWFwLnNldChzdHIsIHJlc3VsdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhc2NhbFRvRGFzaChzdHIpIHtcbiAgcmV0dXJuIGNhbWVsVG9EYXNoKHN0ci5yZXBsYWNlKC8oKD8hKFtBLVpdezJ9fF4pKVtBLVpdKS9nLCBcIi0kMVwiKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwYXRjaChob3N0LCBldmVudFR5cGUsIG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gaG9zdC5kaXNwYXRjaEV2ZW50KFxuICAgIG5ldyBDdXN0b21FdmVudChldmVudFR5cGUsIHsgYnViYmxlczogZmFsc2UsIC4uLm9wdGlvbnMgfSksXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGFkeUNTUyhmbiwgZmFsbGJhY2spIHtcbiAgY29uc3Qgc2hhZHkgPSB3aW5kb3cuU2hhZHlDU1M7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKHNoYWR5ICYmICFzaGFkeS5uYXRpdmVTaGFkb3cpIHtcbiAgICByZXR1cm4gZm4oc2hhZHkpO1xuICB9XG5cbiAgcmV0dXJuIGZhbGxiYWNrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5RWxlbWVudCh0YXJnZXQpIHtcbiAgcmV0dXJuIGA8JHtTdHJpbmcodGFyZ2V0LnRhZ05hbWUpLnRvTG93ZXJDYXNlKCl9PmA7XG59XG5cbmV4cG9ydCBjb25zdCBJU19JRSA9IFwiQWN0aXZlWE9iamVjdFwiIGluIHdpbmRvdztcbmV4cG9ydCBjb25zdCBkZWZlcnJlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuIl19

	function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	var defaultTransform = function defaultTransform(v) {
	  return v;
	};

	var objectTransform = function objectTransform(value) {
	  if (_typeof(value) !== "object") {
	    throw TypeError("Assigned value must be an object: ".concat(_typeof(value)));
	  }

	  return value && Object.freeze(value);
	};

	function property(value, connect) {
	  var type = _typeof(value);

	  var transform = defaultTransform;

	  switch (type) {
	    case "string":
	      transform = String;
	      break;

	    case "number":
	      transform = Number;
	      break;

	    case "boolean":
	      transform = Boolean;
	      break;

	    case "function":
	      transform = value;
	      value = transform();
	      break;

	    case "object":
	      if (value) Object.freeze(value);
	      transform = objectTransform;
	      break;
	  }

	  return {
	    get: function get(host) {
	      var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : value;
	      return val;
	    },
	    set: function set(host, val, oldValue) {
	      return transform(val, oldValue);
	    },
	    connect: type !== "object" && type !== "undefined" ? function (host, key, invalidate) {
	      if (host[key] === value) {
	        var attrName = camelToDash(key);

	        if (host.hasAttribute(attrName)) {
	          var attrValue = host.getAttribute(attrName);
	          host[key] = attrValue === "" && transform === Boolean ? true : attrValue;
	        }
	      }

	      return connect && connect(host, key, invalidate);
	    } : connect
	  };
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9wZXJ0eS5qcyJdLCJuYW1lcyI6WyJjYW1lbFRvRGFzaCIsImRlZmF1bHRUcmFuc2Zvcm0iLCJ2Iiwib2JqZWN0VHJhbnNmb3JtIiwidmFsdWUiLCJUeXBlRXJyb3IiLCJPYmplY3QiLCJmcmVlemUiLCJwcm9wZXJ0eSIsImNvbm5lY3QiLCJ0eXBlIiwidHJhbnNmb3JtIiwiU3RyaW5nIiwiTnVtYmVyIiwiQm9vbGVhbiIsImdldCIsImhvc3QiLCJ2YWwiLCJzZXQiLCJvbGRWYWx1ZSIsImtleSIsImludmFsaWRhdGUiLCJhdHRyTmFtZSIsImhhc0F0dHJpYnV0ZSIsImF0dHJWYWx1ZSIsImdldEF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxXQUFULFFBQTRCLFlBQTVCOztBQUVBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQUMsQ0FBQztBQUFBLFNBQUlBLENBQUo7QUFBQSxDQUExQjs7QUFFQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUFDLEtBQUssRUFBSTtBQUMvQixNQUFJLFFBQU9BLEtBQVAsTUFBaUIsUUFBckIsRUFBK0I7QUFDN0IsVUFBTUMsU0FBUyxxREFBNkNELEtBQTdDLEdBQWY7QUFDRDs7QUFDRCxTQUFPQSxLQUFLLElBQUlFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxLQUFkLENBQWhCO0FBQ0QsQ0FMRDs7QUFPQSxlQUFlLFNBQVNJLFFBQVQsQ0FBa0JKLEtBQWxCLEVBQXlCSyxPQUF6QixFQUFrQztBQUMvQyxNQUFNQyxJQUFJLFdBQVVOLEtBQVYsQ0FBVjs7QUFDQSxNQUFJTyxTQUFTLEdBQUdWLGdCQUFoQjs7QUFFQSxVQUFRUyxJQUFSO0FBQ0UsU0FBSyxRQUFMO0FBQ0VDLE1BQUFBLFNBQVMsR0FBR0MsTUFBWjtBQUNBOztBQUNGLFNBQUssUUFBTDtBQUNFRCxNQUFBQSxTQUFTLEdBQUdFLE1BQVo7QUFDQTs7QUFDRixTQUFLLFNBQUw7QUFDRUYsTUFBQUEsU0FBUyxHQUFHRyxPQUFaO0FBQ0E7O0FBQ0YsU0FBSyxVQUFMO0FBQ0VILE1BQUFBLFNBQVMsR0FBR1AsS0FBWjtBQUNBQSxNQUFBQSxLQUFLLEdBQUdPLFNBQVMsRUFBakI7QUFDQTs7QUFDRixTQUFLLFFBQUw7QUFDRSxVQUFJUCxLQUFKLEVBQVdFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxLQUFkO0FBQ1hPLE1BQUFBLFNBQVMsR0FBR1IsZUFBWjtBQUNBOztBQUNGO0FBQ0U7QUFuQko7O0FBc0JBLFNBQU87QUFDTFksSUFBQUEsR0FBRyxFQUFFLGFBQUNDLElBQUQ7QUFBQSxVQUFPQyxHQUFQLHVFQUFhYixLQUFiO0FBQUEsYUFBdUJhLEdBQXZCO0FBQUEsS0FEQTtBQUVMQyxJQUFBQSxHQUFHLEVBQUUsYUFBQ0YsSUFBRCxFQUFPQyxHQUFQLEVBQVlFLFFBQVo7QUFBQSxhQUF5QlIsU0FBUyxDQUFDTSxHQUFELEVBQU1FLFFBQU4sQ0FBbEM7QUFBQSxLQUZBO0FBR0xWLElBQUFBLE9BQU8sRUFDTEMsSUFBSSxLQUFLLFFBQVQsSUFBcUJBLElBQUksS0FBSyxXQUE5QixHQUNJLFVBQUNNLElBQUQsRUFBT0ksR0FBUCxFQUFZQyxVQUFaLEVBQTJCO0FBQ3pCLFVBQUlMLElBQUksQ0FBQ0ksR0FBRCxDQUFKLEtBQWNoQixLQUFsQixFQUF5QjtBQUN2QixZQUFNa0IsUUFBUSxHQUFHdEIsV0FBVyxDQUFDb0IsR0FBRCxDQUE1Qjs7QUFFQSxZQUFJSixJQUFJLENBQUNPLFlBQUwsQ0FBa0JELFFBQWxCLENBQUosRUFBaUM7QUFDL0IsY0FBTUUsU0FBUyxHQUFHUixJQUFJLENBQUNTLFlBQUwsQ0FBa0JILFFBQWxCLENBQWxCO0FBQ0FOLFVBQUFBLElBQUksQ0FBQ0ksR0FBRCxDQUFKLEdBQ0VJLFNBQVMsS0FBSyxFQUFkLElBQW9CYixTQUFTLEtBQUtHLE9BQWxDLEdBQTRDLElBQTVDLEdBQW1EVSxTQURyRDtBQUVEO0FBQ0Y7O0FBRUQsYUFBT2YsT0FBTyxJQUFJQSxPQUFPLENBQUNPLElBQUQsRUFBT0ksR0FBUCxFQUFZQyxVQUFaLENBQXpCO0FBQ0QsS0FiTCxHQWNJWjtBQWxCRCxHQUFQO0FBb0JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuXG5jb25zdCBkZWZhdWx0VHJhbnNmb3JtID0gdiA9PiB2O1xuXG5jb25zdCBvYmplY3RUcmFuc2Zvcm0gPSB2YWx1ZSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoYEFzc2lnbmVkIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0OiAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgfVxuICByZXR1cm4gdmFsdWUgJiYgT2JqZWN0LmZyZWV6ZSh2YWx1ZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9wZXJ0eSh2YWx1ZSwgY29ubmVjdCkge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZXQgdHJhbnNmb3JtID0gZGVmYXVsdFRyYW5zZm9ybTtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICB0cmFuc2Zvcm0gPSBTdHJpbmc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICB0cmFuc2Zvcm0gPSBOdW1iZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgdHJhbnNmb3JtID0gQm9vbGVhbjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgdHJhbnNmb3JtID0gdmFsdWU7XG4gICAgICB2YWx1ZSA9IHRyYW5zZm9ybSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgaWYgKHZhbHVlKSBPYmplY3QuZnJlZXplKHZhbHVlKTtcbiAgICAgIHRyYW5zZm9ybSA9IG9iamVjdFRyYW5zZm9ybTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoaG9zdCwgdmFsID0gdmFsdWUpID0+IHZhbCxcbiAgICBzZXQ6IChob3N0LCB2YWwsIG9sZFZhbHVlKSA9PiB0cmFuc2Zvcm0odmFsLCBvbGRWYWx1ZSksXG4gICAgY29ubmVjdDpcbiAgICAgIHR5cGUgIT09IFwib2JqZWN0XCIgJiYgdHlwZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IChob3N0LCBrZXksIGludmFsaWRhdGUpID0+IHtcbiAgICAgICAgICAgIGlmIChob3N0W2tleV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gY2FtZWxUb0Rhc2goa2V5KTtcblxuICAgICAgICAgICAgICBpZiAoaG9zdC5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0clZhbHVlID0gaG9zdC5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICAgICAgICAgIGhvc3Rba2V5XSA9XG4gICAgICAgICAgICAgICAgICBhdHRyVmFsdWUgPT09IFwiXCIgJiYgdHJhbnNmb3JtID09PSBCb29sZWFuID8gdHJ1ZSA6IGF0dHJWYWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdCAmJiBjb25uZWN0KGhvc3QsIGtleSwgaW52YWxpZGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICA6IGNvbm5lY3QsXG4gIH07XG59XG4iXX0=

	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _typeof$1(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

	function render(fn) {
	  var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (typeof fn !== "function") {
	    throw TypeError("The first argument must be a function: ".concat(_typeof$1(fn)));
	  }

	  var options = _objectSpread$1({
	    shadowRoot: true
	  }, customOptions);

	  var shadowRootInit = {
	    mode: "open"
	  };

	  if (_typeof$1(options.shadowRoot) === "object") {
	    Object.assign(shadowRootInit, options.shadowRoot);
	  }

	  return {
	    get: function get(host) {
	      var update = fn(host);
	      var target = host;

	      if (options.shadowRoot) {
	        if (!host.shadowRoot) host.attachShadow(shadowRootInit);
	        target = host.shadowRoot;
	      }

	      return function flush() {
	        update(host, target);
	        return target;
	      };
	    },
	    observe: function observe(host, flush) {
	      flush();
	    }
	  };
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXIuanMiXSwibmFtZXMiOlsicmVuZGVyIiwiZm4iLCJjdXN0b21PcHRpb25zIiwiVHlwZUVycm9yIiwib3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJzaGFkb3dSb290SW5pdCIsIm1vZGUiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXQiLCJob3N0IiwidXBkYXRlIiwidGFyZ2V0IiwiYXR0YWNoU2hhZG93IiwiZmx1c2giLCJvYnNlcnZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGVBQWUsU0FBU0EsTUFBVCxDQUFnQkMsRUFBaEIsRUFBd0M7QUFBQSxNQUFwQkMsYUFBb0IsdUVBQUosRUFBSTs7QUFDckQsTUFBSSxPQUFPRCxFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUIsVUFBTUUsU0FBUywwREFBa0RGLEVBQWxELEdBQWY7QUFDRDs7QUFFRCxNQUFNRyxPQUFPO0FBQUtDLElBQUFBLFVBQVUsRUFBRTtBQUFqQixLQUEwQkgsYUFBMUIsQ0FBYjs7QUFDQSxNQUFNSSxjQUFjLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQVIsR0FBdkI7O0FBRUEsTUFBSSxRQUFPSCxPQUFPLENBQUNDLFVBQWYsTUFBOEIsUUFBbEMsRUFBNEM7QUFDMUNHLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxjQUFkLEVBQThCRixPQUFPLENBQUNDLFVBQXRDO0FBQ0Q7O0FBRUQsU0FBTztBQUNMSyxJQUFBQSxHQURLLGVBQ0RDLElBREMsRUFDSztBQUNSLFVBQU1DLE1BQU0sR0FBR1gsRUFBRSxDQUFDVSxJQUFELENBQWpCO0FBQ0EsVUFBSUUsTUFBTSxHQUFHRixJQUFiOztBQUVBLFVBQUlQLE9BQU8sQ0FBQ0MsVUFBWixFQUF3QjtBQUN0QixZQUFJLENBQUNNLElBQUksQ0FBQ04sVUFBVixFQUFzQk0sSUFBSSxDQUFDRyxZQUFMLENBQWtCUixjQUFsQjtBQUN0Qk8sUUFBQUEsTUFBTSxHQUFHRixJQUFJLENBQUNOLFVBQWQ7QUFDRDs7QUFFRCxhQUFPLFNBQVNVLEtBQVQsR0FBaUI7QUFDdEJILFFBQUFBLE1BQU0sQ0FBQ0QsSUFBRCxFQUFPRSxNQUFQLENBQU47QUFDQSxlQUFPQSxNQUFQO0FBQ0QsT0FIRDtBQUlELEtBZEk7QUFlTEcsSUFBQUEsT0FmSyxtQkFlR0wsSUFmSCxFQWVTSSxLQWZULEVBZWdCO0FBQ25CQSxNQUFBQSxLQUFLO0FBQ047QUFqQkksR0FBUDtBQW1CRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihmbiwgY3VzdG9tT3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IFR5cGVFcnJvcihgVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbjogJHt0eXBlb2YgZm59YCk7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0geyBzaGFkb3dSb290OiB0cnVlLCAuLi5jdXN0b21PcHRpb25zIH07XG4gIGNvbnN0IHNoYWRvd1Jvb3RJbml0ID0geyBtb2RlOiBcIm9wZW5cIiB9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5zaGFkb3dSb290ID09PSBcIm9iamVjdFwiKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzaGFkb3dSb290SW5pdCwgb3B0aW9ucy5zaGFkb3dSb290KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0KGhvc3QpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZSA9IGZuKGhvc3QpO1xuICAgICAgbGV0IHRhcmdldCA9IGhvc3Q7XG5cbiAgICAgIGlmIChvcHRpb25zLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgaWYgKCFob3N0LnNoYWRvd1Jvb3QpIGhvc3QuYXR0YWNoU2hhZG93KHNoYWRvd1Jvb3RJbml0KTtcbiAgICAgICAgdGFyZ2V0ID0gaG9zdC5zaGFkb3dSb290O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHVwZGF0ZShob3N0LCB0YXJnZXQpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfTtcbiAgICB9LFxuICAgIG9ic2VydmUoaG9zdCwgZmx1c2gpIHtcbiAgICAgIGZsdXNoKCk7XG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==

	var callbacks = new WeakMap();
	var queue$1 = new Set();

	function execute() {
	  try {
	    queue$1.forEach(function (target) {
	      try {
	        callbacks.get(target)();
	        queue$1.delete(target);
	      } catch (e) {
	        queue$1.delete(target);
	        throw e;
	      }
	    });
	  } catch (e) {
	    if (queue$1.size) execute();
	    throw e;
	  }
	}

	function dispatch$a(target) {
	  if (!queue$1.size) {
	    requestAnimationFrame(execute);
	  }

	  queue$1.add(target);
	}
	function subscribe(target, cb) {
	  callbacks.set(target, cb);
	  dispatch$a(target);
	  return function unsubscribe() {
	    queue$1.delete(target);
	    callbacks.delete(target);
	  };
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbWl0dGVyLmpzIl0sIm5hbWVzIjpbImNhbGxiYWNrcyIsIldlYWtNYXAiLCJxdWV1ZSIsIlNldCIsImV4ZWN1dGUiLCJmb3JFYWNoIiwidGFyZ2V0IiwiZ2V0IiwiZGVsZXRlIiwiZSIsInNpemUiLCJkaXNwYXRjaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFkZCIsInN1YnNjcmliZSIsImNiIiwic2V0IiwidW5zdWJzY3JpYmUiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLFNBQVMsR0FBRyxJQUFJQyxPQUFKLEVBQWxCO0FBQ0EsSUFBTUMsS0FBSyxHQUFHLElBQUlDLEdBQUosRUFBZDs7QUFFQSxTQUFTQyxPQUFULEdBQW1CO0FBQ2pCLE1BQUk7QUFDRkYsSUFBQUEsS0FBSyxDQUFDRyxPQUFOLENBQWMsVUFBQUMsTUFBTSxFQUFJO0FBQ3RCLFVBQUk7QUFDRk4sUUFBQUEsU0FBUyxDQUFDTyxHQUFWLENBQWNELE1BQWQ7QUFDQUosUUFBQUEsS0FBSyxDQUFDTSxNQUFOLENBQWFGLE1BQWI7QUFDRCxPQUhELENBR0UsT0FBT0csQ0FBUCxFQUFVO0FBQ1ZQLFFBQUFBLEtBQUssQ0FBQ00sTUFBTixDQUFhRixNQUFiO0FBQ0EsY0FBTUcsQ0FBTjtBQUNEO0FBQ0YsS0FSRDtBQVNELEdBVkQsQ0FVRSxPQUFPQSxDQUFQLEVBQVU7QUFDVixRQUFJUCxLQUFLLENBQUNRLElBQVYsRUFBZ0JOLE9BQU87QUFDdkIsVUFBTUssQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsT0FBTyxTQUFTRSxRQUFULENBQWtCTCxNQUFsQixFQUEwQjtBQUMvQixNQUFJLENBQUNKLEtBQUssQ0FBQ1EsSUFBWCxFQUFpQjtBQUNmRSxJQUFBQSxxQkFBcUIsQ0FBQ1IsT0FBRCxDQUFyQjtBQUNEOztBQUNERixFQUFBQSxLQUFLLENBQUNXLEdBQU4sQ0FBVVAsTUFBVjtBQUNEO0FBRUQsT0FBTyxTQUFTUSxTQUFULENBQW1CUixNQUFuQixFQUEyQlMsRUFBM0IsRUFBK0I7QUFDcENmLEVBQUFBLFNBQVMsQ0FBQ2dCLEdBQVYsQ0FBY1YsTUFBZCxFQUFzQlMsRUFBdEI7QUFDQUosRUFBQUEsUUFBUSxDQUFDTCxNQUFELENBQVI7QUFFQSxTQUFPLFNBQVNXLFdBQVQsR0FBdUI7QUFDNUJmLElBQUFBLEtBQUssQ0FBQ00sTUFBTixDQUFhRixNQUFiO0FBQ0FOLElBQUFBLFNBQVMsQ0FBQ1EsTUFBVixDQUFpQkYsTUFBakI7QUFDRCxHQUhEO0FBSUQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjYWxsYmFja3MgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcXVldWUgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gIHRyeSB7XG4gICAgcXVldWUuZm9yRWFjaCh0YXJnZXQgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2tzLmdldCh0YXJnZXQpKCk7XG4gICAgICAgIHF1ZXVlLmRlbGV0ZSh0YXJnZXQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBxdWV1ZS5kZWxldGUodGFyZ2V0KTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChxdWV1ZS5zaXplKSBleGVjdXRlKCk7XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2godGFyZ2V0KSB7XG4gIGlmICghcXVldWUuc2l6ZSkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShleGVjdXRlKTtcbiAgfVxuICBxdWV1ZS5hZGQodGFyZ2V0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZSh0YXJnZXQsIGNiKSB7XG4gIGNhbGxiYWNrcy5zZXQodGFyZ2V0LCBjYik7XG4gIGRpc3BhdGNoKHRhcmdldCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgIHF1ZXVlLmRlbGV0ZSh0YXJnZXQpO1xuICAgIGNhbGxiYWNrcy5kZWxldGUodGFyZ2V0KTtcbiAgfTtcbn1cbiJdfQ==

	var entries = new WeakMap();
	function getEntry(target, key) {
	  var targetMap = entries.get(target);

	  if (!targetMap) {
	    targetMap = new Map();
	    entries.set(target, targetMap);
	  }

	  var entry = targetMap.get(key);

	  if (!entry) {
	    entry = {
	      target: target,
	      key: key,
	      value: undefined,
	      contexts: undefined,
	      deps: undefined,
	      state: 0,
	      checksum: 0,
	      observed: false
	    };
	    targetMap.set(key, entry);
	  }

	  return entry;
	}

	function calculateChecksum(entry) {
	  var checksum = entry.state;

	  if (entry.deps) {
	    entry.deps.forEach(function (depEntry) {
	      checksum += depEntry.state;
	    });
	  }

	  return checksum;
	}

	function dispatchDeep(entry) {
	  if (entry.observed) dispatch$a(entry);
	  if (entry.contexts) entry.contexts.forEach(dispatchDeep);
	}

	function restoreDeepDeps(entry, deps) {
	  if (deps) {
	    deps.forEach(function (depEntry) {
	      entry.deps.add(depEntry);

	      if (entry.observed) {
	        /* istanbul ignore if */
	        if (!depEntry.contexts) depEntry.contexts = new Set();
	        depEntry.contexts.add(entry);
	      }

	      restoreDeepDeps(entry, depEntry.deps);
	    });
	  }
	}

	var contextStack = new Set();
	function get(target, key, getter) {
	  var entry = getEntry(target, key);

	  if (contextStack.size && contextStack.has(entry)) {
	    throw Error("Circular get invocation is forbidden: '".concat(key, "'"));
	  }

	  contextStack.forEach(function (context) {
	    if (!context.deps) context.deps = new Set();
	    context.deps.add(entry);

	    if (context.observed) {
	      if (!entry.contexts) entry.contexts = new Set();
	      entry.contexts.add(context);
	    }
	  });

	  if (entry.checksum && entry.checksum === calculateChecksum(entry)) {
	    return entry.value;
	  }

	  try {
	    contextStack.add(entry);

	    if (entry.observed && entry.deps && entry.deps.size) {
	      entry.deps.forEach(function (depEntry) {
	        /* istanbul ignore else */
	        if (depEntry.contexts) depEntry.contexts.delete(entry);
	      });
	    }

	    entry.deps = undefined;
	    var nextValue = getter(target, entry.value);

	    if (entry.deps) {
	      entry.deps.forEach(function (depEntry) {
	        restoreDeepDeps(entry, depEntry.deps);
	      });
	    }

	    if (nextValue !== entry.value) {
	      entry.state += 1;
	      entry.value = nextValue;
	      dispatchDeep(entry);
	    }

	    entry.checksum = calculateChecksum(entry);
	    contextStack.delete(entry);
	  } catch (e) {
	    entry.checksum = 0;
	    contextStack.delete(entry);
	    contextStack.forEach(function (context) {
	      context.deps.delete(entry);
	      if (context.observed) entry.contexts.delete(context);
	    });
	    throw e;
	  }

	  return entry.value;
	}
	function set$1(target, key, setter, value) {
	  var entry = getEntry(target, key);
	  var newValue = setter(target, value, entry.value);

	  if (newValue !== entry.value) {
	    entry.checksum = 0;
	    entry.state += 1;
	    entry.value = newValue;
	    dispatchDeep(entry);
	  }
	}
	function invalidate(target, key, clearValue) {
	  if (contextStack.size) {
	    throw Error("Invalidating property in chain of get calls is forbidden: '".concat(key, "'"));
	  }

	  var entry = getEntry(target, key);
	  entry.checksum = 0;
	  entry.state += 1;
	  dispatchDeep(entry);

	  if (clearValue) {
	    entry.value = undefined;
	  }
	}
	function observe(target, key, getter, fn) {
	  var entry = getEntry(target, key);
	  entry.observed = true;
	  var lastValue;
	  var unsubscribe = subscribe(entry, function () {
	    var value = get(target, key, getter);

	    if (value !== lastValue) {
	      fn(target, value, lastValue);
	      lastValue = value;
	    }
	  });

	  if (entry.deps) {
	    entry.deps.forEach(function (depEntry) {
	      /* istanbul ignore else */
	      if (!depEntry.contexts) depEntry.contexts = new Set();
	      depEntry.contexts.add(entry);
	    });
	  }

	  return function unobserve() {
	    unsubscribe();
	    entry.observed = false;

	    if (entry.deps && entry.deps.size) {
	      entry.deps.forEach(function (depEntry) {
	        /* istanbul ignore else */
	        if (depEntry.contexts) depEntry.contexts.delete(entry);
	      });
	    }
	  };
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWNoZS5qcyJdLCJuYW1lcyI6WyJlbWl0dGVyIiwiZW50cmllcyIsIldlYWtNYXAiLCJnZXRFbnRyeSIsInRhcmdldCIsImtleSIsInRhcmdldE1hcCIsImdldCIsIk1hcCIsInNldCIsImVudHJ5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJjb250ZXh0cyIsImRlcHMiLCJzdGF0ZSIsImNoZWNrc3VtIiwib2JzZXJ2ZWQiLCJjYWxjdWxhdGVDaGVja3N1bSIsImZvckVhY2giLCJkZXBFbnRyeSIsImRpc3BhdGNoRGVlcCIsImRpc3BhdGNoIiwicmVzdG9yZURlZXBEZXBzIiwiYWRkIiwiU2V0IiwiY29udGV4dFN0YWNrIiwiZ2V0dGVyIiwic2l6ZSIsImhhcyIsIkVycm9yIiwiY29udGV4dCIsImRlbGV0ZSIsIm5leHRWYWx1ZSIsImUiLCJzZXR0ZXIiLCJuZXdWYWx1ZSIsImludmFsaWRhdGUiLCJjbGVhclZhbHVlIiwib2JzZXJ2ZSIsImZuIiwibGFzdFZhbHVlIiwidW5zdWJzY3JpYmUiLCJzdWJzY3JpYmUiLCJ1bm9ic2VydmUiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBS0EsT0FBWixNQUF5QixjQUF6QjtBQUVBLElBQU1DLE9BQU8sR0FBRyxJQUFJQyxPQUFKLEVBQWhCO0FBQ0EsT0FBTyxTQUFTQyxRQUFULENBQWtCQyxNQUFsQixFQUEwQkMsR0FBMUIsRUFBK0I7QUFDcEMsTUFBSUMsU0FBUyxHQUFHTCxPQUFPLENBQUNNLEdBQVIsQ0FBWUgsTUFBWixDQUFoQjs7QUFDQSxNQUFJLENBQUNFLFNBQUwsRUFBZ0I7QUFDZEEsSUFBQUEsU0FBUyxHQUFHLElBQUlFLEdBQUosRUFBWjtBQUNBUCxJQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWUwsTUFBWixFQUFvQkUsU0FBcEI7QUFDRDs7QUFFRCxNQUFJSSxLQUFLLEdBQUdKLFNBQVMsQ0FBQ0MsR0FBVixDQUFjRixHQUFkLENBQVo7O0FBRUEsTUFBSSxDQUFDSyxLQUFMLEVBQVk7QUFDVkEsSUFBQUEsS0FBSyxHQUFHO0FBQ05OLE1BQUFBLE1BQU0sRUFBTkEsTUFETTtBQUVOQyxNQUFBQSxHQUFHLEVBQUhBLEdBRk07QUFHTk0sTUFBQUEsS0FBSyxFQUFFQyxTQUhEO0FBSU5DLE1BQUFBLFFBQVEsRUFBRUQsU0FKSjtBQUtORSxNQUFBQSxJQUFJLEVBQUVGLFNBTEE7QUFNTkcsTUFBQUEsS0FBSyxFQUFFLENBTkQ7QUFPTkMsTUFBQUEsUUFBUSxFQUFFLENBUEo7QUFRTkMsTUFBQUEsUUFBUSxFQUFFO0FBUkosS0FBUjtBQVVBWCxJQUFBQSxTQUFTLENBQUNHLEdBQVYsQ0FBY0osR0FBZCxFQUFtQkssS0FBbkI7QUFDRDs7QUFFRCxTQUFPQSxLQUFQO0FBQ0Q7O0FBRUQsU0FBU1EsaUJBQVQsQ0FBMkJSLEtBQTNCLEVBQWtDO0FBQ2hDLE1BQUlNLFFBQVEsR0FBR04sS0FBSyxDQUFDSyxLQUFyQjs7QUFDQSxNQUFJTCxLQUFLLENBQUNJLElBQVYsRUFBZ0I7QUFDZEosSUFBQUEsS0FBSyxDQUFDSSxJQUFOLENBQVdLLE9BQVgsQ0FBbUIsVUFBQUMsUUFBUSxFQUFJO0FBQzdCSixNQUFBQSxRQUFRLElBQUlJLFFBQVEsQ0FBQ0wsS0FBckI7QUFDRCxLQUZEO0FBR0Q7O0FBRUQsU0FBT0MsUUFBUDtBQUNEOztBQUVELFNBQVNLLFlBQVQsQ0FBc0JYLEtBQXRCLEVBQTZCO0FBQzNCLE1BQUlBLEtBQUssQ0FBQ08sUUFBVixFQUFvQmpCLE9BQU8sQ0FBQ3NCLFFBQVIsQ0FBaUJaLEtBQWpCO0FBQ3BCLE1BQUlBLEtBQUssQ0FBQ0csUUFBVixFQUFvQkgsS0FBSyxDQUFDRyxRQUFOLENBQWVNLE9BQWYsQ0FBdUJFLFlBQXZCO0FBQ3JCOztBQUVELFNBQVNFLGVBQVQsQ0FBeUJiLEtBQXpCLEVBQWdDSSxJQUFoQyxFQUFzQztBQUNwQyxNQUFJQSxJQUFKLEVBQVU7QUFDUkEsSUFBQUEsSUFBSSxDQUFDSyxPQUFMLENBQWEsVUFBQUMsUUFBUSxFQUFJO0FBQ3ZCVixNQUFBQSxLQUFLLENBQUNJLElBQU4sQ0FBV1UsR0FBWCxDQUFlSixRQUFmOztBQUVBLFVBQUlWLEtBQUssQ0FBQ08sUUFBVixFQUFvQjtBQUNsQjtBQUNBLFlBQUksQ0FBQ0csUUFBUSxDQUFDUCxRQUFkLEVBQXdCTyxRQUFRLENBQUNQLFFBQVQsR0FBb0IsSUFBSVksR0FBSixFQUFwQjtBQUN4QkwsUUFBQUEsUUFBUSxDQUFDUCxRQUFULENBQWtCVyxHQUFsQixDQUFzQmQsS0FBdEI7QUFDRDs7QUFFRGEsTUFBQUEsZUFBZSxDQUFDYixLQUFELEVBQVFVLFFBQVEsQ0FBQ04sSUFBakIsQ0FBZjtBQUNELEtBVkQ7QUFXRDtBQUNGOztBQUVELElBQU1ZLFlBQVksR0FBRyxJQUFJRCxHQUFKLEVBQXJCO0FBQ0EsT0FBTyxTQUFTbEIsR0FBVCxDQUFhSCxNQUFiLEVBQXFCQyxHQUFyQixFQUEwQnNCLE1BQTFCLEVBQWtDO0FBQ3ZDLE1BQU1qQixLQUFLLEdBQUdQLFFBQVEsQ0FBQ0MsTUFBRCxFQUFTQyxHQUFULENBQXRCOztBQUVBLE1BQUlxQixZQUFZLENBQUNFLElBQWIsSUFBcUJGLFlBQVksQ0FBQ0csR0FBYixDQUFpQm5CLEtBQWpCLENBQXpCLEVBQWtEO0FBQ2hELFVBQU1vQixLQUFLLGtEQUEyQ3pCLEdBQTNDLE9BQVg7QUFDRDs7QUFFRHFCLEVBQUFBLFlBQVksQ0FBQ1AsT0FBYixDQUFxQixVQUFBWSxPQUFPLEVBQUk7QUFDOUIsUUFBSSxDQUFDQSxPQUFPLENBQUNqQixJQUFiLEVBQW1CaUIsT0FBTyxDQUFDakIsSUFBUixHQUFlLElBQUlXLEdBQUosRUFBZjtBQUNuQk0sSUFBQUEsT0FBTyxDQUFDakIsSUFBUixDQUFhVSxHQUFiLENBQWlCZCxLQUFqQjs7QUFFQSxRQUFJcUIsT0FBTyxDQUFDZCxRQUFaLEVBQXNCO0FBQ3BCLFVBQUksQ0FBQ1AsS0FBSyxDQUFDRyxRQUFYLEVBQXFCSCxLQUFLLENBQUNHLFFBQU4sR0FBaUIsSUFBSVksR0FBSixFQUFqQjtBQUNyQmYsTUFBQUEsS0FBSyxDQUFDRyxRQUFOLENBQWVXLEdBQWYsQ0FBbUJPLE9BQW5CO0FBQ0Q7QUFDRixHQVJEOztBQVVBLE1BQUlyQixLQUFLLENBQUNNLFFBQU4sSUFBa0JOLEtBQUssQ0FBQ00sUUFBTixLQUFtQkUsaUJBQWlCLENBQUNSLEtBQUQsQ0FBMUQsRUFBbUU7QUFDakUsV0FBT0EsS0FBSyxDQUFDQyxLQUFiO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGZSxJQUFBQSxZQUFZLENBQUNGLEdBQWIsQ0FBaUJkLEtBQWpCOztBQUVBLFFBQUlBLEtBQUssQ0FBQ08sUUFBTixJQUFrQlAsS0FBSyxDQUFDSSxJQUF4QixJQUFnQ0osS0FBSyxDQUFDSSxJQUFOLENBQVdjLElBQS9DLEVBQXFEO0FBQ25EbEIsTUFBQUEsS0FBSyxDQUFDSSxJQUFOLENBQVdLLE9BQVgsQ0FBbUIsVUFBQUMsUUFBUSxFQUFJO0FBQzdCO0FBQ0EsWUFBSUEsUUFBUSxDQUFDUCxRQUFiLEVBQXVCTyxRQUFRLENBQUNQLFFBQVQsQ0FBa0JtQixNQUFsQixDQUF5QnRCLEtBQXpCO0FBQ3hCLE9BSEQ7QUFJRDs7QUFFREEsSUFBQUEsS0FBSyxDQUFDSSxJQUFOLEdBQWFGLFNBQWI7QUFDQSxRQUFNcUIsU0FBUyxHQUFHTixNQUFNLENBQUN2QixNQUFELEVBQVNNLEtBQUssQ0FBQ0MsS0FBZixDQUF4Qjs7QUFFQSxRQUFJRCxLQUFLLENBQUNJLElBQVYsRUFBZ0I7QUFDZEosTUFBQUEsS0FBSyxDQUFDSSxJQUFOLENBQVdLLE9BQVgsQ0FBbUIsVUFBQUMsUUFBUSxFQUFJO0FBQzdCRyxRQUFBQSxlQUFlLENBQUNiLEtBQUQsRUFBUVUsUUFBUSxDQUFDTixJQUFqQixDQUFmO0FBQ0QsT0FGRDtBQUdEOztBQUVELFFBQUltQixTQUFTLEtBQUt2QixLQUFLLENBQUNDLEtBQXhCLEVBQStCO0FBQzdCRCxNQUFBQSxLQUFLLENBQUNLLEtBQU4sSUFBZSxDQUFmO0FBQ0FMLE1BQUFBLEtBQUssQ0FBQ0MsS0FBTixHQUFjc0IsU0FBZDtBQUVBWixNQUFBQSxZQUFZLENBQUNYLEtBQUQsQ0FBWjtBQUNEOztBQUVEQSxJQUFBQSxLQUFLLENBQUNNLFFBQU4sR0FBaUJFLGlCQUFpQixDQUFDUixLQUFELENBQWxDO0FBQ0FnQixJQUFBQSxZQUFZLENBQUNNLE1BQWIsQ0FBb0J0QixLQUFwQjtBQUNELEdBNUJELENBNEJFLE9BQU93QixDQUFQLEVBQVU7QUFDVnhCLElBQUFBLEtBQUssQ0FBQ00sUUFBTixHQUFpQixDQUFqQjtBQUVBVSxJQUFBQSxZQUFZLENBQUNNLE1BQWIsQ0FBb0J0QixLQUFwQjtBQUNBZ0IsSUFBQUEsWUFBWSxDQUFDUCxPQUFiLENBQXFCLFVBQUFZLE9BQU8sRUFBSTtBQUM5QkEsTUFBQUEsT0FBTyxDQUFDakIsSUFBUixDQUFha0IsTUFBYixDQUFvQnRCLEtBQXBCO0FBQ0EsVUFBSXFCLE9BQU8sQ0FBQ2QsUUFBWixFQUFzQlAsS0FBSyxDQUFDRyxRQUFOLENBQWVtQixNQUFmLENBQXNCRCxPQUF0QjtBQUN2QixLQUhEO0FBS0EsVUFBTUcsQ0FBTjtBQUNEOztBQUVELFNBQU94QixLQUFLLENBQUNDLEtBQWI7QUFDRDtBQUVELE9BQU8sU0FBU0YsR0FBVCxDQUFhTCxNQUFiLEVBQXFCQyxHQUFyQixFQUEwQjhCLE1BQTFCLEVBQWtDeEIsS0FBbEMsRUFBeUM7QUFDOUMsTUFBTUQsS0FBSyxHQUFHUCxRQUFRLENBQUNDLE1BQUQsRUFBU0MsR0FBVCxDQUF0QjtBQUNBLE1BQU0rQixRQUFRLEdBQUdELE1BQU0sQ0FBQy9CLE1BQUQsRUFBU08sS0FBVCxFQUFnQkQsS0FBSyxDQUFDQyxLQUF0QixDQUF2Qjs7QUFFQSxNQUFJeUIsUUFBUSxLQUFLMUIsS0FBSyxDQUFDQyxLQUF2QixFQUE4QjtBQUM1QkQsSUFBQUEsS0FBSyxDQUFDTSxRQUFOLEdBQWlCLENBQWpCO0FBQ0FOLElBQUFBLEtBQUssQ0FBQ0ssS0FBTixJQUFlLENBQWY7QUFDQUwsSUFBQUEsS0FBSyxDQUFDQyxLQUFOLEdBQWN5QixRQUFkO0FBRUFmLElBQUFBLFlBQVksQ0FBQ1gsS0FBRCxDQUFaO0FBQ0Q7QUFDRjtBQUVELE9BQU8sU0FBUzJCLFVBQVQsQ0FBb0JqQyxNQUFwQixFQUE0QkMsR0FBNUIsRUFBaUNpQyxVQUFqQyxFQUE2QztBQUNsRCxNQUFJWixZQUFZLENBQUNFLElBQWpCLEVBQXVCO0FBQ3JCLFVBQU1FLEtBQUssc0VBQ3FEekIsR0FEckQsT0FBWDtBQUdEOztBQUVELE1BQU1LLEtBQUssR0FBR1AsUUFBUSxDQUFDQyxNQUFELEVBQVNDLEdBQVQsQ0FBdEI7QUFFQUssRUFBQUEsS0FBSyxDQUFDTSxRQUFOLEdBQWlCLENBQWpCO0FBQ0FOLEVBQUFBLEtBQUssQ0FBQ0ssS0FBTixJQUFlLENBQWY7QUFFQU0sRUFBQUEsWUFBWSxDQUFDWCxLQUFELENBQVo7O0FBRUEsTUFBSTRCLFVBQUosRUFBZ0I7QUFDZDVCLElBQUFBLEtBQUssQ0FBQ0MsS0FBTixHQUFjQyxTQUFkO0FBQ0Q7QUFDRjtBQUVELE9BQU8sU0FBUzJCLE9BQVQsQ0FBaUJuQyxNQUFqQixFQUF5QkMsR0FBekIsRUFBOEJzQixNQUE5QixFQUFzQ2EsRUFBdEMsRUFBMEM7QUFDL0MsTUFBTTlCLEtBQUssR0FBR1AsUUFBUSxDQUFDQyxNQUFELEVBQVNDLEdBQVQsQ0FBdEI7QUFDQUssRUFBQUEsS0FBSyxDQUFDTyxRQUFOLEdBQWlCLElBQWpCO0FBRUEsTUFBSXdCLFNBQUo7QUFDQSxNQUFNQyxXQUFXLEdBQUcxQyxPQUFPLENBQUMyQyxTQUFSLENBQWtCakMsS0FBbEIsRUFBeUIsWUFBTTtBQUNqRCxRQUFNQyxLQUFLLEdBQUdKLEdBQUcsQ0FBQ0gsTUFBRCxFQUFTQyxHQUFULEVBQWNzQixNQUFkLENBQWpCOztBQUNBLFFBQUloQixLQUFLLEtBQUs4QixTQUFkLEVBQXlCO0FBQ3ZCRCxNQUFBQSxFQUFFLENBQUNwQyxNQUFELEVBQVNPLEtBQVQsRUFBZ0I4QixTQUFoQixDQUFGO0FBQ0FBLE1BQUFBLFNBQVMsR0FBRzlCLEtBQVo7QUFDRDtBQUNGLEdBTm1CLENBQXBCOztBQVFBLE1BQUlELEtBQUssQ0FBQ0ksSUFBVixFQUFnQjtBQUNkSixJQUFBQSxLQUFLLENBQUNJLElBQU4sQ0FBV0ssT0FBWCxDQUFtQixVQUFBQyxRQUFRLEVBQUk7QUFDN0I7QUFDQSxVQUFJLENBQUNBLFFBQVEsQ0FBQ1AsUUFBZCxFQUF3Qk8sUUFBUSxDQUFDUCxRQUFULEdBQW9CLElBQUlZLEdBQUosRUFBcEI7QUFDeEJMLE1BQUFBLFFBQVEsQ0FBQ1AsUUFBVCxDQUFrQlcsR0FBbEIsQ0FBc0JkLEtBQXRCO0FBQ0QsS0FKRDtBQUtEOztBQUVELFNBQU8sU0FBU2tDLFNBQVQsR0FBcUI7QUFDMUJGLElBQUFBLFdBQVc7QUFDWGhDLElBQUFBLEtBQUssQ0FBQ08sUUFBTixHQUFpQixLQUFqQjs7QUFDQSxRQUFJUCxLQUFLLENBQUNJLElBQU4sSUFBY0osS0FBSyxDQUFDSSxJQUFOLENBQVdjLElBQTdCLEVBQW1DO0FBQ2pDbEIsTUFBQUEsS0FBSyxDQUFDSSxJQUFOLENBQVdLLE9BQVgsQ0FBbUIsVUFBQUMsUUFBUSxFQUFJO0FBQzdCO0FBQ0EsWUFBSUEsUUFBUSxDQUFDUCxRQUFiLEVBQXVCTyxRQUFRLENBQUNQLFFBQVQsQ0FBa0JtQixNQUFsQixDQUF5QnRCLEtBQXpCO0FBQ3hCLE9BSEQ7QUFJRDtBQUNGLEdBVEQ7QUFVRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVtaXR0ZXIgZnJvbSBcIi4vZW1pdHRlci5qc1wiO1xuXG5jb25zdCBlbnRyaWVzID0gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbnRyeSh0YXJnZXQsIGtleSkge1xuICBsZXQgdGFyZ2V0TWFwID0gZW50cmllcy5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNYXApIHtcbiAgICB0YXJnZXRNYXAgPSBuZXcgTWFwKCk7XG4gICAgZW50cmllcy5zZXQodGFyZ2V0LCB0YXJnZXRNYXApO1xuICB9XG5cbiAgbGV0IGVudHJ5ID0gdGFyZ2V0TWFwLmdldChrZXkpO1xuXG4gIGlmICghZW50cnkpIHtcbiAgICBlbnRyeSA9IHtcbiAgICAgIHRhcmdldCxcbiAgICAgIGtleSxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBjb250ZXh0czogdW5kZWZpbmVkLFxuICAgICAgZGVwczogdW5kZWZpbmVkLFxuICAgICAgc3RhdGU6IDAsXG4gICAgICBjaGVja3N1bTogMCxcbiAgICAgIG9ic2VydmVkOiBmYWxzZSxcbiAgICB9O1xuICAgIHRhcmdldE1hcC5zZXQoa2V5LCBlbnRyeSk7XG4gIH1cblxuICByZXR1cm4gZW50cnk7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNoZWNrc3VtKGVudHJ5KSB7XG4gIGxldCBjaGVja3N1bSA9IGVudHJ5LnN0YXRlO1xuICBpZiAoZW50cnkuZGVwcykge1xuICAgIGVudHJ5LmRlcHMuZm9yRWFjaChkZXBFbnRyeSA9PiB7XG4gICAgICBjaGVja3N1bSArPSBkZXBFbnRyeS5zdGF0ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjaGVja3N1bTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hEZWVwKGVudHJ5KSB7XG4gIGlmIChlbnRyeS5vYnNlcnZlZCkgZW1pdHRlci5kaXNwYXRjaChlbnRyeSk7XG4gIGlmIChlbnRyeS5jb250ZXh0cykgZW50cnkuY29udGV4dHMuZm9yRWFjaChkaXNwYXRjaERlZXApO1xufVxuXG5mdW5jdGlvbiByZXN0b3JlRGVlcERlcHMoZW50cnksIGRlcHMpIHtcbiAgaWYgKGRlcHMpIHtcbiAgICBkZXBzLmZvckVhY2goZGVwRW50cnkgPT4ge1xuICAgICAgZW50cnkuZGVwcy5hZGQoZGVwRW50cnkpO1xuXG4gICAgICBpZiAoZW50cnkub2JzZXJ2ZWQpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghZGVwRW50cnkuY29udGV4dHMpIGRlcEVudHJ5LmNvbnRleHRzID0gbmV3IFNldCgpO1xuICAgICAgICBkZXBFbnRyeS5jb250ZXh0cy5hZGQoZW50cnkpO1xuICAgICAgfVxuXG4gICAgICByZXN0b3JlRGVlcERlcHMoZW50cnksIGRlcEVudHJ5LmRlcHMpO1xuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IGNvbnRleHRTdGFjayA9IG5ldyBTZXQoKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXQodGFyZ2V0LCBrZXksIGdldHRlcikge1xuICBjb25zdCBlbnRyeSA9IGdldEVudHJ5KHRhcmdldCwga2V5KTtcblxuICBpZiAoY29udGV4dFN0YWNrLnNpemUgJiYgY29udGV4dFN0YWNrLmhhcyhlbnRyeSkpIHtcbiAgICB0aHJvdyBFcnJvcihgQ2lyY3VsYXIgZ2V0IGludm9jYXRpb24gaXMgZm9yYmlkZGVuOiAnJHtrZXl9J2ApO1xuICB9XG5cbiAgY29udGV4dFN0YWNrLmZvckVhY2goY29udGV4dCA9PiB7XG4gICAgaWYgKCFjb250ZXh0LmRlcHMpIGNvbnRleHQuZGVwcyA9IG5ldyBTZXQoKTtcbiAgICBjb250ZXh0LmRlcHMuYWRkKGVudHJ5KTtcblxuICAgIGlmIChjb250ZXh0Lm9ic2VydmVkKSB7XG4gICAgICBpZiAoIWVudHJ5LmNvbnRleHRzKSBlbnRyeS5jb250ZXh0cyA9IG5ldyBTZXQoKTtcbiAgICAgIGVudHJ5LmNvbnRleHRzLmFkZChjb250ZXh0KTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChlbnRyeS5jaGVja3N1bSAmJiBlbnRyeS5jaGVja3N1bSA9PT0gY2FsY3VsYXRlQ2hlY2tzdW0oZW50cnkpKSB7XG4gICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb250ZXh0U3RhY2suYWRkKGVudHJ5KTtcblxuICAgIGlmIChlbnRyeS5vYnNlcnZlZCAmJiBlbnRyeS5kZXBzICYmIGVudHJ5LmRlcHMuc2l6ZSkge1xuICAgICAgZW50cnkuZGVwcy5mb3JFYWNoKGRlcEVudHJ5ID0+IHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKGRlcEVudHJ5LmNvbnRleHRzKSBkZXBFbnRyeS5jb250ZXh0cy5kZWxldGUoZW50cnkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZW50cnkuZGVwcyA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBuZXh0VmFsdWUgPSBnZXR0ZXIodGFyZ2V0LCBlbnRyeS52YWx1ZSk7XG5cbiAgICBpZiAoZW50cnkuZGVwcykge1xuICAgICAgZW50cnkuZGVwcy5mb3JFYWNoKGRlcEVudHJ5ID0+IHtcbiAgICAgICAgcmVzdG9yZURlZXBEZXBzKGVudHJ5LCBkZXBFbnRyeS5kZXBzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChuZXh0VmFsdWUgIT09IGVudHJ5LnZhbHVlKSB7XG4gICAgICBlbnRyeS5zdGF0ZSArPSAxO1xuICAgICAgZW50cnkudmFsdWUgPSBuZXh0VmFsdWU7XG5cbiAgICAgIGRpc3BhdGNoRGVlcChlbnRyeSk7XG4gICAgfVxuXG4gICAgZW50cnkuY2hlY2tzdW0gPSBjYWxjdWxhdGVDaGVja3N1bShlbnRyeSk7XG4gICAgY29udGV4dFN0YWNrLmRlbGV0ZShlbnRyeSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlbnRyeS5jaGVja3N1bSA9IDA7XG5cbiAgICBjb250ZXh0U3RhY2suZGVsZXRlKGVudHJ5KTtcbiAgICBjb250ZXh0U3RhY2suZm9yRWFjaChjb250ZXh0ID0+IHtcbiAgICAgIGNvbnRleHQuZGVwcy5kZWxldGUoZW50cnkpO1xuICAgICAgaWYgKGNvbnRleHQub2JzZXJ2ZWQpIGVudHJ5LmNvbnRleHRzLmRlbGV0ZShjb250ZXh0KTtcbiAgICB9KTtcblxuICAgIHRocm93IGU7XG4gIH1cblxuICByZXR1cm4gZW50cnkudmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQodGFyZ2V0LCBrZXksIHNldHRlciwgdmFsdWUpIHtcbiAgY29uc3QgZW50cnkgPSBnZXRFbnRyeSh0YXJnZXQsIGtleSk7XG4gIGNvbnN0IG5ld1ZhbHVlID0gc2V0dGVyKHRhcmdldCwgdmFsdWUsIGVudHJ5LnZhbHVlKTtcblxuICBpZiAobmV3VmFsdWUgIT09IGVudHJ5LnZhbHVlKSB7XG4gICAgZW50cnkuY2hlY2tzdW0gPSAwO1xuICAgIGVudHJ5LnN0YXRlICs9IDE7XG4gICAgZW50cnkudmFsdWUgPSBuZXdWYWx1ZTtcblxuICAgIGRpc3BhdGNoRGVlcChlbnRyeSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludmFsaWRhdGUodGFyZ2V0LCBrZXksIGNsZWFyVmFsdWUpIHtcbiAgaWYgKGNvbnRleHRTdGFjay5zaXplKSB7XG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBgSW52YWxpZGF0aW5nIHByb3BlcnR5IGluIGNoYWluIG9mIGdldCBjYWxscyBpcyBmb3JiaWRkZW46ICcke2tleX0nYCxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgZW50cnkgPSBnZXRFbnRyeSh0YXJnZXQsIGtleSk7XG5cbiAgZW50cnkuY2hlY2tzdW0gPSAwO1xuICBlbnRyeS5zdGF0ZSArPSAxO1xuXG4gIGRpc3BhdGNoRGVlcChlbnRyeSk7XG5cbiAgaWYgKGNsZWFyVmFsdWUpIHtcbiAgICBlbnRyeS52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZSh0YXJnZXQsIGtleSwgZ2V0dGVyLCBmbikge1xuICBjb25zdCBlbnRyeSA9IGdldEVudHJ5KHRhcmdldCwga2V5KTtcbiAgZW50cnkub2JzZXJ2ZWQgPSB0cnVlO1xuXG4gIGxldCBsYXN0VmFsdWU7XG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gZW1pdHRlci5zdWJzY3JpYmUoZW50cnksICgpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGdldCh0YXJnZXQsIGtleSwgZ2V0dGVyKTtcbiAgICBpZiAodmFsdWUgIT09IGxhc3RWYWx1ZSkge1xuICAgICAgZm4odGFyZ2V0LCB2YWx1ZSwgbGFzdFZhbHVlKTtcbiAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGVudHJ5LmRlcHMpIHtcbiAgICBlbnRyeS5kZXBzLmZvckVhY2goZGVwRW50cnkgPT4ge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmICghZGVwRW50cnkuY29udGV4dHMpIGRlcEVudHJ5LmNvbnRleHRzID0gbmV3IFNldCgpO1xuICAgICAgZGVwRW50cnkuY29udGV4dHMuYWRkKGVudHJ5KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiB1bm9ic2VydmUoKSB7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgICBlbnRyeS5vYnNlcnZlZCA9IGZhbHNlO1xuICAgIGlmIChlbnRyeS5kZXBzICYmIGVudHJ5LmRlcHMuc2l6ZSkge1xuICAgICAgZW50cnkuZGVwcy5mb3JFYWNoKGRlcEVudHJ5ID0+IHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKGRlcEVudHJ5LmNvbnRleHRzKSBkZXBFbnRyeS5jb250ZXh0cy5kZWxldGUoZW50cnkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuIl19

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof$2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

	function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _typeof$2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }
	/* istanbul ignore next */

	try {
	  process$1.env.NODE_ENV;
	} catch (e) {
	  var process$1 = {
	    env: {
	      NODE_ENV: 'production'
	    }
	  };
	} // eslint-disable-line


	var defaultMethod = function defaultMethod(host, value) {
	  return value;
	};

	var callbacksMap = new WeakMap();
	var propsMap = new WeakMap();

	function compile(Hybrid, descriptors) {
	  Hybrid.hybrids = descriptors;
	  var callbacks = [];
	  var props = Object.keys(descriptors);
	  callbacksMap.set(Hybrid, callbacks);
	  propsMap.set(Hybrid, props);
	  props.forEach(function (key) {
	    var desc = descriptors[key];

	    var type = _typeof$2(desc);

	    var config;

	    if (type === "function") {
	      config = key === "render" ? render(desc) : {
	        get: desc
	      };
	    } else if (type !== "object" || desc === null || Array.isArray(desc)) {
	      config = property(desc);
	    } else {
	      config = {
	        get: desc.get || defaultMethod,
	        set: desc.set || !desc.get && defaultMethod || undefined,
	        connect: desc.connect,
	        observe: desc.observe
	      };
	    }

	    Object.defineProperty(Hybrid.prototype, key, {
	      get: function get$1() {
	        return get(this, key, config.get);
	      },
	      set: config.set && function set(newValue) {
	        set$1(this, key, config.set, newValue);
	      },
	      enumerable: true,
	      configurable: process$1.env.NODE_ENV !== "production"
	    });

	    if (config.observe) {
	      callbacks.unshift(function (host) {
	        return observe(host, key, config.get, config.observe);
	      });
	    }

	    if (config.connect) {
	      callbacks.push(function (host) {
	        return config.connect(host, key, function () {
	          invalidate(host, key);
	        });
	      });
	    }
	  });
	}

	var disconnects = new WeakMap();

	function defineElement(tagName, hybridsOrConstructor) {
	  var type = _typeof$2(hybridsOrConstructor);

	  if (type !== "object" && type !== "function") {
	    throw TypeError("Second argument must be an object or a function: ".concat(type));
	  }

	  var CustomElement = window.customElements.get(tagName);

	  if (type === "function") {
	    if (CustomElement !== hybridsOrConstructor) {
	      return window.customElements.define(tagName, hybridsOrConstructor);
	    }

	    return CustomElement;
	  }

	  if (CustomElement) {
	    if (CustomElement.hybrids === hybridsOrConstructor) {
	      return CustomElement;
	    }

	    throw Error("Element '".concat(tagName, "' already defined"));
	  }

	  var Hybrid = /*#__PURE__*/function (_HTMLElement) {
	    _inherits(Hybrid, _HTMLElement);

	    var _super = _createSuper(Hybrid);

	    _createClass(Hybrid, null, [{
	      key: "name",
	      get: function get() {
	        return tagName;
	      }
	    }]);

	    function Hybrid() {
	      var _this;

	      _classCallCheck(this, Hybrid);

	      _this = _super.call(this);
	      var props = propsMap.get(Hybrid);

	      for (var index = 0; index < props.length; index += 1) {
	        var key = props[index];

	        if (Object.prototype.hasOwnProperty.call(_assertThisInitialized(_this), key)) {
	          var value = _this[key];
	          delete _this[key];
	          _this[key] = value;
	        }
	      }

	      return _this;
	    }

	    _createClass(Hybrid, [{
	      key: "connectedCallback",
	      value: function connectedCallback() {
	        var callbacks = callbacksMap.get(Hybrid);
	        var list = [];

	        for (var index = 0; index < callbacks.length; index += 1) {
	          var cb = callbacks[index](this);
	          if (cb) list.push(cb);
	        }

	        disconnects.set(this, list);
	      }
	    }, {
	      key: "disconnectedCallback",
	      value: function disconnectedCallback() {
	        var list = disconnects.get(this);

	        for (var index = 0; index < list.length; index += 1) {
	          list[index]();
	        }
	      }
	    }]);

	    return Hybrid;
	  }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

	  compile(Hybrid, hybridsOrConstructor);
	  customElements.define(tagName, Hybrid);
	  return Hybrid;
	}

	function defineMap(elements) {
	  return Object.keys(elements).reduce(function (acc, key) {
	    var tagName = pascalToDash(key);
	    acc[key] = defineElement(tagName, elements[key]);
	    return acc;
	  }, {});
	}

	function define() {
	  if (_typeof$2(arguments.length <= 0 ? undefined : arguments[0]) === "object") {
	    return defineMap(arguments.length <= 0 ? undefined : arguments[0]);
	  }

	  return defineElement.apply(void 0, arguments);
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

	function walk(node, fn) {
	  var parentElement = node.parentElement || node.parentNode.host;

	  while (parentElement) {
	    var hybrids = parentElement.constructor.hybrids;

	    if (hybrids && fn(hybrids)) {
	      return parentElement;
	    }

	    parentElement = parentElement.parentElement || parentElement.parentNode && parentElement.parentNode.host;
	  }

	  return parentElement || null;
	}

	function parent(hybridsOrFn) {
	  var fn = typeof hybridsOrFn === "function" ? hybridsOrFn : function (hybrids) {
	    return hybrids === hybridsOrFn;
	  };
	  return {
	    get: function get(host) {
	      return walk(host, fn);
	    },
	    connect: function connect(host, key, invalidate) {
	      var target = host[key];

	      if (target) {
	        return invalidate;
	      }

	      return false;
	    }
	  };
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJlbnQuanMiXSwibmFtZXMiOlsid2FsayIsIm5vZGUiLCJmbiIsInBhcmVudEVsZW1lbnQiLCJwYXJlbnROb2RlIiwiaG9zdCIsImh5YnJpZHMiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsImh5YnJpZHNPckZuIiwiZ2V0IiwiY29ubmVjdCIsImtleSIsImludmFsaWRhdGUiLCJ0YXJnZXQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLElBQVQsQ0FBY0MsSUFBZCxFQUFvQkMsRUFBcEIsRUFBd0I7QUFDdEIsTUFBSUMsYUFBYSxHQUFHRixJQUFJLENBQUNFLGFBQUwsSUFBc0JGLElBQUksQ0FBQ0csVUFBTCxDQUFnQkMsSUFBMUQ7O0FBRUEsU0FBT0YsYUFBUCxFQUFzQjtBQUNwQixRQUFNRyxPQUFPLEdBQUdILGFBQWEsQ0FBQ0ksV0FBZCxDQUEwQkQsT0FBMUM7O0FBRUEsUUFBSUEsT0FBTyxJQUFJSixFQUFFLENBQUNJLE9BQUQsQ0FBakIsRUFBNEI7QUFDMUIsYUFBT0gsYUFBUDtBQUNEOztBQUVEQSxJQUFBQSxhQUFhLEdBQ1hBLGFBQWEsQ0FBQ0EsYUFBZCxJQUNDQSxhQUFhLENBQUNDLFVBQWQsSUFBNEJELGFBQWEsQ0FBQ0MsVUFBZCxDQUF5QkMsSUFGeEQ7QUFHRDs7QUFFRCxTQUFPRixhQUFhLElBQUksSUFBeEI7QUFDRDs7QUFFRCxlQUFlLFNBQVNLLE1BQVQsQ0FBZ0JDLFdBQWhCLEVBQTZCO0FBQzFDLE1BQU1QLEVBQUUsR0FDTixPQUFPTyxXQUFQLEtBQXVCLFVBQXZCLEdBQ0lBLFdBREosR0FFSSxVQUFBSCxPQUFPO0FBQUEsV0FBSUEsT0FBTyxLQUFLRyxXQUFoQjtBQUFBLEdBSGI7QUFJQSxTQUFPO0FBQ0xDLElBQUFBLEdBQUcsRUFBRSxhQUFBTCxJQUFJO0FBQUEsYUFBSUwsSUFBSSxDQUFDSyxJQUFELEVBQU9ILEVBQVAsQ0FBUjtBQUFBLEtBREo7QUFFTFMsSUFBQUEsT0FGSyxtQkFFR04sSUFGSCxFQUVTTyxHQUZULEVBRWNDLFVBRmQsRUFFMEI7QUFDN0IsVUFBTUMsTUFBTSxHQUFHVCxJQUFJLENBQUNPLEdBQUQsQ0FBbkI7O0FBQ0EsVUFBSUUsTUFBSixFQUFZO0FBQ1YsZUFBT0QsVUFBUDtBQUNEOztBQUNELGFBQU8sS0FBUDtBQUNEO0FBUkksR0FBUDtBQVVEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd2Fsayhub2RlLCBmbikge1xuICBsZXQgcGFyZW50RWxlbWVudCA9IG5vZGUucGFyZW50RWxlbWVudCB8fCBub2RlLnBhcmVudE5vZGUuaG9zdDtcblxuICB3aGlsZSAocGFyZW50RWxlbWVudCkge1xuICAgIGNvbnN0IGh5YnJpZHMgPSBwYXJlbnRFbGVtZW50LmNvbnN0cnVjdG9yLmh5YnJpZHM7XG5cbiAgICBpZiAoaHlicmlkcyAmJiBmbihoeWJyaWRzKSkge1xuICAgICAgcmV0dXJuIHBhcmVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcGFyZW50RWxlbWVudCA9XG4gICAgICBwYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQgfHxcbiAgICAgIChwYXJlbnRFbGVtZW50LnBhcmVudE5vZGUgJiYgcGFyZW50RWxlbWVudC5wYXJlbnROb2RlLmhvc3QpO1xuICB9XG5cbiAgcmV0dXJuIHBhcmVudEVsZW1lbnQgfHwgbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyZW50KGh5YnJpZHNPckZuKSB7XG4gIGNvbnN0IGZuID1cbiAgICB0eXBlb2YgaHlicmlkc09yRm4gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBoeWJyaWRzT3JGblxuICAgICAgOiBoeWJyaWRzID0+IGh5YnJpZHMgPT09IGh5YnJpZHNPckZuO1xuICByZXR1cm4ge1xuICAgIGdldDogaG9zdCA9PiB3YWxrKGhvc3QsIGZuKSxcbiAgICBjb25uZWN0KGhvc3QsIGtleSwgaW52YWxpZGF0ZSkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gaG9zdFtrZXldO1xuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gaW52YWxpZGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICB9O1xufVxuIl19

	function walk$1(node, fn, options) {
	  var items = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
	  Array.from(node.children).forEach(function (child) {
	    var hybrids = child.constructor.hybrids;

	    if (hybrids && fn(hybrids)) {
	      items.push(child);

	      if (options.deep && options.nested) {
	        walk$1(child, fn, options, items);
	      }
	    } else if (options.deep) {
	      walk$1(child, fn, options, items);
	    }
	  });
	  return items;
	}

	function children(hybridsOrFn) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
	    deep: false,
	    nested: false
	  };
	  var fn = typeof hybridsOrFn === "function" ? hybridsOrFn : function (hybrids) {
	    return hybrids === hybridsOrFn;
	  };
	  return {
	    get: function get(host) {
	      return walk$1(host, fn, options);
	    },
	    connect: function connect(host, key, invalidate) {
	      var observer = new MutationObserver(invalidate);
	      observer.observe(host, {
	        childList: true,
	        subtree: !!options.deep
	      });
	      return function () {
	        observer.disconnect();
	      };
	    }
	  };
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGlsZHJlbi5qcyJdLCJuYW1lcyI6WyJ3YWxrIiwibm9kZSIsImZuIiwib3B0aW9ucyIsIml0ZW1zIiwiQXJyYXkiLCJmcm9tIiwiY2hpbGRyZW4iLCJmb3JFYWNoIiwiY2hpbGQiLCJoeWJyaWRzIiwiY29uc3RydWN0b3IiLCJwdXNoIiwiZGVlcCIsIm5lc3RlZCIsImh5YnJpZHNPckZuIiwiZ2V0IiwiaG9zdCIsImNvbm5lY3QiLCJrZXkiLCJpbnZhbGlkYXRlIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJkaXNjb25uZWN0Il0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxJQUFULENBQWNDLElBQWQsRUFBb0JDLEVBQXBCLEVBQXdCQyxPQUF4QixFQUE2QztBQUFBLE1BQVpDLEtBQVksdUVBQUosRUFBSTtBQUMzQ0MsRUFBQUEsS0FBSyxDQUFDQyxJQUFOLENBQVdMLElBQUksQ0FBQ00sUUFBaEIsRUFBMEJDLE9BQTFCLENBQWtDLFVBQUFDLEtBQUssRUFBSTtBQUN6QyxRQUFNQyxPQUFPLEdBQUdELEtBQUssQ0FBQ0UsV0FBTixDQUFrQkQsT0FBbEM7O0FBQ0EsUUFBSUEsT0FBTyxJQUFJUixFQUFFLENBQUNRLE9BQUQsQ0FBakIsRUFBNEI7QUFDMUJOLE1BQUFBLEtBQUssQ0FBQ1EsSUFBTixDQUFXSCxLQUFYOztBQUNBLFVBQUlOLE9BQU8sQ0FBQ1UsSUFBUixJQUFnQlYsT0FBTyxDQUFDVyxNQUE1QixFQUFvQztBQUNsQ2QsUUFBQUEsSUFBSSxDQUFDUyxLQUFELEVBQVFQLEVBQVIsRUFBWUMsT0FBWixFQUFxQkMsS0FBckIsQ0FBSjtBQUNEO0FBQ0YsS0FMRCxNQUtPLElBQUlELE9BQU8sQ0FBQ1UsSUFBWixFQUFrQjtBQUN2QmIsTUFBQUEsSUFBSSxDQUFDUyxLQUFELEVBQVFQLEVBQVIsRUFBWUMsT0FBWixFQUFxQkMsS0FBckIsQ0FBSjtBQUNEO0FBQ0YsR0FWRDtBQVlBLFNBQU9BLEtBQVA7QUFDRDs7QUFFRCxlQUFlLFNBQVNHLFFBQVQsQ0FDYlEsV0FEYSxFQUdiO0FBQUEsTUFEQVosT0FDQSx1RUFEVTtBQUFFVSxJQUFBQSxJQUFJLEVBQUUsS0FBUjtBQUFlQyxJQUFBQSxNQUFNLEVBQUU7QUFBdkIsR0FDVjtBQUNBLE1BQU1aLEVBQUUsR0FDTixPQUFPYSxXQUFQLEtBQXVCLFVBQXZCLEdBQ0lBLFdBREosR0FFSSxVQUFBTCxPQUFPO0FBQUEsV0FBSUEsT0FBTyxLQUFLSyxXQUFoQjtBQUFBLEdBSGI7QUFJQSxTQUFPO0FBQ0xDLElBQUFBLEdBREssZUFDREMsSUFEQyxFQUNLO0FBQ1IsYUFBT2pCLElBQUksQ0FBQ2lCLElBQUQsRUFBT2YsRUFBUCxFQUFXQyxPQUFYLENBQVg7QUFDRCxLQUhJO0FBSUxlLElBQUFBLE9BSkssbUJBSUdELElBSkgsRUFJU0UsR0FKVCxFQUljQyxVQUpkLEVBSTBCO0FBQzdCLFVBQU1DLFFBQVEsR0FBRyxJQUFJQyxnQkFBSixDQUFxQkYsVUFBckIsQ0FBakI7QUFFQUMsTUFBQUEsUUFBUSxDQUFDRSxPQUFULENBQWlCTixJQUFqQixFQUF1QjtBQUNyQk8sUUFBQUEsU0FBUyxFQUFFLElBRFU7QUFFckJDLFFBQUFBLE9BQU8sRUFBRSxDQUFDLENBQUN0QixPQUFPLENBQUNVO0FBRkUsT0FBdkI7QUFLQSxhQUFPLFlBQU07QUFDWFEsUUFBQUEsUUFBUSxDQUFDSyxVQUFUO0FBQ0QsT0FGRDtBQUdEO0FBZkksR0FBUDtBQWlCRCIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHdhbGsobm9kZSwgZm4sIG9wdGlvbnMsIGl0ZW1zID0gW10pIHtcbiAgQXJyYXkuZnJvbShub2RlLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICBjb25zdCBoeWJyaWRzID0gY2hpbGQuY29uc3RydWN0b3IuaHlicmlkcztcbiAgICBpZiAoaHlicmlkcyAmJiBmbihoeWJyaWRzKSkge1xuICAgICAgaXRlbXMucHVzaChjaGlsZCk7XG4gICAgICBpZiAob3B0aW9ucy5kZWVwICYmIG9wdGlvbnMubmVzdGVkKSB7XG4gICAgICAgIHdhbGsoY2hpbGQsIGZuLCBvcHRpb25zLCBpdGVtcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmRlZXApIHtcbiAgICAgIHdhbGsoY2hpbGQsIGZuLCBvcHRpb25zLCBpdGVtcyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaXRlbXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoaWxkcmVuKFxuICBoeWJyaWRzT3JGbixcbiAgb3B0aW9ucyA9IHsgZGVlcDogZmFsc2UsIG5lc3RlZDogZmFsc2UgfSxcbikge1xuICBjb25zdCBmbiA9XG4gICAgdHlwZW9mIGh5YnJpZHNPckZuID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gaHlicmlkc09yRm5cbiAgICAgIDogaHlicmlkcyA9PiBoeWJyaWRzID09PSBoeWJyaWRzT3JGbjtcbiAgcmV0dXJuIHtcbiAgICBnZXQoaG9zdCkge1xuICAgICAgcmV0dXJuIHdhbGsoaG9zdCwgZm4sIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgY29ubmVjdChob3N0LCBrZXksIGludmFsaWRhdGUpIHtcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoaW52YWxpZGF0ZSk7XG5cbiAgICAgIG9ic2VydmVyLm9ic2VydmUoaG9zdCwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6ICEhb3B0aW9ucy5kZWVwLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH07XG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==

	var map$3 = new WeakMap();
	var dataMap = {
	  get: function get(key, defaultValue) {
	    var value = map$3.get(key);
	    if (value) return value;

	    if (defaultValue) {
	      map$3.set(key, defaultValue);
	    }

	    return defaultValue;
	  },
	  set: function set(key, value) {
	    map$3.set(key, value);
	    return value;
	  }
	};
	function getTemplateEnd(node) {
	  var data; // eslint-disable-next-line no-cond-assign

	  while (node && (data = dataMap.get(node)) && data.endNode) {
	    node = data.endNode;
	  }

	  return node;
	}
	function removeTemplate(target) {
	  if (target.nodeType !== Node.TEXT_NODE) {
	    var child = target.childNodes[0];

	    while (child) {
	      target.removeChild(child);
	      child = target.childNodes[0];
	    }
	  } else {
	    var data = dataMap.get(target);

	    if (data.startNode) {
	      var endNode = getTemplateEnd(data.endNode);
	      var node = data.startNode;
	      var lastNextSibling = endNode.nextSibling;

	      while (node) {
	        var nextSibling = node.nextSibling;
	        node.parentNode.removeChild(node);
	        node = nextSibling !== lastNextSibling && nextSibling;
	      }
	    }
	  }
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS91dGlscy5qcyJdLCJuYW1lcyI6WyJtYXAiLCJXZWFrTWFwIiwiZGF0YU1hcCIsImdldCIsImtleSIsImRlZmF1bHRWYWx1ZSIsInZhbHVlIiwic2V0IiwiZ2V0VGVtcGxhdGVFbmQiLCJub2RlIiwiZGF0YSIsImVuZE5vZGUiLCJyZW1vdmVUZW1wbGF0ZSIsInRhcmdldCIsIm5vZGVUeXBlIiwiTm9kZSIsIlRFWFRfTk9ERSIsImNoaWxkIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwic3RhcnROb2RlIiwibGFzdE5leHRTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxHQUFHLEdBQUcsSUFBSUMsT0FBSixFQUFaO0FBQ0EsT0FBTyxJQUFNQyxPQUFPLEdBQUc7QUFDckJDLEVBQUFBLEdBRHFCLGVBQ2pCQyxHQURpQixFQUNaQyxZQURZLEVBQ0U7QUFDckIsUUFBTUMsS0FBSyxHQUFHTixHQUFHLENBQUNHLEdBQUosQ0FBUUMsR0FBUixDQUFkO0FBQ0EsUUFBSUUsS0FBSixFQUFXLE9BQU9BLEtBQVA7O0FBRVgsUUFBSUQsWUFBSixFQUFrQjtBQUNoQkwsTUFBQUEsR0FBRyxDQUFDTyxHQUFKLENBQVFILEdBQVIsRUFBYUMsWUFBYjtBQUNEOztBQUVELFdBQU9BLFlBQVA7QUFDRCxHQVZvQjtBQVdyQkUsRUFBQUEsR0FYcUIsZUFXakJILEdBWGlCLEVBV1pFLEtBWFksRUFXTDtBQUNkTixJQUFBQSxHQUFHLENBQUNPLEdBQUosQ0FBUUgsR0FBUixFQUFhRSxLQUFiO0FBQ0EsV0FBT0EsS0FBUDtBQUNEO0FBZG9CLENBQWhCO0FBaUJQLE9BQU8sU0FBU0UsY0FBVCxDQUF3QkMsSUFBeEIsRUFBOEI7QUFDbkMsTUFBSUMsSUFBSixDQURtQyxDQUVuQzs7QUFDQSxTQUFPRCxJQUFJLEtBQUtDLElBQUksR0FBR1IsT0FBTyxDQUFDQyxHQUFSLENBQVlNLElBQVosQ0FBWixDQUFKLElBQXNDQyxJQUFJLENBQUNDLE9BQWxELEVBQTJEO0FBQ3pERixJQUFBQSxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsT0FBWjtBQUNEOztBQUVELFNBQU9GLElBQVA7QUFDRDtBQUVELE9BQU8sU0FBU0csY0FBVCxDQUF3QkMsTUFBeEIsRUFBZ0M7QUFDckMsTUFBSUEsTUFBTSxDQUFDQyxRQUFQLEtBQW9CQyxJQUFJLENBQUNDLFNBQTdCLEVBQXdDO0FBQ3RDLFFBQUlDLEtBQUssR0FBR0osTUFBTSxDQUFDSyxVQUFQLENBQWtCLENBQWxCLENBQVo7O0FBQ0EsV0FBT0QsS0FBUCxFQUFjO0FBQ1pKLE1BQUFBLE1BQU0sQ0FBQ00sV0FBUCxDQUFtQkYsS0FBbkI7QUFDQUEsTUFBQUEsS0FBSyxHQUFHSixNQUFNLENBQUNLLFVBQVAsQ0FBa0IsQ0FBbEIsQ0FBUjtBQUNEO0FBQ0YsR0FORCxNQU1PO0FBQ0wsUUFBTVIsSUFBSSxHQUFHUixPQUFPLENBQUNDLEdBQVIsQ0FBWVUsTUFBWixDQUFiOztBQUVBLFFBQUlILElBQUksQ0FBQ1UsU0FBVCxFQUFvQjtBQUNsQixVQUFNVCxPQUFPLEdBQUdILGNBQWMsQ0FBQ0UsSUFBSSxDQUFDQyxPQUFOLENBQTlCO0FBRUEsVUFBSUYsSUFBSSxHQUFHQyxJQUFJLENBQUNVLFNBQWhCO0FBQ0EsVUFBTUMsZUFBZSxHQUFHVixPQUFPLENBQUNXLFdBQWhDOztBQUVBLGFBQU9iLElBQVAsRUFBYTtBQUNYLFlBQU1hLFdBQVcsR0FBR2IsSUFBSSxDQUFDYSxXQUF6QjtBQUNBYixRQUFBQSxJQUFJLENBQUNjLFVBQUwsQ0FBZ0JKLFdBQWhCLENBQTRCVixJQUE1QjtBQUNBQSxRQUFBQSxJQUFJLEdBQUdhLFdBQVcsS0FBS0QsZUFBaEIsSUFBbUNDLFdBQTFDO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtYXAgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGNvbnN0IGRhdGFNYXAgPSB7XG4gIGdldChrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlID0gbWFwLmdldChrZXkpO1xuICAgIGlmICh2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgaWYgKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgbWFwLnNldChrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfSxcbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZW1wbGF0ZUVuZChub2RlKSB7XG4gIGxldCBkYXRhO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgd2hpbGUgKG5vZGUgJiYgKGRhdGEgPSBkYXRhTWFwLmdldChub2RlKSkgJiYgZGF0YS5lbmROb2RlKSB7XG4gICAgbm9kZSA9IGRhdGEuZW5kTm9kZTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVGVtcGxhdGUodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgbGV0IGNoaWxkID0gdGFyZ2V0LmNoaWxkTm9kZXNbMF07XG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICB0YXJnZXQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgY2hpbGQgPSB0YXJnZXQuY2hpbGROb2Rlc1swXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZGF0YSA9IGRhdGFNYXAuZ2V0KHRhcmdldCk7XG5cbiAgICBpZiAoZGF0YS5zdGFydE5vZGUpIHtcbiAgICAgIGNvbnN0IGVuZE5vZGUgPSBnZXRUZW1wbGF0ZUVuZChkYXRhLmVuZE5vZGUpO1xuXG4gICAgICBsZXQgbm9kZSA9IGRhdGEuc3RhcnROb2RlO1xuICAgICAgY29uc3QgbGFzdE5leHRTaWJsaW5nID0gZW5kTm9kZS5uZXh0U2libGluZztcblxuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgY29uc3QgbmV4dFNpYmxpbmcgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgIG5vZGUgPSBuZXh0U2libGluZyAhPT0gbGFzdE5leHRTaWJsaW5nICYmIG5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19

	var arrayMap = new WeakMap();

	function movePlaceholder(target, previousSibling) {
	  var data = dataMap.get(target);
	  var startNode = data.startNode;
	  var endNode = getTemplateEnd(data.endNode);
	  previousSibling.parentNode.insertBefore(target, previousSibling.nextSibling);
	  var prevNode = target;
	  var node = startNode;

	  while (node) {
	    var nextNode = node.nextSibling;
	    prevNode.parentNode.insertBefore(node, prevNode.nextSibling);
	    prevNode = node;
	    node = nextNode !== endNode.nextSibling && nextNode;
	  }
	}

	function resolveArray(host, target, value, resolveValue) {
	  var lastEntries = arrayMap.get(target);
	  var entries = value.map(function (item, index) {
	    return {
	      id: Object.prototype.hasOwnProperty.call(item, "id") ? item.id : index,
	      value: item,
	      placeholder: null,
	      available: true
	    };
	  });
	  arrayMap.set(target, entries);

	  if (lastEntries) {
	    var ids = new Set();
	    entries.forEach(function (entry) {
	      return ids.add(entry.id);
	    });
	    lastEntries = lastEntries.filter(function (entry) {
	      if (!ids.has(entry.id)) {
	        removeTemplate(entry.placeholder);
	        entry.placeholder.parentNode.removeChild(entry.placeholder);
	        return false;
	      }

	      return true;
	    });
	  }

	  var previousSibling = target;
	  var lastIndex = value.length - 1;
	  var data = dataMap.get(target);

	  for (var index = 0; index < entries.length; index += 1) {
	    var entry = entries[index];
	    var matchedEntry = void 0;

	    if (lastEntries) {
	      for (var i = 0; i < lastEntries.length; i += 1) {
	        if (lastEntries[i].available && lastEntries[i].id === entry.id) {
	          matchedEntry = lastEntries[i];
	          break;
	        }
	      }
	    }

	    var placeholder = void 0;

	    if (matchedEntry) {
	      matchedEntry.available = false;
	      placeholder = matchedEntry.placeholder;

	      if (placeholder.previousSibling !== previousSibling) {
	        movePlaceholder(placeholder, previousSibling);
	      }

	      if (matchedEntry.value !== entry.value) {
	        resolveValue(host, placeholder, entry.value);
	      }
	    } else {
	      placeholder = document.createTextNode("");
	      previousSibling.parentNode.insertBefore(placeholder, previousSibling.nextSibling);
	      resolveValue(host, placeholder, entry.value);
	    }

	    previousSibling = getTemplateEnd(dataMap.get(placeholder).endNode || placeholder);
	    if (index === 0) data.startNode = placeholder;
	    if (index === lastIndex) data.endNode = previousSibling;
	    entry.placeholder = placeholder;
	  }

	  if (lastEntries) {
	    lastEntries.forEach(function (entry) {
	      if (entry.available) {
	        removeTemplate(entry.placeholder);
	        entry.placeholder.parentNode.removeChild(entry.placeholder);
	      }
	    });
	  }
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

	function _typeof$3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }
	function resolveValue(host, target, value) {
	  var type = Array.isArray(value) ? "array" : _typeof$3(value);
	  var data = dataMap.get(target, {});

	  if (data.type !== type) {
	    removeTemplate(target);
	    if (type === "array") arrayMap.delete(target);
	    data = dataMap.set(target, {
	      type: type
	    });

	    if (target.textContent !== "") {
	      target.textContent = "";
	    }
	  }

	  switch (type) {
	    case "function":
	      value(host, target);
	      break;

	    case "array":
	      resolveArray(host, target, value, resolveValue);
	      break;

	    default:
	      target.textContent = type === "number" || value ? value : "";
	  }
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvdmFsdWUuanMiXSwibmFtZXMiOlsiZGF0YU1hcCIsInJlbW92ZVRlbXBsYXRlIiwicmVzb2x2ZUFycmF5IiwiYXJyYXlNYXAiLCJyZXNvbHZlVmFsdWUiLCJob3N0IiwidGFyZ2V0IiwidmFsdWUiLCJ0eXBlIiwiQXJyYXkiLCJpc0FycmF5IiwiZGF0YSIsImdldCIsImRlbGV0ZSIsInNldCIsInRleHRDb250ZW50Il0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLE9BQVQsRUFBa0JDLGNBQWxCLFFBQXdDLGFBQXhDO0FBQ0EsT0FBT0MsWUFBUCxJQUF1QkMsUUFBdkIsUUFBdUMsWUFBdkM7QUFFQSxlQUFlLFNBQVNDLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCQyxNQUE1QixFQUFvQ0MsS0FBcEMsRUFBMkM7QUFDeEQsTUFBTUMsSUFBSSxHQUFHQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsS0FBZCxJQUF1QixPQUF2QixXQUF3Q0EsS0FBeEMsQ0FBYjtBQUNBLE1BQUlJLElBQUksR0FBR1gsT0FBTyxDQUFDWSxHQUFSLENBQVlOLE1BQVosRUFBb0IsRUFBcEIsQ0FBWDs7QUFFQSxNQUFJSyxJQUFJLENBQUNILElBQUwsS0FBY0EsSUFBbEIsRUFBd0I7QUFDdEJQLElBQUFBLGNBQWMsQ0FBQ0ssTUFBRCxDQUFkO0FBQ0EsUUFBSUUsSUFBSSxLQUFLLE9BQWIsRUFBc0JMLFFBQVEsQ0FBQ1UsTUFBVCxDQUFnQlAsTUFBaEI7QUFFdEJLLElBQUFBLElBQUksR0FBR1gsT0FBTyxDQUFDYyxHQUFSLENBQVlSLE1BQVosRUFBb0I7QUFBRUUsTUFBQUEsSUFBSSxFQUFKQTtBQUFGLEtBQXBCLENBQVA7O0FBRUEsUUFBSUYsTUFBTSxDQUFDUyxXQUFQLEtBQXVCLEVBQTNCLEVBQStCO0FBQzdCVCxNQUFBQSxNQUFNLENBQUNTLFdBQVAsR0FBcUIsRUFBckI7QUFDRDtBQUNGOztBQUVELFVBQVFQLElBQVI7QUFDRSxTQUFLLFVBQUw7QUFDRUQsTUFBQUEsS0FBSyxDQUFDRixJQUFELEVBQU9DLE1BQVAsQ0FBTDtBQUNBOztBQUNGLFNBQUssT0FBTDtBQUNFSixNQUFBQSxZQUFZLENBQUNHLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxLQUFmLEVBQXNCSCxZQUF0QixDQUFaO0FBQ0E7O0FBQ0Y7QUFDRUUsTUFBQUEsTUFBTSxDQUFDUyxXQUFQLEdBQXFCUCxJQUFJLEtBQUssUUFBVCxJQUFxQkQsS0FBckIsR0FBNkJBLEtBQTdCLEdBQXFDLEVBQTFEO0FBUko7QUFVRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRhdGFNYXAsIHJlbW92ZVRlbXBsYXRlIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgcmVzb2x2ZUFycmF5LCB7IGFycmF5TWFwIH0gZnJvbSBcIi4vYXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgY29uc3QgdHlwZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gXCJhcnJheVwiIDogdHlwZW9mIHZhbHVlO1xuICBsZXQgZGF0YSA9IGRhdGFNYXAuZ2V0KHRhcmdldCwge30pO1xuXG4gIGlmIChkYXRhLnR5cGUgIT09IHR5cGUpIHtcbiAgICByZW1vdmVUZW1wbGF0ZSh0YXJnZXQpO1xuICAgIGlmICh0eXBlID09PSBcImFycmF5XCIpIGFycmF5TWFwLmRlbGV0ZSh0YXJnZXQpO1xuXG4gICAgZGF0YSA9IGRhdGFNYXAuc2V0KHRhcmdldCwgeyB0eXBlIH0pO1xuXG4gICAgaWYgKHRhcmdldC50ZXh0Q29udGVudCAhPT0gXCJcIikge1xuICAgICAgdGFyZ2V0LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICB9XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIHZhbHVlKGhvc3QsIHRhcmdldCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgIHJlc29sdmVBcnJheShob3N0LCB0YXJnZXQsIHZhbHVlLCByZXNvbHZlVmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRhcmdldC50ZXh0Q29udGVudCA9IHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdmFsdWUgPyB2YWx1ZSA6IFwiXCI7XG4gIH1cbn1cbiJdfQ==

	function _typeof$4(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

	var targets = new WeakMap();
	function resolveEventListener(eventType) {
	  return function (host, target, value, lastValue) {
	    if (lastValue) {
	      var eventMap = targets.get(target);

	      if (eventMap) {
	        target.removeEventListener(eventType, eventMap.get(lastValue), lastValue.options !== undefined ? lastValue.options : false);
	      }
	    }

	    if (value) {
	      if (typeof value !== "function") {
	        throw Error("Event listener must be a function: ".concat(_typeof$4(value)));
	      }

	      var _eventMap = targets.get(target);

	      if (!_eventMap) {
	        _eventMap = new WeakMap();
	        targets.set(target, _eventMap);
	      }

	      var callback = value.bind(null, host);

	      _eventMap.set(value, callback);

	      target.addEventListener(eventType, callback, value.options !== undefined ? value.options : false);
	    }
	  };
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvZXZlbnQuanMiXSwibmFtZXMiOlsidGFyZ2V0cyIsIldlYWtNYXAiLCJyZXNvbHZlRXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZSIsImhvc3QiLCJ0YXJnZXQiLCJ2YWx1ZSIsImxhc3RWYWx1ZSIsImV2ZW50TWFwIiwiZ2V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJFcnJvciIsInNldCIsImNhbGxiYWNrIiwiYmluZCIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsT0FBTyxHQUFHLElBQUlDLE9BQUosRUFBaEI7QUFFQSxlQUFlLFNBQVNDLG9CQUFULENBQThCQyxTQUE5QixFQUF5QztBQUN0RCxTQUFPLFVBQUNDLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxLQUFmLEVBQXNCQyxTQUF0QixFQUFvQztBQUN6QyxRQUFJQSxTQUFKLEVBQWU7QUFDYixVQUFNQyxRQUFRLEdBQUdSLE9BQU8sQ0FBQ1MsR0FBUixDQUFZSixNQUFaLENBQWpCOztBQUNBLFVBQUlHLFFBQUosRUFBYztBQUNaSCxRQUFBQSxNQUFNLENBQUNLLG1CQUFQLENBQ0VQLFNBREYsRUFFRUssUUFBUSxDQUFDQyxHQUFULENBQWFGLFNBQWIsQ0FGRixFQUdFQSxTQUFTLENBQUNJLE9BQVYsS0FBc0JDLFNBQXRCLEdBQWtDTCxTQUFTLENBQUNJLE9BQTVDLEdBQXNELEtBSHhEO0FBS0Q7QUFDRjs7QUFFRCxRQUFJTCxLQUFKLEVBQVc7QUFDVCxVQUFJLE9BQU9BLEtBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDL0IsY0FBTU8sS0FBSyxzREFBOENQLEtBQTlDLEdBQVg7QUFDRDs7QUFFRCxVQUFJRSxTQUFRLEdBQUdSLE9BQU8sQ0FBQ1MsR0FBUixDQUFZSixNQUFaLENBQWY7O0FBQ0EsVUFBSSxDQUFDRyxTQUFMLEVBQWU7QUFDYkEsUUFBQUEsU0FBUSxHQUFHLElBQUlQLE9BQUosRUFBWDtBQUNBRCxRQUFBQSxPQUFPLENBQUNjLEdBQVIsQ0FBWVQsTUFBWixFQUFvQkcsU0FBcEI7QUFDRDs7QUFFRCxVQUFNTyxRQUFRLEdBQUdULEtBQUssQ0FBQ1UsSUFBTixDQUFXLElBQVgsRUFBaUJaLElBQWpCLENBQWpCOztBQUNBSSxNQUFBQSxTQUFRLENBQUNNLEdBQVQsQ0FBYVIsS0FBYixFQUFvQlMsUUFBcEI7O0FBRUFWLE1BQUFBLE1BQU0sQ0FBQ1ksZ0JBQVAsQ0FDRWQsU0FERixFQUVFWSxRQUZGLEVBR0VULEtBQUssQ0FBQ0ssT0FBTixLQUFrQkMsU0FBbEIsR0FBOEJOLEtBQUssQ0FBQ0ssT0FBcEMsR0FBOEMsS0FIaEQ7QUFLRDtBQUNGLEdBaENEO0FBaUNEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFyZ2V0cyA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSkge1xuICByZXR1cm4gKGhvc3QsIHRhcmdldCwgdmFsdWUsIGxhc3RWYWx1ZSkgPT4ge1xuICAgIGlmIChsYXN0VmFsdWUpIHtcbiAgICAgIGNvbnN0IGV2ZW50TWFwID0gdGFyZ2V0cy5nZXQodGFyZ2V0KTtcbiAgICAgIGlmIChldmVudE1hcCkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgZXZlbnRNYXAuZ2V0KGxhc3RWYWx1ZSksXG4gICAgICAgICAgbGFzdFZhbHVlLm9wdGlvbnMgIT09IHVuZGVmaW5lZCA/IGxhc3RWYWx1ZS5vcHRpb25zIDogZmFsc2UsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYEV2ZW50IGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbjogJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgICB9XG5cbiAgICAgIGxldCBldmVudE1hcCA9IHRhcmdldHMuZ2V0KHRhcmdldCk7XG4gICAgICBpZiAoIWV2ZW50TWFwKSB7XG4gICAgICAgIGV2ZW50TWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgdGFyZ2V0cy5zZXQodGFyZ2V0LCBldmVudE1hcCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gdmFsdWUuYmluZChudWxsLCBob3N0KTtcbiAgICAgIGV2ZW50TWFwLnNldCh2YWx1ZSwgY2FsbGJhY2spO1xuXG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgdmFsdWUub3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gdmFsdWUub3B0aW9ucyA6IGZhbHNlLFxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0=

	function _typeof$5(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }

	function normalizeValue(value) {
	  var set = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();

	  if (Array.isArray(value)) {
	    value.forEach(function (className) {
	      return set.add(className);
	    });
	  } else if (value !== null && _typeof$5(value) === "object") {
	    Object.keys(value).forEach(function (key) {
	      return value[key] && set.add(key);
	    });
	  } else {
	    set.add(value);
	  }

	  return set;
	}

	var classMap = new WeakMap();
	function resolveClassList(host, target, value) {
	  var previousList = classMap.get(target) || new Set();
	  var list = normalizeValue(value);
	  classMap.set(target, list);
	  list.forEach(function (className) {
	    target.classList.add(className);
	    previousList.delete(className);
	  });
	  previousList.forEach(function (className) {
	    target.classList.remove(className);
	  });
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvY2xhc3MuanMiXSwibmFtZXMiOlsibm9ybWFsaXplVmFsdWUiLCJ2YWx1ZSIsInNldCIsIlNldCIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJjbGFzc05hbWUiLCJhZGQiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiY2xhc3NNYXAiLCJXZWFrTWFwIiwicmVzb2x2ZUNsYXNzTGlzdCIsImhvc3QiLCJ0YXJnZXQiLCJwcmV2aW91c0xpc3QiLCJnZXQiLCJsaXN0IiwiY2xhc3NMaXN0IiwiZGVsZXRlIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQWdEO0FBQUEsTUFBakJDLEdBQWlCLHVFQUFYLElBQUlDLEdBQUosRUFBVzs7QUFDOUMsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNKLEtBQWQsQ0FBSixFQUEwQjtBQUN4QkEsSUFBQUEsS0FBSyxDQUFDSyxPQUFOLENBQWMsVUFBQUMsU0FBUztBQUFBLGFBQUlMLEdBQUcsQ0FBQ00sR0FBSixDQUFRRCxTQUFSLENBQUo7QUFBQSxLQUF2QjtBQUNELEdBRkQsTUFFTyxJQUFJTixLQUFLLEtBQUssSUFBVixJQUFrQixRQUFPQSxLQUFQLE1BQWlCLFFBQXZDLEVBQWlEO0FBQ3REUSxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWVQsS0FBWixFQUFtQkssT0FBbkIsQ0FBMkIsVUFBQUssR0FBRztBQUFBLGFBQUlWLEtBQUssQ0FBQ1UsR0FBRCxDQUFMLElBQWNULEdBQUcsQ0FBQ00sR0FBSixDQUFRRyxHQUFSLENBQWxCO0FBQUEsS0FBOUI7QUFDRCxHQUZNLE1BRUE7QUFDTFQsSUFBQUEsR0FBRyxDQUFDTSxHQUFKLENBQVFQLEtBQVI7QUFDRDs7QUFFRCxTQUFPQyxHQUFQO0FBQ0Q7O0FBRUQsSUFBTVUsUUFBUSxHQUFHLElBQUlDLE9BQUosRUFBakI7QUFFQSxlQUFlLFNBQVNDLGdCQUFULENBQTBCQyxJQUExQixFQUFnQ0MsTUFBaEMsRUFBd0NmLEtBQXhDLEVBQStDO0FBQzVELE1BQU1nQixZQUFZLEdBQUdMLFFBQVEsQ0FBQ00sR0FBVCxDQUFhRixNQUFiLEtBQXdCLElBQUliLEdBQUosRUFBN0M7QUFDQSxNQUFNZ0IsSUFBSSxHQUFHbkIsY0FBYyxDQUFDQyxLQUFELENBQTNCO0FBRUFXLEVBQUFBLFFBQVEsQ0FBQ1YsR0FBVCxDQUFhYyxNQUFiLEVBQXFCRyxJQUFyQjtBQUVBQSxFQUFBQSxJQUFJLENBQUNiLE9BQUwsQ0FBYSxVQUFBQyxTQUFTLEVBQUk7QUFDeEJTLElBQUFBLE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQlosR0FBakIsQ0FBcUJELFNBQXJCO0FBQ0FVLElBQUFBLFlBQVksQ0FBQ0ksTUFBYixDQUFvQmQsU0FBcEI7QUFDRCxHQUhEO0FBS0FVLEVBQUFBLFlBQVksQ0FBQ1gsT0FBYixDQUFxQixVQUFBQyxTQUFTLEVBQUk7QUFDaENTLElBQUFBLE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQkUsTUFBakIsQ0FBd0JmLFNBQXhCO0FBQ0QsR0FGRDtBQUdEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUsIHNldCA9IG5ldyBTZXQoKSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGNsYXNzTmFtZSA9PiBzZXQuYWRkKGNsYXNzTmFtZSkpO1xuICB9IGVsc2UgaWYgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGtleSA9PiB2YWx1ZVtrZXldICYmIHNldC5hZGQoa2V5KSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0LmFkZCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG5jb25zdCBjbGFzc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVDbGFzc0xpc3QoaG9zdCwgdGFyZ2V0LCB2YWx1ZSkge1xuICBjb25zdCBwcmV2aW91c0xpc3QgPSBjbGFzc01hcC5nZXQodGFyZ2V0KSB8fCBuZXcgU2V0KCk7XG4gIGNvbnN0IGxpc3QgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgY2xhc3NNYXAuc2V0KHRhcmdldCwgbGlzdCk7XG5cbiAgbGlzdC5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICBwcmV2aW91c0xpc3QuZGVsZXRlKGNsYXNzTmFtZSk7XG4gIH0pO1xuXG4gIHByZXZpb3VzTGlzdC5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfSk7XG59XG4iXX0=

	function _typeof$6(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }
	var styleMap = new WeakMap();
	function resolveStyle(host, target, value) {
	  if (value === null || _typeof$6(value) !== "object") {
	    throw TypeError("Style value must be an object in ".concat(stringifyElement(target), ":"), value);
	  }

	  var previousMap = styleMap.get(target) || new Map();
	  var nextMap = Object.keys(value).reduce(function (map, key) {
	    var dashKey = camelToDash(key);
	    var styleValue = value[key];

	    if (!styleValue && styleValue !== 0) {
	      target.style.removeProperty(dashKey);
	    } else {
	      target.style.setProperty(dashKey, styleValue);
	    }

	    map.set(dashKey, styleValue);
	    previousMap.delete(dashKey);
	    return map;
	  }, new Map());
	  previousMap.forEach(function (styleValue, key) {
	    target.style[key] = "";
	  });
	  styleMap.set(target, nextMap);
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvc3R5bGUuanMiXSwibmFtZXMiOlsiY2FtZWxUb0Rhc2giLCJzdHJpbmdpZnlFbGVtZW50Iiwic3R5bGVNYXAiLCJXZWFrTWFwIiwicmVzb2x2ZVN0eWxlIiwiaG9zdCIsInRhcmdldCIsInZhbHVlIiwiVHlwZUVycm9yIiwicHJldmlvdXNNYXAiLCJnZXQiLCJNYXAiLCJuZXh0TWFwIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsIm1hcCIsImtleSIsImRhc2hLZXkiLCJzdHlsZVZhbHVlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5Iiwic2V0IiwiZGVsZXRlIiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxXQUFULEVBQXNCQyxnQkFBdEIsUUFBOEMsZ0JBQTlDO0FBRUEsSUFBTUMsUUFBUSxHQUFHLElBQUlDLE9BQUosRUFBakI7QUFFQSxlQUFlLFNBQVNDLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCQyxNQUE1QixFQUFvQ0MsS0FBcEMsRUFBMkM7QUFDeEQsTUFBSUEsS0FBSyxLQUFLLElBQVYsSUFBa0IsUUFBT0EsS0FBUCxNQUFpQixRQUF2QyxFQUFpRDtBQUMvQyxVQUFNQyxTQUFTLDRDQUN1QlAsZ0JBQWdCLENBQUNLLE1BQUQsQ0FEdkMsUUFFYkMsS0FGYSxDQUFmO0FBSUQ7O0FBRUQsTUFBTUUsV0FBVyxHQUFHUCxRQUFRLENBQUNRLEdBQVQsQ0FBYUosTUFBYixLQUF3QixJQUFJSyxHQUFKLEVBQTVDO0FBRUEsTUFBTUMsT0FBTyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWVAsS0FBWixFQUFtQlEsTUFBbkIsQ0FBMEIsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDdEQsUUFBTUMsT0FBTyxHQUFHbEIsV0FBVyxDQUFDaUIsR0FBRCxDQUEzQjtBQUNBLFFBQU1FLFVBQVUsR0FBR1osS0FBSyxDQUFDVSxHQUFELENBQXhCOztBQUVBLFFBQUksQ0FBQ0UsVUFBRCxJQUFlQSxVQUFVLEtBQUssQ0FBbEMsRUFBcUM7QUFDbkNiLE1BQUFBLE1BQU0sQ0FBQ2MsS0FBUCxDQUFhQyxjQUFiLENBQTRCSCxPQUE1QjtBQUNELEtBRkQsTUFFTztBQUNMWixNQUFBQSxNQUFNLENBQUNjLEtBQVAsQ0FBYUUsV0FBYixDQUF5QkosT0FBekIsRUFBa0NDLFVBQWxDO0FBQ0Q7O0FBRURILElBQUFBLEdBQUcsQ0FBQ08sR0FBSixDQUFRTCxPQUFSLEVBQWlCQyxVQUFqQjtBQUNBVixJQUFBQSxXQUFXLENBQUNlLE1BQVosQ0FBbUJOLE9BQW5CO0FBRUEsV0FBT0YsR0FBUDtBQUNELEdBZGUsRUFjYixJQUFJTCxHQUFKLEVBZGEsQ0FBaEI7QUFnQkFGLEVBQUFBLFdBQVcsQ0FBQ2dCLE9BQVosQ0FBb0IsVUFBQ04sVUFBRCxFQUFhRixHQUFiLEVBQXFCO0FBQ3ZDWCxJQUFBQSxNQUFNLENBQUNjLEtBQVAsQ0FBYUgsR0FBYixJQUFvQixFQUFwQjtBQUNELEdBRkQ7QUFJQWYsRUFBQUEsUUFBUSxDQUFDcUIsR0FBVCxDQUFhakIsTUFBYixFQUFxQk0sT0FBckI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbWVsVG9EYXNoLCBzdHJpbmdpZnlFbGVtZW50IH0gZnJvbSBcIi4uLy4uL3V0aWxzLmpzXCI7XG5cbmNvbnN0IHN0eWxlTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVN0eWxlKGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgIHRocm93IFR5cGVFcnJvcihcbiAgICAgIGBTdHlsZSB2YWx1ZSBtdXN0IGJlIGFuIG9iamVjdCBpbiAke3N0cmluZ2lmeUVsZW1lbnQodGFyZ2V0KX06YCxcbiAgICAgIHZhbHVlLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBwcmV2aW91c01hcCA9IHN0eWxlTWFwLmdldCh0YXJnZXQpIHx8IG5ldyBNYXAoKTtcblxuICBjb25zdCBuZXh0TWFwID0gT2JqZWN0LmtleXModmFsdWUpLnJlZHVjZSgobWFwLCBrZXkpID0+IHtcbiAgICBjb25zdCBkYXNoS2V5ID0gY2FtZWxUb0Rhc2goa2V5KTtcbiAgICBjb25zdCBzdHlsZVZhbHVlID0gdmFsdWVba2V5XTtcblxuICAgIGlmICghc3R5bGVWYWx1ZSAmJiBzdHlsZVZhbHVlICE9PSAwKSB7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoZGFzaEtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShkYXNoS2V5LCBzdHlsZVZhbHVlKTtcbiAgICB9XG5cbiAgICBtYXAuc2V0KGRhc2hLZXksIHN0eWxlVmFsdWUpO1xuICAgIHByZXZpb3VzTWFwLmRlbGV0ZShkYXNoS2V5KTtcblxuICAgIHJldHVybiBtYXA7XG4gIH0sIG5ldyBNYXAoKSk7XG5cbiAgcHJldmlvdXNNYXAuZm9yRWFjaCgoc3R5bGVWYWx1ZSwga2V5KSA9PiB7XG4gICAgdGFyZ2V0LnN0eWxlW2tleV0gPSBcIlwiO1xuICB9KTtcblxuICBzdHlsZU1hcC5zZXQodGFyZ2V0LCBuZXh0TWFwKTtcbn1cbiJdfQ==

	function resolveProperty(attrName, propertyName, isSVG) {
	  if (propertyName.substr(0, 2) === "on") {
	    var eventType = propertyName.substr(2);
	    return resolveEventListener(eventType);
	  }

	  switch (attrName) {
	    case "class":
	      return resolveClassList;

	    case "style":
	      return resolveStyle;

	    default:
	      return function (host, target, value) {
	        if (!isSVG && !(target instanceof SVGElement) && propertyName in target) {
	          if (target[propertyName] !== value) {
	            target[propertyName] = value;
	          }
	        } else if (value === false || value === undefined || value === null) {
	          target.removeAttribute(attrName);
	        } else {
	          var attrValue = value === true ? "" : String(value);
	          target.setAttribute(attrName, attrValue);
	        }
	      };
	  }
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvcHJvcGVydHkuanMiXSwibmFtZXMiOlsicmVzb2x2ZUV2ZW50TGlzdGVuZXIiLCJyZXNvbHZlQ2xhc3NMaXN0IiwicmVzb2x2ZVN0eWxlTGlzdCIsInJlc29sdmVQcm9wZXJ0eSIsImF0dHJOYW1lIiwicHJvcGVydHlOYW1lIiwiaXNTVkciLCJzdWJzdHIiLCJldmVudFR5cGUiLCJob3N0IiwidGFyZ2V0IiwidmFsdWUiLCJTVkdFbGVtZW50IiwidW5kZWZpbmVkIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clZhbHVlIiwiU3RyaW5nIiwic2V0QXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxvQkFBUCxNQUFpQyxZQUFqQztBQUNBLE9BQU9DLGdCQUFQLE1BQTZCLFlBQTdCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsWUFBN0I7QUFFQSxlQUFlLFNBQVNDLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxZQUFuQyxFQUFpREMsS0FBakQsRUFBd0Q7QUFDckUsTUFBSUQsWUFBWSxDQUFDRSxNQUFiLENBQW9CLENBQXBCLEVBQXVCLENBQXZCLE1BQThCLElBQWxDLEVBQXdDO0FBQ3RDLFFBQU1DLFNBQVMsR0FBR0gsWUFBWSxDQUFDRSxNQUFiLENBQW9CLENBQXBCLENBQWxCO0FBQ0EsV0FBT1Asb0JBQW9CLENBQUNRLFNBQUQsQ0FBM0I7QUFDRDs7QUFFRCxVQUFRSixRQUFSO0FBQ0UsU0FBSyxPQUFMO0FBQ0UsYUFBT0gsZ0JBQVA7O0FBQ0YsU0FBSyxPQUFMO0FBQ0UsYUFBT0MsZ0JBQVA7O0FBQ0Y7QUFDRSxhQUFPLFVBQUNPLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxLQUFmLEVBQXlCO0FBQzlCLFlBQ0UsQ0FBQ0wsS0FBRCxJQUNBLEVBQUVJLE1BQU0sWUFBWUUsVUFBcEIsQ0FEQSxJQUVBUCxZQUFZLElBQUlLLE1BSGxCLEVBSUU7QUFDQSxjQUFJQSxNQUFNLENBQUNMLFlBQUQsQ0FBTixLQUF5Qk0sS0FBN0IsRUFBb0M7QUFDbENELFlBQUFBLE1BQU0sQ0FBQ0wsWUFBRCxDQUFOLEdBQXVCTSxLQUF2QjtBQUNEO0FBQ0YsU0FSRCxNQVFPLElBQUlBLEtBQUssS0FBSyxLQUFWLElBQW1CQSxLQUFLLEtBQUtFLFNBQTdCLElBQTBDRixLQUFLLEtBQUssSUFBeEQsRUFBOEQ7QUFDbkVELFVBQUFBLE1BQU0sQ0FBQ0ksZUFBUCxDQUF1QlYsUUFBdkI7QUFDRCxTQUZNLE1BRUE7QUFDTCxjQUFNVyxTQUFTLEdBQUdKLEtBQUssS0FBSyxJQUFWLEdBQWlCLEVBQWpCLEdBQXNCSyxNQUFNLENBQUNMLEtBQUQsQ0FBOUM7QUFDQUQsVUFBQUEsTUFBTSxDQUFDTyxZQUFQLENBQW9CYixRQUFwQixFQUE4QlcsU0FBOUI7QUFDRDtBQUNGLE9BZkQ7QUFOSjtBQXVCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZXNvbHZlRXZlbnRMaXN0ZW5lciBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IHJlc29sdmVDbGFzc0xpc3QgZnJvbSBcIi4vY2xhc3MuanNcIjtcbmltcG9ydCByZXNvbHZlU3R5bGVMaXN0IGZyb20gXCIuL3N0eWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wZXJ0eShhdHRyTmFtZSwgcHJvcGVydHlOYW1lLCBpc1NWRykge1xuICBpZiAocHJvcGVydHlOYW1lLnN1YnN0cigwLCAyKSA9PT0gXCJvblwiKSB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gcHJvcGVydHlOYW1lLnN1YnN0cigyKTtcbiAgICByZXR1cm4gcmVzb2x2ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlKTtcbiAgfVxuXG4gIHN3aXRjaCAoYXR0ck5hbWUpIHtcbiAgICBjYXNlIFwiY2xhc3NcIjpcbiAgICAgIHJldHVybiByZXNvbHZlQ2xhc3NMaXN0O1xuICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgcmV0dXJuIHJlc29sdmVTdHlsZUxpc3Q7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAoaG9zdCwgdGFyZ2V0LCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIWlzU1ZHICYmXG4gICAgICAgICAgISh0YXJnZXQgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSAmJlxuICAgICAgICAgIHByb3BlcnR5TmFtZSBpbiB0YXJnZXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHRhcmdldFtwcm9wZXJ0eU5hbWVdICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSB2YWx1ZSA9PT0gdHJ1ZSA/IFwiXCIgOiBTdHJpbmcodmFsdWUpO1xuICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gIH1cbn1cbiJdfQ==

	function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

	function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

	function _typeof$7(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$7 = function _typeof(obj) { return typeof obj; }; } else { _typeof$7 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$7(obj); }
	/* istanbul ignore next */

	try {
	  process$2.env.NODE_ENV;
	} catch (e) {
	  var process$2 = {
	    env: {
	      NODE_ENV: 'production'
	    }
	  };
	} // eslint-disable-line


	var TIMESTAMP = Date.now();
	var getPlaceholder = function getPlaceholder() {
	  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	  return "{{h-".concat(TIMESTAMP, "-").concat(id, "}}");
	};
	var PLACEHOLDER_REGEXP_TEXT = getPlaceholder("(\\d+)");
	var PLACEHOLDER_REGEXP_EQUAL = new RegExp("^".concat(PLACEHOLDER_REGEXP_TEXT, "$"));
	var PLACEHOLDER_REGEXP_ALL = new RegExp(PLACEHOLDER_REGEXP_TEXT, "g");
	var ATTR_PREFIX = "--".concat(TIMESTAMP, "--");
	var ATTR_REGEXP = new RegExp(ATTR_PREFIX, "g");
	var preparedTemplates = new WeakMap();
	/* istanbul ignore next */

	function applyShadyCSS(template, tagName) {
	  if (!tagName) return template;
	  return shadyCSS(function (shady) {
	    var map = preparedTemplates.get(template);

	    if (!map) {
	      map = new Map();
	      preparedTemplates.set(template, map);
	    }

	    var clone = map.get(tagName);

	    if (!clone) {
	      clone = document.createElement("template");
	      clone.content.appendChild(template.content.cloneNode(true));
	      map.set(tagName, clone);
	      var styles = clone.content.querySelectorAll("style");
	      Array.from(styles).forEach(function (style) {
	        var count = style.childNodes.length + 1;

	        for (var i = 0; i < count; i += 1) {
	          style.parentNode.insertBefore(document.createTextNode(getPlaceholder()), style);
	        }
	      });
	      shady.prepareTemplate(clone, tagName.toLowerCase());
	    }

	    return clone;
	  }, template);
	}

	function createSignature(parts, styles) {
	  var signature = parts.reduce(function (acc, part, index) {
	    if (index === 0) {
	      return part;
	    }

	    if (parts.slice(index).join("").match(/^\s*<\/\s*(table|tr|thead|tbody|tfoot|colgroup)>/)) {
	      return "".concat(acc, "<!--").concat(getPlaceholder(index - 1), "-->").concat(part);
	    }

	    return acc + getPlaceholder(index - 1) + part;
	  }, "");

	  if (styles) {
	    signature += "<style>\n".concat(styles.join("\n/*------*/\n"), "\n</style>");
	  }
	  /* istanbul ignore if */


	  if (IS_IE) {
	    return signature.replace(/style\s*=\s*(["][^"]+["]|['][^']+[']|[^\s"'<>/]+)/g, function (match) {
	      return "".concat(ATTR_PREFIX).concat(match);
	    });
	  }

	  return signature;
	}

	function getPropertyName(string) {
	  return string.replace(/\s*=\s*['"]*$/g, "").split(/\s+/).pop();
	}

	function replaceComments(fragment) {
	  var iterator = document.createNodeIterator(fragment, NodeFilter.SHOW_COMMENT, null, false);
	  var node; // eslint-disable-next-line no-cond-assign

	  while (node = iterator.nextNode()) {
	    if (PLACEHOLDER_REGEXP_EQUAL.test(node.textContent)) {
	      node.parentNode.insertBefore(document.createTextNode(node.textContent), node);
	      node.parentNode.removeChild(node);
	    }
	  }
	}

	function createInternalWalker(context) {
	  var node;
	  return {
	    get currentNode() {
	      return node;
	    },

	    nextNode: function nextNode() {
	      if (node === undefined) {
	        node = context.childNodes[0];
	      } else if (node.childNodes.length) {
	        node = node.childNodes[0];
	      } else if (node.nextSibling) {
	        node = node.nextSibling;
	      } else {
	        var parentNode = node.parentNode;
	        node = parentNode.nextSibling;

	        while (!node && parentNode !== context) {
	          parentNode = parentNode.parentNode;
	          node = parentNode.nextSibling;
	        }
	      }

	      return !!node;
	    }
	  };
	}

	function createExternalWalker(context) {
	  return document.createTreeWalker(context, // eslint-disable-next-line no-bitwise
	  NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, null, false);
	}
	/* istanbul ignore next */


	var createWalker = _typeof$7(window.ShadyDOM) === "object" && window.ShadyDOM.inUse ? createInternalWalker : createExternalWalker;
	var container = document.createElement("div");
	var styleSheetsMap = new Map();
	function compileTemplate(rawParts, isSVG, styles) {
	  var template = document.createElement("template");
	  var parts = [];
	  var signature = createSignature(rawParts, styles);
	  if (isSVG) signature = "<svg>".concat(signature, "</svg>");
	  /* istanbul ignore if */

	  if (IS_IE) {
	    template.innerHTML = signature;
	  } else {
	    container.innerHTML = "<template>".concat(signature, "</template>");
	    template.content.appendChild(container.children[0].content);
	  }

	  if (isSVG) {
	    var svgRoot = template.content.firstChild;
	    template.content.removeChild(svgRoot);
	    Array.from(svgRoot.childNodes).forEach(function (node) {
	      return template.content.appendChild(node);
	    });
	  }

	  replaceComments(template.content);
	  var compileWalker = createWalker(template.content);
	  var compileIndex = 0;

	  var _loop = function _loop() {
	    var node = compileWalker.currentNode;

	    if (node.nodeType === Node.TEXT_NODE) {
	      var text = node.textContent;

	      if (!text.match(PLACEHOLDER_REGEXP_EQUAL)) {
	        var results = text.match(PLACEHOLDER_REGEXP_ALL);

	        if (results) {
	          var currentNode = node;
	          results.reduce(function (acc, placeholder) {
	            var _acc$pop$split = acc.pop().split(placeholder),
	                _acc$pop$split2 = _slicedToArray(_acc$pop$split, 2),
	                before = _acc$pop$split2[0],
	                next = _acc$pop$split2[1];

	            if (before) acc.push(before);
	            acc.push(placeholder);
	            if (next) acc.push(next);
	            return acc;
	          }, [text]).forEach(function (part, index) {
	            if (index === 0) {
	              currentNode.textContent = part;
	            } else {
	              currentNode = currentNode.parentNode.insertBefore(document.createTextNode(part), currentNode.nextSibling);
	            }
	          });
	        }
	      }

	      var equal = node.textContent.match(PLACEHOLDER_REGEXP_EQUAL);

	      if (equal) {
	        /* istanbul ignore else */
	        if (!IS_IE) node.textContent = "";
	        parts[equal[1]] = [compileIndex, resolveValue];
	      }
	    } else {
	      /* istanbul ignore else */
	      // eslint-disable-next-line no-lonely-if
	      if (node.nodeType === Node.ELEMENT_NODE) {
	        Array.from(node.attributes).forEach(function (attr) {
	          var value = attr.value.trim();
	          /* istanbul ignore next */

	          var name = IS_IE ? attr.name.replace(ATTR_PREFIX, "") : attr.name;
	          var equal = value.match(PLACEHOLDER_REGEXP_EQUAL);

	          if (equal) {
	            var propertyName = getPropertyName(rawParts[equal[1]]);
	            parts[equal[1]] = [compileIndex, resolveProperty(name, propertyName, isSVG)];
	            node.removeAttribute(attr.name);
	          } else {
	            var _results = value.match(PLACEHOLDER_REGEXP_ALL);

	            if (_results) {
	              var partialName = "attr__".concat(name);

	              _results.forEach(function (placeholder, index) {
	                var _placeholder$match = placeholder.match(PLACEHOLDER_REGEXP_EQUAL),
	                    _placeholder$match2 = _slicedToArray(_placeholder$match, 2),
	                    id = _placeholder$match2[1];

	                parts[id] = [compileIndex, function (host, target, attrValue) {
	                  var data = dataMap.get(target, {});
	                  data[partialName] = (data[partialName] || value).replace(placeholder, attrValue == null ? "" : attrValue);

	                  if (_results.length === 1 || index + 1 === _results.length) {
	                    target.setAttribute(name, data[partialName]);
	                    data[partialName] = undefined;
	                  }
	                }];
	              });

	              attr.value = "";
	              /* istanbul ignore next */

	              if (IS_IE && name !== attr.name) {
	                node.removeAttribute(attr.name);
	                node.setAttribute(name, "");
	              }
	            }
	          }
	        });
	      }
	    }

	    compileIndex += 1;
	  };

	  while (compileWalker.nextNode()) {
	    _loop();
	  }

	  return function updateTemplateInstance(host, target, args, styleSheets) {
	    var data = dataMap.get(target, {
	      type: "function"
	    });

	    if (template !== data.template) {
	      if (data.template || target.nodeType === Node.ELEMENT_NODE) {
	        removeTemplate(target);
	      }

	      data.prevArgs = null;
	      var fragment = document.importNode(applyShadyCSS(template, host.tagName).content, true);
	      var renderWalker = createWalker(fragment);
	      var clonedParts = parts.slice(0);
	      var renderIndex = 0;
	      var currentPart = clonedParts.shift();
	      var markers = [];
	      data.template = template;
	      data.markers = markers;

	      while (renderWalker.nextNode()) {
	        var node = renderWalker.currentNode;

	        if (node.nodeType === Node.TEXT_NODE) {
	          /* istanbul ignore next */
	          if (PLACEHOLDER_REGEXP_EQUAL.test(node.textContent)) {
	            node.textContent = "";
	          } else if (IS_IE) {
	            node.textContent = node.textContent.replace(ATTR_REGEXP, "");
	          }
	        }

	        while (currentPart && currentPart[0] === renderIndex) {
	          markers.push([node, currentPart[1]]);
	          currentPart = clonedParts.shift();
	        }

	        renderIndex += 1;
	      }

	      if (target.nodeType === Node.TEXT_NODE) {
	        data.startNode = fragment.childNodes[0];
	        data.endNode = fragment.childNodes[fragment.childNodes.length - 1];
	        var previousChild = target;
	        var child = fragment.childNodes[0];

	        while (child) {
	          target.parentNode.insertBefore(child, previousChild.nextSibling);
	          previousChild = child;
	          child = fragment.childNodes[0];
	        }
	      } else {
	        target.appendChild(fragment);
	      }
	    }

	    var adoptedStyleSheets = target.adoptedStyleSheets;

	    if (styleSheets) {
	      var isEqual = false;
	      styleSheets = styleSheets.map(function (style) {
	        if (style instanceof CSSStyleSheet) return style;
	        var styleSheet = styleSheetsMap.get(style);

	        if (!styleSheet) {
	          styleSheet = new CSSStyleSheet();
	          styleSheet.replaceSync(style);
	          styleSheetsMap.set(style, styleSheet);
	        }

	        return styleSheet;
	      });

	      if (styleSheets.length === adoptedStyleSheets.length) {
	        isEqual = true;

	        for (var i = 0; i < styleSheets.length; i += 1) {
	          if (styleSheets[i] !== adoptedStyleSheets[i]) {
	            isEqual = false;
	            break;
	          }
	        }
	      }

	      if (!isEqual) target.adoptedStyleSheets = styleSheets;
	    } else if (adoptedStyleSheets && adoptedStyleSheets.length) {
	      target.adoptedStyleSheets = [];
	    }

	    var prevArgs = data.prevArgs;
	    data.prevArgs = args;

	    for (var index = 0; index < data.markers.length; index += 1) {
	      var _data$markers$index = _slicedToArray(data.markers[index], 2),
	          _node = _data$markers$index[0],
	          marker = _data$markers$index[1];

	      if (!prevArgs || prevArgs[index] !== args[index]) {
	        marker(host, _node, args[index], prevArgs ? prevArgs[index] : undefined);
	      }
	    }

	    if (target.nodeType !== Node.TEXT_NODE) {
	      shadyCSS(function (shady) {
	        if (host.shadowRoot) {
	          if (prevArgs) {
	            shady.styleSubtree(host);
	          } else {
	            shady.styleElement(host);
	          }
	        }
	      });
	    }
	  };
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

	var setCache = new Map();
	function set$2(propertyName, value) {
	  if (!propertyName) throw Error("Target property name missing: ".concat(propertyName));

	  if (arguments.length === 2) {
	    return function (host) {
	      host[propertyName] = value;
	    };
	  }

	  var fn = setCache.get(propertyName);

	  if (!fn) {
	    fn = function fn(host, _ref) {
	      var target = _ref.target;
	      host[propertyName] = target.value;
	    };

	    setCache.set(propertyName, fn);
	  }

	  return fn;
	}
	var promiseMap = new WeakMap();
	function resolve(promise, placeholder) {
	  var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
	  return function (host, target) {
	    var timeout;

	    if (placeholder) {
	      timeout = setTimeout(function () {
	        timeout = undefined;
	        requestAnimationFrame(function () {
	          placeholder(host, target);
	        });
	      }, delay);
	    }

	    promiseMap.set(target, promise);
	    promise.then(function (template) {
	      if (timeout) clearTimeout(timeout);

	      if (promiseMap.get(target) === promise) {
	        template(host, target);
	        promiseMap.set(target, null);
	      }
	    });
	  };
	}
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbInNldENhY2hlIiwiTWFwIiwic2V0IiwicHJvcGVydHlOYW1lIiwidmFsdWUiLCJFcnJvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsImhvc3QiLCJmbiIsImdldCIsInRhcmdldCIsInByb21pc2VNYXAiLCJXZWFrTWFwIiwicmVzb2x2ZSIsInByb21pc2UiLCJwbGFjZWhvbGRlciIsImRlbGF5IiwidGltZW91dCIsInNldFRpbWVvdXQiLCJ1bmRlZmluZWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0aGVuIiwidGVtcGxhdGUiLCJjbGVhclRpbWVvdXQiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLFFBQVEsR0FBRyxJQUFJQyxHQUFKLEVBQWpCO0FBQ0EsT0FBTyxTQUFTQyxHQUFULENBQWFDLFlBQWIsRUFBMkJDLEtBQTNCLEVBQWtDO0FBQ3ZDLE1BQUksQ0FBQ0QsWUFBTCxFQUNFLE1BQU1FLEtBQUsseUNBQWtDRixZQUFsQyxFQUFYOztBQUVGLE1BQUlHLFNBQVMsQ0FBQ0MsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQixXQUFPLFVBQUFDLElBQUksRUFBSTtBQUNiQSxNQUFBQSxJQUFJLENBQUNMLFlBQUQsQ0FBSixHQUFxQkMsS0FBckI7QUFDRCxLQUZEO0FBR0Q7O0FBRUQsTUFBSUssRUFBRSxHQUFHVCxRQUFRLENBQUNVLEdBQVQsQ0FBYVAsWUFBYixDQUFUOztBQUVBLE1BQUksQ0FBQ00sRUFBTCxFQUFTO0FBQ1BBLElBQUFBLEVBQUUsR0FBRyxZQUFDRCxJQUFELFFBQXNCO0FBQUEsVUFBYkcsTUFBYSxRQUFiQSxNQUFhO0FBQ3pCSCxNQUFBQSxJQUFJLENBQUNMLFlBQUQsQ0FBSixHQUFxQlEsTUFBTSxDQUFDUCxLQUE1QjtBQUNELEtBRkQ7O0FBR0FKLElBQUFBLFFBQVEsQ0FBQ0UsR0FBVCxDQUFhQyxZQUFiLEVBQTJCTSxFQUEzQjtBQUNEOztBQUVELFNBQU9BLEVBQVA7QUFDRDtBQUVELElBQU1HLFVBQVUsR0FBRyxJQUFJQyxPQUFKLEVBQW5CO0FBQ0EsT0FBTyxTQUFTQyxPQUFULENBQWlCQyxPQUFqQixFQUEwQkMsV0FBMUIsRUFBb0Q7QUFBQSxNQUFiQyxLQUFhLHVFQUFMLEdBQUs7QUFDekQsU0FBTyxVQUFDVCxJQUFELEVBQU9HLE1BQVAsRUFBa0I7QUFDdkIsUUFBSU8sT0FBSjs7QUFFQSxRQUFJRixXQUFKLEVBQWlCO0FBQ2ZFLE1BQUFBLE9BQU8sR0FBR0MsVUFBVSxDQUFDLFlBQU07QUFDekJELFFBQUFBLE9BQU8sR0FBR0UsU0FBVjtBQUVBQyxRQUFBQSxxQkFBcUIsQ0FBQyxZQUFNO0FBQzFCTCxVQUFBQSxXQUFXLENBQUNSLElBQUQsRUFBT0csTUFBUCxDQUFYO0FBQ0QsU0FGb0IsQ0FBckI7QUFHRCxPQU5tQixFQU1qQk0sS0FOaUIsQ0FBcEI7QUFPRDs7QUFFREwsSUFBQUEsVUFBVSxDQUFDVixHQUFYLENBQWVTLE1BQWYsRUFBdUJJLE9BQXZCO0FBRUFBLElBQUFBLE9BQU8sQ0FBQ08sSUFBUixDQUFhLFVBQUFDLFFBQVEsRUFBSTtBQUN2QixVQUFJTCxPQUFKLEVBQWFNLFlBQVksQ0FBQ04sT0FBRCxDQUFaOztBQUViLFVBQUlOLFVBQVUsQ0FBQ0YsR0FBWCxDQUFlQyxNQUFmLE1BQTJCSSxPQUEvQixFQUF3QztBQUN0Q1EsUUFBQUEsUUFBUSxDQUFDZixJQUFELEVBQU9HLE1BQVAsQ0FBUjtBQUNBQyxRQUFBQSxVQUFVLENBQUNWLEdBQVgsQ0FBZVMsTUFBZixFQUF1QixJQUF2QjtBQUNEO0FBQ0YsS0FQRDtBQVFELEdBdkJEO0FBd0JEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc2V0Q2FjaGUgPSBuZXcgTWFwKCk7XG5leHBvcnQgZnVuY3Rpb24gc2V0KHByb3BlcnR5TmFtZSwgdmFsdWUpIHtcbiAgaWYgKCFwcm9wZXJ0eU5hbWUpXG4gICAgdGhyb3cgRXJyb3IoYFRhcmdldCBwcm9wZXJ0eSBuYW1lIG1pc3Npbmc6ICR7cHJvcGVydHlOYW1lfWApO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgcmV0dXJuIGhvc3QgPT4ge1xuICAgICAgaG9zdFtwcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGxldCBmbiA9IHNldENhY2hlLmdldChwcm9wZXJ0eU5hbWUpO1xuXG4gIGlmICghZm4pIHtcbiAgICBmbiA9IChob3N0LCB7IHRhcmdldCB9KSA9PiB7XG4gICAgICBob3N0W3Byb3BlcnR5TmFtZV0gPSB0YXJnZXQudmFsdWU7XG4gICAgfTtcbiAgICBzZXRDYWNoZS5zZXQocHJvcGVydHlOYW1lLCBmbik7XG4gIH1cblxuICByZXR1cm4gZm47XG59XG5cbmNvbnN0IHByb21pc2VNYXAgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUocHJvbWlzZSwgcGxhY2Vob2xkZXIsIGRlbGF5ID0gMjAwKSB7XG4gIHJldHVybiAoaG9zdCwgdGFyZ2V0KSA9PiB7XG4gICAgbGV0IHRpbWVvdXQ7XG5cbiAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGltZW91dCA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHBsYWNlaG9sZGVyKGhvc3QsIHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH1cblxuICAgIHByb21pc2VNYXAuc2V0KHRhcmdldCwgcHJvbWlzZSk7XG5cbiAgICBwcm9taXNlLnRoZW4odGVtcGxhdGUgPT4ge1xuICAgICAgaWYgKHRpbWVvdXQpIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgICAgaWYgKHByb21pc2VNYXAuZ2V0KHRhcmdldCkgPT09IHByb21pc2UpIHtcbiAgICAgICAgdGVtcGxhdGUoaG9zdCwgdGFyZ2V0KTtcbiAgICAgICAgcHJvbWlzZU1hcC5zZXQodGFyZ2V0LCBudWxsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==

	var helpers = /*#__PURE__*/Object.freeze({
		__proto__: null,
		set: set$2,
		resolve: resolve
	});

	var PLACEHOLDER = getPlaceholder();
	var SVG_PLACEHOLDER = getPlaceholder("svg");
	var STYLE_IMPORT_REGEXP = /@import/;
	var templatesMap = new Map();
	var stylesMap = new WeakMap();
	var methods = {
	  define: function define$1(elements) {
	    define(elements);
	    return this;
	  },
	  key: function key(id) {
	    this.id = id;
	    return this;
	  },
	  style: function style() {
	    for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
	      styles[_key] = arguments[_key];
	    }

	    stylesMap.set(this, styles.filter(function (style) {
	      return style;
	    }));
	    return this;
	  }
	};

	function create(parts, args, isSVG) {
	  var createTemplate = function createTemplate(host) {
	    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : host;
	    var styles = stylesMap.get(createTemplate);
	    var hasAdoptedStyleSheets;
	    var id = parts.join(PLACEHOLDER);

	    if (styles) {
	      var joinedStyles = styles.join(PLACEHOLDER);
	      hasAdoptedStyleSheets = !!target.adoptedStyleSheets && !STYLE_IMPORT_REGEXP.test(joinedStyles);
	      if (!hasAdoptedStyleSheets) id += joinedStyles;
	    }

	    if (isSVG) id += SVG_PLACEHOLDER;
	    var render = templatesMap.get(id);

	    if (!render) {
	      render = compileTemplate(parts, isSVG, !hasAdoptedStyleSheets && styles);
	      templatesMap.set(id, render);
	    }

	    render(host, target, args, hasAdoptedStyleSheets && styles);
	  };

	  return Object.assign(createTemplate, methods);
	}

	function html(parts) {
	  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    args[_key2 - 1] = arguments[_key2];
	  }

	  return create(parts, args);
	}
	function svg(parts) {
	  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	    args[_key3 - 1] = arguments[_key3];
	  }

	  return create(parts, args, true);
	}
	Object.assign(html, helpers);
	Object.assign(svg, helpers);
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZpbmVFbGVtZW50cyIsImNvbXBpbGVUZW1wbGF0ZSIsImdldFBsYWNlaG9sZGVyIiwiaGVscGVycyIsIlBMQUNFSE9MREVSIiwiU1ZHX1BMQUNFSE9MREVSIiwiU1RZTEVfSU1QT1JUX1JFR0VYUCIsInRlbXBsYXRlc01hcCIsIk1hcCIsInN0eWxlc01hcCIsIldlYWtNYXAiLCJtZXRob2RzIiwiZGVmaW5lIiwiZWxlbWVudHMiLCJrZXkiLCJpZCIsInN0eWxlIiwic3R5bGVzIiwic2V0IiwiZmlsdGVyIiwiY3JlYXRlIiwicGFydHMiLCJhcmdzIiwiaXNTVkciLCJjcmVhdGVUZW1wbGF0ZSIsImhvc3QiLCJ0YXJnZXQiLCJnZXQiLCJoYXNBZG9wdGVkU3R5bGVTaGVldHMiLCJqb2luIiwiam9pbmVkU3R5bGVzIiwiYWRvcHRlZFN0eWxlU2hlZXRzIiwidGVzdCIsInJlbmRlciIsIk9iamVjdCIsImFzc2lnbiIsImh0bWwiLCJzdmciXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLGNBQVAsTUFBMkIsY0FBM0I7QUFFQSxTQUFTQyxlQUFULEVBQTBCQyxjQUExQixRQUFnRCxXQUFoRDtBQUNBLE9BQU8sS0FBS0MsT0FBWixNQUF5QixjQUF6QjtBQUVBLElBQU1DLFdBQVcsR0FBR0YsY0FBYyxFQUFsQztBQUNBLElBQU1HLGVBQWUsR0FBR0gsY0FBYyxDQUFDLEtBQUQsQ0FBdEM7QUFDQSxJQUFNSSxtQkFBbUIsR0FBRyxTQUE1QjtBQUVBLElBQU1DLFlBQVksR0FBRyxJQUFJQyxHQUFKLEVBQXJCO0FBQ0EsSUFBTUMsU0FBUyxHQUFHLElBQUlDLE9BQUosRUFBbEI7QUFFQSxJQUFNQyxPQUFPLEdBQUc7QUFDZEMsRUFBQUEsTUFEYyxrQkFDUEMsUUFETyxFQUNHO0FBQ2ZiLElBQUFBLGNBQWMsQ0FBQ2EsUUFBRCxDQUFkO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsR0FKYTtBQUtkQyxFQUFBQSxHQUxjLGVBS1ZDLEVBTFUsRUFLTjtBQUNOLFNBQUtBLEVBQUwsR0FBVUEsRUFBVjtBQUNBLFdBQU8sSUFBUDtBQUNELEdBUmE7QUFTZEMsRUFBQUEsS0FUYyxtQkFTRztBQUFBLHNDQUFSQyxNQUFRO0FBQVJBLE1BQUFBLE1BQVE7QUFBQTs7QUFDZlIsSUFBQUEsU0FBUyxDQUFDUyxHQUFWLENBQ0UsSUFERixFQUVFRCxNQUFNLENBQUNFLE1BQVAsQ0FBYyxVQUFBSCxLQUFLO0FBQUEsYUFBSUEsS0FBSjtBQUFBLEtBQW5CLENBRkY7QUFJQSxXQUFPLElBQVA7QUFDRDtBQWZhLENBQWhCOztBQWtCQSxTQUFTSSxNQUFULENBQWdCQyxLQUFoQixFQUF1QkMsSUFBdkIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQ2xDLE1BQU1DLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0MsSUFBRCxFQUF5QjtBQUFBLFFBQWxCQyxNQUFrQix1RUFBVEQsSUFBUztBQUM5QyxRQUFNUixNQUFNLEdBQUdSLFNBQVMsQ0FBQ2tCLEdBQVYsQ0FBY0gsY0FBZCxDQUFmO0FBQ0EsUUFBSUkscUJBQUo7QUFDQSxRQUFJYixFQUFFLEdBQUdNLEtBQUssQ0FBQ1EsSUFBTixDQUFXekIsV0FBWCxDQUFUOztBQUVBLFFBQUlhLE1BQUosRUFBWTtBQUNWLFVBQU1hLFlBQVksR0FBR2IsTUFBTSxDQUFDWSxJQUFQLENBQVl6QixXQUFaLENBQXJCO0FBQ0F3QixNQUFBQSxxQkFBcUIsR0FDbkIsQ0FBQyxDQUFDRixNQUFNLENBQUNLLGtCQUFULElBQStCLENBQUN6QixtQkFBbUIsQ0FBQzBCLElBQXBCLENBQXlCRixZQUF6QixDQURsQztBQUVBLFVBQUksQ0FBQ0YscUJBQUwsRUFBNEJiLEVBQUUsSUFBSWUsWUFBTjtBQUM3Qjs7QUFFRCxRQUFJUCxLQUFKLEVBQVdSLEVBQUUsSUFBSVYsZUFBTjtBQUVYLFFBQUk0QixNQUFNLEdBQUcxQixZQUFZLENBQUNvQixHQUFiLENBQWlCWixFQUFqQixDQUFiOztBQUNBLFFBQUksQ0FBQ2tCLE1BQUwsRUFBYTtBQUNYQSxNQUFBQSxNQUFNLEdBQUdoQyxlQUFlLENBQUNvQixLQUFELEVBQVFFLEtBQVIsRUFBZSxDQUFDSyxxQkFBRCxJQUEwQlgsTUFBekMsQ0FBeEI7QUFDQVYsTUFBQUEsWUFBWSxDQUFDVyxHQUFiLENBQWlCSCxFQUFqQixFQUFxQmtCLE1BQXJCO0FBQ0Q7O0FBRURBLElBQUFBLE1BQU0sQ0FBQ1IsSUFBRCxFQUFPQyxNQUFQLEVBQWVKLElBQWYsRUFBcUJNLHFCQUFxQixJQUFJWCxNQUE5QyxDQUFOO0FBQ0QsR0FyQkQ7O0FBdUJBLFNBQU9pQixNQUFNLENBQUNDLE1BQVAsQ0FBY1gsY0FBZCxFQUE4QmIsT0FBOUIsQ0FBUDtBQUNEOztBQUVELE9BQU8sU0FBU3lCLElBQVQsQ0FBY2YsS0FBZCxFQUE4QjtBQUFBLHFDQUFOQyxJQUFNO0FBQU5BLElBQUFBLElBQU07QUFBQTs7QUFDbkMsU0FBT0YsTUFBTSxDQUFDQyxLQUFELEVBQVFDLElBQVIsQ0FBYjtBQUNEO0FBRUQsT0FBTyxTQUFTZSxHQUFULENBQWFoQixLQUFiLEVBQTZCO0FBQUEscUNBQU5DLElBQU07QUFBTkEsSUFBQUEsSUFBTTtBQUFBOztBQUNsQyxTQUFPRixNQUFNLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjLElBQWQsQ0FBYjtBQUNEO0FBRURZLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxJQUFkLEVBQW9CakMsT0FBcEI7QUFDQStCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRSxHQUFkLEVBQW1CbEMsT0FBbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmaW5lRWxlbWVudHMgZnJvbSBcIi4uL2RlZmluZS5qc1wiO1xuXG5pbXBvcnQgeyBjb21waWxlVGVtcGxhdGUsIGdldFBsYWNlaG9sZGVyIH0gZnJvbSBcIi4vY29yZS5qc1wiO1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tIFwiLi9oZWxwZXJzLmpzXCI7XG5cbmNvbnN0IFBMQUNFSE9MREVSID0gZ2V0UGxhY2Vob2xkZXIoKTtcbmNvbnN0IFNWR19QTEFDRUhPTERFUiA9IGdldFBsYWNlaG9sZGVyKFwic3ZnXCIpO1xuY29uc3QgU1RZTEVfSU1QT1JUX1JFR0VYUCA9IC9AaW1wb3J0LztcblxuY29uc3QgdGVtcGxhdGVzTWFwID0gbmV3IE1hcCgpO1xuY29uc3Qgc3R5bGVzTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuY29uc3QgbWV0aG9kcyA9IHtcbiAgZGVmaW5lKGVsZW1lbnRzKSB7XG4gICAgZGVmaW5lRWxlbWVudHMoZWxlbWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBrZXkoaWQpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHN0eWxlKC4uLnN0eWxlcykge1xuICAgIHN0eWxlc01hcC5zZXQoXG4gICAgICB0aGlzLFxuICAgICAgc3R5bGVzLmZpbHRlcihzdHlsZSA9PiBzdHlsZSksXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZShwYXJ0cywgYXJncywgaXNTVkcpIHtcbiAgY29uc3QgY3JlYXRlVGVtcGxhdGUgPSAoaG9zdCwgdGFyZ2V0ID0gaG9zdCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlcyA9IHN0eWxlc01hcC5nZXQoY3JlYXRlVGVtcGxhdGUpO1xuICAgIGxldCBoYXNBZG9wdGVkU3R5bGVTaGVldHM7XG4gICAgbGV0IGlkID0gcGFydHMuam9pbihQTEFDRUhPTERFUik7XG5cbiAgICBpZiAoc3R5bGVzKSB7XG4gICAgICBjb25zdCBqb2luZWRTdHlsZXMgPSBzdHlsZXMuam9pbihQTEFDRUhPTERFUik7XG4gICAgICBoYXNBZG9wdGVkU3R5bGVTaGVldHMgPVxuICAgICAgICAhIXRhcmdldC5hZG9wdGVkU3R5bGVTaGVldHMgJiYgIVNUWUxFX0lNUE9SVF9SRUdFWFAudGVzdChqb2luZWRTdHlsZXMpO1xuICAgICAgaWYgKCFoYXNBZG9wdGVkU3R5bGVTaGVldHMpIGlkICs9IGpvaW5lZFN0eWxlcztcbiAgICB9XG5cbiAgICBpZiAoaXNTVkcpIGlkICs9IFNWR19QTEFDRUhPTERFUjtcblxuICAgIGxldCByZW5kZXIgPSB0ZW1wbGF0ZXNNYXAuZ2V0KGlkKTtcbiAgICBpZiAoIXJlbmRlcikge1xuICAgICAgcmVuZGVyID0gY29tcGlsZVRlbXBsYXRlKHBhcnRzLCBpc1NWRywgIWhhc0Fkb3B0ZWRTdHlsZVNoZWV0cyAmJiBzdHlsZXMpO1xuICAgICAgdGVtcGxhdGVzTWFwLnNldChpZCwgcmVuZGVyKTtcbiAgICB9XG5cbiAgICByZW5kZXIoaG9zdCwgdGFyZ2V0LCBhcmdzLCBoYXNBZG9wdGVkU3R5bGVTaGVldHMgJiYgc3R5bGVzKTtcbiAgfTtcblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihjcmVhdGVUZW1wbGF0ZSwgbWV0aG9kcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodG1sKHBhcnRzLCAuLi5hcmdzKSB7XG4gIHJldHVybiBjcmVhdGUocGFydHMsIGFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3ZnKHBhcnRzLCAuLi5hcmdzKSB7XG4gIHJldHVybiBjcmVhdGUocGFydHMsIGFyZ3MsIHRydWUpO1xufVxuXG5PYmplY3QuYXNzaWduKGh0bWwsIGhlbHBlcnMpO1xuT2JqZWN0LmFzc2lnbihzdmcsIGhlbHBlcnMpO1xuIl19

	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0IiwiZGVmaW5lIiwicHJvcGVydHkiLCJwYXJlbnQiLCJjaGlsZHJlbiIsInJlbmRlciIsImRpc3BhdGNoIiwiaHRtbCIsInN2ZyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsT0FBTyxJQUFJQyxNQUFwQixRQUFrQyxhQUFsQztBQUNBLFNBQVNELE9BQU8sSUFBSUUsUUFBcEIsUUFBb0MsZUFBcEM7QUFDQSxTQUFTRixPQUFPLElBQUlHLE1BQXBCLFFBQWtDLGFBQWxDO0FBQ0EsU0FBU0gsT0FBTyxJQUFJSSxRQUFwQixRQUFvQyxlQUFwQztBQUNBLFNBQVNKLE9BQU8sSUFBSUssTUFBcEIsUUFBa0MsYUFBbEM7QUFFQSxTQUFTQyxRQUFULFFBQXlCLFlBQXpCO0FBRUEsU0FBU0MsSUFBVCxFQUFlQyxHQUFmLFFBQTBCLHFCQUExQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgYXMgZGVmaW5lIH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHByb3BlcnR5IH0gZnJvbSBcIi4vcHJvcGVydHkuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyZW50IH0gZnJvbSBcIi4vcGFyZW50LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNoaWxkcmVuIH0gZnJvbSBcIi4vY2hpbGRyZW4uanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVuZGVyIH0gZnJvbSBcIi4vcmVuZGVyLmpzXCI7XG5cbmV4cG9ydCB7IGRpc3BhdGNoIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IHsgaHRtbCwgc3ZnIH0gZnJvbSBcIi4vdGVtcGxhdGUvaW5kZXguanNcIjtcbiJdfQ==

	var index$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		define: define,
		property: property,
		parent: parent,
		children: children,
		render: render,
		dispatch: dispatch$9,
		html: html,
		svg: svg
	});

	const token = '0e995ca5f1e043664543226a4865832bb7477647';

	function getUserAgent() {
	    if (typeof navigator === "object" && "userAgent" in navigator) {
	        return navigator.userAgent;
	    }
	    if (typeof process === "object" && "version" in process) {
	        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
	    }
	    return "<environment undetectable>";
	}
	//# sourceMappingURL=index.js.map

	var register_1 = register;

	function register (state, name, method, options) {
	  if (typeof method !== 'function') {
	    throw new Error('method for before hook must be a function')
	  }

	  if (!options) {
	    options = {};
	  }

	  if (Array.isArray(name)) {
	    return name.reverse().reduce(function (callback, name) {
	      return register.bind(null, state, name, callback, options)
	    }, method)()
	  }

	  return Promise.resolve()
	    .then(function () {
	      if (!state.registry[name]) {
	        return method(options)
	      }

	      return (state.registry[name]).reduce(function (method, registered) {
	        return registered.hook.bind(null, method, options)
	      }, method)()
	    })
	}

	var add$1 = addHook;

	function addHook (state, kind, name, hook) {
	  var orig = hook;
	  if (!state.registry[name]) {
	    state.registry[name] = [];
	  }

	  if (kind === 'before') {
	    hook = function (method, options) {
	      return Promise.resolve()
	        .then(orig.bind(null, options))
	        .then(method.bind(null, options))
	    };
	  }

	  if (kind === 'after') {
	    hook = function (method, options) {
	      var result;
	      return Promise.resolve()
	        .then(method.bind(null, options))
	        .then(function (result_) {
	          result = result_;
	          return orig(result, options)
	        })
	        .then(function () {
	          return result
	        })
	    };
	  }

	  if (kind === 'error') {
	    hook = function (method, options) {
	      return Promise.resolve()
	        .then(method.bind(null, options))
	        .catch(function (error) {
	          return orig(error, options)
	        })
	    };
	  }

	  state.registry[name].push({
	    hook: hook,
	    orig: orig
	  });
	}

	var remove$1 = removeHook;

	function removeHook (state, name, method) {
	  if (!state.registry[name]) {
	    return
	  }

	  var index = state.registry[name]
	    .map(function (registered) { return registered.orig })
	    .indexOf(method);

	  if (index === -1) {
	    return
	  }

	  state.registry[name].splice(index, 1);
	}

	// bind with array of arguments: https://stackoverflow.com/a/21792913
	var bind$1 = Function.bind;
	var bindable = bind$1.bind(bind$1);

	function bindApi (hook, state, name) {
	  var removeHookRef = bindable(remove$1, null).apply(null, name ? [state, name] : [state]);
	  hook.api = { remove: removeHookRef };
	  hook.remove = removeHookRef

	  ;['before', 'error', 'after', 'wrap'].forEach(function (kind) {
	    var args = name ? [state, kind, name] : [state, kind];
	    hook[kind] = hook.api[kind] = bindable(add$1, null).apply(null, args);
	  });
	}

	function HookSingular () {
	  var singularHookName = 'h';
	  var singularHookState = {
	    registry: {}
	  };
	  var singularHook = register_1.bind(null, singularHookState, singularHookName);
	  bindApi(singularHook, singularHookState, singularHookName);
	  return singularHook
	}

	function HookCollection () {
	  var state = {
	    registry: {}
	  };

	  var hook = register_1.bind(null, state);
	  bindApi(hook, state);

	  return hook
	}

	var collectionHookDeprecationMessageDisplayed = false;
	function Hook () {
	  if (!collectionHookDeprecationMessageDisplayed) {
	    console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4');
	    collectionHookDeprecationMessageDisplayed = true;
	  }
	  return HookCollection()
	}

	Hook.Singular = HookSingular.bind();
	Hook.Collection = HookCollection.bind();

	var beforeAfterHook = Hook;
	// expose constructors as a named property for TypeScript
	var Hook_1 = Hook;
	var Singular = Hook.Singular;
	var Collection = Hook.Collection;
	beforeAfterHook.Hook = Hook_1;
	beforeAfterHook.Singular = Singular;
	beforeAfterHook.Collection = Collection;

	/*!
	 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	function isObject$1(o) {
	  return Object.prototype.toString.call(o) === '[object Object]';
	}

	function isPlainObject(o) {
	  var ctor,prot;

	  if (isObject$1(o) === false) return false;

	  // If has modified constructor
	  ctor = o.constructor;
	  if (ctor === undefined) return true;

	  // If has modified prototype
	  prot = ctor.prototype;
	  if (isObject$1(prot) === false) return false;

	  // If constructor does not have an Object-specific method
	  if (prot.hasOwnProperty('isPrototypeOf') === false) {
	    return false;
	  }

	  // Most likely a plain Object
	  return true;
	}

	function lowercaseKeys(object) {
	    if (!object) {
	        return {};
	    }
	    return Object.keys(object).reduce((newObj, key) => {
	        newObj[key.toLowerCase()] = object[key];
	        return newObj;
	    }, {});
	}

	function mergeDeep(defaults, options) {
	    const result = Object.assign({}, defaults);
	    Object.keys(options).forEach((key) => {
	        if (isPlainObject(options[key])) {
	            if (!(key in defaults))
	                Object.assign(result, { [key]: options[key] });
	            else
	                result[key] = mergeDeep(defaults[key], options[key]);
	        }
	        else {
	            Object.assign(result, { [key]: options[key] });
	        }
	    });
	    return result;
	}

	function merge$3(defaults, route, options) {
	    if (typeof route === "string") {
	        let [method, url] = route.split(" ");
	        options = Object.assign(url ? { method, url } : { url: method }, options);
	    }
	    else {
	        options = Object.assign({}, route);
	    }
	    // lowercase header names before merging with defaults to avoid duplicates
	    options.headers = lowercaseKeys(options.headers);
	    const mergedOptions = mergeDeep(defaults || {}, options);
	    // mediaType.previews arrays are merged, instead of overwritten
	    if (defaults && defaults.mediaType.previews.length) {
	        mergedOptions.mediaType.previews = defaults.mediaType.previews
	            .filter((preview) => !mergedOptions.mediaType.previews.includes(preview))
	            .concat(mergedOptions.mediaType.previews);
	    }
	    mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
	    return mergedOptions;
	}

	function addQueryParameters(url, parameters) {
	    const separator = /\?/.test(url) ? "&" : "?";
	    const names = Object.keys(parameters);
	    if (names.length === 0) {
	        return url;
	    }
	    return (url +
	        separator +
	        names
	            .map((name) => {
	            if (name === "q") {
	                return ("q=" + parameters.q.split("+").map(encodeURIComponent).join("+"));
	            }
	            return `${name}=${encodeURIComponent(parameters[name])}`;
	        })
	            .join("&"));
	}

	const urlVariableRegex = /\{[^}]+\}/g;
	function removeNonChars(variableName) {
	    return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
	}
	function extractUrlVariableNames(url) {
	    const matches = url.match(urlVariableRegex);
	    if (!matches) {
	        return [];
	    }
	    return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
	}

	function omit$1(object, keysToOmit) {
	    return Object.keys(object)
	        .filter((option) => !keysToOmit.includes(option))
	        .reduce((obj, key) => {
	        obj[key] = object[key];
	        return obj;
	    }, {});
	}

	// Based on https://github.com/bramstein/url-template, licensed under BSD
	// TODO: create separate package.
	//
	// Copyright (c) 2012-2014, Bram Stein
	// All rights reserved.
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions
	// are met:
	//  1. Redistributions of source code must retain the above copyright
	//     notice, this list of conditions and the following disclaimer.
	//  2. Redistributions in binary form must reproduce the above copyright
	//     notice, this list of conditions and the following disclaimer in the
	//     documentation and/or other materials provided with the distribution.
	//  3. The name of the author may not be used to endorse or promote products
	//     derived from this software without specific prior written permission.
	// THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
	// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
	// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
	// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	/* istanbul ignore file */
	function encodeReserved(str) {
	    return str
	        .split(/(%[0-9A-Fa-f]{2})/g)
	        .map(function (part) {
	        if (!/%[0-9A-Fa-f]/.test(part)) {
	            part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
	        }
	        return part;
	    })
	        .join("");
	}
	function encodeUnreserved(str) {
	    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
	        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
	    });
	}
	function encodeValue(operator, value, key) {
	    value =
	        operator === "+" || operator === "#"
	            ? encodeReserved(value)
	            : encodeUnreserved(value);
	    if (key) {
	        return encodeUnreserved(key) + "=" + value;
	    }
	    else {
	        return value;
	    }
	}
	function isDefined(value) {
	    return value !== undefined && value !== null;
	}
	function isKeyOperator(operator) {
	    return operator === ";" || operator === "&" || operator === "?";
	}
	function getValues(context, operator, key, modifier) {
	    var value = context[key], result = [];
	    if (isDefined(value) && value !== "") {
	        if (typeof value === "string" ||
	            typeof value === "number" ||
	            typeof value === "boolean") {
	            value = value.toString();
	            if (modifier && modifier !== "*") {
	                value = value.substring(0, parseInt(modifier, 10));
	            }
	            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
	        }
	        else {
	            if (modifier === "*") {
	                if (Array.isArray(value)) {
	                    value.filter(isDefined).forEach(function (value) {
	                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
	                    });
	                }
	                else {
	                    Object.keys(value).forEach(function (k) {
	                        if (isDefined(value[k])) {
	                            result.push(encodeValue(operator, value[k], k));
	                        }
	                    });
	                }
	            }
	            else {
	                const tmp = [];
	                if (Array.isArray(value)) {
	                    value.filter(isDefined).forEach(function (value) {
	                        tmp.push(encodeValue(operator, value));
	                    });
	                }
	                else {
	                    Object.keys(value).forEach(function (k) {
	                        if (isDefined(value[k])) {
	                            tmp.push(encodeUnreserved(k));
	                            tmp.push(encodeValue(operator, value[k].toString()));
	                        }
	                    });
	                }
	                if (isKeyOperator(operator)) {
	                    result.push(encodeUnreserved(key) + "=" + tmp.join(","));
	                }
	                else if (tmp.length !== 0) {
	                    result.push(tmp.join(","));
	                }
	            }
	        }
	    }
	    else {
	        if (operator === ";") {
	            if (isDefined(value)) {
	                result.push(encodeUnreserved(key));
	            }
	        }
	        else if (value === "" && (operator === "&" || operator === "?")) {
	            result.push(encodeUnreserved(key) + "=");
	        }
	        else if (value === "") {
	            result.push("");
	        }
	    }
	    return result;
	}
	function parseUrl(template) {
	    return {
	        expand: expand$1.bind(null, template),
	    };
	}
	function expand$1(template, context) {
	    var operators = ["+", "#", ".", "/", ";", "?", "&"];
	    return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
	        if (expression) {
	            let operator = "";
	            const values = [];
	            if (operators.indexOf(expression.charAt(0)) !== -1) {
	                operator = expression.charAt(0);
	                expression = expression.substr(1);
	            }
	            expression.split(/,/g).forEach(function (variable) {
	                var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
	                values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
	            });
	            if (operator && operator !== "+") {
	                var separator = ",";
	                if (operator === "?") {
	                    separator = "&";
	                }
	                else if (operator !== "#") {
	                    separator = operator;
	                }
	                return (values.length !== 0 ? operator : "") + values.join(separator);
	            }
	            else {
	                return values.join(",");
	            }
	        }
	        else {
	            return encodeReserved(literal);
	        }
	    });
	}

	function parse(options) {
	    // https://fetch.spec.whatwg.org/#methods
	    let method = options.method.toUpperCase();
	    // replace :varname with {varname} to make it RFC 6570 compatible
	    let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{+$1}");
	    let headers = Object.assign({}, options.headers);
	    let body;
	    let parameters = omit$1(options, [
	        "method",
	        "baseUrl",
	        "url",
	        "headers",
	        "request",
	        "mediaType",
	    ]);
	    // extract variable names from URL to calculate remaining variables later
	    const urlVariableNames = extractUrlVariableNames(url);
	    url = parseUrl(url).expand(parameters);
	    if (!/^http/.test(url)) {
	        url = options.baseUrl + url;
	    }
	    const omittedParameters = Object.keys(options)
	        .filter((option) => urlVariableNames.includes(option))
	        .concat("baseUrl");
	    const remainingParameters = omit$1(parameters, omittedParameters);
	    const isBinaryRequset = /application\/octet-stream/i.test(headers.accept);
	    if (!isBinaryRequset) {
	        if (options.mediaType.format) {
	            // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw
	            headers.accept = headers.accept
	                .split(/,/)
	                .map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`))
	                .join(",");
	        }
	        if (options.mediaType.previews.length) {
	            const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
	            headers.accept = previewsFromAcceptHeader
	                .concat(options.mediaType.previews)
	                .map((preview) => {
	                const format = options.mediaType.format
	                    ? `.${options.mediaType.format}`
	                    : "+json";
	                return `application/vnd.github.${preview}-preview${format}`;
	            })
	                .join(",");
	        }
	    }
	    // for GET/HEAD requests, set URL query parameters from remaining parameters
	    // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters
	    if (["GET", "HEAD"].includes(method)) {
	        url = addQueryParameters(url, remainingParameters);
	    }
	    else {
	        if ("data" in remainingParameters) {
	            body = remainingParameters.data;
	        }
	        else {
	            if (Object.keys(remainingParameters).length) {
	                body = remainingParameters;
	            }
	            else {
	                headers["content-length"] = 0;
	            }
	        }
	    }
	    // default content-type for JSON if body is set
	    if (!headers["content-type"] && typeof body !== "undefined") {
	        headers["content-type"] = "application/json; charset=utf-8";
	    }
	    // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.
	    // fetch does not allow to set `content-length` header, but we can set body to an empty string
	    if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
	        body = "";
	    }
	    // Only return body/request keys if present
	    return Object.assign({ method, url, headers }, typeof body !== "undefined" ? { body } : null, options.request ? { request: options.request } : null);
	}

	function endpointWithDefaults(defaults, route, options) {
	    return parse(merge$3(defaults, route, options));
	}

	function withDefaults(oldDefaults, newDefaults) {
	    const DEFAULTS = merge$3(oldDefaults, newDefaults);
	    const endpoint = endpointWithDefaults.bind(null, DEFAULTS);
	    return Object.assign(endpoint, {
	        DEFAULTS,
	        defaults: withDefaults.bind(null, DEFAULTS),
	        merge: merge$3.bind(null, DEFAULTS),
	        parse,
	    });
	}

	const VERSION = "6.0.5";

	const userAgent = `octokit-endpoint.js/${VERSION} ${getUserAgent()}`;
	// DEFAULTS has all properties set that EndpointOptions has, except url.
	// So we use RequestParameters and add method as additional required property.
	const DEFAULTS = {
	    method: "GET",
	    baseUrl: "https://api.github.com",
	    headers: {
	        accept: "application/vnd.github.v3+json",
	        "user-agent": userAgent,
	    },
	    mediaType: {
	        format: "",
	        previews: [],
	    },
	};

	const endpoint = withDefaults(null, DEFAULTS);
	//# sourceMappingURL=index.js.map

	/*!
	 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	function isObject$2(o) {
	  return Object.prototype.toString.call(o) === '[object Object]';
	}

	function isPlainObject$1(o) {
	  var ctor,prot;

	  if (isObject$2(o) === false) return false;

	  // If has modified constructor
	  ctor = o.constructor;
	  if (ctor === undefined) return true;

	  // If has modified prototype
	  prot = ctor.prototype;
	  if (isObject$2(prot) === false) return false;

	  // If constructor does not have an Object-specific method
	  if (prot.hasOwnProperty('isPrototypeOf') === false) {
	    return false;
	  }

	  // Most likely a plain Object
	  return true;
	}

	var browser = createCommonjsModule(function (module, exports) {

	// ref: https://github.com/tc39/proposal-global
	var getGlobal = function () {
		// the only reliable means to get the global object is
		// `Function('return this')()`
		// However, this causes CSP violations in Chrome apps.
		if (typeof self !== 'undefined') { return self; }
		if (typeof window !== 'undefined') { return window; }
		if (typeof global !== 'undefined') { return global; }
		throw new Error('unable to locate global object');
	};

	var global = getGlobal();

	module.exports = exports = global.fetch;

	// Needed for TypeScript and Webpack.
	exports.default = global.fetch.bind(global);

	exports.Headers = global.Headers;
	exports.Request = global.Request;
	exports.Response = global.Response;
	});
	var browser_1 = browser.Headers;
	var browser_2 = browser.Request;
	var browser_3 = browser.Response;

	class Deprecation extends Error {
	  constructor(message) {
	    super(message); // Maintains proper stack trace (only available on V8)

	    /* istanbul ignore next */

	    if (Error.captureStackTrace) {
	      Error.captureStackTrace(this, this.constructor);
	    }

	    this.name = 'Deprecation';
	  }

	}

	// Returns a wrapper function that returns a wrapped callback
	// The wrapper function should do some stuff, and return a
	// presumably different callback function.
	// This makes sure that own properties are retained, so that
	// decorations and such are not lost along the way.
	var wrappy_1 = wrappy;
	function wrappy (fn, cb) {
	  if (fn && cb) return wrappy(fn)(cb)

	  if (typeof fn !== 'function')
	    throw new TypeError('need wrapper function')

	  Object.keys(fn).forEach(function (k) {
	    wrapper[k] = fn[k];
	  });

	  return wrapper

	  function wrapper() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    var ret = fn.apply(this, args);
	    var cb = args[args.length-1];
	    if (typeof ret === 'function' && ret !== cb) {
	      Object.keys(cb).forEach(function (k) {
	        ret[k] = cb[k];
	      });
	    }
	    return ret
	  }
	}

	var once_1 = wrappy_1(once$1);
	var strict = wrappy_1(onceStrict);

	once$1.proto = once$1(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once$1(this)
	    },
	    configurable: true
	  });

	  Object.defineProperty(Function.prototype, 'onceStrict', {
	    value: function () {
	      return onceStrict(this)
	    },
	    configurable: true
	  });
	});

	function once$1 (fn) {
	  var f = function () {
	    if (f.called) return f.value
	    f.called = true;
	    return f.value = fn.apply(this, arguments)
	  };
	  f.called = false;
	  return f
	}

	function onceStrict (fn) {
	  var f = function () {
	    if (f.called)
	      throw new Error(f.onceError)
	    f.called = true;
	    return f.value = fn.apply(this, arguments)
	  };
	  var name = fn.name || 'Function wrapped with `once`';
	  f.onceError = name + " shouldn't be called more than once";
	  f.called = false;
	  return f
	}
	once_1.strict = strict;

	const logOnce = once_1((deprecation) => console.warn(deprecation));
	/**
	 * Error with extra properties to help with debugging
	 */
	class RequestError extends Error {
	    constructor(message, statusCode, options) {
	        super(message);
	        // Maintains proper stack trace (only available on V8)
	        /* istanbul ignore next */
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        }
	        this.name = "HttpError";
	        this.status = statusCode;
	        Object.defineProperty(this, "code", {
	            get() {
	                logOnce(new Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
	                return statusCode;
	            },
	        });
	        this.headers = options.headers || {};
	        // redact request credentials without mutating original request options
	        const requestCopy = Object.assign({}, options.request);
	        if (options.request.headers.authorization) {
	            requestCopy.headers = Object.assign({}, options.request.headers, {
	                authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]"),
	            });
	        }
	        requestCopy.url = requestCopy.url
	            // client_id & client_secret can be passed as URL query parameters to increase rate limit
	            // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications
	            .replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]")
	            // OAuth tokens can be passed as URL query parameters, although it is not recommended
	            // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header
	            .replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
	        this.request = requestCopy;
	    }
	}
	//# sourceMappingURL=index.js.map

	const VERSION$1 = "5.4.7";

	function getBufferResponse(response) {
	    return response.arrayBuffer();
	}

	function fetchWrapper(requestOptions) {
	    if (isPlainObject$1(requestOptions.body) ||
	        Array.isArray(requestOptions.body)) {
	        requestOptions.body = JSON.stringify(requestOptions.body);
	    }
	    let headers = {};
	    let status;
	    let url;
	    const fetch = (requestOptions.request && requestOptions.request.fetch) || browser;
	    return fetch(requestOptions.url, Object.assign({
	        method: requestOptions.method,
	        body: requestOptions.body,
	        headers: requestOptions.headers,
	        redirect: requestOptions.redirect,
	    }, requestOptions.request))
	        .then((response) => {
	        url = response.url;
	        status = response.status;
	        for (const keyAndValue of response.headers) {
	            headers[keyAndValue[0]] = keyAndValue[1];
	        }
	        if (status === 204 || status === 205) {
	            return;
	        }
	        // GitHub API returns 200 for HEAD requests
	        if (requestOptions.method === "HEAD") {
	            if (status < 400) {
	                return;
	            }
	            throw new RequestError(response.statusText, status, {
	                headers,
	                request: requestOptions,
	            });
	        }
	        if (status === 304) {
	            throw new RequestError("Not modified", status, {
	                headers,
	                request: requestOptions,
	            });
	        }
	        if (status >= 400) {
	            return response
	                .text()
	                .then((message) => {
	                const error = new RequestError(message, status, {
	                    headers,
	                    request: requestOptions,
	                });
	                try {
	                    let responseBody = JSON.parse(error.message);
	                    Object.assign(error, responseBody);
	                    let errors = responseBody.errors;
	                    // Assumption `errors` would always be in Array format
	                    error.message =
	                        error.message + ": " + errors.map(JSON.stringify).join(", ");
	                }
	                catch (e) {
	                    // ignore, see octokit/rest.js#684
	                }
	                throw error;
	            });
	        }
	        const contentType = response.headers.get("content-type");
	        if (/application\/json/.test(contentType)) {
	            return response.json();
	        }
	        if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
	            return response.text();
	        }
	        return getBufferResponse(response);
	    })
	        .then((data) => {
	        return {
	            status,
	            url,
	            headers,
	            data,
	        };
	    })
	        .catch((error) => {
	        if (error instanceof RequestError) {
	            throw error;
	        }
	        throw new RequestError(error.message, 500, {
	            headers,
	            request: requestOptions,
	        });
	    });
	}

	function withDefaults$1(oldEndpoint, newDefaults) {
	    const endpoint = oldEndpoint.defaults(newDefaults);
	    const newApi = function (route, parameters) {
	        const endpointOptions = endpoint.merge(route, parameters);
	        if (!endpointOptions.request || !endpointOptions.request.hook) {
	            return fetchWrapper(endpoint.parse(endpointOptions));
	        }
	        const request = (route, parameters) => {
	            return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));
	        };
	        Object.assign(request, {
	            endpoint,
	            defaults: withDefaults$1.bind(null, endpoint),
	        });
	        return endpointOptions.request.hook(request, endpointOptions);
	    };
	    return Object.assign(newApi, {
	        endpoint,
	        defaults: withDefaults$1.bind(null, endpoint),
	    });
	}

	const request = withDefaults$1(endpoint, {
	    headers: {
	        "user-agent": `octokit-request.js/${VERSION$1} ${getUserAgent()}`,
	    },
	});
	//# sourceMappingURL=index.js.map

	const VERSION$2 = "4.5.3";

	class GraphqlError extends Error {
	    constructor(request, response) {
	        const message = response.data.errors[0].message;
	        super(message);
	        Object.assign(this, response.data);
	        Object.assign(this, { headers: response.headers });
	        this.name = "GraphqlError";
	        this.request = request;
	        // Maintains proper stack trace (only available on V8)
	        /* istanbul ignore next */
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        }
	    }
	}

	const NON_VARIABLE_OPTIONS = [
	    "method",
	    "baseUrl",
	    "url",
	    "headers",
	    "request",
	    "query",
	    "mediaType",
	];
	function graphql(request, query, options) {
	    options =
	        typeof query === "string"
	            ? (options = Object.assign({ query }, options))
	            : (options = query);
	    const requestOptions = Object.keys(options).reduce((result, key) => {
	        if (NON_VARIABLE_OPTIONS.includes(key)) {
	            result[key] = options[key];
	            return result;
	        }
	        if (!result.variables) {
	            result.variables = {};
	        }
	        result.variables[key] = options[key];
	        return result;
	    }, {});
	    return request(requestOptions).then((response) => {
	        if (response.data.errors) {
	            const headers = {};
	            for (const key of Object.keys(response.headers)) {
	                headers[key] = response.headers[key];
	            }
	            throw new GraphqlError(requestOptions, {
	                headers,
	                data: response.data,
	            });
	        }
	        return response.data.data;
	    });
	}

	function withDefaults$2(request$1, newDefaults) {
	    const newRequest = request$1.defaults(newDefaults);
	    const newApi = (query, options) => {
	        return graphql(newRequest, query, options);
	    };
	    return Object.assign(newApi, {
	        defaults: withDefaults$2.bind(null, newRequest),
	        endpoint: request.endpoint,
	    });
	}

	const graphql$1 = withDefaults$2(request, {
	    headers: {
	        "user-agent": `octokit-graphql.js/${VERSION$2} ${getUserAgent()}`,
	    },
	    method: "POST",
	    url: "/graphql",
	});
	function withCustomRequest(customRequest) {
	    return withDefaults$2(customRequest, {
	        method: "POST",
	        url: "/graphql",
	    });
	}
	//# sourceMappingURL=index.js.map

	async function auth(token) {
	    const tokenType = token.split(/\./).length === 3
	        ? "app"
	        : /^v\d+\./.test(token)
	            ? "installation"
	            : "oauth";
	    return {
	        type: "token",
	        token: token,
	        tokenType
	    };
	}

	/**
	 * Prefix token for usage in the Authorization header
	 *
	 * @param token OAuth token or JSON Web Token
	 */
	function withAuthorizationPrefix(token) {
	    if (token.split(/\./).length === 3) {
	        return `bearer ${token}`;
	    }
	    return `token ${token}`;
	}

	async function hook(token, request, route, parameters) {
	    const endpoint = request.endpoint.merge(route, parameters);
	    endpoint.headers.authorization = withAuthorizationPrefix(token);
	    return request(endpoint);
	}

	const createTokenAuth = function createTokenAuth(token) {
	    if (!token) {
	        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
	    }
	    if (typeof token !== "string") {
	        throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
	    }
	    token = token.replace(/^(token|bearer) +/i, "");
	    return Object.assign(auth.bind(null, token), {
	        hook: hook.bind(null, token)
	    });
	};
	//# sourceMappingURL=index.js.map

	const VERSION$3 = "3.1.1";

	class Octokit {
	    constructor(options = {}) {
	        const hook = new Collection();
	        const requestDefaults = {
	            baseUrl: request.endpoint.DEFAULTS.baseUrl,
	            headers: {},
	            request: Object.assign({}, options.request, {
	                hook: hook.bind(null, "request"),
	            }),
	            mediaType: {
	                previews: [],
	                format: "",
	            },
	        };
	        // prepend default user agent with `options.userAgent` if set
	        requestDefaults.headers["user-agent"] = [
	            options.userAgent,
	            `octokit-core.js/${VERSION$3} ${getUserAgent()}`,
	        ]
	            .filter(Boolean)
	            .join(" ");
	        if (options.baseUrl) {
	            requestDefaults.baseUrl = options.baseUrl;
	        }
	        if (options.previews) {
	            requestDefaults.mediaType.previews = options.previews;
	        }
	        if (options.timeZone) {
	            requestDefaults.headers["time-zone"] = options.timeZone;
	        }
	        this.request = request.defaults(requestDefaults);
	        this.graphql = withCustomRequest(this.request).defaults({
	            ...requestDefaults,
	            baseUrl: requestDefaults.baseUrl.replace(/\/api\/v3$/, "/api"),
	        });
	        this.log = Object.assign({
	            debug: () => { },
	            info: () => { },
	            warn: console.warn.bind(console),
	            error: console.error.bind(console),
	        }, options.log);
	        this.hook = hook;
	        // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance
	        //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registred.
	        // (2) If only `options.auth` is set, use the default token authentication strategy.
	        // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.
	        // TODO: type `options.auth` based on `options.authStrategy`.
	        if (!options.authStrategy) {
	            if (!options.auth) {
	                // (1)
	                this.auth = async () => ({
	                    type: "unauthenticated",
	                });
	            }
	            else {
	                // (2)
	                const auth = createTokenAuth(options.auth);
	                // @ts-ignore  ¯\_(ツ)_/¯
	                hook.wrap("request", auth.hook);
	                this.auth = auth;
	            }
	        }
	        else {
	            const auth = options.authStrategy(Object.assign({
	                request: this.request,
	            }, options.auth));
	            // @ts-ignore  ¯\_(ツ)_/¯
	            hook.wrap("request", auth.hook);
	            this.auth = auth;
	        }
	        // apply plugins
	        // https://stackoverflow.com/a/16345172
	        const classConstructor = this.constructor;
	        classConstructor.plugins.forEach((plugin) => {
	            Object.assign(this, plugin(this, options));
	        });
	    }
	    static defaults(defaults) {
	        const OctokitWithDefaults = class extends this {
	            constructor(...args) {
	                const options = args[0] || {};
	                if (typeof defaults === "function") {
	                    super(defaults(options));
	                    return;
	                }
	                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent
	                    ? {
	                        userAgent: `${options.userAgent} ${defaults.userAgent}`,
	                    }
	                    : null));
	            }
	        };
	        return OctokitWithDefaults;
	    }
	    /**
	     * Attach a plugin (or many) to your Octokit instance.
	     *
	     * @example
	     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
	     */
	    static plugin(...newPlugins) {
	        var _a;
	        const currentPlugins = this.plugins;
	        const NewOctokit = (_a = class extends this {
	            },
	            _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))),
	            _a);
	        return NewOctokit;
	    }
	}
	Octokit.VERSION = VERSION$3;
	Octokit.plugins = [];
	//# sourceMappingURL=index.js.map

	const VERSION$4 = "1.0.0";

	/**
	 * @param octokit Octokit instance
	 * @param options Options passed to Octokit constructor
	 */
	function requestLog(octokit) {
	    octokit.hook.wrap("request", (request, options) => {
	        octokit.log.debug("request", options);
	        const start = Date.now();
	        const requestOptions = octokit.request.endpoint.parse(options);
	        const path = requestOptions.url.replace(options.baseUrl, "");
	        return request(options)
	            .then(response => {
	            octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);
	            return response;
	        })
	            .catch(error => {
	            octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() -
                start}ms`);
	            throw error;
	        });
	    });
	}
	requestLog.VERSION = VERSION$4;
	//# sourceMappingURL=index.js.map

	const VERSION$5 = "2.3.0";

	/**
	 * Some “list” response that can be paginated have a different response structure
	 *
	 * They have a `total_count` key in the response (search also has `incomplete_results`,
	 * /installation/repositories also has `repository_selection`), as well as a key with
	 * the list of the items which name varies from endpoint to endpoint.
	 *
	 * Octokit normalizes these responses so that paginated results are always returned following
	 * the same structure. One challenge is that if the list response has only one page, no Link
	 * header is provided, so this header alone is not sufficient to check wether a response is
	 * paginated or not.
	 *
	 * We check if a "total_count" key is present in the response data, but also make sure that
	 * a "url" property is not, as the "Get the combined status for a specific ref" endpoint would
	 * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref
	 */
	function normalizePaginatedListResponse(response) {
	    const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
	    if (!responseNeedsNormalization)
	        return response;
	    // keep the additional properties intact as there is currently no other way
	    // to retrieve the same information.
	    const incompleteResults = response.data.incomplete_results;
	    const repositorySelection = response.data.repository_selection;
	    const totalCount = response.data.total_count;
	    delete response.data.incomplete_results;
	    delete response.data.repository_selection;
	    delete response.data.total_count;
	    const namespaceKey = Object.keys(response.data)[0];
	    const data = response.data[namespaceKey];
	    response.data = data;
	    if (typeof incompleteResults !== "undefined") {
	        response.data.incomplete_results = incompleteResults;
	    }
	    if (typeof repositorySelection !== "undefined") {
	        response.data.repository_selection = repositorySelection;
	    }
	    response.data.total_count = totalCount;
	    return response;
	}

	function iterator$1(octokit, route, parameters) {
	    const options = typeof route === "function"
	        ? route.endpoint(parameters)
	        : octokit.request.endpoint(route, parameters);
	    const requestMethod = typeof route === "function" ? route : octokit.request;
	    const method = options.method;
	    const headers = options.headers;
	    let url = options.url;
	    return {
	        [Symbol.asyncIterator]: () => ({
	            next() {
	                if (!url) {
	                    return Promise.resolve({ done: true });
	                }
	                return requestMethod({ method, url, headers })
	                    .then(normalizePaginatedListResponse)
	                    .then((response) => {
	                    // `response.headers.link` format:
	                    // '<https://api.github.com/users/aseemk/followers?page=2>; rel="next", <https://api.github.com/users/aseemk/followers?page=2>; rel="last"'
	                    // sets `url` to undefined if "next" URL is not present or `link` header is not set
	                    url = ((response.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
	                    return { value: response };
	                });
	            },
	        }),
	    };
	}

	function paginate(octokit, route, parameters, mapFn) {
	    if (typeof parameters === "function") {
	        mapFn = parameters;
	        parameters = undefined;
	    }
	    return gather(octokit, [], iterator$1(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
	}
	function gather(octokit, results, iterator, mapFn) {
	    return iterator.next().then((result) => {
	        if (result.done) {
	            return results;
	        }
	        let earlyExit = false;
	        function done() {
	            earlyExit = true;
	        }
	        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
	        if (earlyExit) {
	            return results;
	        }
	        return gather(octokit, results, iterator, mapFn);
	    });
	}

	/**
	 * @param octokit Octokit instance
	 * @param options Options passed to Octokit constructor
	 */
	function paginateRest(octokit) {
	    return {
	        paginate: Object.assign(paginate.bind(null, octokit), {
	            iterator: iterator$1.bind(null, octokit),
	        }),
	    };
	}
	paginateRest.VERSION = VERSION$5;
	//# sourceMappingURL=index.js.map

	const Endpoints = {
	    actions: {
	        addSelectedRepoToOrgSecret: [
	            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
	        ],
	        cancelWorkflowRun: [
	            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
	        ],
	        createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
	        createOrUpdateRepoSecret: [
	            "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}",
	        ],
	        createRegistrationTokenForOrg: [
	            "POST /orgs/{org}/actions/runners/registration-token",
	        ],
	        createRegistrationTokenForRepo: [
	            "POST /repos/{owner}/{repo}/actions/runners/registration-token",
	        ],
	        createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
	        createRemoveTokenForRepo: [
	            "POST /repos/{owner}/{repo}/actions/runners/remove-token",
	        ],
	        createWorkflowDispatch: [
	            "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
	        ],
	        deleteArtifact: [
	            "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
	        ],
	        deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
	        deleteRepoSecret: [
	            "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}",
	        ],
	        deleteSelfHostedRunnerFromOrg: [
	            "DELETE /orgs/{org}/actions/runners/{runner_id}",
	        ],
	        deleteSelfHostedRunnerFromRepo: [
	            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}",
	        ],
	        deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
	        deleteWorkflowRunLogs: [
	            "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
	        ],
	        downloadArtifact: [
	            "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
	        ],
	        downloadJobLogsForWorkflowRun: [
	            "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
	        ],
	        downloadWorkflowRunLogs: [
	            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
	        ],
	        getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
	        getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
	        getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
	        getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
	        getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
	        getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
	        getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
	        getSelfHostedRunnerForRepo: [
	            "GET /repos/{owner}/{repo}/actions/runners/{runner_id}",
	        ],
	        getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
	        getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
	        getWorkflowRunUsage: [
	            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing",
	        ],
	        getWorkflowUsage: [
	            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
	        ],
	        listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
	        listJobsForWorkflowRun: [
	            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
	        ],
	        listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
	        listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
	        listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
	        listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
	        listRunnerApplicationsForRepo: [
	            "GET /repos/{owner}/{repo}/actions/runners/downloads",
	        ],
	        listSelectedReposForOrgSecret: [
	            "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
	        ],
	        listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
	        listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
	        listWorkflowRunArtifacts: [
	            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
	        ],
	        listWorkflowRuns: [
	            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
	        ],
	        listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
	        reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
	        removeSelectedRepoFromOrgSecret: [
	            "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
	        ],
	        setSelectedReposForOrgSecret: [
	            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories",
	        ],
	    },
	    activity: {
	        checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
	        deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
	        deleteThreadSubscription: [
	            "DELETE /notifications/threads/{thread_id}/subscription",
	        ],
	        getFeeds: ["GET /feeds"],
	        getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
	        getThread: ["GET /notifications/threads/{thread_id}"],
	        getThreadSubscriptionForAuthenticatedUser: [
	            "GET /notifications/threads/{thread_id}/subscription",
	        ],
	        listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
	        listNotificationsForAuthenticatedUser: ["GET /notifications"],
	        listOrgEventsForAuthenticatedUser: [
	            "GET /users/{username}/events/orgs/{org}",
	        ],
	        listPublicEvents: ["GET /events"],
	        listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
	        listPublicEventsForUser: ["GET /users/{username}/events/public"],
	        listPublicOrgEvents: ["GET /orgs/{org}/events"],
	        listReceivedEventsForUser: ["GET /users/{username}/received_events"],
	        listReceivedPublicEventsForUser: [
	            "GET /users/{username}/received_events/public",
	        ],
	        listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
	        listRepoNotificationsForAuthenticatedUser: [
	            "GET /repos/{owner}/{repo}/notifications",
	        ],
	        listReposStarredByAuthenticatedUser: ["GET /user/starred"],
	        listReposStarredByUser: ["GET /users/{username}/starred"],
	        listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
	        listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
	        listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
	        listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
	        markNotificationsAsRead: ["PUT /notifications"],
	        markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
	        markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
	        setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
	        setThreadSubscription: [
	            "PUT /notifications/threads/{thread_id}/subscription",
	        ],
	        starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
	        unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"],
	    },
	    apps: {
	        addRepoToInstallation: [
	            "PUT /user/installations/{installation_id}/repositories/{repository_id}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        checkToken: ["POST /applications/{client_id}/token"],
	        createContentAttachment: [
	            "POST /content_references/{content_reference_id}/attachments",
	            { mediaType: { previews: ["corsair"] } },
	        ],
	        createFromManifest: ["POST /app-manifests/{code}/conversions"],
	        createInstallationAccessToken: [
	            "POST /app/installations/{installation_id}/access_tokens",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
	        deleteInstallation: [
	            "DELETE /app/installations/{installation_id}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        deleteToken: ["DELETE /applications/{client_id}/token"],
	        getAuthenticated: [
	            "GET /app",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getBySlug: [
	            "GET /apps/{app_slug}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getInstallation: [
	            "GET /app/installations/{installation_id}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getOrgInstallation: [
	            "GET /orgs/{org}/installation",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getRepoInstallation: [
	            "GET /repos/{owner}/{repo}/installation",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getSubscriptionPlanForAccount: [
	            "GET /marketplace_listing/accounts/{account_id}",
	        ],
	        getSubscriptionPlanForAccountStubbed: [
	            "GET /marketplace_listing/stubbed/accounts/{account_id}",
	        ],
	        getUserInstallation: [
	            "GET /users/{username}/installation",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
	        listAccountsForPlanStubbed: [
	            "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
	        ],
	        listInstallationReposForAuthenticatedUser: [
	            "GET /user/installations/{installation_id}/repositories",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listInstallations: [
	            "GET /app/installations",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listInstallationsForAuthenticatedUser: [
	            "GET /user/installations",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listPlans: ["GET /marketplace_listing/plans"],
	        listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
	        listReposAccessibleToInstallation: [
	            "GET /installation/repositories",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
	        listSubscriptionsForAuthenticatedUserStubbed: [
	            "GET /user/marketplace_purchases/stubbed",
	        ],
	        removeRepoFromInstallation: [
	            "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        resetToken: ["PATCH /applications/{client_id}/token"],
	        revokeInstallationAccessToken: ["DELETE /installation/token"],
	        suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
	        unsuspendInstallation: [
	            "DELETE /app/installations/{installation_id}/suspended",
	        ],
	    },
	    billing: {
	        getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
	        getGithubActionsBillingUser: [
	            "GET /users/{username}/settings/billing/actions",
	        ],
	        getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
	        getGithubPackagesBillingUser: [
	            "GET /users/{username}/settings/billing/packages",
	        ],
	        getSharedStorageBillingOrg: [
	            "GET /orgs/{org}/settings/billing/shared-storage",
	        ],
	        getSharedStorageBillingUser: [
	            "GET /users/{username}/settings/billing/shared-storage",
	        ],
	    },
	    checks: {
	        create: [
	            "POST /repos/{owner}/{repo}/check-runs",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        createSuite: [
	            "POST /repos/{owner}/{repo}/check-suites",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        get: [
	            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        getSuite: [
	            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        listAnnotations: [
	            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        listForRef: [
	            "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        listForSuite: [
	            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        listSuitesForRef: [
	            "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        rerequestSuite: [
	            "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        setSuitesPreferences: [
	            "PATCH /repos/{owner}/{repo}/check-suites/preferences",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        update: [
	            "PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	    },
	    codeScanning: {
	        getAlert: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_id}"],
	        listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
	    },
	    codesOfConduct: {
	        getAllCodesOfConduct: [
	            "GET /codes_of_conduct",
	            { mediaType: { previews: ["scarlet-witch"] } },
	        ],
	        getConductCode: [
	            "GET /codes_of_conduct/{key}",
	            { mediaType: { previews: ["scarlet-witch"] } },
	        ],
	        getForRepo: [
	            "GET /repos/{owner}/{repo}/community/code_of_conduct",
	            { mediaType: { previews: ["scarlet-witch"] } },
	        ],
	    },
	    emojis: { get: ["GET /emojis"] },
	    gists: {
	        checkIsStarred: ["GET /gists/{gist_id}/star"],
	        create: ["POST /gists"],
	        createComment: ["POST /gists/{gist_id}/comments"],
	        delete: ["DELETE /gists/{gist_id}"],
	        deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
	        fork: ["POST /gists/{gist_id}/forks"],
	        get: ["GET /gists/{gist_id}"],
	        getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
	        getRevision: ["GET /gists/{gist_id}/{sha}"],
	        list: ["GET /gists"],
	        listComments: ["GET /gists/{gist_id}/comments"],
	        listCommits: ["GET /gists/{gist_id}/commits"],
	        listForUser: ["GET /users/{username}/gists"],
	        listForks: ["GET /gists/{gist_id}/forks"],
	        listPublic: ["GET /gists/public"],
	        listStarred: ["GET /gists/starred"],
	        star: ["PUT /gists/{gist_id}/star"],
	        unstar: ["DELETE /gists/{gist_id}/star"],
	        update: ["PATCH /gists/{gist_id}"],
	        updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"],
	    },
	    git: {
	        createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
	        createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
	        createRef: ["POST /repos/{owner}/{repo}/git/refs"],
	        createTag: ["POST /repos/{owner}/{repo}/git/tags"],
	        createTree: ["POST /repos/{owner}/{repo}/git/trees"],
	        deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
	        getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
	        getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
	        getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
	        getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
	        getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
	        listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
	        updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"],
	    },
	    gitignore: {
	        getAllTemplates: ["GET /gitignore/templates"],
	        getTemplate: ["GET /gitignore/templates/{name}"],
	    },
	    interactions: {
	        getRestrictionsForOrg: [
	            "GET /orgs/{org}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        getRestrictionsForRepo: [
	            "GET /repos/{owner}/{repo}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        removeRestrictionsForOrg: [
	            "DELETE /orgs/{org}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        removeRestrictionsForRepo: [
	            "DELETE /repos/{owner}/{repo}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        setRestrictionsForOrg: [
	            "PUT /orgs/{org}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        setRestrictionsForRepo: [
	            "PUT /repos/{owner}/{repo}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	    },
	    issues: {
	        addAssignees: [
	            "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees",
	        ],
	        addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
	        checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
	        create: ["POST /repos/{owner}/{repo}/issues"],
	        createComment: [
	            "POST /repos/{owner}/{repo}/issues/{issue_number}/comments",
	        ],
	        createLabel: ["POST /repos/{owner}/{repo}/labels"],
	        createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
	        deleteComment: [
	            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}",
	        ],
	        deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
	        deleteMilestone: [
	            "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}",
	        ],
	        get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
	        getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
	        getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
	        getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
	        getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
	        list: ["GET /issues"],
	        listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
	        listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
	        listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
	        listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
	        listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
	        listEventsForTimeline: [
	            "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
	            { mediaType: { previews: ["mockingbird"] } },
	        ],
	        listForAuthenticatedUser: ["GET /user/issues"],
	        listForOrg: ["GET /orgs/{org}/issues"],
	        listForRepo: ["GET /repos/{owner}/{repo}/issues"],
	        listLabelsForMilestone: [
	            "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
	        ],
	        listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
	        listLabelsOnIssue: [
	            "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
	        ],
	        listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
	        lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
	        removeAllLabels: [
	            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels",
	        ],
	        removeAssignees: [
	            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees",
	        ],
	        removeLabel: [
	            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
	        ],
	        setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
	        unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
	        update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
	        updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
	        updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
	        updateMilestone: [
	            "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}",
	        ],
	    },
	    licenses: {
	        get: ["GET /licenses/{license}"],
	        getAllCommonlyUsed: ["GET /licenses"],
	        getForRepo: ["GET /repos/{owner}/{repo}/license"],
	    },
	    markdown: {
	        render: ["POST /markdown"],
	        renderRaw: [
	            "POST /markdown/raw",
	            { headers: { "content-type": "text/plain; charset=utf-8" } },
	        ],
	    },
	    meta: { get: ["GET /meta"] },
	    migrations: {
	        cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
	        deleteArchiveForAuthenticatedUser: [
	            "DELETE /user/migrations/{migration_id}/archive",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        deleteArchiveForOrg: [
	            "DELETE /orgs/{org}/migrations/{migration_id}/archive",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        downloadArchiveForOrg: [
	            "GET /orgs/{org}/migrations/{migration_id}/archive",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        getArchiveForAuthenticatedUser: [
	            "GET /user/migrations/{migration_id}/archive",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
	        getImportStatus: ["GET /repos/{owner}/{repo}/import"],
	        getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
	        getStatusForAuthenticatedUser: [
	            "GET /user/migrations/{migration_id}",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        getStatusForOrg: [
	            "GET /orgs/{org}/migrations/{migration_id}",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        listForAuthenticatedUser: [
	            "GET /user/migrations",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        listForOrg: [
	            "GET /orgs/{org}/migrations",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        listReposForOrg: [
	            "GET /orgs/{org}/migrations/{migration_id}/repositories",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        listReposForUser: [
	            "GET /user/migrations/{migration_id}/repositories",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
	        setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
	        startForAuthenticatedUser: ["POST /user/migrations"],
	        startForOrg: ["POST /orgs/{org}/migrations"],
	        startImport: ["PUT /repos/{owner}/{repo}/import"],
	        unlockRepoForAuthenticatedUser: [
	            "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        unlockRepoForOrg: [
	            "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        updateImport: ["PATCH /repos/{owner}/{repo}/import"],
	    },
	    orgs: {
	        blockUser: ["PUT /orgs/{org}/blocks/{username}"],
	        checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
	        checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
	        checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
	        convertMemberToOutsideCollaborator: [
	            "PUT /orgs/{org}/outside_collaborators/{username}",
	        ],
	        createInvitation: ["POST /orgs/{org}/invitations"],
	        createWebhook: ["POST /orgs/{org}/hooks"],
	        deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
	        get: ["GET /orgs/{org}"],
	        getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
	        getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
	        getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
	        list: ["GET /organizations"],
	        listAppInstallations: [
	            "GET /orgs/{org}/installations",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listBlockedUsers: ["GET /orgs/{org}/blocks"],
	        listForAuthenticatedUser: ["GET /user/orgs"],
	        listForUser: ["GET /users/{username}/orgs"],
	        listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
	        listMembers: ["GET /orgs/{org}/members"],
	        listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
	        listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
	        listPendingInvitations: ["GET /orgs/{org}/invitations"],
	        listPublicMembers: ["GET /orgs/{org}/public_members"],
	        listWebhooks: ["GET /orgs/{org}/hooks"],
	        pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
	        removeMember: ["DELETE /orgs/{org}/members/{username}"],
	        removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
	        removeOutsideCollaborator: [
	            "DELETE /orgs/{org}/outside_collaborators/{username}",
	        ],
	        removePublicMembershipForAuthenticatedUser: [
	            "DELETE /orgs/{org}/public_members/{username}",
	        ],
	        setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
	        setPublicMembershipForAuthenticatedUser: [
	            "PUT /orgs/{org}/public_members/{username}",
	        ],
	        unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
	        update: ["PATCH /orgs/{org}"],
	        updateMembershipForAuthenticatedUser: [
	            "PATCH /user/memberships/orgs/{org}",
	        ],
	        updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
	    },
	    projects: {
	        addCollaborator: [
	            "PUT /projects/{project_id}/collaborators/{username}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createCard: [
	            "POST /projects/columns/{column_id}/cards",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createColumn: [
	            "POST /projects/{project_id}/columns",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createForAuthenticatedUser: [
	            "POST /user/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createForOrg: [
	            "POST /orgs/{org}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createForRepo: [
	            "POST /repos/{owner}/{repo}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        delete: [
	            "DELETE /projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        deleteCard: [
	            "DELETE /projects/columns/cards/{card_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        deleteColumn: [
	            "DELETE /projects/columns/{column_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        get: [
	            "GET /projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        getCard: [
	            "GET /projects/columns/cards/{card_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        getColumn: [
	            "GET /projects/columns/{column_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        getPermissionForUser: [
	            "GET /projects/{project_id}/collaborators/{username}/permission",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listCards: [
	            "GET /projects/columns/{column_id}/cards",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listCollaborators: [
	            "GET /projects/{project_id}/collaborators",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listColumns: [
	            "GET /projects/{project_id}/columns",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listForOrg: [
	            "GET /orgs/{org}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listForRepo: [
	            "GET /repos/{owner}/{repo}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listForUser: [
	            "GET /users/{username}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        moveCard: [
	            "POST /projects/columns/cards/{card_id}/moves",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        moveColumn: [
	            "POST /projects/columns/{column_id}/moves",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        removeCollaborator: [
	            "DELETE /projects/{project_id}/collaborators/{username}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        update: [
	            "PATCH /projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        updateCard: [
	            "PATCH /projects/columns/cards/{card_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        updateColumn: [
	            "PATCH /projects/columns/{column_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	    },
	    pulls: {
	        checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
	        create: ["POST /repos/{owner}/{repo}/pulls"],
	        createReplyForReviewComment: [
	            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
	        ],
	        createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
	        createReviewComment: [
	            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments",
	        ],
	        deletePendingReview: [
	            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	        ],
	        deleteReviewComment: [
	            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}",
	        ],
	        dismissReview: [
	            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
	        ],
	        get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
	        getReview: [
	            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	        ],
	        getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
	        list: ["GET /repos/{owner}/{repo}/pulls"],
	        listCommentsForReview: [
	            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
	        ],
	        listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
	        listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
	        listRequestedReviewers: [
	            "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	        ],
	        listReviewComments: [
	            "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
	        ],
	        listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
	        listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
	        merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
	        removeRequestedReviewers: [
	            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	        ],
	        requestReviewers: [
	            "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	        ],
	        submitReview: [
	            "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
	        ],
	        update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
	        updateBranch: [
	            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
	            { mediaType: { previews: ["lydian"] } },
	        ],
	        updateReview: [
	            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	        ],
	        updateReviewComment: [
	            "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}",
	        ],
	    },
	    rateLimit: { get: ["GET /rate_limit"] },
	    reactions: {
	        createForCommitComment: [
	            "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForIssue: [
	            "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForIssueComment: [
	            "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForPullRequestReviewComment: [
	            "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForTeamDiscussionCommentInOrg: [
	            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForTeamDiscussionInOrg: [
	            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForCommitComment: [
	            "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForIssue: [
	            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForIssueComment: [
	            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForPullRequestComment: [
	            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForTeamDiscussion: [
	            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForTeamDiscussionComment: [
	            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteLegacy: [
	            "DELETE /reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	            {
	                deprecated: "octokit.reactions.deleteLegacy() is deprecated, see https://developer.github.com/v3/reactions/#delete-a-reaction-legacy",
	            },
	        ],
	        listForCommitComment: [
	            "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForIssue: [
	            "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForIssueComment: [
	            "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForPullRequestReviewComment: [
	            "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForTeamDiscussionCommentInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForTeamDiscussionInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	    },
	    repos: {
	        acceptInvitation: ["PATCH /user/repository_invitations/{invitation_id}"],
	        addAppAccessRestrictions: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	            {},
	            { mapToData: "apps" },
	        ],
	        addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
	        addStatusCheckContexts: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	            {},
	            { mapToData: "contexts" },
	        ],
	        addTeamAccessRestrictions: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	            {},
	            { mapToData: "teams" },
	        ],
	        addUserAccessRestrictions: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	            {},
	            { mapToData: "users" },
	        ],
	        checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
	        checkVulnerabilityAlerts: [
	            "GET /repos/{owner}/{repo}/vulnerability-alerts",
	            { mediaType: { previews: ["dorian"] } },
	        ],
	        compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
	        createCommitComment: [
	            "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments",
	        ],
	        createCommitSignatureProtection: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	            { mediaType: { previews: ["zzzax"] } },
	        ],
	        createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
	        createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
	        createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
	        createDeploymentStatus: [
	            "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	        ],
	        createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
	        createForAuthenticatedUser: ["POST /user/repos"],
	        createFork: ["POST /repos/{owner}/{repo}/forks"],
	        createInOrg: ["POST /orgs/{org}/repos"],
	        createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
	        createPagesSite: [
	            "POST /repos/{owner}/{repo}/pages",
	            { mediaType: { previews: ["switcheroo"] } },
	        ],
	        createRelease: ["POST /repos/{owner}/{repo}/releases"],
	        createUsingTemplate: [
	            "POST /repos/{template_owner}/{template_repo}/generate",
	            { mediaType: { previews: ["baptiste"] } },
	        ],
	        createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
	        declineInvitation: ["DELETE /user/repository_invitations/{invitation_id}"],
	        delete: ["DELETE /repos/{owner}/{repo}"],
	        deleteAccessRestrictions: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
	        ],
	        deleteAdminBranchProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	        ],
	        deleteBranchProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection",
	        ],
	        deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
	        deleteCommitSignatureProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	            { mediaType: { previews: ["zzzax"] } },
	        ],
	        deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
	        deleteDeployment: [
	            "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}",
	        ],
	        deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
	        deleteInvitation: [
	            "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}",
	        ],
	        deletePagesSite: [
	            "DELETE /repos/{owner}/{repo}/pages",
	            { mediaType: { previews: ["switcheroo"] } },
	        ],
	        deletePullRequestReviewProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	        ],
	        deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
	        deleteReleaseAsset: [
	            "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}",
	        ],
	        deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
	        disableAutomatedSecurityFixes: [
	            "DELETE /repos/{owner}/{repo}/automated-security-fixes",
	            { mediaType: { previews: ["london"] } },
	        ],
	        disableVulnerabilityAlerts: [
	            "DELETE /repos/{owner}/{repo}/vulnerability-alerts",
	            { mediaType: { previews: ["dorian"] } },
	        ],
	        downloadArchive: ["GET /repos/{owner}/{repo}/{archive_format}/{ref}"],
	        enableAutomatedSecurityFixes: [
	            "PUT /repos/{owner}/{repo}/automated-security-fixes",
	            { mediaType: { previews: ["london"] } },
	        ],
	        enableVulnerabilityAlerts: [
	            "PUT /repos/{owner}/{repo}/vulnerability-alerts",
	            { mediaType: { previews: ["dorian"] } },
	        ],
	        get: ["GET /repos/{owner}/{repo}"],
	        getAccessRestrictions: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
	        ],
	        getAdminBranchProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	        ],
	        getAllStatusCheckContexts: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	        ],
	        getAllTopics: [
	            "GET /repos/{owner}/{repo}/topics",
	            { mediaType: { previews: ["mercy"] } },
	        ],
	        getAppsWithAccessToProtectedBranch: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	        ],
	        getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
	        getBranchProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection",
	        ],
	        getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
	        getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
	        getCollaboratorPermissionLevel: [
	            "GET /repos/{owner}/{repo}/collaborators/{username}/permission",
	        ],
	        getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
	        getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
	        getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
	        getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
	        getCommitSignatureProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	            { mediaType: { previews: ["zzzax"] } },
	        ],
	        getCommunityProfileMetrics: [
	            "GET /repos/{owner}/{repo}/community/profile",
	            { mediaType: { previews: ["black-panther"] } },
	        ],
	        getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
	        getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
	        getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
	        getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
	        getDeploymentStatus: [
	            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
	        ],
	        getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
	        getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
	        getPages: ["GET /repos/{owner}/{repo}/pages"],
	        getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
	        getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
	        getPullRequestReviewProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	        ],
	        getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
	        getReadme: ["GET /repos/{owner}/{repo}/readme"],
	        getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
	        getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
	        getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
	        getStatusChecksProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	        ],
	        getTeamsWithAccessToProtectedBranch: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	        ],
	        getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
	        getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
	        getUsersWithAccessToProtectedBranch: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	        ],
	        getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
	        getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
	        listBranches: ["GET /repos/{owner}/{repo}/branches"],
	        listBranchesForHeadCommit: [
	            "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
	            { mediaType: { previews: ["groot"] } },
	        ],
	        listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
	        listCommentsForCommit: [
	            "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
	        ],
	        listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
	        listCommitStatusesForRef: [
	            "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
	        ],
	        listCommits: ["GET /repos/{owner}/{repo}/commits"],
	        listContributors: ["GET /repos/{owner}/{repo}/contributors"],
	        listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
	        listDeploymentStatuses: [
	            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	        ],
	        listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
	        listForAuthenticatedUser: ["GET /user/repos"],
	        listForOrg: ["GET /orgs/{org}/repos"],
	        listForUser: ["GET /users/{username}/repos"],
	        listForks: ["GET /repos/{owner}/{repo}/forks"],
	        listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
	        listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
	        listLanguages: ["GET /repos/{owner}/{repo}/languages"],
	        listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
	        listPublic: ["GET /repositories"],
	        listPullRequestsAssociatedWithCommit: [
	            "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
	            { mediaType: { previews: ["groot"] } },
	        ],
	        listReleaseAssets: [
	            "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
	        ],
	        listReleases: ["GET /repos/{owner}/{repo}/releases"],
	        listTags: ["GET /repos/{owner}/{repo}/tags"],
	        listTeams: ["GET /repos/{owner}/{repo}/teams"],
	        listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
	        merge: ["POST /repos/{owner}/{repo}/merges"],
	        pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
	        removeAppAccessRestrictions: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	            {},
	            { mapToData: "apps" },
	        ],
	        removeCollaborator: [
	            "DELETE /repos/{owner}/{repo}/collaborators/{username}",
	        ],
	        removeStatusCheckContexts: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	            {},
	            { mapToData: "contexts" },
	        ],
	        removeStatusCheckProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	        ],
	        removeTeamAccessRestrictions: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	            {},
	            { mapToData: "teams" },
	        ],
	        removeUserAccessRestrictions: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	            {},
	            { mapToData: "users" },
	        ],
	        replaceAllTopics: [
	            "PUT /repos/{owner}/{repo}/topics",
	            { mediaType: { previews: ["mercy"] } },
	        ],
	        requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
	        setAdminBranchProtection: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	        ],
	        setAppAccessRestrictions: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	            {},
	            { mapToData: "apps" },
	        ],
	        setStatusCheckContexts: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	            {},
	            { mapToData: "contexts" },
	        ],
	        setTeamAccessRestrictions: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	            {},
	            { mapToData: "teams" },
	        ],
	        setUserAccessRestrictions: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	            {},
	            { mapToData: "users" },
	        ],
	        testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
	        transfer: ["POST /repos/{owner}/{repo}/transfer"],
	        update: ["PATCH /repos/{owner}/{repo}"],
	        updateBranchProtection: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection",
	        ],
	        updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
	        updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
	        updateInvitation: [
	            "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}",
	        ],
	        updatePullRequestReviewProtection: [
	            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	        ],
	        updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
	        updateReleaseAsset: [
	            "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}",
	        ],
	        updateStatusCheckPotection: [
	            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	        ],
	        updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
	        uploadReleaseAsset: [
	            "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
	            { baseUrl: "https://uploads.github.com" },
	        ],
	    },
	    search: {
	        code: ["GET /search/code"],
	        commits: ["GET /search/commits", { mediaType: { previews: ["cloak"] } }],
	        issuesAndPullRequests: ["GET /search/issues"],
	        labels: ["GET /search/labels"],
	        repos: ["GET /search/repositories"],
	        topics: ["GET /search/topics", { mediaType: { previews: ["mercy"] } }],
	        users: ["GET /search/users"],
	    },
	    teams: {
	        addOrUpdateMembershipForUserInOrg: [
	            "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}",
	        ],
	        addOrUpdateProjectPermissionsInOrg: [
	            "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        addOrUpdateRepoPermissionsInOrg: [
	            "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
	        ],
	        checkPermissionsForProjectInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        checkPermissionsForRepoInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
	        ],
	        create: ["POST /orgs/{org}/teams"],
	        createDiscussionCommentInOrg: [
	            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	        ],
	        createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
	        deleteDiscussionCommentInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	        ],
	        deleteDiscussionInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	        ],
	        deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
	        getByName: ["GET /orgs/{org}/teams/{team_slug}"],
	        getDiscussionCommentInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	        ],
	        getDiscussionInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	        ],
	        getMembershipForUserInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/memberships/{username}",
	        ],
	        list: ["GET /orgs/{org}/teams"],
	        listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
	        listDiscussionCommentsInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	        ],
	        listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
	        listForAuthenticatedUser: ["GET /user/teams"],
	        listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
	        listPendingInvitationsInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/invitations",
	        ],
	        listProjectsInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
	        removeMembershipForUserInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}",
	        ],
	        removeProjectInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}",
	        ],
	        removeRepoInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
	        ],
	        updateDiscussionCommentInOrg: [
	            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	        ],
	        updateDiscussionInOrg: [
	            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	        ],
	        updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"],
	    },
	    users: {
	        addEmailForAuthenticated: ["POST /user/emails"],
	        block: ["PUT /user/blocks/{username}"],
	        checkBlocked: ["GET /user/blocks/{username}"],
	        checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
	        checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
	        createGpgKeyForAuthenticated: ["POST /user/gpg_keys"],
	        createPublicSshKeyForAuthenticated: ["POST /user/keys"],
	        deleteEmailForAuthenticated: ["DELETE /user/emails"],
	        deleteGpgKeyForAuthenticated: ["DELETE /user/gpg_keys/{gpg_key_id}"],
	        deletePublicSshKeyForAuthenticated: ["DELETE /user/keys/{key_id}"],
	        follow: ["PUT /user/following/{username}"],
	        getAuthenticated: ["GET /user"],
	        getByUsername: ["GET /users/{username}"],
	        getContextForUser: ["GET /users/{username}/hovercard"],
	        getGpgKeyForAuthenticated: ["GET /user/gpg_keys/{gpg_key_id}"],
	        getPublicSshKeyForAuthenticated: ["GET /user/keys/{key_id}"],
	        list: ["GET /users"],
	        listBlockedByAuthenticated: ["GET /user/blocks"],
	        listEmailsForAuthenticated: ["GET /user/emails"],
	        listFollowedByAuthenticated: ["GET /user/following"],
	        listFollowersForAuthenticatedUser: ["GET /user/followers"],
	        listFollowersForUser: ["GET /users/{username}/followers"],
	        listFollowingForUser: ["GET /users/{username}/following"],
	        listGpgKeysForAuthenticated: ["GET /user/gpg_keys"],
	        listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
	        listPublicEmailsForAuthenticated: ["GET /user/public_emails"],
	        listPublicKeysForUser: ["GET /users/{username}/keys"],
	        listPublicSshKeysForAuthenticated: ["GET /user/keys"],
	        setPrimaryEmailVisibilityForAuthenticated: ["PATCH /user/email/visibility"],
	        unblock: ["DELETE /user/blocks/{username}"],
	        unfollow: ["DELETE /user/following/{username}"],
	        updateAuthenticated: ["PATCH /user"],
	    },
	};

	const VERSION$6 = "4.1.2";

	function endpointsToMethods(octokit, endpointsMap) {
	    const newMethods = {};
	    for (const [scope, endpoints] of Object.entries(endpointsMap)) {
	        for (const [methodName, endpoint] of Object.entries(endpoints)) {
	            const [route, defaults, decorations] = endpoint;
	            const [method, url] = route.split(/ /);
	            const endpointDefaults = Object.assign({ method, url }, defaults);
	            if (!newMethods[scope]) {
	                newMethods[scope] = {};
	            }
	            const scopeMethods = newMethods[scope];
	            if (decorations) {
	                scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
	                continue;
	            }
	            scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
	        }
	    }
	    return newMethods;
	}
	function decorate(octokit, scope, methodName, defaults, decorations) {
	    const requestWithDefaults = octokit.request.defaults(defaults);
	    /* istanbul ignore next */
	    function withDecorations(...args) {
	        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
	        let options = requestWithDefaults.endpoint.merge(...args);
	        // There are currently no other decorations than `.mapToData`
	        if (decorations.mapToData) {
	            options = Object.assign({}, options, {
	                data: options[decorations.mapToData],
	                [decorations.mapToData]: undefined,
	            });
	            return requestWithDefaults(options);
	        }
	        if (decorations.renamed) {
	            const [newScope, newMethodName] = decorations.renamed;
	            octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
	        }
	        if (decorations.deprecated) {
	            octokit.log.warn(decorations.deprecated);
	        }
	        if (decorations.renamedParameters) {
	            // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
	            const options = requestWithDefaults.endpoint.merge(...args);
	            for (const [name, alias] of Object.entries(decorations.renamedParameters)) {
	                if (name in options) {
	                    octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
	                    if (!(alias in options)) {
	                        options[alias] = options[name];
	                    }
	                    delete options[name];
	                }
	            }
	            return requestWithDefaults(options);
	        }
	        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
	        return requestWithDefaults(...args);
	    }
	    return Object.assign(withDecorations, requestWithDefaults);
	}

	/**
	 * This plugin is a 1:1 copy of internal @octokit/rest plugins. The primary
	 * goal is to rebuild @octokit/rest on top of @octokit/core. Once that is
	 * done, we will remove the registerEndpoints methods and return the methods
	 * directly as with the other plugins. At that point we will also remove the
	 * legacy workarounds and deprecations.
	 *
	 * See the plan at
	 * https://github.com/octokit/plugin-rest-endpoint-methods.js/pull/1
	 */
	function restEndpointMethods(octokit) {
	    return endpointsToMethods(octokit, Endpoints);
	}
	restEndpointMethods.VERSION = VERSION$6;
	//# sourceMappingURL=index.js.map

	const VERSION$7 = "18.0.3";

	const Octokit$1 = Octokit.plugin(requestLog, restEndpointMethods, paginateRest).defaults({
	    userAgent: `octokit-rest.js/${VERSION$7}`,
	});
	//# sourceMappingURL=index.js.map

	// Unique ID creation requires a high quality random # generator. In the browser we therefore
	// require the crypto API and do not support built-in fallback to lower quality random number
	// generators (like Math.random()).
	// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
	// find the complete implementation of crypto (msCrypto) on IE11.
	var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);
	var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

	function rng() {
	  if (!getRandomValues) {
	    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
	  }

	  return getRandomValues(rnds8);
	}

	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */
	var byteToHex = [];

	for (var i = 0; i < 256; ++i) {
	  byteToHex[i] = (i + 0x100).toString(16).substr(1);
	}

	function bytesToUuid(buf, offset) {
	  var i = offset || 0;
	  var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

	  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
	}

	function v4(options, buf, offset) {
	  var i = buf && offset || 0;

	  if (typeof options == 'string') {
	    buf = options === 'binary' ? new Array(16) : null;
	    options = null;
	  }

	  options = options || {};
	  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

	  rnds[6] = rnds[6] & 0x0f | 0x40;
	  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

	  if (buf) {
	    for (var ii = 0; ii < 16; ++ii) {
	      buf[i + ii] = rnds[ii];
	    }
	  }

	  return buf || bytesToUuid(rnds);
	}

	// Compressed representation of the Grapheme_Cluster_Break=Extend
	// information from
	// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
	// Each pair of elements represents a range, as an offet from the
	// previous range and a length. Numbers are in base-36, with the empty
	// string being a shorthand for 1.
	let extend = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
	// Convert offsets into absolute values
	for (let i = 1; i < extend.length; i++)
	    extend[i] += extend[i - 1];
	function isExtendingChar(code) {
	    for (let i = 1; i < extend.length; i += 2)
	        if (extend[i] > code)
	            return extend[i - 1] <= code;
	    return false;
	}
	function isRegionalIndicator(code) {
	    return code >= 0x1F1E6 && code <= 0x1F1FF;
	}
	const ZWJ = 0x200d;
	/// Returns a grapheme cluster end _after_ (not equal to) `pos`, if
	/// possible. Moves across surrogate pairs, extending characters,
	/// characters joined with zero-width joiners, and flag emoji.
	function nextClusterBreak(str, pos) {
	    if (pos == str.length)
	        return pos;
	    // If pos is in the middle of a surrogate pair, move to its start
	    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
	        pos--;
	    let prev = codePointAt(str, pos);
	    pos += codePointSize(prev);
	    while (pos < str.length) {
	        let next = codePointAt(str, pos);
	        if (prev == ZWJ || next == ZWJ || isExtendingChar(next)) {
	            pos += codePointSize(next);
	            prev = next;
	        }
	        else if (isRegionalIndicator(next)) {
	            let countBefore = 0, i = pos - 2;
	            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
	                countBefore++;
	                i -= 2;
	            }
	            if (countBefore % 2 == 0)
	                break;
	            else
	                pos += 2;
	        }
	        else {
	            break;
	        }
	    }
	    return pos;
	}
	/// Returns a grapheme cluster end _before_ `pos`, if possible.
	function prevClusterBreak(str, pos) {
	    while (pos > 0) {
	        let found = nextClusterBreak(str, pos - 2);
	        if (found < pos)
	            return found;
	        pos--;
	    }
	    return 0;
	}
	function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
	function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
	/// Find the code point at the given position in a string (as in the
	/// [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
	/// string method).
	function codePointAt(str, pos) {
	    let code0 = str.charCodeAt(pos);
	    if (!surrogateHigh(code0) || pos + 1 == str.length)
	        return code0;
	    let code1 = str.charCodeAt(pos + 1);
	    if (!surrogateLow(code1))
	        return code0;
	    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
	}
	/// The first character that takes up two positions in a JavaScript
	/// string. It is often useful to compare with this after calling
	/// `codePointAt`, to figure out whether your character takes up 1 or
	/// 2 index positions.
	function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

	/// Count the column position at the given offset into the string,
	/// taking extending characters and tab size into account.
	function countColumn(string, n, tabSize) {
	    for (let i = 0; i < string.length;) {
	        if (string.charCodeAt(i) == 9) {
	            n += tabSize - (n % tabSize);
	            i++;
	        }
	        else {
	            n++;
	            i = nextClusterBreak(string, i);
	        }
	    }
	    return n;
	}
	/// Find the offset that corresponds to the given column position in a
	/// string, taking extending characters and tab size into account.
	function findColumn(string, n, col, tabSize) {
	    for (let i = 0; i < string.length;) {
	        if (n >= col)
	            return { offset: i, leftOver: 0 };
	        n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
	        i = nextClusterBreak(string, i);
	    }
	    return { offset: string.length, leftOver: col - n };
	}

	/// The document tree type.
	class Text {
	    /// @internal
	    constructor() { }
	    /// Get the line description around the given position.
	    lineAt(pos) {
	        if (pos < 0 || pos > this.length)
	            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
	        for (let i = 0; i < lineCache.length; i += 2) {
	            if (lineCache[i] != this)
	                continue;
	            let line = lineCache[i + 1];
	            if (line.start <= pos && line.end >= pos)
	                return line;
	        }
	        return cacheLine(this, this.lineInner(pos, false, 1, 0).finish(this));
	    }
	    /// Get the description for the given (1-based) line number.
	    line(n) {
	        if (n < 1 || n > this.lines)
	            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
	        for (let i = 0; i < lineCache.length; i += 2) {
	            if (lineCache[i] != this)
	                continue;
	            let line = lineCache[i + 1];
	            if (line.number == n)
	                return line;
	        }
	        return cacheLine(this, this.lineInner(n, true, 1, 0).finish(this));
	    }
	    /// Replace a range of the text with the given lines. `text` should
	    /// have a length of at least one.
	    replace(from, to, text) {
	        let parts = [];
	        this.decompose(0, from, parts);
	        parts.push(text);
	        this.decompose(to, this.length, parts);
	        return TextNode.from(parts, this.length - (to - from) + text.length);
	    }
	    /// Append another document to this one.
	    append(text) {
	        return this.length == 0 ? text : text.length == 0 ? this : TextNode.from([this, text], this.length + text.length);
	    }
	    /// Retrieve the lines between the given points.
	    slice(from, to = this.length) {
	        let parts = [];
	        this.decompose(from, to, parts);
	        return TextNode.from(parts, to - from);
	    }
	    /// Test whether this text is equal to another instance.
	    eq(other) { return this == other || eqContent(this, other); }
	    /// Iterate over the text. When `dir` is `-1`, iteration happens
	    /// from end to start. This will return lines and the breaks between
	    /// them as separate strings, and for long lines, might split lines
	    /// themselves into multiple chunks as well.
	    iter(dir = 1) { return new RawTextCursor(this, dir); }
	    /// Iterate over a range of the text. When `from` > `to`, the
	    /// iterator will run in reverse.
	    iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
	    /// Iterate over lines in the text, starting at position (_not_ line
	    /// number) `from`. An iterator returned by this combines all text
	    /// on a line into a single string (which may be expensive for very
	    /// long lines), and skips line breaks (its
	    /// [`lineBreak`](#text.TextIterator.lineBreak) property is always
	    /// false).
	    iterLines(from = 0) { return new LineCursor(this, from); }
	    /// @internal
	    toString() { return this.sliceString(0); }
	    /// Create a `Text` instance for the given array of lines.
	    static of(text) {
	        if (text.length == 0)
	            throw new RangeError("A document must have at least one line");
	        if (text.length == 1 && !text[0] && Text.empty)
	            return Text.empty;
	        let length = textLength(text);
	        return length < 1024 /* MaxLeaf */ ? new TextLeaf(text, length) : TextNode.from(TextLeaf.split(text, []), length);
	    }
	}
	if (typeof Symbol != "undefined")
	    Text.prototype[Symbol.iterator] = function () { return this.iter(); };
	let lineCache = [], lineCachePos = -2, lineCacheSize = 12;
	function cacheLine(text, line) {
	    lineCachePos = (lineCachePos + 2) % lineCacheSize;
	    lineCache[lineCachePos] = text;
	    lineCache[lineCachePos + 1] = line;
	    return line;
	}
	// Leaves store an array of strings. There are always line breaks
	// between these strings (though not between adjacent Text nodes).
	// These are limited in length, so that bigger documents are
	// constructed as a tree structure. Long lines will be broken into a
	// number of single-line leaves.
	class TextLeaf extends Text {
	    constructor(text, length = textLength(text)) {
	        super();
	        this.text = text;
	        this.length = length;
	    }
	    get lines() { return this.text.length; }
	    get children() { return null; }
	    lineInner(target, isLine, line, offset) {
	        for (let i = 0;; i++) {
	            let string = this.text[i], end = offset + string.length;
	            if ((isLine ? line : end) >= target)
	                return new Line(offset, end, line, string);
	            offset = end + 1;
	            line++;
	        }
	    }
	    decompose(from, to, target) {
	        target.push(new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from)));
	    }
	    lastLineLength() { return this.text[this.text.length - 1].length; }
	    firstLineLength() { return this.text[0].length; }
	    replace(from, to, text) {
	        let newLen = this.length + text.length - (to - from);
	        if (newLen >= 1024 /* MaxLeaf */ || !(text instanceof TextLeaf))
	            return super.replace(from, to, text);
	        return new TextLeaf(appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to), newLen);
	    }
	    sliceString(from, to = this.length, lineSep = "\n") {
	        return sliceText(this.text, from, to).join(lineSep);
	    }
	    flatten(target) {
	        target[target.length - 1] += this.text[0];
	        for (let i = 1; i < this.text.length; i++)
	            target.push(this.text[i]);
	    }
	    static split(text, target) {
	        let part = [], length = -1;
	        for (let line of text) {
	            for (;;) {
	                let newLength = length + line.length + 1;
	                if (newLength < 512 /* BaseLeaf */) {
	                    length = newLength;
	                    part.push(line);
	                    break;
	                }
	                let cut = 512 /* BaseLeaf */ - length - 1, after = line.charCodeAt(cut);
	                if (after >= 0xdc00 && after < 0xe000)
	                    cut++;
	                part.push(line.slice(0, cut));
	                target.push(new TextLeaf(part, 512 /* BaseLeaf */));
	                line = line.slice(cut);
	                length = -1;
	                part = [];
	            }
	        }
	        if (length != -1)
	            target.push(new TextLeaf(part, length));
	        return target;
	    }
	}
	// Nodes provide the tree structure of the `Text` type. They store a
	// number of other nodes or leaves, taking care to balance itself on
	// changes.
	class TextNode extends Text {
	    constructor(children, length) {
	        super();
	        this.children = children;
	        this.length = length;
	        this.lines = 1;
	        for (let child of children)
	            this.lines += child.lines - 1;
	    }
	    lineInner(target, isLine, line, offset) {
	        for (let i = 0;; i++) {
	            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
	            if ((isLine ? endLine : end) >= target) {
	                let inner = child.lineInner(target, isLine, line, offset), add;
	                if (inner.start == offset && (add = this.lineLengthTo(i))) {
	                    inner.start -= add;
	                    inner.content = null;
	                }
	                if (inner.end == end && (add = this.lineLengthFrom(i + 1))) {
	                    inner.end += add;
	                    inner.content = null;
	                }
	                return inner;
	            }
	            offset = end;
	            line = endLine;
	        }
	    }
	    decompose(from, to, target) {
	        for (let i = 0, pos = 0; pos < to && i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (from < end && to > pos) {
	                if (pos >= from && end <= to)
	                    target.push(child);
	                else
	                    child.decompose(from - pos, to - pos, target);
	            }
	            pos = end;
	        }
	    }
	    lineLengthTo(to) {
	        let length = 0;
	        for (let i = to - 1; i >= 0; i--) {
	            let child = this.children[i];
	            if (child.lines > 1)
	                return length + child.lastLineLength();
	            length += child.length;
	        }
	        return length;
	    }
	    lastLineLength() { return this.lineLengthTo(this.children.length); }
	    lineLengthFrom(from) {
	        let length = 0;
	        for (let i = from; i < this.children.length; i++) {
	            let child = this.children[i];
	            if (child.lines > 1)
	                return length + child.firstLineLength();
	            length += child.length;
	        }
	        return length;
	    }
	    firstLineLength() { return this.lineLengthFrom(0); }
	    replace(from, to, text) {
	        // Looks like a small change, try to optimize
	        if (text.length < 512 /* BaseLeaf */ && to - from < 512 /* BaseLeaf */) {
	            let lengthDiff = text.length - (to - from);
	            for (let i = 0, pos = 0; i < this.children.length; i++) {
	                let child = this.children[i], end = pos + child.length;
	                // Fast path: if the change only affects one child and the
	                // child's size remains in the acceptable range, only update
	                // that child
	                if (from >= pos && to <= end &&
	                    child.length + lengthDiff < (this.length + lengthDiff) >> (3 /* BranchShift */ - 1) &&
	                    child.length + lengthDiff > 0) {
	                    let copy = this.children.slice();
	                    copy[i] = child.replace(from - pos, to - pos, text);
	                    return new TextNode(copy, this.length + lengthDiff);
	                }
	                pos = end;
	            }
	        }
	        return super.replace(from, to, text);
	    }
	    sliceString(from, to = this.length, lineSep = "\n") {
	        let result = "";
	        for (let i = 0, pos = 0; pos < to && i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (from < end && to > pos)
	                result += child.sliceString(from - pos, to - pos, lineSep);
	            pos = end;
	        }
	        return result;
	    }
	    flatten(target) {
	        for (let child of this.children)
	            child.flatten(target);
	    }
	    static from(children, length) {
	        if (!children.every(ch => ch instanceof Text))
	            throw new Error("NOP");
	        if (length < 1024 /* MaxLeaf */) {
	            let text = [""];
	            for (let child of children)
	                child.flatten(text);
	            return new TextLeaf(text, length);
	        }
	        let chunkLength = Math.max(512 /* BaseLeaf */, length >> 3 /* BranchShift */), maxLength = chunkLength << 1, minLength = chunkLength >> 1;
	        let chunked = [], currentLength = 0, currentChunk = [];
	        function add(child) {
	            let childLength = child.length, last;
	            if (!childLength)
	                return;
	            if (childLength > maxLength && child instanceof TextNode) {
	                for (let node of child.children)
	                    add(node);
	            }
	            else if (childLength > minLength && (currentLength > minLength || currentLength == 0)) {
	                flush();
	                chunked.push(child);
	            }
	            else if (child instanceof TextLeaf && currentLength > 0 &&
	                (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
	                child.length + last.length <= 512 /* BaseLeaf */) {
	                currentLength += childLength;
	                currentChunk[currentChunk.length - 1] = new TextLeaf(appendText(child.text, last.text.slice()), child.length + last.length);
	            }
	            else {
	                if (currentLength + childLength > chunkLength)
	                    flush();
	                currentLength += childLength;
	                currentChunk.push(child);
	            }
	        }
	        function flush() {
	            if (currentLength == 0)
	                return;
	            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLength));
	            currentLength = 0;
	            currentChunk.length = 0;
	        }
	        for (let child of children)
	            add(child);
	        flush();
	        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
	    }
	}
	Text.empty = Text.of([""]);
	function textLength(text) {
	    let length = -1;
	    for (let line of text)
	        length += line.length + 1;
	    return length;
	}
	function appendText(text, target, from = 0, to = 1e9) {
	    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
	        let line = text[i], end = pos + line.length;
	        if (end >= from) {
	            if (end > to)
	                line = line.slice(0, to - pos);
	            if (pos < from)
	                line = line.slice(from - pos);
	            if (first) {
	                target[target.length - 1] += line;
	                first = false;
	            }
	            else
	                target.push(line);
	        }
	        pos = end + 1;
	    }
	    return target;
	}
	function sliceText(text, from, to) {
	    return appendText(text, [""], from, to);
	}
	function eqContent(a, b) {
	    if (a.length != b.length || a.lines != b.lines)
	        return false;
	    let iterA = new RawTextCursor(a), iterB = new RawTextCursor(b);
	    for (let offA = 0, offB = 0;;) {
	        if (iterA.lineBreak != iterB.lineBreak || iterA.done != iterB.done) {
	            return false;
	        }
	        else if (iterA.done) {
	            return true;
	        }
	        else if (iterA.lineBreak) {
	            iterA.next();
	            iterB.next();
	            offA = offB = 0;
	        }
	        else {
	            let strA = iterA.value.slice(offA), strB = iterB.value.slice(offB);
	            if (strA.length == strB.length) {
	                if (strA != strB)
	                    return false;
	                iterA.next();
	                iterB.next();
	                offA = offB = 0;
	            }
	            else if (strA.length > strB.length) {
	                if (strA.slice(0, strB.length) != strB)
	                    return false;
	                offA += strB.length;
	                iterB.next();
	                offB = 0;
	            }
	            else {
	                if (strB.slice(0, strA.length) != strA)
	                    return false;
	                offB += strA.length;
	                iterA.next();
	                offA = 0;
	            }
	        }
	    }
	}
	class RawTextCursor {
	    constructor(text, dir = 1) {
	        this.dir = dir;
	        this.done = false;
	        this.lineBreak = false;
	        this.value = "";
	        this.nodes = [text];
	        this.offsets = [dir > 0 ? 0 : text instanceof TextLeaf ? text.text.length : text.children.length];
	    }
	    next(skip = 0) {
	        for (;;) {
	            let last = this.nodes.length - 1;
	            if (last < 0) {
	                this.done = true;
	                this.value = "";
	                this.lineBreak = false;
	                return this;
	            }
	            let top = this.nodes[last];
	            let offset = this.offsets[last];
	            if (top instanceof TextLeaf) {
	                // Internal offset with lineBreak == false means we have to
	                // count the line break at this position
	                if (offset != (this.dir > 0 ? 0 : top.text.length) && !this.lineBreak) {
	                    this.lineBreak = true;
	                    if (skip == 0) {
	                        this.value = "\n";
	                        return this;
	                    }
	                    skip--;
	                    continue;
	                }
	                // Otherwise, move to the next string
	                let next = top.text[offset - (this.dir < 0 ? 1 : 0)];
	                this.offsets[last] = (offset += this.dir);
	                if (offset == (this.dir > 0 ? top.text.length : 0)) {
	                    this.nodes.pop();
	                    this.offsets.pop();
	                }
	                this.lineBreak = false;
	                if (next.length > Math.max(0, skip)) {
	                    this.value = skip == 0 ? next : this.dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
	                    return this;
	                }
	                skip -= next.length;
	            }
	            else if (offset == (this.dir > 0 ? top.children.length : 0)) {
	                this.nodes.pop();
	                this.offsets.pop();
	            }
	            else {
	                let next = top.children[this.dir > 0 ? offset : offset - 1], len = next.length;
	                this.offsets[last] = offset + this.dir;
	                if (skip > len) {
	                    skip -= len;
	                }
	                else {
	                    this.nodes.push(next);
	                    this.offsets.push(this.dir > 0 ? 0 : next instanceof TextLeaf ? next.text.length : next.children.length);
	                }
	            }
	        }
	    }
	}
	class PartialTextCursor {
	    constructor(text, start, end) {
	        this.value = "";
	        this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
	        if (start > end) {
	            this.skip = text.length - start;
	            this.limit = start - end;
	        }
	        else {
	            this.skip = start;
	            this.limit = end - start;
	        }
	    }
	    next() {
	        if (this.limit <= 0) {
	            this.limit = -1;
	        }
	        else {
	            let { value, lineBreak, done } = this.cursor.next(this.skip);
	            this.skip = 0;
	            this.value = value;
	            let len = lineBreak ? 1 : value.length;
	            if (len > this.limit)
	                this.value = this.cursor.dir > 0 ? value.slice(0, this.limit) : value.slice(len - this.limit);
	            if (done || this.value.length == 0)
	                this.limit = -1;
	            else
	                this.limit -= this.value.length;
	        }
	        return this;
	    }
	    get lineBreak() { return this.cursor.lineBreak; }
	    get done() { return this.limit < 0; }
	}
	class LineCursor {
	    constructor(text, from = 0) {
	        this.value = "";
	        this.done = false;
	        this.cursor = text.iter();
	        this.skip = from;
	    }
	    next() {
	        if (this.cursor.done) {
	            this.done = true;
	            this.value = "";
	            return this;
	        }
	        for (this.value = "";;) {
	            let { value, lineBreak, done } = this.cursor.next(this.skip);
	            this.skip = 0;
	            if (done || lineBreak)
	                return this;
	            this.value += value;
	        }
	    }
	    get lineBreak() { return false; }
	}
	// FIXME rename start/end to from/to for consistency with other types?
	/// This type describes a line in the document. It is created
	/// on-demand when lines are [queried](#text.Text.lineAt).
	class Line {
	    /// @internal
	    constructor(
	    /// The position of the start of the line.
	    start, 
	    /// The position at the end of the line (_before_ the line break,
	    /// if this isn't the last line).
	    end, 
	    /// This line's line number (1-based).
	    number, 
	    /// @internal
	    content) {
	        this.start = start;
	        this.end = end;
	        this.number = number;
	        this.content = content;
	    }
	    /// The length of the line (not including any line break after it).
	    get length() { return this.end - this.start; }
	    /// Retrieve a part of the content of this line. This is a method,
	    /// rather than, say, a string property, to avoid concatenating long
	    /// lines whenever they are accessed. Try to write your code, if it
	    /// is going to be doing a lot of line-reading, to read only the
	    /// parts it needs.
	    slice(from = 0, to = this.length) {
	        if (typeof this.content == "string")
	            return to == from + 1 ? this.content.charAt(from) : this.content.slice(from, to);
	        if (from == to)
	            return "";
	        let result = this.content.slice(from, to);
	        if (from == 0 && to == this.length)
	            this.content = result;
	        return result;
	    }
	    /// @internal
	    finish(text) {
	        if (this.content == null)
	            this.content = new LineContent(text, this.start);
	        return this;
	    }
	    /// Find the next (or previous if `forward` is false) grapheme
	    /// cluster break from the given start position (as an offset inside
	    /// the line, not the document). Will return a position greater than
	    /// (or less than if `forward` is false) `start` unless there is no
	    /// such index in the string.
	    findClusterBreak(start, forward) {
	        if (start < 0 || start > this.length)
	            throw new RangeError("Invalid position given to Line.findClusterBreak");
	        let contextStart, context;
	        if (this.content == "string") {
	            contextStart = this.start;
	            context = this.content;
	        }
	        else {
	            contextStart = Math.max(0, start - 256);
	            context = this.slice(contextStart, Math.min(this.length, contextStart + 512));
	        }
	        return (forward ? nextClusterBreak : prevClusterBreak)(context, start - contextStart) + contextStart;
	    }
	}
	class LineContent {
	    constructor(doc, start) {
	        this.doc = doc;
	        this.start = start;
	        this.cursor = null;
	        this.strings = null;
	    }
	    // FIXME quadratic complexity (somewhat) when iterating long lines in small pieces
	    slice(from, to) {
	        if (!this.cursor) {
	            this.cursor = this.doc.iter();
	            this.strings = [this.cursor.next(this.start).value];
	        }
	        for (let result = "", pos = 0, i = 0;; i++) {
	            if (i == this.strings.length)
	                this.strings.push(this.cursor.next().value);
	            let string = this.strings[i], end = pos + string.length;
	            if (end <= from)
	                continue;
	            result += string.slice(Math.max(0, from - pos), Math.min(string.length, to - pos));
	            if (end >= to)
	                return result;
	            pos += string.length;
	        }
	    }
	}

	/// The default maximum length of a `TreeBuffer` node.
	const DefaultBufferLength = 1024;
	class Iteration {
	    constructor(enter, leave) {
	        this.enter = enter;
	        this.leave = leave;
	        this.result = undefined;
	    }
	    get done() { return this.result !== undefined; }
	    doEnter(type, start, end) {
	        let value = this.enter(type, start, end);
	        if (value === undefined)
	            return true;
	        if (value !== false)
	            this.result = value;
	        return false;
	    }
	}
	let nextPropID = 0;
	/// Each [node type](#tree.NodeType) can have metadata associated with
	/// it in props. Instances of this class represent prop names.
	class NodeProp {
	    /// Create a new node prop type. You can optionally pass a
	    /// `deserialize` function.
	    constructor({ deserialize } = {}) {
	        this.id = nextPropID++;
	        this.deserialize = deserialize || (() => {
	            throw new Error("This node type doesn't define a deserialize function");
	        });
	    }
	    /// Create a string-valued node prop whose deserialize function is
	    /// the identity function.
	    static string() { return new NodeProp({ deserialize: str => str }); }
	    /// Create a number-valued node prop whose deserialize function is
	    /// just `Number`.
	    static number() { return new NodeProp({ deserialize: Number }); }
	    /// Creates a boolean-valued node prop whose deserialize function
	    /// returns true for any input.
	    static flag() { return new NodeProp({ deserialize: () => true }); }
	    /// Store a value for this prop in the given object. This can be
	    /// useful when building up a prop object to pass to the
	    /// [`NodeType`](#tree.NodeType) constructor. Returns its first
	    /// argument.
	    set(propObj, value) {
	        propObj[this.id] = value;
	        return propObj;
	    }
	    /// This is meant to be used with
	    /// [`NodeGroup.extend`](#tree.NodeGroup.extend) or
	    /// [`Parser.withProps`](#lezer.Parser.withProps) to compute prop
	    /// values for each node type in the group. Takes a [match
	    /// object](#tree.NodeType.match) or function that returns undefined
	    /// if the node type doesn't get this prop, and the prop's value if
	    /// it does.
	    add(match) {
	        return new NodePropSource(this, typeof match == "function" ? match : NodeType.match(match));
	    }
	}
	/// The special node type that the parser uses to represent parse
	/// errors has this flag set. (You shouldn't use it for custom nodes
	/// that represent erroneous content.)
	NodeProp.error = NodeProp.flag();
	/// Nodes that were produced by skipped expressions (such as
	/// comments) have this prop set to true.
	NodeProp.skipped = NodeProp.flag();
	/// Prop that is used to describe matching delimiters. For opening
	/// delimiters, this holds an array of node names (written as a
	/// space-separated string when declaring this prop in a grammar)
	/// for the node types of closing delimiters that match it.
	NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
	/// The inverse of [`openedBy`](#tree.NodeProp^closedBy). This is
	/// attached to closing delimiters, holding an array of node names
	/// of types of matching opening delimiters.
	NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
	/// Indicates that this node indicates a top level document.
	NodeProp.top = NodeProp.flag();
	/// Type returned by [`NodeProp.add`](#tree.NodeProp.add). Describes
	/// the way a prop should be added to each node type in a node group.
	class NodePropSource {
	    /// @internal
	    constructor(
	    /// @internal
	    prop, 
	    /// @internal
	    f) {
	        this.prop = prop;
	        this.f = f;
	    }
	}
	/// Each node in a syntax tree has a node type associated with it.
	class NodeType {
	    /// @internal
	    constructor(
	    /// The name of the node type. Not necessarily unique, but if the
	    /// grammar was written properly, different node types with the
	    /// same name within a node group should play the same semantic
	    /// role.
	    name, 
	    /// @internal
	    props, 
	    /// The id of this node in its group. Corresponds to the term ids
	    /// used in the parser.
	    id) {
	        this.name = name;
	        this.props = props;
	        this.id = id;
	    }
	    /// Retrieves a node prop for this type. Will return `undefined` if
	    /// the prop isn't present on this node.
	    prop(prop) { return this.props[prop.id]; }
	    /// Create a function from node types to arbitrary values by
	    /// specifying an object whose property names are node names. Often
	    /// useful with [`NodeProp.add`](#tree.NodeProp.add). You can put
	    /// multiple node names, separated by spaces, in a single property
	    /// name to map multiple node names to a single value.
	    static match(map) {
	        let direct = Object.create(null);
	        for (let prop in map)
	            for (let name of prop.split(" "))
	                direct[name] = map[prop];
	        return (node) => direct[node.name];
	    }
	}
	/// An empty dummy node type to use when no actual type is available.
	NodeType.none = new NodeType("", Object.create(null), 0);
	/// A node group holds a collection of node types. It is used to
	/// compactly represent trees by storing their type ids, rather than a
	/// full pointer to the type object, in a number array. Each parser
	/// [has](#lezer.Parser.group) a node group, and [tree
	/// buffers](#tree.TreeBuffer) can only store collections of nodes
	/// from the same group. A group can have a maximum of 2**16 (65536)
	/// node types in it, so that the ids fit into 16-bit typed array
	/// slots.
	class NodeGroup {
	    /// Create a group with the given types. The `id` property of each
	    /// type should correspond to its position within the array.
	    constructor(
	    /// The node types in this group, by id.
	    types) {
	        this.types = types;
	        for (let i = 0; i < types.length; i++)
	            if (types[i].id != i)
	                throw new RangeError("Node type ids should correspond to array positions when creating a node group");
	    }
	    /// Create a copy of this group with some node properties added. The
	    /// arguments to this method should be created with
	    /// [`NodeProp.add`](#tree.NodeProp.add).
	    extend(...props) {
	        let newTypes = [];
	        for (let type of this.types) {
	            let newProps = null;
	            for (let source of props) {
	                let value = source.f(type);
	                if (value !== undefined) {
	                    if (!newProps) {
	                        newProps = Object.create(null);
	                        for (let prop in type.props)
	                            newProps[prop] = type.props[prop];
	                    }
	                    newProps[source.prop.id] = value;
	                }
	            }
	            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id) : type);
	        }
	        return new NodeGroup(newTypes);
	    }
	}
	/// A subtree is a representation of part of the syntax tree. It may
	/// either be the tree root, or a tagged node.
	class Subtree {
	    // Shorthand for `.type.name`.
	    get name() { return this.type.name; }
	    /// The depth (number of parent nodes) of this subtree
	    get depth() {
	        let d = 0;
	        for (let p = this.parent; p; p = p.parent)
	            d++;
	        return d;
	    }
	    /// The root of the tree that this subtree is part of
	    get root() {
	        let cx = this;
	        while (cx.parent)
	            cx = cx.parent;
	        return cx;
	    }
	    /// Find the node at a given position. By default, this will return
	    /// the lowest-depth subtree that covers the position from both
	    /// sides, meaning that nodes starting or ending at the position
	    /// aren't entered. You can pass a `side` of `-1` to enter nodes
	    /// that end at the position, or `1` to enter nodes that start
	    /// there.
	    resolve(pos, side = 0) {
	        let result = this.resolveAt(pos);
	        // FIXME this is slightly inefficient in that it scans the result
	        // of resolveAt twice (but further complicating child-finding
	        // logic seems unattractive as well)
	        if (side != 0)
	            for (;;) {
	                let child = (side < 0 ? result.childBefore(pos) : result.childAfter(pos));
	                if (!child || (side < 0 ? child.end : child.start) != pos)
	                    break;
	                result = child;
	            }
	        return result;
	    }
	    /// Get the first child of this subtree.
	    get firstChild() { return this.childAfter(this.start - 1); }
	    /// Find the last child of this subtree.
	    get lastChild() { return this.childBefore(this.end + 1); }
	}
	/// A piece of syntax tree. There are two ways to approach these
	/// trees: the way they are actually stored in memory, and the
	/// convenient way.
	///
	/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
	/// objects. By packing detail information into `TreeBuffer` leaf
	/// nodes, the representation is made a lot more memory-efficient.
	///
	/// However, when you want to actually work with tree nodes, this
	/// representation is very awkward, so most client code will want to
	/// use the `Subtree` interface instead, which provides a view on some
	/// part of this data structure, and can be used (through `resolve`,
	/// for example) to zoom in on any single node.
	class Tree extends Subtree {
	    /// @internal
	    constructor(
	    /// @internal
	    type, 
	    /// The tree's child nodes. Children small enough to fit in a
	    /// `TreeBuffer` will be represented as such, other children can be
	    /// further `Tree` instances with their own internal structure.
	    children, 
	    /// The positions (offsets relative to the start of this tree) of
	    /// the children.
	    positions, 
	    /// The total length of this tree @internal
	    length) {
	        super();
	        this.type = type;
	        this.children = children;
	        this.positions = positions;
	        this.length = length;
	    }
	    /// @internal
	    get start() { return 0; }
	    /// @internal
	    get end() { return this.length; }
	    /// @internal
	    toString() {
	        let children = this.children.map(c => c.toString()).join();
	        return !this.name ? children :
	            (/\W/.test(this.name) && !this.type.prop(NodeProp.error) ? JSON.stringify(this.name) : this.name) +
	                (children.length ? "(" + children + ")" : "");
	    }
	    partial(start, end, offset, children, positions) {
	        for (let i = 0; i < this.children.length; i++) {
	            let from = this.positions[i];
	            if (from > end)
	                break;
	            let child = this.children[i], to = from + child.length;
	            if (to < start)
	                continue;
	            if (start <= from && end >= to) {
	                children.push(child);
	                positions.push(from + offset);
	            }
	            else if (child instanceof Tree) {
	                child.partial(start - from, end - from, offset + from, children, positions);
	            }
	        }
	    }
	    /// Apply a set of edits to a tree, removing all nodes that were
	    /// touched by the edits, and moving remaining nodes so that their
	    /// positions are updated for insertions/deletions before them. This
	    /// is likely to destroy a lot of the structure of the tree, and
	    /// mostly useful for extracting the nodes that can be reused in a
	    /// subsequent incremental re-parse.
	    applyChanges(changes) {
	        if (changes.length == 0)
	            return this;
	        let children = [], positions = [];
	        function cutAt(tree, pos, side) {
	            let found = -1;
	            tree.iterate({
	                from: pos,
	                to: side < 0 ? 0 : tree.length,
	                enter() { return found < 0 ? undefined : false; },
	                leave(type, start, end) {
	                    if (found < 0 && (side < 0 ? end <= pos : start >= pos) && !type.prop(NodeProp.error))
	                        found = side < 0 ? Math.min(pos, end - 1) : Math.max(pos, start + 1);
	                }
	            });
	            return found > -1 ? found : side < 0 ? 0 : tree.length;
	        }
	        let off = 0;
	        for (let i = 0, pos = 0;; i++) {
	            let next = i == changes.length ? null : changes[i];
	            let nextPos = next ? cutAt(this, next.fromA, -1) : this.length;
	            if (nextPos > pos)
	                this.partial(pos, nextPos, off, children, positions);
	            if (!next)
	                break;
	            pos = cutAt(this, next.toA, 1);
	            off += (next.toB - next.fromB) - (next.toA - next.fromA);
	        }
	        return new Tree(NodeType.none, children, positions, this.length + off);
	    }
	    /// Take the part of the tree up to the given position.
	    cut(at) {
	        if (at >= this.length)
	            return this;
	        let children = [], positions = [];
	        for (let i = 0; i < this.children.length; i++) {
	            let from = this.positions[i];
	            if (from >= at)
	                break;
	            let child = this.children[i], to = from + child.length;
	            children.push(to <= at ? child : child.cut(at - from));
	            positions.push(from);
	        }
	        return new Tree(this.type, children, positions, at);
	    }
	    /// @internal
	    iterate({ from = this.start, to = this.end, enter, leave }) {
	        let iter = new Iteration(enter, leave);
	        this.iterInner(from, to, 0, iter);
	        return iter.result;
	    }
	    /// @internal
	    iterInner(from, to, offset, iter) {
	        if (this.type.name && !iter.doEnter(this.type, offset, offset + this.length))
	            return;
	        if (from <= to) {
	            for (let i = 0; i < this.children.length && !iter.done; i++) {
	                let child = this.children[i], start = this.positions[i] + offset, end = start + child.length;
	                if (start > to)
	                    break;
	                if (end < from)
	                    continue;
	                child.iterInner(from, to, start, iter);
	            }
	        }
	        else {
	            for (let i = this.children.length - 1; i >= 0 && !iter.done; i--) {
	                let child = this.children[i], start = this.positions[i] + offset, end = start + child.length;
	                if (end < to)
	                    break;
	                if (start > from)
	                    continue;
	                child.iterInner(from, to, start, iter);
	            }
	        }
	        if (iter.leave && this.type.name)
	            iter.leave(this.type, offset, offset + this.length);
	        return;
	    }
	    /// @internal
	    resolveAt(pos) {
	        if (cacheRoot == this) {
	            for (let tree = cached;;) {
	                let next = tree.parent;
	                if (!next)
	                    break;
	                if (tree.start < pos && tree.end > pos)
	                    return tree.resolve(pos);
	                tree = next;
	            }
	        }
	        cacheRoot = this;
	        return cached = this.resolveInner(pos, 0, this);
	    }
	    /// @internal
	    childBefore(pos) {
	        return this.findChild(pos, -1, 0, this);
	    }
	    /// @internal
	    childAfter(pos) {
	        return this.findChild(pos, 1, 0, this);
	    }
	    /// @internal
	    findChild(pos, side, start, parent) {
	        for (let i = 0; i < this.children.length; i++) {
	            let childStart = this.positions[i] + start, select = -1;
	            if (childStart >= pos) {
	                if (side < 0 && i > 0)
	                    select = i - 1;
	                else if (side > 0)
	                    select = i;
	                else
	                    break;
	            }
	            if (select < 0 && (childStart + this.children[i].length > pos || side < 0 && i == this.children.length - 1))
	                select = i;
	            if (select >= 0) {
	                let child = this.children[select], childStart = this.positions[select] + start;
	                if (child.length == 0 && childStart == pos)
	                    continue;
	                if (child instanceof Tree) {
	                    if (child.type.name)
	                        return new NodeSubtree(child, childStart, parent);
	                    return child.findChild(pos, side, childStart, parent);
	                }
	                else {
	                    let found = child.findIndex(pos, side, childStart, 0, child.buffer.length);
	                    if (found > -1)
	                        return new BufferSubtree(child, childStart, found, parent);
	                }
	            }
	        }
	        return null;
	    }
	    /// @internal
	    resolveInner(pos, start, parent) {
	        let found = this.findChild(pos, 0, start, parent);
	        return found ? found.resolveAt(pos) : parent;
	    }
	    /// Append another tree to this tree. `other` must have empty space
	    /// big enough to fit this tree at its start.
	    append(other) {
	        if (other.children.length && other.positions[0] < this.length)
	            throw new Error("Can't append overlapping trees");
	        return new Tree(this.type, this.children.concat(other.children), this.positions.concat(other.positions), other.length);
	    }
	    /// Balance the direct children of this tree.
	    balance(maxBufferLength = DefaultBufferLength) {
	        return this.children.length <= BalanceBranchFactor ? this
	            : balanceRange(this.type, NodeType.none, this.children, this.positions, 0, this.children.length, 0, maxBufferLength, this.length);
	    }
	    /// Build a tree from a postfix-ordered buffer of node information,
	    /// or a cursor over such a buffer. 
	    static build(data) { return buildTree(data); }
	}
	/// The empty tree
	Tree.empty = new Tree(NodeType.none, [], [], 0);
	Tree.prototype.parent = null;
	// Top-level `resolveAt` calls store their last result here, so that
	// if the next call is near the last, parent trees can be cheaply
	// reused.
	let cacheRoot = Tree.empty;
	let cached = Tree.empty;
	/// Tree buffers contain (type, start, end, endIndex) quads for each
	/// node. In such a buffer, nodes are stored in prefix order (parents
	/// before children, with the endIndex of the parent indicating which
	/// children belong to it)
	class TreeBuffer {
	    /// Create a tree buffer @internal
	    constructor(
	    /// @internal
	    buffer, 
	    // The total length of the group of nodes in the buffer.
	    length, 
	    /// @internal
	    group, 
	    /// An optional type tag, used to tag a buffer as being part of a
	    /// repetition @internal
	    type = NodeType.none) {
	        this.buffer = buffer;
	        this.length = length;
	        this.group = group;
	        this.type = type;
	    }
	    /// @internal
	    toString() {
	        let parts = [];
	        for (let index = 0; index < this.buffer.length;)
	            index = this.childToString(index, parts);
	        return parts.join(",");
	    }
	    /// @internal
	    childToString(index, parts) {
	        let id = this.buffer[index], endIndex = this.buffer[index + 3];
	        let type = this.group.types[id], result = type.name;
	        if (/\W/.test(result) && !type.prop(NodeProp.error))
	            result = JSON.stringify(result);
	        index += 4;
	        if (endIndex > index) {
	            let children = [];
	            while (index < endIndex)
	                index = this.childToString(index, children);
	            result += "(" + children.join(",") + ")";
	        }
	        parts.push(result);
	        return index;
	    }
	    /// @internal
	    cut(at) {
	        let cutPoint = 0;
	        while (cutPoint < this.buffer.length && this.buffer[cutPoint + 1] < at)
	            cutPoint += 4;
	        let newBuffer = new Uint16Array(cutPoint);
	        for (let i = 0; i < cutPoint; i += 4) {
	            newBuffer[i] = this.buffer[i];
	            newBuffer[i + 1] = this.buffer[i + 1];
	            newBuffer[i + 2] = Math.min(at, this.buffer[i + 2]);
	            newBuffer[i + 3] = Math.min(this.buffer[i + 3], cutPoint);
	        }
	        return new TreeBuffer(newBuffer, Math.min(at, this.length), this.group);
	    }
	    iterate({ from = 0, to = this.length, enter, leave }) {
	        let iter = new Iteration(enter, leave);
	        this.iterInner(from, to, 0, iter);
	        return iter.result;
	    }
	    /// @internal
	    iterInner(from, to, offset, iter) {
	        if (from <= to) {
	            for (let index = 0; index < this.buffer.length;)
	                index = this.iterChild(from, to, offset, index, iter);
	        }
	        else {
	            this.iterRev(from, to, offset, 0, this.buffer.length, iter);
	        }
	    }
	    /// @internal
	    iterChild(from, to, offset, index, iter) {
	        let type = this.group.types[this.buffer[index++]], start = this.buffer[index++] + offset, end = this.buffer[index++] + offset, endIndex = this.buffer[index++];
	        if (start > to)
	            return this.buffer.length;
	        if (end >= from && iter.doEnter(type, start, end)) {
	            while (index < endIndex && !iter.done)
	                index = this.iterChild(from, to, offset, index, iter);
	            if (iter.leave)
	                iter.leave(type, start, end);
	        }
	        return endIndex;
	    }
	    parentNodesByEnd(startIndex, endIndex) {
	        // Build up an array of node indices reflecting the order in which
	        // non-empty nodes end, to avoid having to scan for parent nodes
	        // at every position during reverse iteration.
	        let order = [];
	        let scan = (index) => {
	            let end = this.buffer[index + 3];
	            if (end == index + 4)
	                return end;
	            for (let i = index + 4; i < end;)
	                i = scan(i);
	            order.push(index);
	            return end;
	        };
	        for (let index = startIndex; index < endIndex;)
	            index = scan(index);
	        return order;
	    }
	    /// @internal
	    iterRev(from, to, offset, startIndex, endIndex, iter) {
	        let endOrder = this.parentNodesByEnd(startIndex, endIndex);
	        // Index range for the next non-empty node
	        let nextStart = -1, nextEnd = -1;
	        let takeNext = () => {
	            if (endOrder.length > 0) {
	                nextStart = endOrder.pop();
	                nextEnd = this.buffer[nextStart + 3];
	            }
	            else {
	                nextEnd = -1;
	            }
	        };
	        takeNext();
	        run: for (let index = endIndex; index > startIndex && !iter.done;) {
	            while (nextEnd == index) {
	                let base = nextStart;
	                let id = this.buffer[base], start = this.buffer[base + 1] + offset, end = this.buffer[base + 2] + offset;
	                takeNext();
	                if (start <= from && end >= to) {
	                    if (!iter.doEnter(this.group.types[id], start, end)) {
	                        // Skip the entire node
	                        index = base;
	                        while (nextEnd > base)
	                            takeNext();
	                        continue run;
	                    }
	                }
	            }
	            let endIndex = this.buffer[--index], end = this.buffer[--index] + offset, start = this.buffer[--index] + offset, id = this.buffer[--index];
	            if (start > from || end < to)
	                continue;
	            if ((endIndex != index + 4 || iter.doEnter(this.group.types[id], start, end)) && iter.leave)
	                iter.leave(this.group.types[id], start, end);
	        }
	    }
	    /// @internal
	    findIndex(pos, side, start, from, to) {
	        let lastI = -1;
	        for (let i = from, buf = this.buffer; i < to;) {
	            let start1 = buf[i + 1] + start, end1 = buf[i + 2] + start;
	            let ignore = start1 == end1 && start1 == pos;
	            if (start1 >= pos) {
	                if (side > 0 && !ignore)
	                    return i;
	                break;
	            }
	            if (end1 > pos)
	                return i;
	            if (!ignore)
	                lastI = i;
	            i = buf[i + 3];
	        }
	        return side < 0 ? lastI : -1;
	    }
	}
	class NodeSubtree extends Subtree {
	    constructor(node, start, parent) {
	        super();
	        this.node = node;
	        this.start = start;
	        this.parent = parent;
	    }
	    get type() { return this.node.type; }
	    get end() { return this.start + this.node.length; }
	    resolveAt(pos) {
	        if (pos <= this.start || pos >= this.end)
	            return this.parent.resolveAt(pos);
	        return this.node.resolveInner(pos, this.start, this);
	    }
	    childBefore(pos) {
	        return this.node.findChild(pos, -1, this.start, this);
	    }
	    childAfter(pos) {
	        return this.node.findChild(pos, 1, this.start, this);
	    }
	    toString() { return this.node.toString(); }
	    iterate({ from = this.start, to = this.end, enter, leave }) {
	        let iter = new Iteration(enter, leave);
	        this.node.iterInner(from, to, this.start, iter);
	        return iter.result;
	    }
	}
	class BufferSubtree extends Subtree {
	    constructor(buffer, bufferStart, index, parent) {
	        super();
	        this.buffer = buffer;
	        this.bufferStart = bufferStart;
	        this.index = index;
	        this.parent = parent;
	    }
	    get type() { return this.buffer.group.types[this.buffer.buffer[this.index]]; }
	    get start() { return this.buffer.buffer[this.index + 1] + this.bufferStart; }
	    get end() { return this.buffer.buffer[this.index + 2] + this.bufferStart; }
	    get endIndex() { return this.buffer.buffer[this.index + 3]; }
	    childBefore(pos) {
	        let index = this.buffer.findIndex(pos, -1, this.bufferStart, this.index + 4, this.endIndex);
	        return index < 0 ? null : new BufferSubtree(this.buffer, this.bufferStart, index, this);
	    }
	    childAfter(pos) {
	        let index = this.buffer.findIndex(pos, 1, this.bufferStart, this.index + 4, this.endIndex);
	        return index < 0 ? null : new BufferSubtree(this.buffer, this.bufferStart, index, this);
	    }
	    iterate({ from = this.start, to = this.end, enter, leave }) {
	        let iter = new Iteration(enter, leave);
	        if (from <= to)
	            this.buffer.iterChild(from, to, this.bufferStart, this.index, iter);
	        else
	            this.buffer.iterRev(from, to, this.bufferStart, this.index, this.endIndex, iter);
	        return iter.result;
	    }
	    resolveAt(pos) {
	        if (pos <= this.start || pos >= this.end)
	            return this.parent.resolveAt(pos);
	        let found = this.buffer.findIndex(pos, 0, this.bufferStart, this.index + 4, this.endIndex);
	        return found < 0 ? this : new BufferSubtree(this.buffer, this.bufferStart, found, this).resolveAt(pos);
	    }
	    toString() {
	        let result = [];
	        this.buffer.childToString(this.index, result);
	        return result.join("");
	    }
	}
	class FlatBufferCursor {
	    constructor(buffer, index) {
	        this.buffer = buffer;
	        this.index = index;
	    }
	    get id() { return this.buffer[this.index - 4]; }
	    get start() { return this.buffer[this.index - 3]; }
	    get end() { return this.buffer[this.index - 2]; }
	    get size() { return this.buffer[this.index - 1]; }
	    get pos() { return this.index; }
	    next() { this.index -= 4; }
	    fork() { return new FlatBufferCursor(this.buffer, this.index); }
	}
	const BalanceBranchFactor = 8;
	function buildTree(data) {
	    let { buffer, group, topID = 0, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = group.types.length } = data;
	    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
	    let types = group.types;
	    function takeNode(parentStart, minPos, children, positions, tagBuffer) {
	        let { id, start, end, size } = cursor, buffer;
	        let startPos = start - parentStart;
	        if (size < 0) { // Reused node
	            children.push(reused[id]);
	            positions.push(startPos);
	            cursor.next();
	            return;
	        }
	        let type = types[id], node;
	        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos))) {
	            // Small enough for a buffer, and no reused nodes inside
	            let data = new Uint16Array(buffer.size - buffer.skip);
	            let endPos = cursor.pos - buffer.size, index = data.length;
	            while (cursor.pos > endPos)
	                index = copyToBuffer(buffer.start, data, index);
	            node = new TreeBuffer(data, end - buffer.start, group, tagBuffer);
	            startPos = buffer.start - parentStart;
	        }
	        else { // Make it a node
	            let endPos = cursor.pos - size;
	            cursor.next();
	            let localChildren = [], localPositions = [];
	            // Check if this is a repeat wrapper. Store the id of the inner
	            // repeat node in the variable if it is
	            let repeating = id >= group.types.length ? id - (group.types.length - minRepeatType) : -1;
	            if (repeating > -1) {
	                type = types[repeating];
	                while (cursor.pos > endPos) {
	                    let isRepeat = cursor.id == repeating; // This starts with an inner repeated node
	                    takeNode(start, endPos, localChildren, localPositions, isRepeat ? type : NodeType.none);
	                }
	            }
	            else {
	                while (cursor.pos > endPos)
	                    takeNode(start, endPos, localChildren, localPositions, NodeType.none);
	            }
	            localChildren.reverse();
	            localPositions.reverse();
	            if (repeating > -1 && localChildren.length > BalanceBranchFactor)
	                node = balanceRange(type, type, localChildren, localPositions, 0, localChildren.length, 0, maxBufferLength, end - start);
	            else
	                node = new Tree(type, localChildren, localPositions, end - start);
	        }
	        children.push(node);
	        positions.push(startPos);
	    }
	    function findBufferSize(maxSize) {
	        // Scan through the buffer to find previous siblings that fit
	        // together in a TreeBuffer, and don't contain any reused nodes
	        // (which can't be stored in a buffer)
	        // If `type` is > -1, only include siblings with that same type
	        // (used to group repeat content into a buffer)
	        let fork = cursor.fork();
	        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
	        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
	            let nodeSize = fork.size, startPos = fork.pos - nodeSize;
	            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
	                break;
	            let localSkipped = fork.id >= minRepeatType ? 4 : 0;
	            let nodeStart = fork.start;
	            fork.next();
	            while (fork.pos > startPos) {
	                if (fork.size < 0)
	                    break scan;
	                if (fork.id >= minRepeatType)
	                    localSkipped += 4;
	                fork.next();
	            }
	            start = nodeStart;
	            size += nodeSize;
	            skip += localSkipped;
	        }
	        return size > 4 ? { size, start, skip } : null;
	    }
	    function copyToBuffer(bufferStart, buffer, index) {
	        let { id, start, end, size } = cursor;
	        cursor.next();
	        let startIndex = index;
	        if (size > 4) {
	            let endPos = cursor.pos - (size - 4);
	            while (cursor.pos > endPos)
	                index = copyToBuffer(bufferStart, buffer, index);
	        }
	        if (id < minRepeatType) { // Don't copy repeat nodes into buffers
	            buffer[--index] = startIndex;
	            buffer[--index] = end - bufferStart;
	            buffer[--index] = start - bufferStart;
	            buffer[--index] = id;
	        }
	        return index;
	    }
	    let children = [], positions = [];
	    while (cursor.pos > 0)
	        takeNode(0, 0, children, positions, NodeType.none);
	    let length = children.length ? positions[0] + children[0].length : 0;
	    return new Tree(group.types[topID], children.reverse(), positions.reverse(), length);
	}
	function balanceRange(outerType, innerType, children, positions, from, to, start, maxBufferLength, length) {
	    let localChildren = [], localPositions = [];
	    if (length <= maxBufferLength) {
	        for (let i = from; i < to; i++) {
	            localChildren.push(children[i]);
	            localPositions.push(positions[i] - start);
	        }
	    }
	    else {
	        let maxChild = Math.max(maxBufferLength, Math.ceil(length * 1.5 / BalanceBranchFactor));
	        for (let i = from; i < to;) {
	            let groupFrom = i, groupStart = positions[i];
	            i++;
	            for (; i < to; i++) {
	                let nextEnd = positions[i] + children[i].length;
	                if (nextEnd - groupStart > maxChild)
	                    break;
	            }
	            if (i == groupFrom + 1) {
	                let only = children[groupFrom];
	                if (only instanceof Tree && only.type == innerType && only.length > maxChild << 1) { // Too big, collapse
	                    for (let j = 0; j < only.children.length; j++) {
	                        localChildren.push(only.children[j]);
	                        localPositions.push(only.positions[j] + groupStart - start);
	                    }
	                    continue;
	                }
	                localChildren.push(only);
	            }
	            else if (i == groupFrom + 1) {
	                localChildren.push(children[groupFrom]);
	            }
	            else {
	                let inner = balanceRange(innerType, innerType, children, positions, groupFrom, i, groupStart, maxBufferLength, positions[i - 1] + children[i - 1].length - groupStart);
	                if (innerType != NodeType.none && !containsType(inner.children, innerType))
	                    inner = new Tree(NodeType.none, inner.children, inner.positions, inner.length);
	                localChildren.push(inner);
	            }
	            localPositions.push(groupStart - start);
	        }
	    }
	    return new Tree(outerType, localChildren, localPositions, length);
	}
	function containsType(nodes, type) {
	    for (let elt of nodes)
	        if (elt.type == type)
	            return true;
	    return false;
	}

	const DefaultSplit = /\r\n?|\n/;
	/// Distinguishes different ways in which positions can be mapped.
	var MapMode;
	(function (MapMode) {
	    /// Map a position to a valid new position, even when its context
	    /// was deleted.
	    MapMode[MapMode["Simple"] = 0] = "Simple";
	    /// Return -1 if deletion happens across the position.
	    MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
	    /// Return -1 if the character _before_ the position is deleted.
	    MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
	    /// Return -1 if the character _after_ the position is deleted.
	    MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
	})(MapMode || (MapMode = {}));
	/// A change description is a variant of [change set](#state.ChangeSet)
	/// that doesn't store the inserted text. As such, it can't be
	/// applied, but is cheaper to store and manipulate.
	class ChangeDesc {
	    // Sections are encoded as pairs of integers. The first is the
	    // length in the current document, and the second is -1 for
	    // unaffected sections, and the length of the replacement content
	    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
	    // 0), and a replacement two positive numbers.
	    /// @internal
	    constructor(sections) {
	        this.sections = sections;
	    }
	    /// The length of the document before the change.
	    get length() {
	        let result = 0;
	        for (let i = 0; i < this.sections.length; i += 2)
	            result += this.sections[i];
	        return result;
	    }
	    /// The length of the document after the change.
	    get newLength() {
	        let result = 0;
	        for (let i = 0; i < this.sections.length; i += 2) {
	            let ins = this.sections[i + 1];
	            result += ins < 0 ? this.sections[i] : ins;
	        }
	        return result;
	    }
	    /// False when there are actual changes in this set.
	    get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
	    /// Iterate over the unchanged parts left by these changes.
	    iterGaps(f) {
	        for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++];
	            if (ins < 0) {
	                f(posA, posB, len);
	                posB += len;
	            }
	            else {
	                posB += ins;
	            }
	            posA += len;
	        }
	    }
	    /// Iterate over the ranges changed by these changes. (See
	    /// [`ChangeSet.iterChanges`](#state.ChangeSet.iterChanges) for a
	    /// variant that also provides you with the inserted text.)
	    ///
	    /// When `individual` is true, adjacent changes (which are kept
	    /// separate for [position mapping](#state.ChangeDesc.mapPos)) are
	    /// reported separately.
	    iterChangedRanges(f, individual = false) {
	        iterChanges(this, f, individual);
	    }
	    /// Get a description of the inverted form of these changes.
	    get invertedDesc() {
	        let sections = [];
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++];
	            if (ins < 0)
	                sections.push(len, ins);
	            else
	                sections.push(ins, len);
	        }
	        return new ChangeDesc(sections);
	    }
	    /// Compute the combined effect of applying another set of changes
	    /// after this one. The length of the document after this set should
	    /// match the length before `other`.
	    composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
	    /// Map this description, which should start with the same document
	    /// as `other`, over another set of changes, so that it can be
	    /// applied after it.
	    mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
	    /// Map a given position through these changes.
	    ///
	    /// `assoc` indicates which side the position should be associated
	    /// with. When it is negative or zero, the mapping will try to keep
	    /// the position close to the character before it (if any), and will
	    /// move it before insertions at that point or replacements across
	    /// that point. When it is positive, the position is associated with
	    /// the character after it, and will be moved forward for insertions
	    /// at or replacements across the position. Defaults to -1.
	    ///
	    /// `mode` determines whether deletions should be
	    /// [reported](#state.MapMode). It defaults to `MapMode.Simple`
	    /// (don't report deletions).
	    mapPos(pos, assoc = -1, mode = MapMode.Simple) {
	        let posA = 0, posB = 0;
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
	            if (ins < 0) {
	                if (endA > pos)
	                    return posB + (pos - posA);
	                posB += len;
	            }
	            else {
	                if (mode != MapMode.Simple && endA >= pos &&
	                    (mode == MapMode.TrackDel && posA < pos && endA > pos ||
	                        mode == MapMode.TrackBefore && posA < pos ||
	                        mode == MapMode.TrackAfter && endA > pos))
	                    return -1;
	                if (endA > pos || endA == pos && assoc < 0 && !len)
	                    return pos == posA || assoc < 0 ? posB : posB + ins;
	                posB += ins;
	            }
	            posA = endA;
	        }
	        if (pos > posA)
	            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
	        return posB;
	    }
	    /// Map a position in a way that reliably produces the same position
	    /// for a sequence of changes, regardless of the order in which they
	    /// were [mapped](#state.ChangeSet.map) and applied. This will map a
	    /// position to the start (or end) through _all_ adjacent changes
	    /// next to it, and often produces more surprising results than
	    /// [`mapPos`](#state.ChangeDesc.mapPos). But it can be useful in
	    /// cases where it is important that all clients in a collaborative
	    /// setting end up doing the precise same mapping.
	    mapPosStable(pos, side = -1) {
	        let posA = 0, posB = 0, lastB = 0;
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
	            if (ins < 0) {
	                if (endA > pos)
	                    return posB + Math.max(0, pos - posA);
	                lastB = posB += len;
	            }
	            else {
	                if (side <= 0 && endA >= pos)
	                    return lastB;
	                posB += ins;
	            }
	            posA = endA;
	        }
	        return posB;
	    }
	    /// Check whether these changes touch a given range. When one of the
	    /// changes entirely covers the range, the string `"cover"` is
	    /// returned.
	    touchesRange(from, to) {
	        for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
	            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
	            if (ins >= 0 && pos <= to && end >= from)
	                return pos < from && end > to ? "cover" : true;
	            pos = end;
	        }
	        return false;
	    }
	    /// @internal
	    toString() {
	        let result = "";
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++];
	            result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
	        }
	        return result;
	    }
	}
	/// A change set represents a group of modifications to a document. It
	/// stores the document length, and can only be applied to documents
	/// with exactly that length.
	class ChangeSet extends ChangeDesc {
	    /// @internal
	    constructor(sections, 
	    /// @internal
	    inserted) {
	        super(sections);
	        this.inserted = inserted;
	    }
	    /// Apply the changes to a document, returning the modified
	    /// document.
	    apply(doc) {
	        if (this.length != doc.length)
	            throw new RangeError("Applying change set to a document with the wrong length");
	        iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
	        return doc;
	    }
	    /// Map this set, which should start with the same document as
	    /// `other`, over another set of changes, so that it can be applied
	    /// after it. When `before` is true, map as if the changes in
	    /// `other` happened before the ones in `this`.
	    mapDesc(other, before = false) { return mapSet(this, other, before, true); }
	    /// Given the document as it existed _before_ the changes, return a
	    /// change set that represents the inverse of this set, which could
	    /// be used to go from the document created by the changes back to
	    /// the document as it existed before the changes.
	    invert(doc) {
	        let sections = this.sections.slice(), inserted = [];
	        for (let i = 0, pos = 0; i < sections.length; i += 2) {
	            let len = sections[i], ins = sections[i + 1];
	            if (ins >= 0) {
	                sections[i] = ins;
	                sections[i + 1] = len;
	                let index = i >> 1;
	                while (inserted.length < index)
	                    inserted.push(Text.empty);
	                inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
	            }
	            pos += len;
	        }
	        return new ChangeSet(sections, inserted);
	    }
	    /// Combine two subsequent change sets into a single set. `other`
	    /// must start in the document produced by `this`. If `this` goes
	    /// `docA` → `docB` and `other` represents `docB` → `docC`, the
	    /// returned value will represent the change `docA` → `docC`.
	    compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
	    /// Given another change set starting in the same document, maps this
	    /// change set over the other, producing a new change set that can be
	    /// applied to the document produced by applying `other`. When
	    /// `before` is `true`, order changes as if `this` comes before
	    /// `other`, otherwise (the default) treat `other` as coming first.
	    ///
	    /// Given two changes `A` and `B`, `A.compose(B.map(A))` and
	    /// `B.compose(A.map(B, true))` will produce the same document. This
	    /// provides a basic form of [operational
	    /// transformation](https://en.wikipedia.org/wiki/Operational_transformation),
	    /// and can be used for collaborative editing.
	    map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
	    /// Iterate over the changed ranges in the document, calling `f` for
	    /// each.
	    iterChanges(f, individual = false) {
	        iterChanges(this, f, individual);
	    }
	    /// Get a [change description](#state.ChangeDesc) for this change
	    /// set.
	    get desc() { return new ChangeDesc(this.sections); }
	    /// @internal
	    filter(ranges) {
	        let resultSections = [], resultInserted = [], filteredSections = [];
	        let iter = new SectionIter(this);
	        done: for (let i = 0, pos = 0;;) {
	            let next = i == ranges.length ? 1e9 : ranges[i++];
	            while (pos < next || pos == next && iter.len == 0) {
	                if (iter.done)
	                    break done;
	                let len = Math.min(iter.len, next - pos);
	                addSection(filteredSections, len, -1);
	                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
	                addSection(resultSections, len, ins);
	                if (ins > 0)
	                    addInsert(resultInserted, resultSections, iter.text);
	                iter.forward(len);
	                pos += len;
	            }
	            let end = ranges[i++];
	            while (pos < end) {
	                if (iter.done)
	                    break done;
	                let len = Math.min(iter.len, end - pos);
	                addSection(resultSections, len, -1);
	                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
	                iter.forward(len);
	                pos += len;
	            }
	        }
	        return { changes: new ChangeSet(resultSections, resultInserted),
	            filtered: new ChangeDesc(filteredSections) };
	    }
	    /// Create a change set for the given changes, for a document of the
	    /// given length, using `lineSep` as line separator.
	    static of(changes, length, lineSep) {
	        let sections = [], inserted = [], pos = 0;
	        let total = null;
	        function flush(force = false) {
	            if (!force && !sections.length)
	                return;
	            if (pos < length)
	                addSection(sections, length - pos, -1);
	            let set = new ChangeSet(sections, inserted);
	            total = total ? total.compose(set.map(total)) : set;
	            sections = [];
	            inserted = [];
	            pos = 0;
	        }
	        function process(spec) {
	            if (Array.isArray(spec)) {
	                for (let sub of spec)
	                    process(sub);
	            }
	            else if (spec instanceof ChangeSet) {
	                if (spec.length != length)
	                    throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
	                flush();
	                total = total ? total.compose(spec.map(total)) : spec;
	            }
	            else {
	                let { from, to = from, insert } = spec;
	                if (from > to || from < 0 || to > length)
	                    throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
	                let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
	                let insLen = insText.length;
	                if (from == to && insLen == 0)
	                    return;
	                if (from < pos)
	                    flush();
	                if (from > pos)
	                    addSection(sections, from - pos, -1);
	                addSection(sections, to - from, insLen);
	                addInsert(inserted, sections, insText);
	                pos = to;
	            }
	        }
	        process(changes);
	        flush(!total);
	        return total;
	    }
	    /// Create an empty changeset of the given length.
	    static empty(length) {
	        return new ChangeSet(length ? [length, -1] : [], []);
	    }
	}
	function addSection(sections, len, ins, forceJoin = false) {
	    if (len == 0 && ins <= 0)
	        return;
	    let last = sections.length - 2;
	    if (last >= 0 && ins <= 0 && ins == sections[last + 1])
	        sections[last] += len;
	    else if (len == 0 && sections[last] == 0)
	        sections[last + 1] += ins;
	    else if (forceJoin) {
	        sections[last] += len;
	        sections[last + 1] += ins;
	    }
	    else
	        sections.push(len, ins);
	}
	function addInsert(values, sections, value) {
	    if (value.length == 0)
	        return;
	    let index = (sections.length - 2) >> 1;
	    if (index < values.length) {
	        values[values.length - 1] = values[values.length - 1].append(value);
	    }
	    else {
	        while (values.length < index)
	            values.push(Text.empty);
	        values.push(value);
	    }
	}
	function iterChanges(desc, f, individual) {
	    let inserted = desc.inserted;
	    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
	        let len = desc.sections[i++], ins = desc.sections[i++];
	        if (ins < 0) {
	            posA += len;
	            posB += len;
	        }
	        else {
	            let endA = posA, endB = posB, text = Text.empty;
	            for (;;) {
	                endA += len;
	                endB += ins;
	                if (ins && inserted)
	                    text = text.append(inserted[(i - 2) >> 1]);
	                if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
	                    break;
	                len = desc.sections[i++];
	                ins = desc.sections[i++];
	            }
	            f(posA, endA, posB, endB, text);
	            posA = endA;
	            posB = endB;
	        }
	    }
	}
	function mapSet(setA, setB, before, mkSet = false) {
	    let sections = [], insert = mkSet ? [] : null;
	    let a = new SectionIter(setA), b = new SectionIter(setB);
	    for (let posA = 0, posB = 0;;) {
	        if (a.ins == -1) {
	            posA += a.len;
	            a.next();
	        }
	        else if (b.ins == -1 && posB < posA) {
	            let skip = Math.min(b.len, posA - posB);
	            b.forward(skip);
	            addSection(sections, skip, -1);
	            posB += skip;
	        }
	        else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
	            addSection(sections, b.ins, -1);
	            while (posA > posB && !a.done && posA + a.len < posB + b.len) {
	                posA += a.len;
	                a.next();
	            }
	            posB += b.len;
	            b.next();
	        }
	        else if (a.ins >= 0) {
	            let len = 0, end = posA + a.len;
	            for (;;) {
	                if (b.ins >= 0 && posB > posA && posB + b.len < end) {
	                    len += b.ins;
	                    posB += b.len;
	                    b.next();
	                }
	                else if (b.ins == -1 && posB < end) {
	                    let skip = Math.min(b.len, end - posB);
	                    len += skip;
	                    b.forward(skip);
	                    posB += skip;
	                }
	                else {
	                    break;
	                }
	            }
	            addSection(sections, len, a.ins);
	            if (insert)
	                addInsert(insert, sections, a.text);
	            posA = end;
	            a.next();
	        }
	        else if (a.done && b.done) {
	            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
	        }
	        else {
	            throw new Error("Mismatched change set lengths");
	        }
	    }
	}
	function composeSets(setA, setB, mkSet = false) {
	    let sections = [];
	    let insert = mkSet ? [] : null;
	    let a = new SectionIter(setA), b = new SectionIter(setB);
	    for (let open = false;;) {
	        if (a.done && b.done) {
	            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
	        }
	        else if (a.ins == 0) { // Deletion in A
	            addSection(sections, a.len, 0, open);
	            a.next();
	        }
	        else if (b.len == 0 && !b.done) { // Insertion in B
	            addSection(sections, 0, b.ins, open);
	            if (insert)
	                addInsert(insert, sections, b.text);
	            b.next();
	        }
	        else if (a.done || b.done) {
	            throw new Error("Mismatched change set lengths");
	        }
	        else {
	            let len = Math.min(a.len2, b.len), sectionLen = sections.length;
	            if (a.ins == -1) {
	                let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
	                addSection(sections, len, insB, open);
	                if (insert && insB)
	                    addInsert(insert, sections, b.text);
	            }
	            else if (b.ins == -1) {
	                addSection(sections, a.off ? 0 : a.len, len, open);
	                if (insert)
	                    addInsert(insert, sections, a.textBit(len));
	            }
	            else {
	                addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
	                if (insert && !b.off)
	                    addInsert(insert, sections, b.text);
	            }
	            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
	            a.forward2(len);
	            b.forward(len);
	        }
	    }
	}
	class SectionIter {
	    constructor(set) {
	        this.set = set;
	        this.i = 0;
	        this.next();
	    }
	    next() {
	        let { sections } = this.set;
	        if (this.i < sections.length) {
	            this.len = sections[this.i++];
	            this.ins = sections[this.i++];
	        }
	        else {
	            this.len = 0;
	            this.ins = -2;
	        }
	        this.off = 0;
	    }
	    get done() { return this.ins == -2; }
	    get len2() { return this.ins < 0 ? this.len : this.ins; }
	    get text() {
	        let { inserted } = this.set, index = (this.i - 2) >> 1;
	        return index >= inserted.length ? Text.empty : inserted[index];
	    }
	    textBit(len) {
	        let { inserted } = this.set, index = (this.i - 2) >> 1;
	        return index >= inserted.length && !len ? Text.empty
	            : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
	    }
	    forward(len) {
	        if (len == this.len)
	            this.next();
	        else {
	            this.len -= len;
	            this.off += len;
	        }
	    }
	    forward2(len) {
	        if (this.ins == -1)
	            this.forward(len);
	        else if (len == this.ins)
	            this.next();
	        else {
	            this.ins -= len;
	            this.off += len;
	        }
	    }
	}

	/// A single selection range. When
	/// [`allowMultipleSelections`](#state.EditorState^allowMultipleSelections)
	/// is enabled, a [selection](#state.EditorSelection) may hold
	/// multiple ranges. By default, selections hold exactly one range.
	class SelectionRange {
	    // @internal
	    constructor(
	    /// The lower side of the range.
	    from, 
	    /// The upper side of the range.
	    to, flags) {
	        this.from = from;
	        this.to = to;
	        this.flags = flags;
	    }
	    /// The anchor of the range—the side that doesn't move when you
	    /// extend it.
	    get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }
	    /// The head of the range, which is moved when the range is
	    /// [extended](#state.SelectionRange.extend).
	    get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }
	    /// True when `anchor` and `head` are at the same position.
	    get empty() { return this.from == this.to; }
	    /// If this is a cursor that is explicitly associated with the
	    /// character on one of its sides, this returns the side. -1 means
	    /// the character before its position, 1 the character after, and 0
	    /// means no association.
	    get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }
	    /// The bidirectional text level associated with this cursor.
	    get bidiLevel() {
	        let level = this.flags & 3 /* BidiLevelMask */;
	        return level == 3 ? null : level;
	    }
	    get goalColumn() {
	        let value = this.flags >> 5 /* GoalColumnOffset */;
	        return value == 33554431 /* NoGoalColumn */ ? undefined : value;
	    }
	    /// Map this range through a mapping.
	    map(mapping) {
	        let from = mapping.mapPos(this.from), to = mapping.mapPos(this.to);
	        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
	    }
	    /// Extend this range to cover at least `from` to `to`.
	    extend(from, to = from) {
	        if (from <= this.anchor && to >= this.anchor)
	            return EditorSelection.range(from, to);
	        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
	        return EditorSelection.range(this.anchor, head);
	    }
	    /// Compare this range to another range.
	    eq(other) {
	        return this.anchor == other.anchor && this.head == other.head;
	    }
	    /// Return a JSON-serializable object representing the range.
	    toJSON() { return { anchor: this.anchor, head: this.head }; }
	    /// Convert a JSON representation of a range to a `SelectionRange`
	    /// instance.
	    static fromJSON(json) {
	        if (!json || typeof json.anchor != "number" || typeof json.head != "number")
	            throw new RangeError("Invalid JSON representation for SelectionRange");
	        return EditorSelection.range(json.anchor, json.head);
	    }
	}
	/// An editor selection holds one or more selection ranges.
	class EditorSelection {
	    /// @internal
	    constructor(
	    /// The ranges in the selection, sorted by position. Ranges cannot
	    /// overlap (but they may touch, if they aren't empty).
	    ranges, 
	    /// The index of the _primary_ range in the selection (which is
	    /// usually the range that was added last).
	    primaryIndex = 0) {
	        this.ranges = ranges;
	        this.primaryIndex = primaryIndex;
	    }
	    /// Map a selection through a mapping. Mostly used to adjust the
	    /// selection position for changes.
	    map(mapping) {
	        if (mapping.empty)
	            return this;
	        return EditorSelection.create(this.ranges.map(r => r.map(mapping)), this.primaryIndex);
	    }
	    /// Compare this selection to another selection.
	    eq(other) {
	        if (this.ranges.length != other.ranges.length ||
	            this.primaryIndex != other.primaryIndex)
	            return false;
	        for (let i = 0; i < this.ranges.length; i++)
	            if (!this.ranges[i].eq(other.ranges[i]))
	                return false;
	        return true;
	    }
	    /// Get the primary selection range. Usually, you should make sure
	    /// your code applies to _all_ ranges, by using methods like
	    /// [`changeByRange`](#state.EditorState.changeByRange).
	    get primary() { return this.ranges[this.primaryIndex]; }
	    /// Make sure the selection only has one range. Returns a selection
	    /// holding only the primary range from this selection.
	    asSingle() {
	        return this.ranges.length == 1 ? this : new EditorSelection([this.primary]);
	    }
	    /// Extend this selection with an extra range.
	    addRange(range, primary = true) {
	        return EditorSelection.create([range].concat(this.ranges), primary ? 0 : this.primaryIndex + 1);
	    }
	    /// Replace a given range with another range, and then normalize the
	    /// selection to merge and sort ranges if necessary.
	    replaceRange(range, which = this.primaryIndex) {
	        let ranges = this.ranges.slice();
	        ranges[which] = range;
	        return EditorSelection.create(ranges, this.primaryIndex);
	    }
	    /// Convert this selection to an object that can be serialized to
	    /// JSON.
	    toJSON() {
	        return { ranges: this.ranges.map(r => r.toJSON()), primaryIndex: this.primaryIndex };
	    }
	    /// Create a selection from a JSON representation.
	    static fromJSON(json) {
	        if (!json || !Array.isArray(json.ranges) || typeof json.primaryIndex != "number" || json.primaryIndex >= json.ranges.length)
	            throw new RangeError("Invalid JSON representation for EditorSelection");
	        return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.primaryIndex);
	    }
	    /// Create a selection holding a single range.
	    static single(anchor, head = anchor) {
	        return new EditorSelection([EditorSelection.range(anchor, head)], 0);
	    }
	    /// Sort and merge the given set of ranges, creating a valid
	    /// selection.
	    static create(ranges, primaryIndex = 0) {
	        for (let pos = 0, i = 0; i < ranges.length; i++) {
	            let range = ranges[i];
	            if (range.empty ? range.from <= pos : range.from < pos)
	                return normalized(ranges.slice(), primaryIndex);
	            pos = range.to;
	        }
	        return new EditorSelection(ranges, primaryIndex);
	    }
	    /// Create a cursor selection range at the given position. You can
	    /// probably ignore [association](#state.SelectionRange.assoc) and
	    /// [bidi level](#state.SelectionRange.bidiLevel) in most
	    /// situations.
	    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
	        return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |
	            (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
	            ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));
	    }
	    /// Create a selection range.
	    static range(anchor, head, goalColumn) {
	        let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;
	        return head < anchor ? new SelectionRange(head, anchor, 16 /* Inverted */ | goal) : new SelectionRange(anchor, head, goal);
	    }
	}
	function normalized(ranges, primaryIndex = 0) {
	    let primary = ranges[primaryIndex];
	    ranges.sort((a, b) => a.from - b.from);
	    primaryIndex = ranges.indexOf(primary);
	    for (let i = 1; i < ranges.length; i++) {
	        let range = ranges[i], prev = ranges[i - 1];
	        if (range.empty ? range.from <= prev.to : range.from < prev.to) {
	            let from = prev.from, to = Math.max(range.to, prev.to);
	            if (i <= primaryIndex)
	                primaryIndex--;
	            ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
	        }
	    }
	    return new EditorSelection(ranges, primaryIndex);
	}
	function checkSelection(selection, docLength) {
	    for (let range of selection.ranges)
	        if (range.to > docLength)
	            throw new RangeError("Selection points outside of document");
	}

	let nextID = 0;
	/// A facet is a value that is assicated with a state and can be
	/// influenced by any number of extensions. Extensions can provide
	/// input values for the facet, and the facet combines those into an
	/// output value.
	///
	/// Examples of facets are the theme styles associated with an editor
	/// (which are all stored) or the tab size (which is reduced to a
	/// single value, using the input with the hightest precedence).
	class Facet {
	    constructor(
	    /// @internal
	    combine, 
	    /// @internal
	    compareInput, 
	    /// @internal
	    compare, isStatic) {
	        this.combine = combine;
	        this.compareInput = compareInput;
	        this.compare = compare;
	        this.isStatic = isStatic;
	        /// @internal
	        this.id = nextID++;
	        this.default = combine([]);
	    }
	    /// Define a new facet.
	    static define(config = {}) {
	        return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static);
	    }
	    /// Returns an extension that adds the given value for this facet.
	    of(value) {
	        return new FacetProvider([], this, 0 /* Static */, value);
	    }
	    /// Create an extension that computes a value for the facet from a
	    /// state. You must take care to declare the parts of the state that
	    /// this value depends on, since your function is only called again
	    /// for a new state when one of those parts changed.
	    ///
	    /// In most cases, you'll want to use the
	    /// [`provide`](#state.StateField^define^config.provide) option when
	    /// defining a field instead.
	    compute(deps, get) {
	        if (this.isStatic)
	            throw new Error("Can't compute a static facet");
	        return new FacetProvider(deps, this, 1 /* Single */, get);
	    }
	    /// Create an extension that computes zero or more values for this
	    /// facet from a state.
	    computeN(deps, get) {
	        if (this.isStatic)
	            throw new Error("Can't compute a static facet");
	        return new FacetProvider(deps, this, 2 /* Multi */, get);
	    }
	    /// Helper method for registering a facet source with a state field
	    /// via its [`provide`](#state.StateField^define^config.provide) option.
	    /// Returns a value that can be passed to that option to make the
	    /// field automatically provide a value for this facet.
	    from(get, prec) {
	        return field => maybePrec(prec, this.compute([field], state => get(state.field(field))));
	    }
	    /// Helper for [providing](#state.StateField^define^config.provide)
	    /// a dynamic number of values for this facet from a state field.
	    nFrom(get, prec) {
	        return field => maybePrec(prec, this.computeN([field], state => get(state.field(field))));
	    }
	}
	function sameArray(a, b) {
	    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
	}
	class FacetProvider {
	    constructor(dependencies, facet, type, value) {
	        this.dependencies = dependencies;
	        this.facet = facet;
	        this.type = type;
	        this.value = value;
	        this.id = nextID++;
	    }
	    dynamicSlot(addresses) {
	        let getter = this.value;
	        let compare = this.facet.compareInput;
	        let idx = addresses[this.id] >> 1, multi = this.type == 2 /* Multi */;
	        let depDoc = false, depSel = false, depAddrs = [];
	        for (let dep of this.dependencies) {
	            if (dep == "doc")
	                depDoc = true;
	            else if (dep == "selection")
	                depSel = true;
	            else if ((addresses[dep.id] & 1) == 0)
	                depAddrs.push(addresses[dep.id]);
	        }
	        return (state, tr) => {
	            if (!tr || tr.reconfigured) {
	                state.values[idx] = getter(state);
	                return 1 /* Changed */;
	            }
	            else {
	                let depChanged = (depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) ||
	                    depAddrs.some(addr => (ensureAddr(state, addr) & 1 /* Changed */) > 0);
	                if (!depChanged)
	                    return 0;
	                let newVal = getter(state), oldVal = tr.startState.values[idx];
	                if (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))
	                    return 0;
	                state.values[idx] = newVal;
	                return 1 /* Changed */;
	            }
	        };
	    }
	}
	function compareArray(a, b, compare) {
	    if (a.length != b.length)
	        return false;
	    for (let i = 0; i < a.length; i++)
	        if (!compare(a[i], b[i]))
	            return false;
	    return true;
	}
	function dynamicFacetSlot(addresses, facet, providers) {
	    let providerAddrs = providers.map(p => addresses[p.id]);
	    let providerTypes = providers.map(p => p.type);
	    let dynamic = providerAddrs.filter(p => !(p & 1));
	    let idx = addresses[facet.id] >> 1;
	    return (state, tr) => {
	        let oldAddr = !tr ? null : tr.reconfigured ? tr.startState.config.address[facet.id] : idx << 1;
	        let changed = oldAddr == null;
	        for (let dynAddr of dynamic) {
	            if (ensureAddr(state, dynAddr) & 1 /* Changed */)
	                changed = true;
	        }
	        if (!changed)
	            return 0;
	        let values = [];
	        for (let i = 0; i < providerAddrs.length; i++) {
	            let value = getAddr(state, providerAddrs[i]);
	            if (providerTypes[i] == 2 /* Multi */)
	                for (let val of value)
	                    values.push(val);
	            else
	                values.push(value);
	        }
	        let newVal = facet.combine(values);
	        if (oldAddr != null && facet.compare(newVal, getAddr(tr.startState, oldAddr)))
	            return 0;
	        state.values[idx] = newVal;
	        return 1 /* Changed */;
	    };
	}
	function maybeIndex(state, id) {
	    let found = state.config.address[id];
	    return found == null ? null : found >> 1;
	}
	/// Fields can store additional information in an editor state, and
	/// keep it in sync with the rest of the state.
	class StateField {
	    constructor(
	    /// @internal
	    id, createF, updateF, compareF, 
	    /// @internal
	    facets) {
	        this.id = id;
	        this.createF = createF;
	        this.updateF = updateF;
	        this.compareF = compareF;
	        this.facets = facets;
	    }
	    /// Define a state field.
	    static define(config) {
	        let facets = [];
	        let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), facets);
	        if (config.provide)
	            for (let p of config.provide) {
	                if (p instanceof Facet)
	                    facets.push(p.compute([field], state => state.field(field)));
	                else
	                    facets.push(p(field));
	            }
	        return field;
	    }
	    /// @internal
	    slot(addresses) {
	        let idx = addresses[this.id] >> 1;
	        return (state, tr) => {
	            if (!tr) {
	                state.values[idx] = this.createF(state);
	                return 1 /* Changed */;
	            }
	            let oldVal, changed = 0;
	            if (tr.reconfigured) {
	                let oldIdx = maybeIndex(tr.startState, this.id);
	                oldVal = oldIdx == null ? this.createF(tr.startState) : tr.startState.values[oldIdx];
	                changed = 1 /* Changed */;
	            }
	            else {
	                oldVal = tr.startState.values[idx];
	            }
	            let value = this.updateF(oldVal, tr, state);
	            if (!changed && !this.compareF(oldVal, value))
	                changed = 1 /* Changed */;
	            if (changed)
	                state.values[idx] = value;
	            return changed;
	        };
	    }
	}
	/// By default extensions are registered in the order they are
	/// provided in a flattening of the nested arrays that were provided.
	/// Individual extension values can be assigned a precedence to
	/// override this. Extensions that do not have a precedence set get
	/// the precedence of the nearest parent with a precedence, or
	/// [`Default`](#state.Precedence^Default) if there is no such parent.
	/// The final ordering of extensions is determined by first sorting by
	/// precedence and then by order within each precedence.
	class Precedence {
	    constructor(
	    /// @internal
	    val) {
	        this.val = val;
	    }
	    /// Tag an extension with this precedence.
	    set(extension) {
	        return new PrecExtension(extension, this.val);
	    }
	}
	/// A precedence below the default precedence, which will cause
	/// default-precedence extensions to override it even if they are
	/// specified later in the extension ordering.
	Precedence.Fallback = new Precedence(3);
	/// The regular default precedence.
	Precedence.Default = new Precedence(2);
	/// A higher-than-default precedence.
	Precedence.Extend = new Precedence(1);
	/// Precedence above the `Default` and `Extend` precedences.
	Precedence.Override = new Precedence(0);
	function maybePrec(prec, ext) {
	    return prec == null ? ext : prec.set(ext);
	}
	class PrecExtension {
	    constructor(e, prec) {
	        this.e = e;
	        this.prec = prec;
	    }
	}
	class TaggedExtension {
	    constructor(tag, extension) {
	        this.tag = tag;
	        this.extension = extension;
	    }
	}
	class Configuration {
	    constructor(source, replacements, dynamicSlots, address, staticValues) {
	        this.source = source;
	        this.replacements = replacements;
	        this.dynamicSlots = dynamicSlots;
	        this.address = address;
	        this.staticValues = staticValues;
	        this.statusTemplate = [];
	        while (this.statusTemplate.length < staticValues.length)
	            this.statusTemplate.push(0 /* Uninitialized */);
	    }
	    staticFacet(facet) {
	        let addr = this.address[facet.id];
	        return addr == null ? facet.default : this.staticValues[addr >> 1];
	    }
	    static resolve(extension, replacements = Object.create(null), oldState) {
	        let fields = [];
	        let facets = Object.create(null);
	        for (let ext of flatten$1(extension, replacements)) {
	            if (ext instanceof StateField)
	                fields.push(ext);
	            else
	                (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
	        }
	        let address = Object.create(null);
	        let staticValues = [];
	        let dynamicSlots = [];
	        for (let field of fields) {
	            address[field.id] = dynamicSlots.length << 1;
	            dynamicSlots.push(a => field.slot(a));
	        }
	        for (let id in facets) {
	            let providers = facets[id], facet = providers[0].facet;
	            if (providers.every(p => p.type == 0 /* Static */)) {
	                address[facet.id] = (staticValues.length << 1) | 1;
	                let value = facet.combine(providers.map(p => p.value));
	                let oldAddr = oldState ? oldState.config.address[facet.id] : null;
	                if (oldAddr != null) {
	                    let oldVal = getAddr(oldState, oldAddr);
	                    if (facet.compare(value, oldVal))
	                        value = oldVal;
	                }
	                staticValues.push(value);
	            }
	            else {
	                for (let p of providers) {
	                    if (p.type == 0 /* Static */) {
	                        address[p.id] = (staticValues.length << 1) | 1;
	                        staticValues.push(p.value);
	                    }
	                    else {
	                        address[p.id] = dynamicSlots.length << 1;
	                        dynamicSlots.push(a => p.dynamicSlot(a));
	                    }
	                }
	                address[facet.id] = dynamicSlots.length << 1;
	                dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
	            }
	        }
	        return new Configuration(extension, replacements, dynamicSlots.map(f => f(address)), address, staticValues);
	    }
	}
	function allKeys(obj) {
	    return (Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(obj) : []).concat(Object.keys(obj));
	}
	function flatten$1(extension, replacements) {
	    let result = [[], [], [], []];
	    let seen = new Set();
	    let tagsSeen = Object.create(null);
	    function inner(ext, prec) {
	        if (seen.has(ext))
	            return;
	        seen.add(ext);
	        if (Array.isArray(ext)) {
	            for (let e of ext)
	                inner(e, prec);
	        }
	        else if (ext instanceof TaggedExtension) {
	            if (ext.tag in tagsSeen)
	                throw new RangeError(`Duplicate use of tag '${String(ext.tag)}' in extensions`);
	            tagsSeen[ext.tag] = true;
	            inner(replacements[ext.tag] || ext.extension, prec);
	        }
	        else if (ext.extension) {
	            inner(ext.extension, prec);
	        }
	        else if (ext instanceof PrecExtension) {
	            inner(ext.e, ext.prec);
	        }
	        else {
	            result[prec].push(ext);
	            if (ext instanceof StateField)
	                inner(ext.facets, prec);
	        }
	    }
	    inner(extension, Precedence.Default.val);
	    for (let key of allKeys(replacements))
	        if (!(key in tagsSeen)) {
	            tagsSeen[key] = true;
	            inner(replacements[key], Precedence.Default.val);
	        }
	    return result.reduce((a, b) => a.concat(b));
	}
	function ensureAddr(state, addr) {
	    if (addr & 1)
	        return 2 /* Computed */;
	    let idx = addr >> 1;
	    let status = state.status[idx];
	    if (status == 4 /* Computing */)
	        throw new Error("Cyclic dependency between fields and/or facets");
	    if (status & 2 /* Computed */)
	        return status;
	    state.status[idx] = 4 /* Computing */;
	    let changed = state.config.dynamicSlots[idx](state, state.applying);
	    return state.status[idx] = 2 /* Computed */ | changed;
	}
	function getAddr(state, addr) {
	    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
	}

	const allowMultipleSelections = Facet.define({
	    combine: values => values.some(v => v),
	    static: true
	});
	const changeFilter = Facet.define();
	const transactionFilter = Facet.define();
	/// A node prop that can be stored on a grammar's top node to
	/// associate information with the language. Different extension might
	/// use different properties from this object (which they typically
	/// export as an interface).
	const languageData = new NodeProp();
	const addLanguageData = Facet.define();
	/// Indentation contexts are used when calling
	/// [`EditorState.indentation`](#state.EditorState^indentation). They
	/// provide helper utilities useful in indentation logic, and can
	/// selectively override the indentation reported for some
	/// lines.
	class IndentContext {
	    /// Create an indent context.
	    ///
	    /// The optional second argument can be used to override line
	    /// indentations provided to the indentation helper function, which
	    /// is useful when implementing region indentation, where
	    /// indentation for later lines needs to refer to previous lines,
	    /// which may have been reindented compared to the original start
	    /// state. If given, this function should return -1 for lines (given
	    /// by start position) that didn't change, and an updated
	    /// indentation otherwise.
	    ///
	    /// The third argument can be used to make it look, to the indent
	    /// logic, like a line break was added at the given position (which
	    /// is mostly just useful for implementing
	    /// [`insertNewlineAndIndent`](#commands.insertNewlineAndIndent).
	    constructor(
	    /// The editor state.
	    state, 
	    /// @internal
	    overrideIndentation, 
	    /// @internal
	    simulateBreak) {
	        this.state = state;
	        this.overrideIndentation = overrideIndentation;
	        this.simulateBreak = simulateBreak;
	    }
	    /// The indent unit (number of columns per indentation level).
	    get unit() { return this.state.indentUnit; }
	    /// Get the text directly after `pos`, either the entire line
	    /// or the next 100 characters, whichever is shorter.
	    textAfterPos(pos) {
	        return this.state.sliceDoc(pos, Math.min(pos + 100, this.simulateBreak != null && this.simulateBreak >= pos ? this.simulateBreak : 1e9, this.state.doc.lineAt(pos).end));
	    }
	    /// find the column position (taking tabs into account) of the given
	    /// position in the given string.
	    countColumn(line, pos) {
	        return countColumn(pos < 0 ? line : line.slice(0, pos), 0, this.state.tabSize);
	    }
	    /// Find the indentation column of the given document line.
	    lineIndent(line) {
	        if (this.overrideIndentation) {
	            let override = this.overrideIndentation(line.start);
	            if (override > -1)
	                return override;
	        }
	        let text = line.slice(0, Math.min(100, line.length));
	        return this.countColumn(text, text.search(/\S/));
	    }
	    /// Find the column for the given position.
	    column(pos) {
	        let line = this.state.doc.lineAt(pos), text = line.slice(0, pos - line.start);
	        let result = this.countColumn(text, pos - line.start);
	        let override = this.overrideIndentation ? this.overrideIndentation(line.start) : -1;
	        if (override > -1)
	            result += override - this.countColumn(text, text.search(/\S/));
	        return result;
	    }
	}

	/// Annotations are tagged values that are used to add metadata to
	/// transactions in an extensible way. They should be used to model
	/// things that effect the entire transaction (such as its [time
	/// stamp](#state.Transaction^time) or information about its
	/// [origin](#state.Transaction^userEvent)). For effects that happen
	/// _alongside_ the other changes made by the transaction, [state
	/// effects](#state.StateEffect) are more appropriate.
	class Annotation {
	    /// @internal
	    constructor(type, value) {
	        this.type = type;
	        this.value = value;
	    }
	    /// Define a new type of annotation.
	    static define() { return new AnnotationType(); }
	}
	/// Marker that identifies a type of [annotation](#state.Annotation).
	class AnnotationType {
	    of(value) { return new Annotation(this, value); }
	}
	/// State effects can be used to represent additional effects
	/// associated with a [transaction](#state.Transaction.effects). They
	/// are often useful to model changes to custom [state
	/// fields](#state.StateField), when those changes aren't implicit in
	/// document or selection changes.
	class StateEffect {
	    /// @internal
	    constructor(
	    /// @internal
	    type, 
	    /// The value of this effect.
	    value) {
	        this.type = type;
	        this.value = value;
	    }
	    /// Map this effect through a position mapping. Will return
	    /// `undefined` when that ends up deleting the effect.
	    map(mapping) {
	        let mapped = this.type.map(this.value, mapping);
	        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
	    }
	    /// Tells you whether this effect object is of a given
	    /// [type](#state.StateEffectType).
	    is(type) { return this.type == type; }
	    /// Define a new effect type. The type parameter indicates the type
	    /// of values that his effect holds.
	    static define(spec = {}) {
	        return new StateEffectType(spec.map || (v => v));
	    }
	    /// Map an array of effects through a change set.
	    static mapEffects(effects, mapping) {
	        if (!effects.length)
	            return effects;
	        let result = [];
	        for (let effect of effects) {
	            let mapped = effect.map(mapping);
	            if (mapped)
	                result.push(mapped);
	        }
	        return result;
	    }
	}
	/// Representation of a type of state effect. Defined with
	/// [`StateEffect.define`](#state.StateEffect^define).
	class StateEffectType {
	    /// @internal
	    constructor(
	    // The `any` types in these function types are there to work
	    // around TypeScript issue #37631, where the type guard on
	    // `StateEffect.is` mysteriously stops working when these properly
	    // have type `Value`.
	    /// @internal
	    map) {
	        this.map = map;
	    }
	    /// Create a [state effect](#state.StateEffect) instance of this
	    /// type.
	    of(value) { return new StateEffect(this, value); }
	}
	/// Changes to the editor state are grouped into transactions.
	/// Typically, a user action creates a single transaction, which may
	/// contain any number of document changes, may change the selection,
	/// or have other effects. Create a transaction by calling
	/// [`EditorState.update`](#state.EditorState.update).
	class Transaction {
	    /// @internal
	    constructor(
	    /// The state from which the transaction starts.
	    startState, 
	    /// The document changes made by this transaction.
	    changes, 
	    /// The selection set by this transaction, or undefined if it
	    /// doesn't explicitly set a selection.
	    selection, 
	    /// The effects added to the transaction.
	    effects, annotations, flags) {
	        this.startState = startState;
	        this.changes = changes;
	        this.selection = selection;
	        this.effects = effects;
	        this.annotations = annotations;
	        this.flags = flags;
	        if (!this.annotations.some((a) => a.type == Transaction.time))
	            this.annotations = this.annotations.concat(Transaction.time.of(Date.now()));
	    }
	    /// Get the value of the given annotation type, if any.
	    annotation(type) {
	        for (let ann of this.annotations)
	            if (ann.type == type)
	                return ann.value;
	        return undefined;
	    }
	    /// Indicates whether the transaction changed the document.
	    get docChanged() { return !this.changes.empty; }
	    /// Query whether the selection should be scrolled into view after
	    /// applying this transaction.
	    get scrolledIntoView() { return (this.flags & 2 /* scrollIntoView */) > 0; }
	    /// Indicates whether the transaction reconfigures the state.
	    get reconfigured() { return (this.flags & 1 /* reconfigured */) > 0; }
	}
	/// Annotation used to store transaction timestamps.
	Transaction.time = Annotation.define();
	/// Annotation used to associate a transaction with a user interface
	/// event. The view will set this to...
	///
	///  - `"input"` when the user types text
	///  - `"delete"` when the user deletes the selection or text near the selection
	///  - `"keyboardselection"` when moving the selection via the keyboard
	///  - `"pointerselection"` when moving the selection through the pointing device
	///  - `"paste"` when pasting content
	///  - `"cut"` when cutting
	///  - `"drop"` when content is inserted via drag-and-drop
	Transaction.userEvent = Annotation.define();
	/// Annotation indicating whether a transaction should be added to
	/// the undo history or not.
	Transaction.addToHistory = Annotation.define();
	class ResolvedTransactionSpec {
	    constructor(changes, selection, effects, annotations, scrollIntoView, filter, reconfigure, replaceExtensions) {
	        this.changes = changes;
	        this.selection = selection;
	        this.effects = effects;
	        this.annotations = annotations;
	        this.scrollIntoView = scrollIntoView;
	        this.filter = filter;
	        this.reconfigure = reconfigure;
	        this.replaceExtensions = replaceExtensions;
	    }
	    static create(state, specs) {
	        let spec;
	        if (Array.isArray(specs)) {
	            if (specs.length)
	                return specs.map(s => ResolvedTransactionSpec.create(state, s)).reduce((a, b) => a.combine(b));
	            spec = {};
	        }
	        else if (specs instanceof ResolvedTransactionSpec) {
	            return specs;
	        }
	        else {
	            spec = specs;
	        }
	        let sel = spec.selection;
	        return new ResolvedTransactionSpec(spec.changes ? state.changes(spec.changes) : ChangeSet.empty(state.doc.length), sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)), !spec.effects ? none$1 : Array.isArray(spec.effects) ? spec.effects : [spec.effects], !spec.annotations ? none$1 : Array.isArray(spec.annotations) ? spec.annotations : [spec.annotations], !!spec.scrollIntoView, spec.filter !== false, spec.reconfigure, spec.replaceExtensions);
	    }
	    combine(b) {
	        let a = this;
	        let changesA = a.changes.mapDesc(b.changes, true), changesB = b.changes.map(a.changes);
	        return new ResolvedTransactionSpec(a.changes.compose(changesB), b.selection ? b.selection.map(changesA) : a.selection ? a.selection.map(changesB) : undefined, StateEffect.mapEffects(a.effects, changesB).concat(StateEffect.mapEffects(b.effects, changesA)), a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations, a.scrollIntoView || b.scrollIntoView, a.filter && b.filter, b.reconfigure || a.reconfigure, b.replaceExtensions || (b.reconfigure ? undefined : a.replaceExtensions));
	    }
	    filterChanges(state) {
	        if (!this.filter)
	            return this;
	        let result = true;
	        for (let filter of state.facet(changeFilter)) {
	            let value = filter(this, state);
	            if (value === false) {
	                result = false;
	                break;
	            }
	            if (Array.isArray(value))
	                result = result === true ? value : joinRanges(result, value);
	        }
	        if (result === true)
	            return this;
	        let changes, back;
	        if (result === false) {
	            back = this.changes.invertedDesc;
	            changes = ChangeSet.empty(state.doc.length);
	        }
	        else {
	            let filtered = this.changes.filter(result);
	            changes = filtered.changes;
	            back = filtered.filtered.invertedDesc;
	        }
	        return new ResolvedTransactionSpec(changes, this.selection && this.selection.map(back), StateEffect.mapEffects(this.effects, back), this.annotations, this.scrollIntoView, this.filter, this.reconfigure, this.replaceExtensions);
	    }
	    filterTransaction(state) {
	        if (!this.filter)
	            return this;
	        let result = this;
	        let filters = state.facet(transactionFilter);
	        for (let i = filters.length - 1; i >= 0; i--)
	            result = ResolvedTransactionSpec.create(state, filters[i](result, state));
	        return result;
	    }
	}
	function joinRanges(a, b) {
	    let result = [];
	    for (let iA = 0, iB = 0;;) {
	        let from, to;
	        if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
	            from = a[iA++];
	            to = a[iA++];
	        }
	        else if (iB < b.length) {
	            from = b[iB++];
	            to = b[iB++];
	        }
	        else
	            return result;
	        if (!result.length || result[result.length - 1] < from)
	            result.push(from, to);
	        else if (result[result.length - 1] < to)
	            result[result.length - 1] = to;
	    }
	}
	const none$1 = [];

	/// This is used to [categorize](#state.EditorState.charCategorizer)
	/// characters into three categories—word characters, whitespace, and
	/// anything else. It is used do things like selecting by word.
	var CharCategory;
	(function (CharCategory) {
	    CharCategory[CharCategory["Word"] = 0] = "Word";
	    CharCategory[CharCategory["Space"] = 1] = "Space";
	    CharCategory[CharCategory["Other"] = 2] = "Other";
	})(CharCategory || (CharCategory = {}));
	const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
	let wordChar;
	try {
	    wordChar = new RegExp("[\\p{Alphabetic}_]", "u");
	}
	catch (_) { }
	function hasWordChar(str) {
	    if (wordChar)
	        return wordChar.test(str);
	    for (let i = 0; i < str.length; i++) {
	        let ch = str[i];
	        if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
	            return true;
	    }
	    return false;
	}
	function makeCategorizer(wordChars) {
	    return (char) => {
	        if (!/\S/.test(char))
	            return CharCategory.Space;
	        if (hasWordChar(char))
	            return CharCategory.Word;
	        for (let i = 0; i < wordChars.length; i++)
	            if (char.indexOf(wordChars[i]) > -1)
	                return CharCategory.Word;
	        return CharCategory.Other;
	    };
	}

	/// The editor state class is a persistent (immutable) data structure.
	/// To update a state, you [create](#state.EditorState.update) a
	/// [transaction](#state.Transaction), which produces a _new_ state
	/// instance, without modifying the original object.
	///
	/// As such, _never_ mutate properties of a state directly. That'll
	/// just break things.
	class EditorState {
	    /// @internal
	    constructor(
	    /// @internal
	    config, 
	    /// The current document.
	    doc, 
	    /// The current selection.
	    selection, tr = null) {
	        this.config = config;
	        this.doc = doc;
	        this.selection = selection;
	        /// @internal
	        this.applying = null;
	        this.status = config.statusTemplate.slice();
	        if (tr && !tr.reconfigured) {
	            this.values = tr.startState.values.slice();
	        }
	        else {
	            this.values = config.dynamicSlots.map(_ => null);
	            // Copy over old values for shared facets/fields if this is a reconfigure
	            if (tr)
	                for (let id in config.address) {
	                    let cur = config.address[id], prev = tr.startState.config.address[id];
	                    if (prev != null && (cur & 1) == 0)
	                        this.values[cur >> 1] = getAddr(tr.startState, prev);
	                }
	        }
	        this.applying = tr;
	        if (tr)
	            tr.state = this;
	        for (let i = 0; i < this.config.dynamicSlots.length; i++)
	            ensureAddr(this, i << 1);
	        this.applying = null;
	    }
	    field(field, require = true) {
	        let addr = this.config.address[field.id];
	        if (addr == null) {
	            if (require)
	                throw new RangeError("Field is not present in this state");
	            return undefined;
	        }
	        ensureAddr(this, addr);
	        return getAddr(this, addr);
	    }
	    /// Create a [transaction](#state.Transaction) that updates this
	    /// state. Any number of [transaction specs](#state.TransactionSpec)
	    /// can be passed. The [changes](#state.TransactionSpec.changes) (if
	    /// any) of each spec are assumed to start in the _current_ document
	    /// (not the document produced by previous specs), and its
	    /// [selection](#state.TransactionSpec.selection) and
	    /// [effects](#state.TransactionSpec.effects) are assumed to refer
	    /// to the document created by its _own_ changes. The resulting
	    /// transaction contains the combined effect of all the different
	    /// specs. For things like
	    /// [selection](#state.TransactionSpec.selection) or
	    /// [reconfiguration](#state.TransactionSpec.reconfigure), later
	    /// specs take precedence over earlier ones.
	    update(...specs) {
	        let spec = ResolvedTransactionSpec.create(this, specs).filterChanges(this).filterTransaction(this);
	        if (spec.selection)
	            checkSelection(spec.selection, spec.changes.newLength);
	        let reconf = spec.reconfigure || spec.replaceExtensions, conf = !reconf ? this.config
	            : Configuration.resolve(spec.reconfigure || this.config.source, spec.replaceExtensions, this);
	        let flags = (reconf ? 1 /* reconfigured */ : 0) | (spec.scrollIntoView ? 2 /* scrollIntoView */ : 0);
	        let tr = new Transaction(this, spec.changes, spec.selection, spec.effects, spec.annotations, flags);
	        new EditorState(conf, spec.changes.apply(this.doc), spec.selection || this.selection.map(spec.changes), tr);
	        return tr;
	    }
	    /// Create a [transaction spec](#state.StrictTransactionSpec) that
	    /// replaces every selection range with the given content.
	    replaceSelection(text) {
	        if (typeof text == "string")
	            text = this.toText(text);
	        return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
	            range: EditorSelection.cursor(range.from + text.length) }));
	    }
	    /// Create a set of changes and a new selection by running the given
	    /// function for each range in the active selection. The function
	    /// can return an optional set of changes (in the coordinate space
	    /// of the start document), plus an updated range (in the coordinate
	    /// space of the document produced by the call's own changes). This
	    /// method will merge all the changes and ranges into a single
	    /// changeset and selection, and return it as a [transaction
	    /// spec](#state.StrictTransactionSpec), which can be passed to
	    /// [`update`](#state.EditorState.update).
	    changeByRange(f) {
	        let sel = this.selection;
	        let result1 = f(sel.ranges[0]);
	        let changes = this.changes(result1.changes), ranges = [result1.range];
	        for (let i = 1; i < sel.ranges.length; i++) {
	            let result = f(sel.ranges[i]);
	            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
	            for (let j = 0; j < i; j++)
	                ranges[j] = ranges[j].map(newMapped);
	            ranges.push(result.range.map(changes.mapDesc(newChanges, true)));
	            changes = changes.compose(newMapped);
	        }
	        return ResolvedTransactionSpec.create(this, {
	            changes,
	            selection: EditorSelection.create(ranges, sel.primaryIndex)
	        });
	    }
	    /// Create a [change set](#state.ChangeSet) from the given change
	    /// description, taking the state's document length and line
	    /// separator into account.
	    changes(spec = []) {
	        if (spec instanceof ChangeSet)
	            return spec;
	        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
	    }
	    /// Using the state's [line
	    /// separator](#state.EditorState^lineSeparator), create a
	    /// [`Text`](#text.Text) instance from the given string.
	    toText(string) {
	        return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
	    }
	    /// Return the given range of the document as a string.
	    sliceDoc(from = 0, to = this.doc.length) {
	        return this.doc.sliceString(from, to, this.lineBreak);
	    }
	    /// Get the value of a state [facet](#state.Facet).
	    facet(facet) {
	        let addr = this.config.address[facet.id];
	        if (addr == null)
	            return facet.default;
	        ensureAddr(this, addr);
	        return getAddr(this, addr);
	    }
	    /// Convert this state to a JSON-serializable object.
	    toJSON() {
	        // FIXME plugin state serialization
	        return {
	            doc: this.sliceDoc(),
	            selection: this.selection.toJSON()
	        };
	    }
	    /// Deserialize a state from its JSON representation.
	    static fromJSON(json, config = {}) {
	        if (!json || typeof json.doc != "string")
	            throw new RangeError("Invalid JSON representation for EditorState");
	        return EditorState.create({
	            doc: json.doc,
	            selection: EditorSelection.fromJSON(json.selection),
	            extensions: config.extensions
	        });
	    }
	    /// Create a new state. You'll usually only need this when
	    /// initializing an editor—updated states are created by applying
	    /// transactions.
	    static create(config = {}) {
	        let configuration = Configuration.resolve(config.extensions || []);
	        let doc = config.doc instanceof Text ? config.doc
	            : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
	        let selection = !config.selection ? EditorSelection.single(0)
	            : config.selection instanceof EditorSelection ? config.selection
	                : EditorSelection.single(config.selection.anchor, config.selection.head);
	        checkSelection(selection, doc.length);
	        if (!configuration.staticFacet(allowMultipleSelections))
	            selection = selection.asSingle();
	        return new EditorState(configuration, doc, selection);
	    }
	    /// The size (in columns) of a tab in the document, determined by
	    /// the [`tabSize`](#state.EditorState^tabSize) facet.
	    get tabSize() { return this.facet(EditorState.tabSize); }
	    /// Get the proper [line-break](#state.EditorState^lineSeparator)
	    /// string for this state.
	    get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
	    /// The _column width_ of an indent unit in the document. Determined
	    /// by the [`indentUnit`](#state.EditorState^indentUnit) facet, and
	    /// [`tabSize`](#state.EditorState^tabSize) when that contains tabs.
	    get indentUnit() {
	        let unit = this.facet(EditorState.indentUnit);
	        return unit.charCodeAt(0) == 9 ? this.tabSize * unit.length : unit.length;
	    }
	    /// Whether indentation should use tabs. Will be true when the
	    /// [`indentUnit`](#state.EditorState^indentUnit) facet contains
	    /// tabs.
	    get indentWithTabs() { return this.facet(EditorState.indentUnit).charCodeAt(0) == 9; }
	    /// Look up a translation for the given phrase (via the
	    /// [`phrases`](#state.EditorState^phrases) facet), or return the
	    /// original string if no translation is found.
	    phrase(phrase) {
	        for (let map of this.facet(EditorState.phrases))
	            if (Object.prototype.hasOwnProperty.call(map, phrase))
	                return map[phrase];
	        return phrase;
	    }
	    /// Return a function that can categorize strings (expected to
	    /// represent a single [grapheme cluster](#text.nextClusterBreak))
	    /// into one of:
	    ///
	    ///  - Word (contains an alphanumeric character or a character
	    ///    explicitly listed in the local language's `"wordChars"`
	    ///    language data, which should be a string)
	    ///  - Space (contains only whitespace)
	    ///  - Other (anything else)
	    charCategorizer(at) {
	        return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
	    }
	    /// Get the syntax tree for this state, which is the current
	    /// (possibly incomplete) parse tree of the [syntax](#state.Syntax)
	    /// with the highest precedence, or the empty tree if there is no
	    /// syntax available.
	    get tree() {
	        let syntax = this.facet(EditorState.syntax);
	        return syntax.length ? syntax[0].getTree(this) : Tree.empty;
	    }
	    /// Find the values for a given language data field, either provided
	    /// by the [syntax](#state.languageData) or through the
	    /// [`addLanguageData`](#state.EditorState^addLanguageData) facet,
	    /// for the [document type](#state.Syntax.docNodeTypeAt) at the
	    /// given position. Values provided by the facet, in precedence
	    /// order, will appear before those provided by the syntax.
	    languageDataAt(name, pos) {
	        let values = null;
	        let syntax = this.facet(EditorState.syntax);
	        let type = syntax.length ? syntax[0].docNodeTypeAt(this, pos) : null;
	        for (let added of this.facet(addLanguageData)) {
	            if ((added.type == null || added.type == type) && Object.prototype.hasOwnProperty.call(added, name))
	                (values || (values = [])).push(added[name]);
	        }
	        if (type) {
	            let langData = type.prop(languageData);
	            if (langData && Object.prototype.hasOwnProperty.call(langData, name))
	                (values || (values = [])).push(langData[name]);
	        }
	        return values || none$1$1;
	    }
	}
	/// A facet that, when enabled, causes the editor to allow multiple
	/// ranges to be selected. You should probably not use this
	/// directly, but let a plugin like
	/// [multiple-selections](#multiple-selections) handle it (which
	/// also makes sure the selections are visible in the view).
	EditorState.allowMultipleSelections = allowMultipleSelections;
	/// Facet that defines a way to query for automatic indentation
	/// depth at the start of a given line.
	EditorState.indentation = Facet.define();
	/// Configures the tab size to use in this state. The first
	/// (highest-precedence) value of the facet is used. If no value is
	/// given, this defaults to 4.
	EditorState.tabSize = Facet.define({
	    combine: values => values.length ? values[0] : 4
	});
	/// The line separator to use. By default, any of `"\n"`, `"\r\n"`
	/// and `"\r"` is treated as a separator when splitting lines, and
	/// lines are joined with `"\n"`.
	///
	/// When you configure a value here, only that precise separator
	/// will be used, allowing you to round-trip documents through the
	/// editor without normalizing line separators.
	EditorState.lineSeparator = Facet.define({
	    combine: values => values.length ? values[0] : undefined,
	    static: true
	});
	/// Facet for overriding the unit by which indentation happens.
	/// Should be a string consisting either entirely of spaces or
	/// entirely of tabs. When not set, this defaults to 2 spaces.
	EditorState.indentUnit = Facet.define({
	    combine: values => {
	        if (!values.length)
	            return "  ";
	        if (!/^(?: +|\t+)$/.test(values[0]))
	            throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
	        return values[0];
	    }
	});
	/// Registers translation phrases. The
	/// [`phrase`](#state.EditorState.phrase) method will look through
	/// all objects registered with this facet to find translations for
	/// its argument.
	EditorState.phrases = Facet.define();
	/// Facet that registers a parsing service for the state.
	EditorState.syntax = Facet.define();
	/// A facet used to register extra [language
	/// data](#state.EditorState.languageDataAt) with a language. Values
	/// are objects with the target [document
	/// type](#state.Syntax.docNodeType) in their `type` property, and any
	/// associated data in other properties.
	EditorState.addLanguageData = addLanguageData;
	/// A facet that registers a code folding service. When called with
	/// the extent of a line, such a function should return a range
	/// object when a foldable that starts on that line (but continues
	/// beyond it), if one can be found.
	EditorState.foldable = Facet.define();
	/// Facet used to register change filters, which are called for each
	/// transaction (unless explicitly
	/// [disabled](#state.TransactionSpec.filter)), and can suppress
	/// part of the transaction's changes.
	///
	/// Such a function can return `true` to indicate that it doesn't
	/// want to do anything, `false` to completely stop the changes in
	/// the transaction, or a set of ranges in which changes should be
	/// suppressed. Such ranges are represented as an array of numbers,
	/// with each pair of two number indicating the start and end of a
	/// range. So for example `[10, 20, 100, 110]` suppresses changes
	/// between 10 and 20, and between 100 and 110.
	EditorState.changeFilter = changeFilter;
	/// Facet used to register a hook that gets a chance to update or
	/// replace transaction specs before they are applied. This will
	/// only be applied for transactions that don't have
	/// [`filter`](#state.TransactionSpec.filter) set to `false`. You
	/// can either return a single spec (possibly the input spec), or an
	/// array of specs (which will be combined in the same way as the
	/// arguments to [`EditorState.update`](#state.EditorState.update)).
	///
	/// (This functionality should be used with care. Indiscriminately
	/// modifying transaction is likely to break something or degrade
	/// the user experience.)
	EditorState.transactionFilter = transactionFilter;
	const none$1$1 = [];

	/// Utility function for combining behaviors to fill in a config
	/// object from an array of provided configs. Will, by default, error
	/// when a field gets two values that aren't ===-equal, but you can
	/// provide combine functions per field to do something else.
	function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
	combine = {}) {
	    let result = {};
	    for (let config of configs)
	        for (let key of Object.keys(config)) {
	            let value = config[key], current = result[key];
	            if (current === undefined)
	                result[key] = value;
	            else if (current === value || value === undefined) ; // No conflict
	            else if (Object.hasOwnProperty.call(combine, key))
	                result[key] = combine[key](current, value);
	            else
	                throw new Error("Config merge conflict for field " + key);
	        }
	    for (let key in defaults)
	        if (result[key] === undefined)
	            result[key] = defaults[key];
	    return result;
	}
	/// Defaults the fields in a configuration object to values given in
	/// `defaults` if they are not already present.
	function fillConfig(config, defaults) {
	    let result = {};
	    for (let key in config)
	        result[key] = config[key];
	    for (let key in defaults)
	        if (result[key] === undefined)
	            result[key] = defaults[key];
	    return result;
	}

	function sym(name, random) {
	  return typeof Symbol == "undefined"
	    ? "__" + name + (random ? Math.floor(Math.random() * 1e8) : "")
	    : random ? Symbol(name) : Symbol.for(name)
	}

	const COUNT = sym("\u037c"), SET = sym("styleSet", 1), RULES = sym("rules", 1);
	const top = typeof global == "undefined" ? window : global;

	// :: (Object<Style>, ?{generateClasses: ?boolean}) → StyleModule
	// Instances of this class bind the property names from `spec` to CSS
	// class names that assign the styles in the corresponding property
	// values, unless `generateClasses` is `false`, in which case the
	// property names in the spec are treated as plain CSS selectors.
	//
	// A style module can only be used in a given DOM root after it has
	// been _mounted_ there with `StyleModule.mount`.
	//
	// Style modules should be created once and stored somewhere, as
	// opposed to re-creating them every time you need them. The amount of
	// CSS rules generated for a given DOM root is bounded by the amount
	// of style modules that were used. So to avoid leaking rules, don't
	// create these dynamically, but treat them as one-time allocations.
	function StyleModule(spec, options) {
	  this[RULES] = [];
	  for (let name in spec) {
	    let style = spec[name], specificity = style.specificity || 0;
	    let id = StyleModule.newName(), selector = name;
	    if ((options && options.generateClasses) !== false) {
	      let className = id;
	      selector = "." + id;
	      for (let i = 0; i < specificity; i++) {
	        let name = "\u037c_" + (i ? i.toString(36) : "");
	        selector += "." + name;
	        className += " " + name;
	      }
	      this[name] = className;
	    }
	    renderStyle(selector, spec[name], this[RULES]);
	  }
	}

	// :: () → string
	// Generate a new unique CSS class name.
	StyleModule.newName = () => {
	  let id = top[COUNT] || 1;
	  top[COUNT] = id + 1;
	  return "\u037c" + id.toString(36)
	};

	StyleModule.prototype = Object.create(null);

	// :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
	//
	// Mount the given set of modules in the given DOM root, which ensures
	// that the CSS rules defined by the module are available in that
	// context.
	//
	// Rules are only added to the document once per root.
	//
	// Rule order will follow the order of the modules, so that rules from
	// modules later in the array take precedence of those from earlier
	// modules. If you call this function multiple times for the same root
	// in a way that changes the order of already mounted modules, the old
	// order will be changed.
	StyleModule.mount = function(root, modules) {
	  (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
	};

	let adoptedSet = null;

	class StyleSet {
	  constructor(root) {
	    if (root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
	      if (adoptedSet) {
	        root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
	        return root[SET] = adoptedSet
	      }
	      this.sheet = new CSSStyleSheet;
	      root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
	      adoptedSet = this;
	    } else {
	      this.styleTag = (root.ownerDocument || root).createElement("style");
	      let target = root.head || root;
	      target.insertBefore(this.styleTag, target.firstChild);
	    }
	    this.modules = [];
	  }

	  mount(modules) {
	    let sheet = this.sheet;
	    let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
	    for (let i = 0; i < modules.length; i++) {
	      let mod = modules[i], index = this.modules.indexOf(mod);
	      if (index < j && index > -1) { // Ordering conflict
	        this.modules.splice(index, 1);
	        j--;
	        index = -1;
	      }
	      if (index == -1) {
	        this.modules.splice(j++, 0, mod);
	        if (sheet) for (let k = 0; k < mod[RULES].length; k++)
	          sheet.insertRule(mod[RULES][k], pos++);
	      } else {
	        while (j < index) pos += this.modules[j++][RULES].length;
	        pos += mod[RULES].length;
	        j++;
	      }
	    }

	    if (!sheet) {
	      let text = "";
	      for (let i = 0; i < this.modules.length; i++)
	        text += this.modules[i][RULES].join("\n") + "\n";
	      this.styleTag.textContent = text;
	    }
	  }
	}

	function renderStyle(selector, spec, output) {
	  if (typeof spec != "object") throw new RangeError("Expected style object, got " + JSON.stringify(spec))
	  let props = [];
	  for (let prop in spec) {
	    if (/^@/.test(prop)) {
	      let local = [];
	      renderStyle(selector, spec[prop], local);
	      output.push(prop + " {" + local.join(" ") + "}");
	    } else if (/&/.test(prop)) {
	      renderStyle(selector.split(/\s*,\s*/).map(sel => prop.replace(/&/g, sel)).join(", "), spec[prop], output);
	    } else if (prop != "specificity") {
	      if (typeof spec[prop] == "object") throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
	      props.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + spec[prop]);
	    }
	  }
	  if (props.length) output.push(selector + " {" + props.join("; ") + "}");
	}

	// Style::Object<union<Style,string>>
	//
	// A style is an object that, in the simple case, maps CSS property
	// names to strings holding their values, as in `{color: "red",
	// fontWeight: "bold"}`. The property names can be given in
	// camel-case—the library will insert a dash before capital letters
	// when converting them to CSS.
	//
	// If you include an underscore in a property name, it and everything
	// after it will be removed from the output, which can be useful when
	// providing a property multiple times, for browser compatibility
	// reasons.
	//
	// A property called `specificity` has a special meaning: if it holds
	// a number _N_, greater than 0, the selector for the class will have
	// _N_ extra dummy classes added, and those dummy classes will also be
	// present in the class name string created for the style. This allows
	// you to create rules that take precedence over other rules, even
	// when they are defined earlier.
	//
	// A property in a style object can also be a sub-selector, which
	// extends the current context to add a pseudo-selector or a child
	// selector. Such a property should contain a `&` character, which
	// will be replaced by the current selector. For example `{"&:before":
	// {content: '"hi"'}}`. Sub-selectors and regular properties can
	// freely be mixed in a given object. Any property containing a `&` is
	// assumed to be a sub-selector.
	//
	// Finally, a property can specify an @-block to be wrapped around the
	// styles defined inside the object that's the property's value. For
	// example to create a media query you can do `{"@media screen and
	// (min-width: 400px)": {...}}`.

	/// Each range is associated with a value, which must inherit from
	/// this class.
	class RangeValue {
	    /// Compare this value with another value. The default
	    /// implementation compares by identity.
	    eq(other) { return this == other; }
	    /// Create a [range](#rangeset.Range) with this value.
	    range(from, to = from) { return new Range(from, to, this); }
	}
	RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
	RangeValue.prototype.point = false;
	RangeValue.prototype.mapMode = MapMode.TrackDel;
	/// A range associates a value with a range of positions.
	class Range {
	    /// @internal
	    constructor(
	    /// The range's start position.
	    from, 
	    /// Its end position.
	    to, 
	    /// The value associated with this range.
	    value) {
	        this.from = from;
	        this.to = to;
	        this.value = value;
	    }
	}
	function cmpRange(a, b) {
	    return a.from - b.from || a.value.startSide - b.value.startSide;
	}
	// The maximum amount of ranges to store in a single chunk
	const ChunkSize = 250, 
	// Chunks with points of this size are never skipped during
	// compare, since moving past those points is likely to speed
	// up, rather than slow down, the comparison.
	BigPointSize = 500, 
	// A large (fixnum) value to use for max/min values.
	Far = 1e9;
	class Chunk {
	    constructor(from, to, value, 
	    // Chunks are marked with the largest point that occurs
	    // in them (or -1 for no points), so that scans that are
	    // only interested in points (such as the
	    // heightmap-related logic) can skip range-only chunks.
	    maxPoint) {
	        this.from = from;
	        this.to = to;
	        this.value = value;
	        this.maxPoint = maxPoint;
	    }
	    get length() { return this.to[this.to.length - 1]; }
	    // With side == -1, return the first index where to >= pos. When
	    // side == 1, the first index where from > pos.
	    findIndex(pos, end, side = end * Far, startAt = 0) {
	        if (pos <= 0)
	            return startAt;
	        let arr = end < 0 ? this.to : this.from;
	        for (let lo = startAt, hi = arr.length;;) {
	            if (lo == hi)
	                return lo;
	            let mid = (lo + hi) >> 1;
	            let diff = arr[mid] - pos || (end < 0 ? this.value[mid].startSide : this.value[mid].endSide) - side;
	            if (mid == lo)
	                return diff >= 0 ? lo : hi;
	            if (diff >= 0)
	                hi = mid;
	            else
	                lo = mid + 1;
	        }
	    }
	    between(offset, from, to, f) {
	        for (let i = this.findIndex(from, -1), e = this.findIndex(to, 1, undefined, i); i < e; i++)
	            if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
	                return false;
	    }
	    map(offset, changes) {
	        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
	        for (let i = 0; i < this.value.length; i++) {
	            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
	            if (curFrom == curTo) {
	                let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
	                if (mapped < 0)
	                    continue;
	                newFrom = newTo = mapped;
	            }
	            else {
	                newFrom = changes.mapPos(curFrom, val.startSide);
	                newTo = changes.mapPos(curTo, val.endSide);
	                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
	                    continue;
	            }
	            if ((newTo - newFrom || val.endSide - val.startSide) < 0)
	                continue;
	            if (newPos < 0)
	                newPos = newFrom;
	            if (val.point)
	                maxPoint = Math.max(maxPoint, newTo - newFrom);
	            value.push(val);
	            from.push(newFrom - newPos);
	            to.push(newTo - newPos);
	        }
	        return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
	    }
	}
	/// A range set stores a collection of [ranges](#rangeset.Range) in a
	/// way that makes them efficient to [map](#rangeset.RangeSet.map) and
	/// [update](#rangeset.RangeSet.update). This is an immutable data
	/// structure.
	class RangeSet {
	    /// @internal
	    constructor(
	    /// @internal
	    chunkPos, 
	    /// @internal
	    chunk, 
	    /// @internal
	    nextLayer = RangeSet.empty, 
	    /// @internal
	    maxPoint) {
	        this.chunkPos = chunkPos;
	        this.chunk = chunk;
	        this.nextLayer = nextLayer;
	        this.maxPoint = maxPoint;
	    }
	    /// @internal
	    get length() {
	        let last = this.chunk.length - 1;
	        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
	    }
	    /// @internal
	    get size() {
	        if (this == RangeSet.empty)
	            return 0;
	        let size = this.nextLayer.size;
	        for (let chunk of this.chunk)
	            size += chunk.value.length;
	        return size;
	    }
	    /// @internal
	    chunkEnd(index) {
	        return this.chunkPos[index] + this.chunk[index].length;
	    }
	    /// Update the range set, optionally adding new ranges or filtering
	    /// out existing ones.
	    update({ add = [], sort = false, filter, filterFrom = 0, filterTo = this.length }) {
	        if (add.length == 0 && !filter)
	            return this;
	        if (sort)
	            add.slice().sort(cmpRange);
	        if (this == RangeSet.empty)
	            return add.length ? RangeSet.of(add) : this;
	        let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
	        let builder = new RangeSetBuilder();
	        while (cur.value || i < add.length) {
	            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
	                let range = add[i++];
	                if (!builder.addInner(range.from, range.to, range.value))
	                    spill.push(range);
	            }
	            else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
	                (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
	                (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
	                builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
	                cur.nextChunk();
	            }
	            else {
	                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
	                    if (!builder.addInner(cur.from, cur.to, cur.value))
	                        spill.push(new Range(cur.from, cur.to, cur.value));
	                }
	                cur.next();
	            }
	        }
	        return builder.finishInner(this.nextLayer == RangeSet.empty && !spill.length ? RangeSet.empty
	            : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
	    }
	    /// Map this range set through a set of changes, return the new set.
	    map(changes) {
	        if (changes.length == 0 || this == RangeSet.empty)
	            return this;
	        let chunks = [], chunkPos = [], maxPoint = -1;
	        for (let i = 0; i < this.chunk.length; i++) {
	            let start = this.chunkPos[i], chunk = this.chunk[i];
	            let touch = changes.touchesRange(start, start + chunk.length);
	            if (touch === false) {
	                maxPoint = Math.max(maxPoint, chunk.maxPoint);
	                chunks.push(chunk);
	                chunkPos.push(changes.mapPos(start));
	            }
	            else if (touch === true) {
	                let { mapped, pos } = chunk.map(start, changes);
	                if (mapped) {
	                    maxPoint = Math.max(maxPoint, mapped.maxPoint);
	                    chunks.push(mapped);
	                    chunkPos.push(pos);
	                }
	            }
	        }
	        let next = this.nextLayer.map(changes);
	        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next, maxPoint);
	    }
	    /// Iterate over the ranges that touch the region `from` to `to`,
	    /// calling `f` for each. There is no guarantee that the ranges will
	    /// be reported in any order. When the callback returns `false`,
	    /// iteration stops.
	    between(from, to, f) {
	        if (this == RangeSet.empty)
	            return;
	        for (let i = 0; i < this.chunk.length; i++) {
	            let start = this.chunkPos[i], chunk = this.chunk[i];
	            if (to >= start && from <= start + chunk.length &&
	                chunk.between(start, from - start, to - start, f) === false)
	                return;
	        }
	        this.nextLayer.between(from, to, f);
	    }
	    /// Iterate over the ranges in this set, in order, including all
	    /// ranges that end at or after `from`.
	    iter(from = 0) {
	        return HeapCursor.from([this]).goto(from);
	    }
	    /// Iterate over the given sets, starting from `from`.
	    static iter(sets, from = 0) {
	        return HeapCursor.from(sets).goto(from);
	    }
	    /// Iterate over two groups of sets, calling methods on `comparator`
	    /// to notify it of possible differences. `textDiff` indicates how
	    /// the underlying data changed between these ranges, and is needed
	    /// to synchronize the iteration. `from` and `to` are coordinates in
	    /// the _new_ space, after these changes.
	    static compare(oldSets, newSets, textDiff, comparator) {
	        var _a;
	        let minPoint = (_a = comparator.minPointSize) !== null && _a !== void 0 ? _a : -1;
	        let a = oldSets.filter(set => set.maxPoint >= BigPointSize ||
	            set != RangeSet.empty && newSets.indexOf(set) < 0 && set.maxPoint >= minPoint);
	        let b = newSets.filter(set => set.maxPoint >= BigPointSize ||
	            set != RangeSet.empty && oldSets.indexOf(set) < 0 && set.maxPoint >= minPoint);
	        let sharedChunks = findSharedChunks(a, b);
	        let sideA = new SpanCursor(a, sharedChunks, minPoint);
	        let sideB = new SpanCursor(b, sharedChunks, minPoint);
	        textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
	        if (textDiff.empty && textDiff.length == 0)
	            compare(sideA, 0, sideB, 0, 0, comparator);
	    }
	    /// Iterate over a group of range sets at the same time, notifying
	    /// the iterator about the ranges covering every given piece of
	    /// content.
	    static spans(sets, from, to, iterator) {
	        var _a;
	        let cursor = new SpanCursor(sets, null, (_a = iterator.minPointSize) !== null && _a !== void 0 ? _a : -1).goto(from), pos = from;
	        for (;;) {
	            let curTo = Math.min(cursor.to, to);
	            if (cursor.point)
	                iterator.point(pos, curTo, cursor.point, cursor.pointFrom < from, cursor.to > to);
	            else if (curTo > pos)
	                iterator.span(pos, curTo, cursor.active);
	            if (cursor.to > to)
	                break;
	            pos = cursor.to;
	            cursor.next();
	        }
	    }
	    /// Create a range set for the given range or array of ranges. By
	    /// default, this expects the ranges to be _sorted_ (by start
	    /// position and, if two start at the same position,
	    /// `value.startSide`). You can pass `true` as second argument to
	    /// cause the method to sort them.
	    static of(ranges, sort = false) {
	        let build = new RangeSetBuilder();
	        for (let range of ranges instanceof Range ? [ranges] : sort ? ranges.slice().sort(cmpRange) : ranges)
	            build.add(range.from, range.to, range.value);
	        return build.finish();
	    }
	}
	/// The empty set of ranges.
	RangeSet.empty = new RangeSet([], [], null, -1);
	RangeSet.empty.nextLayer = RangeSet.empty;
	/// A range set builder is a data structure that helps build up a
	/// [range set](#rangeset.RangeSet) directly, without first allocating
	/// an array of [`Range`](#rangeset.Range) objects.
	class RangeSetBuilder {
	    constructor() {
	        this.chunks = [];
	        this.chunkPos = [];
	        this.chunkStart = -1;
	        this.last = null;
	        this.lastFrom = -Far;
	        this.lastTo = -Far;
	        this.from = [];
	        this.to = [];
	        this.value = [];
	        this.maxPoint = -1;
	        this.setMaxPoint = -1;
	        this.nextLayer = null;
	    }
	    finishChunk(newArrays) {
	        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
	        this.chunkPos.push(this.chunkStart);
	        this.chunkStart = -1;
	        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
	        this.maxPoint = -1;
	        if (newArrays) {
	            this.from = [];
	            this.to = [];
	            this.value = [];
	        }
	    }
	    /// Add a range. Ranges should be added in sorted (by `from` and
	    /// `value.startSide`) order.
	    add(from, to, value) {
	        if (!this.addInner(from, to, value))
	            (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
	    }
	    /// @internal
	    addInner(from, to, value) {
	        let diff = from - this.lastTo || value.startSide - this.last.endSide;
	        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
	            throw new Error("Ranges must be added sorted by `from` position and `startSide`");
	        if (diff < 0)
	            return false;
	        if (this.from.length == ChunkSize)
	            this.finishChunk(true);
	        if (this.chunkStart < 0)
	            this.chunkStart = from;
	        this.from.push(from - this.chunkStart);
	        this.to.push(to - this.chunkStart);
	        this.last = value;
	        this.lastFrom = from;
	        this.lastTo = to;
	        this.value.push(value);
	        if (value.point)
	            this.maxPoint = Math.max(this.maxPoint, to - from);
	        return true;
	    }
	    /// @internal
	    addChunk(from, chunk) {
	        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
	            return false;
	        if (this.from.length)
	            this.finishChunk(true);
	        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
	        this.chunks.push(chunk);
	        this.chunkPos.push(from);
	        let last = chunk.value.length - 1;
	        this.last = chunk.value[last];
	        this.lastFrom = chunk.from[last] + from;
	        this.lastTo = chunk.to[last] + from;
	        return true;
	    }
	    /// Finish the range set. Returns the new set. The builder can't be
	    /// used anymore after this has been called.
	    finish() { return this.finishInner(RangeSet.empty); }
	    /// @internal
	    finishInner(next) {
	        if (this.from.length)
	            this.finishChunk(false);
	        if (this.chunks.length == 0)
	            return next;
	        let result = new RangeSet(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
	        this.from = null; // Make sure further `add` calls produce errors
	        return result;
	    }
	}
	function findSharedChunks(a, b) {
	    let inA = new Map();
	    for (let set of a)
	        for (let i = 0; i < set.chunk.length; i++)
	            if (set.chunk[i].maxPoint < BigPointSize)
	                inA.set(set.chunk[i], set.chunkPos[i]);
	    let shared = new Set();
	    for (let set of b)
	        for (let i = 0; i < set.chunk.length; i++)
	            if (inA.get(set.chunk[i]) == set.chunkPos[i])
	                shared.add(set.chunk[i]);
	    return shared;
	}
	class LayerCursor {
	    constructor(layer, skip, minPoint) {
	        this.layer = layer;
	        this.skip = skip;
	        this.minPoint = minPoint;
	    }
	    get startSide() { return this.value ? this.value.startSide : 0; }
	    get endSide() { return this.value ? this.value.endSide : 0; }
	    goto(pos, side = -Far) {
	        this.chunkIndex = this.rangeIndex = 0;
	        this.gotoInner(pos, side, false);
	        return this;
	    }
	    gotoInner(pos, side, forward) {
	        while (this.chunkIndex < this.layer.chunk.length) {
	            let next = this.layer.chunk[this.chunkIndex];
	            if (!(this.skip && this.skip.has(next) ||
	                this.layer.chunkEnd(this.chunkIndex) < pos ||
	                next.maxPoint < this.minPoint))
	                break;
	            this.chunkIndex++;
	            forward = false;
	        }
	        let rangeIndex = this.chunkIndex == this.layer.chunk.length ? 0
	            : this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], -1, side);
	        if (!forward || this.rangeIndex < rangeIndex)
	            this.rangeIndex = rangeIndex;
	        this.next();
	    }
	    forward(pos, side) {
	        if ((this.to - pos || this.endSide - side) < 0)
	            this.gotoInner(pos, side, true);
	    }
	    next() {
	        for (;;) {
	            if (this.chunkIndex == this.layer.chunk.length) {
	                this.from = this.to = Far;
	                this.value = null;
	                break;
	            }
	            else {
	                let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
	                let from = chunkPos + chunk.from[this.rangeIndex];
	                this.from = from;
	                this.to = chunkPos + chunk.to[this.rangeIndex];
	                this.value = chunk.value[this.rangeIndex];
	                if (++this.rangeIndex == chunk.value.length) {
	                    this.chunkIndex++;
	                    if (this.skip) {
	                        while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
	                            this.chunkIndex++;
	                    }
	                    this.rangeIndex = 0;
	                }
	                if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
	                    break;
	            }
	        }
	    }
	    nextChunk() {
	        this.chunkIndex++;
	        this.rangeIndex = 0;
	        this.next();
	    }
	    compare(other) {
	        return this.from - other.from || this.startSide - other.startSide || this.to - other.to || this.endSide - other.endSide;
	    }
	}
	class HeapCursor {
	    constructor(heap) {
	        this.heap = heap;
	    }
	    static from(sets, skip = null, minPoint = -1) {
	        let heap = [];
	        for (let set of sets)
	            for (let cur = set; cur != RangeSet.empty; cur = cur.nextLayer) {
	                if (cur.maxPoint >= minPoint)
	                    heap.push(new LayerCursor(cur, skip, minPoint));
	            }
	        return heap.length == 1 ? heap[0] : new HeapCursor(heap);
	    }
	    get startSide() { return this.value ? this.value.startSide : 0; }
	    goto(pos, side = -Far) {
	        for (let cur of this.heap)
	            cur.goto(pos, side);
	        for (let i = this.heap.length >> 1; i >= 0; i--)
	            heapBubble(this.heap, i);
	        this.next();
	        return this;
	    }
	    forward(pos, side) {
	        for (let cur of this.heap)
	            cur.forward(pos, side);
	        for (let i = this.heap.length >> 1; i >= 0; i--)
	            heapBubble(this.heap, i);
	        if ((this.to - pos || this.value.endSide - side) < 0)
	            this.next();
	    }
	    next() {
	        if (this.heap.length == 0) {
	            this.from = this.to = Far;
	            this.value = null;
	        }
	        else {
	            let top = this.heap[0];
	            this.from = top.from;
	            this.to = top.to;
	            this.value = top.value;
	            if (top.value)
	                top.next();
	            heapBubble(this.heap, 0);
	        }
	    }
	}
	function heapBubble(heap, index) {
	    for (let cur = heap[index];;) {
	        let childIndex = (index << 1) + 1;
	        if (childIndex >= heap.length)
	            break;
	        let child = heap[childIndex];
	        if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
	            child = heap[childIndex + 1];
	            childIndex++;
	        }
	        if (cur.compare(child) < 0)
	            break;
	        heap[childIndex] = cur;
	        heap[index] = child;
	        index = childIndex;
	    }
	}
	class SpanCursor {
	    constructor(sets, skip, minPoint) {
	        this.minPoint = minPoint;
	        this.active = [];
	        this.activeTo = [];
	        this.minActive = -1;
	        // A currently active point range, if any
	        this.point = null;
	        this.pointFrom = 0;
	        this.to = -Far;
	        this.endSide = 0;
	        this.cursor = HeapCursor.from(sets, skip, minPoint);
	    }
	    goto(pos, side = -Far) {
	        this.cursor.goto(pos, side);
	        this.active.length = this.activeTo.length = 0;
	        this.minActive = -1;
	        this.to = pos;
	        this.endSide = side;
	        this.next();
	        return this;
	    }
	    forward(pos, side) {
	        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
	            this.removeActive(this.minActive);
	        this.cursor.forward(pos, side);
	    }
	    removeActive(index) {
	        remove$2(this.active, index);
	        remove$2(this.activeTo, index);
	        this.minActive = findMinIndex(this.active, this.activeTo);
	    }
	    // After calling this, if `this.point` != null, the next range is a
	    // point. Otherwise, it's a regular range, covered by `this.active`.
	    next() {
	        let from = this.to;
	        this.point = null;
	        for (;;) {
	            let a = this.minActive;
	            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
	                if (this.activeTo[a] > from) {
	                    this.to = this.activeTo[a];
	                    this.endSide = this.active[a].endSide;
	                    break;
	                }
	                this.removeActive(a);
	            }
	            else if (!this.cursor.value) {
	                this.to = this.endSide = Far;
	                break;
	            }
	            else if (this.cursor.from > from) {
	                this.to = this.cursor.from;
	                this.endSide = this.cursor.startSide;
	                break;
	            }
	            else {
	                let nextVal = this.cursor.value;
	                if (!nextVal.point) { // Opening a range
	                    this.active.push(nextVal);
	                    this.activeTo.push(this.cursor.to);
	                    this.minActive = findMinIndex(this.active, this.activeTo);
	                    this.cursor.next();
	                }
	                else { // New point
	                    this.point = nextVal;
	                    this.pointFrom = this.cursor.from;
	                    this.to = this.cursor.to;
	                    this.endSide = nextVal.endSide;
	                    this.cursor.next();
	                    if (this.to > from)
	                        this.forward(this.to, this.endSide);
	                    break;
	                }
	            }
	        }
	    }
	}
	function compare(a, startA, b, startB, length, comparator) {
	    a.goto(startA);
	    b.goto(startB);
	    let endB = startB + length;
	    let pos = startB, dPos = startB - startA;
	    for (;;) {
	        let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
	        let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
	        if (a.point || b.point) {
	            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point))))
	                comparator.comparePoint(pos, clipEnd, a.point, b.point);
	        }
	        else {
	            if (clipEnd > pos && !sameSet(a.active, b.active))
	                comparator.compareRange(pos, clipEnd, a.active, b.active);
	        }
	        if (end > endB)
	            break;
	        pos = end;
	        if (diff <= 0)
	            a.next();
	        if (diff >= 0)
	            b.next();
	    }
	}
	function sameSet(a, b) {
	    if (a.length != b.length)
	        return false;
	    outer: for (let i = 0; i < a.length; i++) {
	        for (let j = 0; j < b.length; j++)
	            if (a[i] == b[i] || a[i].eq(b[j]))
	                continue outer;
	        return false;
	    }
	    return true;
	}
	function remove$2(array, index) {
	    let last = array.pop();
	    if (index != array.length)
	        array[index] = last;
	}
	function findMinIndex(value, array) {
	    let found = -1, foundPos = Far;
	    for (let i = 0; i < array.length; i++)
	        if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
	            found = i;
	            foundPos = array[i];
	        }
	    return found;
	}

	let [nav, doc] = typeof navigator != "undefined"
	    ? [navigator, document]
	    : [{ userAgent: "", vendor: "", platform: "" }, { documentElement: { style: {} } }];
	const ie_edge = /Edge\/(\d+)/.exec(nav.userAgent);
	const ie_upto10 = /MSIE \d/.test(nav.userAgent);
	const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
	const ie = !!(ie_upto10 || ie_11up || ie_edge);
	const gecko = !ie && /gecko\/(\d+)/i.test(nav.userAgent);
	const chrome = !ie && /Chrome\/(\d+)/.exec(nav.userAgent);
	const webkit = "webkitFontSmoothing" in doc.documentElement.style;
	var browser$1 = {
	    mac: /Mac/.test(nav.platform),
	    ie,
	    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
	    gecko,
	    gecko_version: gecko ? +(/Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
	    chrome: !!chrome,
	    chrome_version: chrome ? +chrome[1] : 0,
	    ios: !ie && /AppleWebKit/.test(nav.userAgent) && /Mobile\/\w+/.test(nav.userAgent),
	    android: /Android\b/.test(nav.userAgent),
	    webkit,
	    safari: /Apple Computer/.test(nav.vendor),
	    webkit_version: webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
	    tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
	};

	function getSelection(root) {
	    return (root.getSelection ? root.getSelection() : document.getSelection());
	}
	// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
	// (isCollapsed inappropriately returns true in shadow dom)
	function selectionCollapsed(domSel) {
	    let collapsed = domSel.isCollapsed;
	    if (collapsed && browser$1.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)
	        collapsed = false;
	    return collapsed;
	}
	function hasSelection(dom, selection) {
	    if (!selection.anchorNode)
	        return false;
	    try {
	        // Firefox will raise 'permission denied' errors when accessing
	        // properties of `sel.anchorNode` when it's in a generated CSS
	        // element.
	        return dom.contains(selection.anchorNode.nodeType == 3 ? selection.anchorNode.parentNode : selection.anchorNode);
	    }
	    catch (_) {
	        return false;
	    }
	}
	function clientRectsFor(dom) {
	    if (dom.nodeType == 3) {
	        let range = document.createRange();
	        range.setEnd(dom, dom.nodeValue.length);
	        range.setStart(dom, 0);
	        return range.getClientRects();
	    }
	    else if (dom.nodeType == 1) {
	        return dom.getClientRects();
	    }
	    else {
	        return [];
	    }
	}
	// Scans forward and backward through DOM positions equivalent to the
	// given one to see if the two are in the same place (i.e. after a
	// text node vs at the end of that text node)
	function isEquivalentPosition(node, off, targetNode, targetOff) {
	    return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
	        scanFor(node, off, targetNode, targetOff, 1)) : false;
	}
	function domIndex(node) {
	    for (var index = 0;; index++) {
	        node = node.previousSibling;
	        if (!node)
	            return index;
	    }
	}
	function scanFor(node, off, targetNode, targetOff, dir) {
	    for (;;) {
	        if (node == targetNode && off == targetOff)
	            return true;
	        if (off == (dir < 0 ? 0 : maxOffset(node))) {
	            if (node.nodeName == "DIV")
	                return false;
	            let parent = node.parentNode;
	            if (!parent || parent.nodeType != 1)
	                return false;
	            off = domIndex(node) + (dir < 0 ? 0 : 1);
	            node = parent;
	        }
	        else if (node.nodeType == 1) {
	            node = node.childNodes[off + (dir < 0 ? -1 : 0)];
	            off = dir < 0 ? maxOffset(node) : 0;
	        }
	        else {
	            return false;
	        }
	    }
	}
	function maxOffset(node) {
	    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
	}
	function windowRect(win) {
	    return { left: 0, right: win.innerWidth,
	        top: 0, bottom: win.innerHeight };
	}
	const ScrollSpace = 5;
	function scrollRectIntoView(dom, rect) {
	    let doc = dom.ownerDocument, win = doc.defaultView;
	    for (let cur = dom.parentNode; cur;) {
	        if (cur.nodeType == 1) { // Element
	            let bounding, top = cur == document.body;
	            if (top) {
	                bounding = windowRect(win);
	            }
	            else {
	                if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
	                    cur = cur.parentNode;
	                    continue;
	                }
	                let rect = cur.getBoundingClientRect();
	                // Make sure scrollbar width isn't included in the rectangle
	                bounding = { left: rect.left, right: rect.left + cur.clientWidth,
	                    top: rect.top, bottom: rect.top + cur.clientHeight };
	            }
	            let moveX = 0, moveY = 0;
	            if (rect.top < bounding.top)
	                moveY = -(bounding.top - rect.top + ScrollSpace);
	            else if (rect.bottom > bounding.bottom)
	                moveY = rect.bottom - bounding.bottom + ScrollSpace;
	            if (rect.left < bounding.left)
	                moveX = -(bounding.left - rect.left + ScrollSpace);
	            else if (rect.right > bounding.right)
	                moveX = rect.right - bounding.right + ScrollSpace;
	            if (moveX || moveY) {
	                if (top) {
	                    win.scrollBy(moveX, moveY);
	                }
	                else {
	                    if (moveY) {
	                        let start = cur.scrollTop;
	                        cur.scrollTop += moveY;
	                        moveY = cur.scrollTop - start;
	                    }
	                    if (moveX) {
	                        let start = cur.scrollLeft;
	                        cur.scrollLeft += moveX;
	                        moveX = cur.scrollLeft - start;
	                    }
	                    rect = { left: rect.left - moveX, top: rect.top - moveY,
	                        right: rect.right - moveX, bottom: rect.bottom - moveY };
	                }
	            }
	            if (top)
	                break;
	            cur = cur.parentNode;
	        }
	        else if (cur.nodeType == 11) { // A shadow root
	            cur = cur.host;
	        }
	        else {
	            break;
	        }
	    }
	}
	class DOMSelection {
	    constructor() {
	        this.anchorNode = null;
	        this.anchorOffset = 0;
	        this.focusNode = null;
	        this.focusOffset = 0;
	    }
	    eq(domSel) {
	        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
	            this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
	    }
	    set(domSel) {
	        this.anchorNode = domSel.anchorNode;
	        this.anchorOffset = domSel.anchorOffset;
	        this.focusNode = domSel.focusNode;
	        this.focusOffset = domSel.focusOffset;
	    }
	}
	let preventScrollSupported = null;
	// Feature-detects support for .focus({preventScroll: true}), and uses
	// a fallback kludge when not supported.
	function focusPreventScroll(dom) {
	    if (dom.setActive)
	        return dom.setActive(); // in IE
	    if (preventScrollSupported)
	        return dom.focus(preventScrollSupported);
	    let stack = [];
	    for (let cur = dom; cur; cur = cur.parentNode) {
	        stack.push(cur, cur.scrollTop, cur.scrollLeft);
	        if (cur == cur.ownerDocument)
	            break;
	    }
	    dom.focus(preventScrollSupported == null ? {
	        get preventScroll() {
	            preventScrollSupported = { preventScroll: true };
	            return true;
	        }
	    } : undefined);
	    if (!preventScrollSupported) {
	        preventScrollSupported = false;
	        for (let i = 0; i < stack.length;) {
	            let elt = stack[i++], top = stack[i++], left = stack[i++];
	            if (elt.scrollTop != top)
	                elt.scrollTop = top;
	            if (elt.scrollLeft != left)
	                elt.scrollLeft = left;
	        }
	    }
	}

	class DOMPos {
	    constructor(node, offset, precise = true) {
	        this.node = node;
	        this.offset = offset;
	        this.precise = precise;
	    }
	    static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
	    static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
	}
	const none$2 = [];
	class ContentView {
	    constructor() {
	        this.parent = null;
	        this.dom = null;
	        this.dirty = 2 /* Node */;
	    }
	    get editorView() {
	        if (!this.parent)
	            throw new Error("Accessing view in orphan content view");
	        return this.parent.editorView;
	    }
	    get overrideDOMText() { return null; }
	    get posAtStart() {
	        return this.parent ? this.parent.posBefore(this) : 0;
	    }
	    get posAtEnd() {
	        return this.posAtStart + this.length;
	    }
	    posBefore(view) {
	        let pos = this.posAtStart;
	        for (let child of this.children) {
	            if (child == view)
	                return pos;
	            pos += child.length + child.breakAfter;
	        }
	        throw new RangeError("Invalid child in posBefore");
	    }
	    posAfter(view) {
	        return this.posBefore(view) + view.length;
	    }
	    coordsAt(_pos, _side) { return null; }
	    sync() {
	        if (this.dirty & 2 /* Node */) {
	            let parent = this.dom, pos = null;
	            for (let child of this.children) {
	                if (child.dirty) {
	                    let next = pos ? pos.nextSibling : parent.firstChild;
	                    if (next && !child.dom && !ContentView.get(next))
	                        child.reuseDOM(next);
	                    child.sync();
	                    child.dirty = 0 /* Not */;
	                }
	                syncNodeInto(parent, pos, child.dom);
	                pos = child.dom;
	            }
	            let next = pos ? pos.nextSibling : parent.firstChild;
	            while (next)
	                next = rm(next);
	        }
	        else if (this.dirty & 1 /* Child */) {
	            for (let child of this.children)
	                if (child.dirty) {
	                    child.sync();
	                    child.dirty = 0 /* Not */;
	                }
	        }
	    }
	    reuseDOM(_dom) { return false; }
	    localPosFromDOM(node, offset) {
	        let after;
	        if (node == this.dom) {
	            after = this.dom.childNodes[offset];
	        }
	        else {
	            let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
	            for (;;) {
	                let parent = node.parentNode;
	                if (parent == this.dom)
	                    break;
	                if (bias == 0 && parent.firstChild != parent.lastChild) {
	                    if (node == parent.firstChild)
	                        bias = -1;
	                    else
	                        bias = 1;
	                }
	                node = parent;
	            }
	            if (bias < 0)
	                after = node;
	            else
	                after = node.nextSibling;
	        }
	        if (after == this.dom.firstChild)
	            return 0;
	        while (after && !ContentView.get(after))
	            after = after.nextSibling;
	        if (!after)
	            return this.length;
	        for (let i = 0, pos = 0;; i++) {
	            let child = this.children[i];
	            if (child.dom == after)
	                return pos;
	            pos += child.length + child.breakAfter;
	        }
	    }
	    domBoundsAround(from, to, offset = 0) {
	        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
	        for (let i = 0, pos = offset; i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (pos < from && end > to)
	                return child.domBoundsAround(from, to, pos);
	            if (end >= from && fromI == -1) {
	                fromI = i;
	                fromStart = pos;
	            }
	            if (end >= to && toI == -1) {
	                toI = i;
	                toEnd = end;
	                break;
	            }
	            pos = end + child.breakAfter;
	        }
	        return { from: fromStart, to: toEnd,
	            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
	            endDOM: toI < this.children.length - 1 ? this.children[toI + 1].dom : null };
	    }
	    // FIXME track precise dirty ranges, to avoid full DOM sync on every touched node?
	    markDirty(andParent = false) {
	        if (this.dirty & 2 /* Node */)
	            return;
	        this.dirty |= 2 /* Node */;
	        this.markParentsDirty(andParent);
	    }
	    markParentsDirty(childList) {
	        for (let parent = this.parent; parent; parent = parent.parent) {
	            if (childList)
	                parent.dirty |= 2 /* Node */;
	            if (parent.dirty & 1 /* Child */)
	                return;
	            parent.dirty |= 1 /* Child */;
	            childList = false;
	        }
	    }
	    setParent(parent) {
	        if (this.parent != parent) {
	            this.parent = parent;
	            if (this.dirty)
	                this.markParentsDirty(true);
	        }
	    }
	    setDOM(dom) {
	        this.dom = dom;
	        dom.cmView = this;
	    }
	    get rootView() {
	        for (let v = this;;) {
	            let parent = v.parent;
	            if (!parent)
	                return v;
	            v = parent;
	        }
	    }
	    replaceChildren(from, to, children = none$2) {
	        this.markDirty();
	        for (let i = from; i < to; i++)
	            this.children[i].parent = null;
	        this.children.splice(from, to - from, ...children);
	        for (let i = 0; i < children.length; i++)
	            children[i].setParent(this);
	    }
	    ignoreMutation(_rec) { return false; }
	    ignoreEvent(_event) { return false; }
	    childCursor(pos = this.length) {
	        return new ChildCursor(this.children, pos, this.children.length);
	    }
	    childPos(pos, bias = 1) {
	        return this.childCursor().findPos(pos, bias);
	    }
	    toString() {
	        let name = this.constructor.name.replace("View", "");
	        return name + (this.children.length ? "(" + this.children.join() + ")" :
	            this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
	            (this.breakAfter ? "#" : "");
	    }
	    static get(node) { return node.cmView; }
	}
	ContentView.prototype.breakAfter = 0;
	// Remove a DOM node and return its next sibling.
	function rm(dom) {
	    let next = dom.nextSibling;
	    dom.parentNode.removeChild(dom);
	    return next;
	}
	function syncNodeInto(parent, after, dom) {
	    let next = after ? after.nextSibling : parent.firstChild;
	    if (dom.parentNode == parent)
	        while (next != dom)
	            next = rm(next);
	    else
	        parent.insertBefore(dom, next);
	}
	class ChildCursor {
	    constructor(children, pos, i) {
	        this.children = children;
	        this.pos = pos;
	        this.i = i;
	        this.off = 0;
	    }
	    findPos(pos, bias = 1) {
	        for (;;) {
	            if (pos > this.pos || pos == this.pos &&
	                (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
	                this.off = pos - this.pos;
	                return this;
	            }
	            let next = this.children[--this.i];
	            this.pos -= next.length + next.breakAfter;
	        }
	    }
	}

	function combineAttrs(source, target) {
	    for (let name in source) {
	        if (name == "class" && target.class)
	            target.class += " " + source.class;
	        else if (name == "style" && target.style)
	            target.style += ";" + source.style;
	        else
	            target[name] = source[name];
	    }
	    return target;
	}
	function attrsEq(a, b) {
	    if (a == b)
	        return true;
	    if (!a || !b)
	        return false;
	    let keysA = Object.keys(a), keysB = Object.keys(b);
	    if (keysA.length != keysB.length)
	        return false;
	    for (let key of keysA) {
	        if (keysB.indexOf(key) == -1 || a[key] !== b[key])
	            return false;
	    }
	    return true;
	}
	function updateAttrs(dom, prev, attrs) {
	    if (prev)
	        for (let name in prev)
	            if (!(attrs && name in attrs))
	                dom.removeAttribute(name);
	    if (attrs)
	        for (let name in attrs)
	            if (!(prev && prev[name] == attrs[name]))
	                dom.setAttribute(name, attrs[name]);
	}

	const none$1$2 = [];
	class InlineView extends ContentView {
	    match(_other) { return false; }
	    get children() { return none$1$2; }
	    getSide() { return 0; }
	}
	const MaxJoinLen = 256;
	class TextView extends InlineView {
	    constructor(text, tagName, clss, attrs) {
	        super();
	        this.text = text;
	        this.tagName = tagName;
	        this.attrs = attrs;
	        this.textDOM = null;
	        this.class = clss;
	    }
	    get length() { return this.text.length; }
	    createDOM(textDOM) {
	        let tagName = this.tagName || (this.attrs || this.class ? "span" : null);
	        this.textDOM = textDOM || document.createTextNode(this.text);
	        if (tagName) {
	            let dom = document.createElement(tagName);
	            dom.appendChild(this.textDOM);
	            if (this.class)
	                dom.className = this.class;
	            if (this.attrs)
	                for (let name in this.attrs)
	                    dom.setAttribute(name, this.attrs[name]);
	            this.setDOM(dom);
	        }
	        else {
	            this.setDOM(this.textDOM);
	        }
	    }
	    sync() {
	        if (!this.dom)
	            this.createDOM();
	        if (this.textDOM.nodeValue != this.text) {
	            this.textDOM.nodeValue = this.text;
	            let dom = this.dom;
	            if (this.textDOM != dom && (this.dom.firstChild != this.textDOM || dom.lastChild != this.textDOM)) {
	                while (dom.firstChild)
	                    dom.removeChild(dom.firstChild);
	                dom.appendChild(this.textDOM);
	            }
	        }
	    }
	    reuseDOM(dom) {
	        if (dom.nodeType != 3)
	            return false;
	        this.createDOM(dom);
	        return true;
	    }
	    merge(from, to = this.length, source = null) {
	        if (source &&
	            (!(source instanceof TextView) ||
	                source.tagName != this.tagName || source.class != this.class ||
	                !attrsEq(source.attrs, this.attrs) || this.length - (to - from) + source.length > MaxJoinLen))
	            return false;
	        this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
	        this.markDirty();
	        return true;
	    }
	    slice(from, to = this.length) {
	        return new TextView(this.text.slice(from, to), this.tagName, this.class, this.attrs);
	    }
	    localPosFromDOM(node, offset) {
	        return node == this.textDOM ? offset : offset ? this.text.length : 0;
	    }
	    domAtPos(pos) { return new DOMPos(this.textDOM, pos); }
	    domBoundsAround(_from, _to, offset) {
	        return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
	    }
	    coordsAt(pos, side) {
	        return textCoords(this.textDOM, pos, side, this.length);
	    }
	}
	function textCoords(text, pos, side, length) {
	    let from = pos, to = pos;
	    if (pos == 0 && side < 0 || pos == length && side >= 0) {
	        if (!(browser$1.webkit || browser$1.gecko)) { // These browsers reliably return valid rectangles for empty ranges
	            if (pos)
	                from--;
	            else
	                to++;
	        }
	    }
	    else {
	        if (side < 0)
	            from--;
	        else
	            to++;
	    }
	    let range = document.createRange();
	    range.setEnd(text, to);
	    range.setStart(text, from);
	    return range.getBoundingClientRect();
	}
	// Also used for collapsed ranges that don't have a placeholder widget!
	class WidgetView extends InlineView {
	    constructor(widget, length, side, open) {
	        super();
	        this.widget = widget;
	        this.length = length;
	        this.side = side;
	        this.open = open;
	    }
	    static create(widget, length, side, open = 0) {
	        return new (widget.customView || WidgetView)(widget, length, side, open);
	    }
	    slice(from, to = this.length) { return WidgetView.create(this.widget, to - from, this.side); }
	    sync() {
	        if (!this.dom || !this.widget.updateDOM(this.dom)) {
	            this.setDOM(this.widget.toDOM(this.editorView));
	            this.dom.contentEditable = "false";
	        }
	    }
	    getSide() { return this.side; }
	    merge(from, to = this.length, source = null) {
	        if (source) {
	            if (!(source instanceof WidgetView) || !source.open ||
	                from > 0 && !(source.open & 1 /* Start */) ||
	                to < this.length && !(source.open & 2 /* End */))
	                return false;
	            if (!this.widget.compare(source.widget))
	                throw new Error("Trying to merge incompatible widgets");
	        }
	        this.length = from + (source ? source.length : 0) + (this.length - to);
	        return true;
	    }
	    match(other) {
	        if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
	            if (this.widget.constructor == other.widget.constructor) {
	                if (!this.widget.eq(other.widget.value))
	                    this.markDirty(true);
	                this.widget = other.widget;
	                return true;
	            }
	        }
	        return false;
	    }
	    ignoreMutation() { return true; }
	    ignoreEvent(event) { return this.widget.ignoreEvent(event); }
	    get overrideDOMText() {
	        if (this.length == 0)
	            return Text.empty;
	        let top = this;
	        while (top.parent)
	            top = top.parent;
	        let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
	        return text ? text.slice(start, start + this.length) : Text.empty;
	    }
	    domAtPos(pos) {
	        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
	    }
	    domBoundsAround() { return null; }
	    coordsAt(pos, _side) {
	        let rects = this.dom.getClientRects(), rect = null;
	        for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
	            rect = rects[i];
	            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
	                break;
	        }
	        return rect;
	    }
	}
	class CompositionView extends WidgetView {
	    domAtPos(pos) { return new DOMPos(this.widget.value.text, pos); }
	    sync() { if (!this.dom)
	        this.setDOM(this.widget.toDOM(this.editorView)); }
	    localPosFromDOM(node, offset) {
	        return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
	    }
	    ignoreMutation() { return false; }
	    get overrideDOMText() { return null; }
	    coordsAt(pos, side) { return textCoords(this.widget.value.text, pos, side, this.length); }
	}

	/// Widgets added to the content are described by subclasses of this
	/// class. This makes it possible to delay creating of the DOM
	/// structure for a widget until it is needed, and to avoid redrawing
	/// widgets even when the decorations that define them are recreated.
	/// `T` can be a type of value passed to instances of the widget type.
	class WidgetType {
	    /// Create an instance of this widget type.
	    constructor(
	    /// @internal
	    value) {
	        this.value = value;
	    }
	    /// Compare this instance to another instance of the same class. By
	    /// default, it'll compare the instances' parameters with `===`.
	    eq(value) { return this.value === value; }
	    /// Update a DOM element created by a widget of the same type but
	    /// with a different value to reflect this widget. May return true
	    /// to indicate that it could update, false to indicate it couldn't
	    /// (in which case the widget will be redrawn). The default
	    /// implementation just returns false.
	    updateDOM(_dom) { return false; }
	    /// @internal
	    compare(other) {
	        return this == other || this.constructor == other.constructor && this.eq(other.value);
	    }
	    /// The estimated height this widget will have, to be used when
	    /// estimating the height of content that hasn't been drawn. May
	    /// return -1 to indicate you don't know. The default implementation
	    /// returns -1.
	    get estimatedHeight() { return -1; }
	    /// Can be used to configure which kinds of events inside the widget
	    /// should be ignored by the editor. The default is to ignore all
	    /// events.
	    ignoreEvent(_event) { return true; }
	    //// @internal
	    get customView() { return null; }
	}
	/// The different types of blocks that can occur in an editor view.
	var BlockType;
	(function (BlockType) {
	    /// A line of text.
	    BlockType[BlockType["Text"] = 0] = "Text";
	    /// A block widget associated with the position after it.
	    BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
	    /// A block widget associated with the position before it.
	    BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
	    /// A block widget [replacing](#view.Decoration^replace) a range of content.
	    BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
	})(BlockType || (BlockType = {}));
	/// A decoration provides information on how to draw or style a piece
	/// of content. You'll usually use it wrapped in a
	/// [`Range`](#rangeset.Range), which adds a start and
	/// end position.
	class Decoration extends RangeValue {
	    /// @internal
	    constructor(
	    /// @internal
	    startSide, 
	    /// @internal
	    endSide, 
	    /// @internal
	    widget, 
	    /// The config object used to create this decoration.
	    spec) {
	        super();
	        this.startSide = startSide;
	        this.endSide = endSide;
	        this.widget = widget;
	        this.spec = spec;
	    }
	    /// @internal
	    get point() { return false; }
	    /// @internal
	    get heightRelevant() { return false; }
	    /// Create a mark decoration, which influences the styling of the
	    /// text in its range.
	    static mark(spec) {
	        return new MarkDecoration(spec);
	    }
	    /// Create a widget decoration, which adds an element at the given
	    /// position.
	    static widget(spec) {
	        let side = spec.side || 0;
	        if (spec.block)
	            side += (200000000 /* BigBlock */ + 1) * (side > 0 ? 1 : -1);
	        return new PointDecoration(spec, side, side, !!spec.block, spec.widget || null, false);
	    }
	    /// Create a replace decoration which replaces the given range with
	    /// a widget, or simply hides it.
	    static replace(spec) {
	        let block = !!spec.block;
	        let { start, end } = getInclusive(spec);
	        let startSide = block ? -200000000 /* BigBlock */ * (start ? 2 : 1) : 100000000 /* BigInline */ * (start ? -1 : 1);
	        let endSide = block ? 200000000 /* BigBlock */ * (end ? 2 : 1) : 100000000 /* BigInline */ * (end ? 1 : -1);
	        return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
	    }
	    /// Create a line decoration, which can add DOM attributes to the
	    /// line starting at the given position.
	    static line(spec) {
	        return new LineDecoration(spec);
	    }
	    /// Build a [`DecorationSet`](#view.DecorationSet) from the given
	    /// decorated range or ranges.
	    static set(of, sort = false) {
	        return RangeSet.of(of, sort);
	    }
	    /// @internal
	    hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
	}
	/// The empty set of decorations.
	Decoration.none = RangeSet.empty;
	class MarkDecoration extends Decoration {
	    constructor(spec) {
	        let { start, end } = getInclusive(spec);
	        super(100000000 /* BigInline */ * (start ? -1 : 1), 100000000 /* BigInline */ * (end ? 1 : -1), null, spec);
	    }
	    eq(other) {
	        return this == other ||
	            other instanceof MarkDecoration &&
	                this.spec.tagName == other.spec.tagName &&
	                this.spec.class == other.spec.class &&
	                attrsEq(this.spec.attributes || null, other.spec.attributes || null);
	    }
	    range(from, to = from) {
	        if (from >= to)
	            throw new RangeError("Mark decorations may not be empty");
	        return super.range(from, to);
	    }
	}
	class LineDecoration extends Decoration {
	    constructor(spec) {
	        super(-100000000 /* BigInline */, -100000000 /* BigInline */, null, spec);
	    }
	    get point() { return true; }
	    eq(other) {
	        return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
	    }
	    range(from, to = from) {
	        if (to != from)
	            throw new RangeError("Line decoration ranges must be zero-length");
	        return super.range(from, to);
	    }
	}
	LineDecoration.prototype.mapMode = MapMode.TrackBefore;
	class PointDecoration extends Decoration {
	    constructor(spec, startSide, endSide, block, widget, isReplace) {
	        super(startSide, endSide, widget, spec);
	        this.block = block;
	        this.isReplace = isReplace;
	        this.mapMode = !block ? MapMode.TrackDel : startSide < 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
	    }
	    get point() { return true; }
	    // Only relevant when this.block == true
	    get type() {
	        return this.startSide < this.endSide ? BlockType.WidgetRange
	            : this.startSide < 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
	    }
	    get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
	    eq(other) {
	        return other instanceof PointDecoration &&
	            widgetsEq(this.widget, other.widget) &&
	            this.block == other.block &&
	            this.startSide == other.startSide && this.endSide == other.endSide;
	    }
	    range(from, to = from) {
	        if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide < 0)))
	            throw new RangeError("Invalid range for replacement decoration");
	        if (!this.isReplace && to != from)
	            throw new RangeError("Widget decorations can only create zero-length ranges");
	        return super.range(from, to);
	    }
	}
	function getInclusive(spec) {
	    let { inclusiveStart: start, inclusiveEnd: end } = spec;
	    if (start == null)
	        start = spec.inclusive;
	    if (end == null)
	        end = spec.inclusive;
	    return { start: start || false, end: end || false };
	}
	function widgetsEq(a, b) {
	    return a == b || !!(a && b && a.compare(b));
	}
	const MinRangeGap = 4;
	function addRange(from, to, ranges) {
	    let last = ranges.length - 1;
	    if (last >= 0 && ranges[last] + MinRangeGap > from)
	        ranges[last] = Math.max(ranges[last], to);
	    else
	        ranges.push(from, to);
	}

	const theme = Facet.define();
	const darkTheme = Facet.define({ combine: values => values.indexOf(true) > -1 });
	const baseThemeID = StyleModule.newName();
	const baseLightThemeID = StyleModule.newName();
	const baseDarkThemeID = StyleModule.newName();
	function buildTheme(mainID, spec) {
	    let styles = Object.create(null);
	    for (let prop in spec) {
	        let selector = prop.split(/\s*,\s*/).map(piece => {
	            let id = mainID, narrow;
	            if (id == baseThemeID && (narrow = /^(.*?)@(light|dark)$/.exec(piece))) {
	                id = narrow[2] == "dark" ? baseDarkThemeID : baseLightThemeID;
	                piece = narrow[1];
	            }
	            let parts = piece.split("."), selector = "." + id + (parts[0] == "wrap" ? "" : " ");
	            for (let i = 1; i <= parts.length; i++)
	                selector += ".cm-" + parts.slice(0, i).join("-");
	            return selector;
	        }).join(", ");
	        styles[selector] = spec[prop];
	    }
	    return new StyleModule(styles, { generateClasses: false });
	}
	/// Create a set of CSS class names for the given theme selector,
	/// which can be added to a DOM element within an editor to make
	/// themes able to style it. Theme selectors can be single words or
	/// words separated by dot characters. In the latter case, the
	/// returned classes combine those that match the full name and those
	/// that match some prefix—for example `"panel.search"` will match
	/// both the theme styles specified as `"panel.search"` and those with
	/// just `"panel"`. More specific theme styles (with more dots) take
	/// precedence.
	function themeClass(selector) {
	    let parts = selector.split("."), result = "";
	    for (let i = 1; i <= parts.length; i++)
	        result += (result ? " " : "") + "cm-" + parts.slice(0, i).join("-");
	    return result;
	}
	const baseTheme = buildTheme(baseThemeID, {
	    wrap: {
	        position: "relative !important",
	        boxSizing: "border-box",
	        "&.cm-focused": {
	            // FIXME it would be great if we could directly use the browser's
	            // default focus outline, but it appears we can't, so this tries to
	            // approximate that
	            outline_fallback: "1px dotted #212121",
	            outline: "5px auto -webkit-focus-ring-color"
	        },
	        display: "flex !important",
	        flexDirection: "column"
	    },
	    scroller: {
	        display: "flex !important",
	        alignItems: "flex-start !important",
	        fontFamily: "monospace",
	        lineHeight: 1.4,
	        height: "100%",
	        overflowX: "auto"
	    },
	    content: {
	        margin: 0,
	        flexGrow: 2,
	        minHeight: "100%",
	        display: "block",
	        whiteSpace: "pre",
	        boxSizing: "border-box",
	        padding: "4px 0",
	        outline: "none"
	    },
	    "content@light": { caretColor: "black" },
	    "content@dark": { caretColor: "white" },
	    line: {
	        display: "block",
	        padding: "0 2px 0 4px"
	    }
	});

	const LineClass = themeClass("line");
	class LineView extends ContentView {
	    constructor() {
	        super(...arguments);
	        this.children = [];
	        this.length = 0;
	        this.prevAttrs = undefined;
	        this.attrs = null;
	        this.breakAfter = 0;
	    }
	    // Consumes source
	    merge(from, to, source, takeDeco) {
	        if (source) {
	            if (!(source instanceof LineView))
	                return false;
	            if (!this.dom)
	                source.transferDOM(this); // Reuse source.dom when appropriate
	        }
	        if (takeDeco)
	            this.setDeco(source ? source.attrs : null);
	        let elts = source ? source.children : [];
	        let cur = this.childCursor();
	        let { i: toI, off: toOff } = cur.findPos(to, 1);
	        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
	        let dLen = from - to;
	        for (let view of elts)
	            dLen += view.length;
	        this.length += dLen;
	        // Both from and to point into the same text view
	        if (fromI == toI && fromOff) {
	            let start = this.children[fromI];
	            // Maybe just update that view and be done
	            if (elts.length == 1 && start.merge(fromOff, toOff, elts[0]))
	                return true;
	            if (elts.length == 0) {
	                start.merge(fromOff, toOff, null);
	                return true;
	            }
	            // Otherwise split it, so that we don't have to worry about aliasing front/end afterwards
	            let after = start.slice(toOff);
	            if (after.merge(0, 0, elts[elts.length - 1]))
	                elts[elts.length - 1] = after;
	            else
	                elts.push(after);
	            toI++;
	            toOff = 0;
	        }
	        // Make sure start and end positions fall on node boundaries
	        // (fromOff/toOff are no longer used after this), and that if the
	        // start or end of the elts can be merged with adjacent nodes,
	        // this is done
	        if (toOff) {
	            let end = this.children[toI];
	            if (elts.length && end.merge(0, toOff, elts[elts.length - 1]))
	                elts.pop();
	            else
	                end.merge(0, toOff, null);
	        }
	        else if (toI < this.children.length && elts.length &&
	            this.children[toI].merge(0, 0, elts[elts.length - 1])) {
	            elts.pop();
	        }
	        if (fromOff) {
	            let start = this.children[fromI];
	            if (elts.length && start.merge(fromOff, undefined, elts[0]))
	                elts.shift();
	            else
	                start.merge(fromOff, undefined, null);
	            fromI++;
	        }
	        else if (fromI && elts.length && this.children[fromI - 1].merge(this.children[fromI - 1].length, undefined, elts[0])) {
	            elts.shift();
	        }
	        // Then try to merge any mergeable nodes at the start and end of
	        // the changed range
	        while (fromI < toI && elts.length && this.children[toI - 1].match(elts[elts.length - 1])) {
	            elts.pop();
	            toI--;
	        }
	        while (fromI < toI && elts.length && this.children[fromI].match(elts[0])) {
	            elts.shift();
	            fromI++;
	        }
	        // And if anything remains, splice the child array to insert the new elts
	        if (elts.length || fromI != toI)
	            this.replaceChildren(fromI, toI, elts);
	        return true;
	    }
	    split(at) {
	        let end = new LineView;
	        end.breakAfter = this.breakAfter;
	        if (this.length == 0)
	            return end;
	        let { i, off } = this.childPos(at);
	        if (off) {
	            end.append(this.children[i].slice(off));
	            this.children[i].merge(off, undefined, null);
	            i++;
	        }
	        for (let j = i; j < this.children.length; j++)
	            end.append(this.children[j]);
	        while (i > 0 && this.children[i - 1].length == 0) {
	            this.children[i - 1].parent = null;
	            i--;
	        }
	        this.children.length = i;
	        this.markDirty();
	        this.length = at;
	        return end;
	    }
	    transferDOM(other) {
	        if (!this.dom)
	            return;
	        other.setDOM(this.dom);
	        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
	        this.prevAttrs = undefined;
	        this.dom = null;
	    }
	    setDeco(attrs) {
	        if (!attrsEq(this.attrs, attrs)) {
	            if (this.dom) {
	                this.prevAttrs = this.attrs;
	                this.markDirty();
	            }
	            this.attrs = attrs;
	        }
	    }
	    // Only called when building a line view in ContentBuilder
	    append(child) {
	        this.children.push(child);
	        child.setParent(this);
	        this.length += child.length;
	    }
	    // Only called when building a line view in ContentBuilder
	    addLineDeco(deco) {
	        let attrs = deco.spec.attributes;
	        if (attrs)
	            this.attrs = combineAttrs(attrs, this.attrs || {});
	    }
	    domAtPos(pos) {
	        let i = 0;
	        for (let off = 0; i < this.children.length; i++) {
	            let child = this.children[i], end = off + child.length;
	            if (end == off && child.getSide() <= 0)
	                continue;
	            if (pos > off && pos < end && child.dom.parentNode == this.dom)
	                return child.domAtPos(pos - off);
	            if (pos <= off)
	                break;
	            off = end;
	        }
	        for (; i > 0; i--) {
	            let before = this.children[i - 1].dom;
	            if (before.parentNode == this.dom)
	                return DOMPos.after(before);
	        }
	        return new DOMPos(this.dom, 0);
	    }
	    // FIXME might need another hack to work around Firefox's behavior
	    // of not actually displaying the cursor even though it's there in
	    // the DOM
	    sync() {
	        if (!this.dom) {
	            this.setDOM(document.createElement("div"));
	            this.dom.className = LineClass;
	            this.prevAttrs = this.attrs ? null : undefined;
	        }
	        if (this.prevAttrs !== undefined) {
	            updateAttrs(this.dom, this.prevAttrs, this.attrs);
	            this.dom.classList.add(LineClass);
	            this.prevAttrs = undefined;
	        }
	        super.sync();
	        let last = this.dom.lastChild;
	        if (!last || (last.nodeName != "BR" && !(ContentView.get(last) instanceof TextView))) {
	            let hack = document.createElement("BR");
	            hack.cmIgnore = true;
	            this.dom.appendChild(hack);
	        }
	    }
	    measureTextSize() {
	        if (this.children.length == 0 || this.length > 20)
	            return null;
	        let totalWidth = 0;
	        for (let child of this.children) {
	            if (!(child instanceof TextView))
	                return null;
	            let rects = clientRectsFor(child.dom);
	            if (rects.length != 1)
	                return null;
	            totalWidth += rects[0].width;
	        }
	        return { lineHeight: this.dom.getBoundingClientRect().height,
	            charWidth: totalWidth / this.length };
	    }
	    coordsAt(pos, side) {
	        for (let off = 0, i = 0; i < this.children.length; i++) {
	            let child = this.children[i], end = off + child.length;
	            if (end != off && (side <= 0 || end == this.length ? end >= pos : end > pos))
	                return child.coordsAt(pos - off, side);
	            off = end;
	        }
	        return this.dom.lastChild.getBoundingClientRect();
	    }
	    match(_other) { return false; }
	    get type() { return BlockType.Text; }
	    static find(docView, pos) {
	        for (let i = 0, off = 0;; i++) {
	            let block = docView.children[i], end = off + block.length;
	            if (end >= pos) {
	                if (block instanceof LineView)
	                    return block;
	                if (block.length)
	                    return null;
	            }
	            off = end + block.breakAfter;
	        }
	    }
	}
	const none$2$1 = [];
	class BlockWidgetView extends ContentView {
	    constructor(widget, length, type, 
	    // This is set by the builder and used to distinguish between
	    // adjacent widgets and parts of the same widget when calling
	    // `merge`. It's kind of silly that it's an instance variable, but
	    // it's hard to route there otherwise.
	    open = 0) {
	        super();
	        this.widget = widget;
	        this.length = length;
	        this.type = type;
	        this.open = open;
	        this.breakAfter = 0;
	    }
	    merge(from, to, source) {
	        if (!(source instanceof BlockWidgetView) || !source.open ||
	            from > 0 && !(source.open & 1 /* Start */) ||
	            to < this.length && !(source.open & 2 /* End */))
	            return false;
	        if (!this.widget.compare(source.widget))
	            throw new Error("Trying to merge an open widget with an incompatible node");
	        this.length = from + source.length + (this.length - to);
	        return true;
	    }
	    domAtPos(pos) {
	        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
	    }
	    split(at) {
	        let len = this.length - at;
	        this.length = at;
	        return new BlockWidgetView(this.widget, len, this.type);
	    }
	    get children() { return none$2$1; }
	    sync() {
	        if (!this.dom || !this.widget.updateDOM(this.dom)) {
	            this.setDOM(this.widget.toDOM(this.editorView));
	            this.dom.contentEditable = "false";
	        }
	    }
	    get overrideDOMText() {
	        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
	    }
	    domBoundsAround() { return null; }
	    match(other) {
	        if (other instanceof BlockWidgetView && other.type == this.type &&
	            other.widget.constructor == this.widget.constructor) {
	            if (!other.widget.eq(this.widget.value))
	                this.markDirty(true);
	            this.widget = other.widget;
	            this.length = other.length;
	            this.breakAfter = other.breakAfter;
	            return true;
	        }
	        return false;
	    }
	}

	class ContentBuilder {
	    constructor(doc, pos, end) {
	        this.doc = doc;
	        this.pos = pos;
	        this.end = end;
	        this.content = [];
	        this.curLine = null;
	        this.breakAtStart = 0;
	        this.text = "";
	        this.textOff = 0;
	        this.cursor = doc.iter();
	        this.skip = pos;
	    }
	    posCovered() {
	        if (this.content.length == 0)
	            return !this.breakAtStart && this.doc.lineAt(this.pos).start != this.pos;
	        let last = this.content[this.content.length - 1];
	        return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
	    }
	    getLine() {
	        if (!this.curLine)
	            this.content.push(this.curLine = new LineView);
	        return this.curLine;
	    }
	    addWidget(view) {
	        this.curLine = null;
	        this.content.push(view);
	    }
	    finish() {
	        if (!this.posCovered())
	            this.getLine();
	    }
	    buildText(length, tagName, clss, attrs, _ranges) {
	        while (length > 0) {
	            if (this.textOff == this.text.length) {
	                let { value, lineBreak, done } = this.cursor.next(this.skip);
	                this.skip = 0;
	                if (done)
	                    throw new Error("Ran out of text content when drawing inline views");
	                if (lineBreak) {
	                    if (!this.posCovered())
	                        this.getLine();
	                    if (this.content.length)
	                        this.content[this.content.length - 1].breakAfter = 1;
	                    else
	                        this.breakAtStart = 1;
	                    this.curLine = null;
	                    length--;
	                    continue;
	                }
	                else {
	                    this.text = value;
	                    this.textOff = 0;
	                }
	            }
	            let take = Math.min(this.text.length - this.textOff, length);
	            this.getLine().append(new TextView(this.text.slice(this.textOff, this.textOff + take), tagName, clss, attrs));
	            length -= take;
	            this.textOff += take;
	        }
	    }
	    span(from, to, active) {
	        let tagName = null, clss = null;
	        let attrs = null;
	        for (let { spec } of active) {
	            if (spec.tagName)
	                tagName = spec.tagName;
	            if (spec.class)
	                clss = clss ? clss + " " + spec.class : spec.class;
	            if (spec.attributes)
	                for (let name in spec.attributes) {
	                    let value = spec.attributes[name];
	                    if (value == null)
	                        continue;
	                    if (name == "class") {
	                        clss = clss ? clss + " " + value : value;
	                    }
	                    else {
	                        if (!attrs)
	                            attrs = {};
	                        if (name == "style" && attrs.style)
	                            value = attrs.style + ";" + value;
	                        attrs[name] = value;
	                    }
	                }
	        }
	        this.buildText(to - from, tagName, clss, attrs, active);
	        this.pos = to;
	    }
	    point(from, to, deco, openStart, openEnd) {
	        let open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);
	        let len = to - from;
	        if (deco instanceof PointDecoration) {
	            if (deco.block) {
	                let { type } = deco;
	                if (type == BlockType.WidgetAfter && !this.posCovered())
	                    this.getLine();
	                this.addWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type, open));
	            }
	            else {
	                this.getLine().append(WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide, open));
	            }
	        }
	        else if (this.doc.lineAt(this.pos).start == this.pos) { // Line decoration
	            this.getLine().addLineDeco(deco);
	        }
	        if (len) {
	            // Advance the iterator past the replaced content
	            if (this.textOff + len <= this.text.length) {
	                this.textOff += len;
	            }
	            else {
	                this.skip += len - (this.text.length - this.textOff);
	                this.text = "";
	                this.textOff = 0;
	            }
	            this.pos = to;
	        }
	    }
	    static build(text, from, to, decorations) {
	        let builder = new ContentBuilder(text, from, to);
	        RangeSet.spans(decorations, from, to, builder);
	        builder.finish();
	        return builder;
	    }
	}
	class NullWidget extends WidgetType {
	    toDOM() { return document.createElement(this.value); }
	    updateDOM(elt) { return elt.nodeName.toLowerCase() == this.value; }
	}

	/// Used to indicate [text direction](#view.EditorView.textDirection).
	var Direction;
	(function (Direction) {
	    // (These are chosen to match the base levels, in bidi algorithm
	    // terms, of spans in that direction.)
	    Direction[Direction["LTR"] = 0] = "LTR";
	    Direction[Direction["RTL"] = 1] = "RTL";
	})(Direction || (Direction = {}));
	const LTR = Direction.LTR, RTL = Direction.RTL;
	// Decode a string with each type encoded as log2(type)
	function dec$1(str) {
	    let result = [];
	    for (let i = 0; i < str.length; i++)
	        result.push(1 << +str[i]);
	    return result;
	}
	// Character types for codepoints 0 to 0xf8
	const LowTypes = dec$1("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
	// Character types for codepoints 0x600 to 0x6f9
	const ArabicTypes = dec$1("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
	function charType(ch) {
	    return ch <= 0xf7 ? LowTypes[ch] :
	        0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :
	            0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
	                0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :
	                    0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :
	                        ch == 0x200c ? 256 /* NI */ : 1 /* L */;
	}
	const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
	class BidiSpan {
	    constructor(from, to, level) {
	        this.from = from;
	        this.to = to;
	        this.level = level;
	    }
	    get dir() { return this.level % 2 ? RTL : LTR; }
	    side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
	    static find(order, index, level, assoc) {
	        let maybe = -1;
	        for (let i = 0; i < order.length; i++) {
	            let span = order[i];
	            if (span.from <= index && span.to >= index) {
	                if (span.level == level)
	                    return i;
	                // When multiple spans match, if assoc != 0, take the one that
	                // covers that side, otherwise take the one with the minimum
	                // level.
	                if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
	                    maybe = i;
	            }
	        }
	        if (maybe < 0)
	            throw new RangeError("Index out of range");
	        return maybe;
	    }
	}
	// Reused array of character types
	const types = [];
	function computeOrder(line, direction) {
	    let len = line.length, outerType = direction == LTR ? 1 /* L */ : 2 /* R */;
	    if (!line || outerType == 1 /* L */ && !BidiRE.test(line))
	        return trivialOrder(len);
	    // W1. Examine each non-spacing mark (NSM) in the level run, and
	    // change the type of the NSM to the type of the previous
	    // character. If the NSM is at the start of the level run, it will
	    // get the type of sor.
	    // W2. Search backwards from each instance of a European number
	    // until the first strong type (R, L, AL, or sor) is found. If an
	    // AL is found, change the type of the European number to Arabic
	    // number.
	    // W3. Change all ALs to R.
	    // (Left after this: L, R, EN, AN, ET, CS, NI)
	    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
	        let type = charType(line.charCodeAt(i));
	        if (type == 512 /* NSM */)
	            type = prev;
	        else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)
	            type = 16 /* AN */;
	        types[i] = type == 4 /* AL */ ? 2 /* R */ : type;
	        if (type & 7 /* Strong */)
	            prevStrong = type;
	        prev = type;
	    }
	    // W5. A sequence of European terminators adjacent to European
	    // numbers changes to all European numbers.
	    // W6. Otherwise, separators and terminators change to Other
	    // Neutral.
	    // W7. Search backwards from each instance of a European number
	    // until the first strong type (R, L, or sor) is found. If an L is
	    // found, then change the type of the European number to L.
	    // (Left after this: L, R, EN+AN, NI)
	    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
	        let type = types[i];
	        if (type == 128 /* CS */) {
	            if (i < len - 1 && prev == types[i + 1] && (prev & 24 /* Num */))
	                type = types[i] = prev;
	            else
	                types[i] = 256 /* NI */;
	        }
	        else if (type == 64 /* ET */) {
	            let end = i + 1;
	            while (end < len && types[end] == 64 /* ET */)
	                end++;
	            let replace = (i && prev == 8 /* EN */) || (end < len && types[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;
	            for (let j = i; j < end; j++)
	                types[j] = replace;
	            i = end - 1;
	        }
	        else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {
	            types[i] = 1 /* L */;
	        }
	        prev = type;
	        if (type & 7 /* Strong */)
	            prevStrong = type;
	    }
	    // N1. A sequence of neutrals takes the direction of the
	    // surrounding strong text if the text on both sides has the same
	    // direction. European and Arabic numbers act as if they were R in
	    // terms of their influence on neutrals. Start-of-level-run (sor)
	    // and end-of-level-run (eor) are used at level run boundaries.
	    // N2. Any remaining neutrals take the embedding direction.
	    // (Left after this: L, R, EN+AN)
	    for (let i = 0; i < len; i++) {
	        if (types[i] == 256 /* NI */) {
	            let end = i + 1;
	            while (end < len && types[end] == 256 /* NI */)
	                end++;
	            let beforeL = (i ? types[i - 1] : outerType) == 1 /* L */;
	            let afterL = (end < len ? types[end] : outerType) == 1 /* L */;
	            let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;
	            for (let j = i; j < end; j++)
	                types[j] = replace;
	            i = end - 1;
	        }
	    }
	    // Here we depart from the documented algorithm, in order to avoid
	    // building up an actual levels array. Since there are only three
	    // levels (0, 1, 2) in an implementation that doesn't take
	    // explicit embedding into account, we can build up the order on
	    // the fly, without following the level-based algorithm.
	    let order = [];
	    if (outerType == 1 /* L */) {
	        for (let i = 0; i < len;) {
	            let start = i, rtl = types[i++] != 1 /* L */;
	            while (i < len && rtl == (types[i] != 1 /* L */))
	                i++;
	            if (rtl) {
	                for (let j = i; j > start;) {
	                    let end = j, l = types[--j] != 2 /* R */;
	                    while (j > start && l == (types[j - 1] != 2 /* R */))
	                        j--;
	                    order.push(new BidiSpan(j, end, l ? 2 : 1));
	                }
	            }
	            else {
	                order.push(new BidiSpan(start, i, 0));
	            }
	        }
	    }
	    else {
	        for (let i = 0; i < len;) {
	            let start = i, rtl = types[i++] == 2 /* R */;
	            while (i < len && rtl == (types[i] == 2 /* R */))
	                i++;
	            order.push(new BidiSpan(start, i, rtl ? 1 : 2));
	        }
	    }
	    return order;
	}
	function trivialOrder(length) {
	    return [new BidiSpan(0, length, 0)];
	}
	let movedOver = "";
	function moveVisually(line, order, dir, start, forward) {
	    var _a;
	    let startIndex = start.head - line.start, spanI = -1;
	    if (startIndex == 0) {
	        if (!forward || !line.length)
	            return null;
	        if (order[0].level != dir) {
	            startIndex = order[0].side(false, dir);
	            spanI = 0;
	        }
	    }
	    else if (startIndex == line.length) {
	        if (forward)
	            return null;
	        let last = order[order.length - 1];
	        if (last.level != dir) {
	            startIndex = last.side(true, dir);
	            spanI = order.length - 1;
	        }
	    }
	    if (spanI < 0)
	        spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
	    let span = order[spanI];
	    // End of span. (But not end of line--that was checked for above.)
	    if (startIndex == span.side(forward, dir)) {
	        span = order[spanI += forward ? 1 : -1];
	        startIndex = span.side(!forward, dir);
	    }
	    let indexForward = forward == (span.dir == dir);
	    let nextIndex = line.findClusterBreak(startIndex, indexForward);
	    movedOver = line.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
	    if (nextIndex != span.side(forward, dir))
	        return EditorSelection.cursor(nextIndex + line.start, indexForward ? -1 : 1, span.level);
	    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
	    if (!nextSpan && span.level != dir)
	        return EditorSelection.cursor(forward ? line.end : line.start, forward ? -1 : 1, dir);
	    if (nextSpan && nextSpan.level < span.level)
	        return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.start, 0, nextSpan.level);
	    return EditorSelection.cursor(nextIndex + line.start, 0, span.level);
	}

	const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line"];
	class HeightOracle {
	    constructor() {
	        this.doc = Text.empty;
	        this.lineWrapping = false;
	        this.direction = Direction.LTR;
	        this.heightSamples = {};
	        this.lineHeight = 14;
	        this.charWidth = 7;
	        this.lineLength = 30;
	        // Used to track, during updateHeight, if any actual heights changed
	        this.heightChanged = false;
	    }
	    heightForGap(from, to) {
	        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
	        if (this.lineWrapping)
	            lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
	        return this.lineHeight * lines;
	    }
	    heightForLine(length) {
	        if (!this.lineWrapping)
	            return this.lineHeight;
	        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
	        return lines * this.lineHeight;
	    }
	    setDoc(doc) { this.doc = doc; return this; }
	    mustRefresh(lineHeights, whiteSpace, direction) {
	        let newHeight = false;
	        for (let i = 0; i < lineHeights.length; i++) {
	            let h = lineHeights[i];
	            if (h < 0) {
	                i++;
	            }
	            else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
	                newHeight = true;
	                this.heightSamples[Math.floor(h * 10)] = true;
	            }
	        }
	        return newHeight || (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping || this.direction != direction;
	    }
	    refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
	        let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
	        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) ||
	            this.lineWrapping != lineWrapping ||
	            this.direction != direction;
	        this.lineWrapping = lineWrapping;
	        this.direction = direction;
	        this.lineHeight = lineHeight;
	        this.charWidth = charWidth;
	        this.lineLength = lineLength;
	        if (changed) {
	            this.heightSamples = {};
	            for (let i = 0; i < knownHeights.length; i++) {
	                let h = knownHeights[i];
	                if (h < 0)
	                    i++;
	                else
	                    this.heightSamples[Math.floor(h * 10)] = true;
	            }
	        }
	        return changed;
	    }
	}
	// This object is used by `updateHeight` to make DOM measurements
	// arrive at the right nides. The `heights` array is a sequence of
	// block heights, starting from position `from`.
	class MeasuredHeights {
	    constructor(from, heights) {
	        this.from = from;
	        this.heights = heights;
	        this.index = 0;
	    }
	    get more() { return this.index < this.heights.length; }
	}
	/// Record used to represent information about a block-level element
	/// in the editor view.
	class BlockInfo {
	    /// @internal
	    constructor(
	    /// The start of the element in the document.
	    from, 
	    /// The length of the element.
	    length, 
	    /// The top position of the element.
	    top, 
	    /// Its height.
	    height, 
	    /// The type of element this is. When querying lines, this may be
	    /// an array of all the blocks that make up the line.
	    type) {
	        this.from = from;
	        this.length = length;
	        this.top = top;
	        this.height = height;
	        this.type = type;
	    }
	    /// The end of the element as a document position.
	    get to() { return this.from + this.length; }
	    /// The bottom position of the element.
	    get bottom() { return this.top + this.height; }
	    /// @internal
	    join(other) {
	        let detail = (Array.isArray(this.type) ? this.type : [this])
	            .concat(Array.isArray(other.type) ? other.type : [other]);
	        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
	    }
	}
	var QueryType;
	(function (QueryType) {
	    QueryType[QueryType["ByPos"] = 0] = "ByPos";
	    QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
	    QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
	})(QueryType || (QueryType = {}));
	const Epsilon = 1e-10;
	class HeightMap {
	    constructor(length, // The number of characters covered
	    height, // Height of this part of the document
	    flags = 2 /* Outdated */) {
	        this.length = length;
	        this.height = height;
	        this.flags = flags;
	    }
	    get outdated() { return (this.flags & 2 /* Outdated */) > 0; }
	    set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }
	    setHeight(oracle, height) {
	        if (this.height != height) {
	            if (Math.abs(this.height - height) > Epsilon)
	                oracle.heightChanged = true;
	            this.height = height;
	        }
	    }
	    // Base case is to replace a leaf node, which simply builds a tree
	    // from the new nodes and returns that (HeightMapBranch and
	    // HeightMapGap override this to actually use from/to)
	    replace(_from, _to, nodes, _doc) {
	        return HeightMap.of(nodes);
	    }
	    // Again, these are base cases, and are overridden for branch and gap nodes.
	    decomposeLeft(_to, result) { result.push(this); }
	    decomposeRight(_from, result) { result.push(this); }
	    applyChanges(decorations, oldDoc, oracle, changes) {
	        let me = this;
	        for (let i = changes.length - 1; i >= 0; i--) {
	            let { fromA, toA, fromB, toB } = changes[i];
	            let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
	            let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
	            toB += end.to - toA;
	            toA = end.to;
	            while (i > 0 && start.from <= changes[i - 1].toA) {
	                fromA = changes[i - 1].fromA;
	                fromB = changes[i - 1].fromB;
	                i--;
	                if (fromA < start.from)
	                    start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
	            }
	            fromB += start.from - fromA;
	            fromA = start.from;
	            let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
	            me = me.replace(fromA, toA, nodes, oracle.doc);
	        }
	        return me.updateHeight(oracle, 0);
	    }
	    static empty() { return new HeightMapText(0, 0); }
	    // nodes uses null values to indicate the position of line breaks.
	    // There are never line breaks at the start or end of the array, or
	    // two line breaks next to each other, and the array isn't allowed
	    // to be empty (same restrictions as return value from the builder).
	    static of(nodes) {
	        if (nodes.length == 1)
	            return nodes[0];
	        let i = 0, j = nodes.length, before = 0, after = 0;
	        for (;;) {
	            if (i == j) {
	                if (before > after * 2) {
	                    let split = nodes[i - 1];
	                    if (split.break)
	                        nodes.splice(--i, 1, split.left, null, split.right);
	                    else
	                        nodes.splice(--i, 1, split.left, split.right);
	                    j += 1 + split.break;
	                    before -= split.size;
	                }
	                else if (after > before * 2) {
	                    let split = nodes[j];
	                    if (split.break)
	                        nodes.splice(j, 1, split.left, null, split.right);
	                    else
	                        nodes.splice(j, 1, split.left, split.right);
	                    j += 2 + split.break;
	                    after -= split.size;
	                }
	                else {
	                    break;
	                }
	            }
	            else if (before < after) {
	                let next = nodes[i++];
	                if (next)
	                    before += next.size;
	            }
	            else {
	                let next = nodes[--j];
	                if (next)
	                    after += next.size;
	            }
	        }
	        let brk = 0;
	        if (nodes[i - 1] == null) {
	            brk = 1;
	            i--;
	        }
	        else if (nodes[i] == null) {
	            brk = 1;
	            j++;
	        }
	        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
	    }
	}
	HeightMap.prototype.size = 1;
	class HeightMapBlock extends HeightMap {
	    constructor(length, height, type) {
	        super(length, height);
	        this.type = type;
	    }
	    blockAt(_height, _doc, top, offset) {
	        return new BlockInfo(offset, this.length, top, this.height, this.type);
	    }
	    lineAt(_value, _type, doc, top, offset) {
	        return this.blockAt(0, doc, top, offset);
	    }
	    forEachLine(_from, _to, doc, top, offset, f) {
	        f(this.blockAt(0, doc, top, offset));
	    }
	    updateHeight(oracle, offset = 0, _force = false, measured) {
	        if (measured && measured.from <= offset && measured.more)
	            this.setHeight(oracle, measured.heights[measured.index++]);
	        this.outdated = false;
	        return this;
	    }
	    toString() { return `block(${this.length})`; }
	}
	class HeightMapText extends HeightMapBlock {
	    constructor(length, height) {
	        super(length, height, BlockType.Text);
	        this.collapsed = 0; // Amount of collapsed content in the line
	        this.widgetHeight = 0; // Maximum inline widget height
	    }
	    replace(from, _to, nodes, doc) {
	        if (nodes.length == 1 && Math.abs(this.length - nodes[0].length) < 10 &&
	            (nodes[0] instanceof HeightMapText || nodes[0] instanceof HeightMapGap && doc.lineAt(from).length == nodes[0].length)) {
	            let node = nodes[0];
	            if (node instanceof HeightMapGap)
	                node = new HeightMapText(node.length, this.height);
	            else
	                node.height = this.height;
	            return node;
	        }
	        else {
	            return HeightMap.of(nodes);
	        }
	    }
	    updateHeight(oracle, offset = 0, force = false, measured) {
	        if (measured && measured.from <= offset && measured.more)
	            this.setHeight(oracle, measured.heights[measured.index++]);
	        else if (force || this.outdated)
	            this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
	        this.outdated = false;
	        return this;
	    }
	    toString() {
	        return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
	    }
	}
	class HeightMapGap extends HeightMap {
	    constructor(length) { super(length, 0); }
	    lines(doc, offset) {
	        let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
	        return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
	    }
	    blockAt(height, doc, top, offset) {
	        let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
	        let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
	        let { start, length } = doc.line(firstLine + line);
	        return new BlockInfo(start, length, top + lineHeight * line, lineHeight, BlockType.Text);
	    }
	    lineAt(value, type, doc, top, offset) {
	        if (type == QueryType.ByHeight)
	            return this.blockAt(value, doc, top, offset);
	        if (type == QueryType.ByPosNoHeight) {
	            let { start, end } = doc.lineAt(value);
	            return new BlockInfo(start, end - start, 0, 0, BlockType.Text);
	        }
	        let { firstLine, lineHeight } = this.lines(doc, offset);
	        let { start, length, number } = doc.lineAt(value);
	        return new BlockInfo(start, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
	    }
	    forEachLine(from, to, doc, top, offset, f) {
	        let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
	        for (let line = firstLine; line <= lastLine; line++) {
	            let { start, end } = doc.line(line);
	            if (start > to)
	                break;
	            if (end >= from)
	                f(new BlockInfo(start, end - start, top, top += lineHeight, BlockType.Text));
	        }
	    }
	    replace(from, to, nodes) {
	        let after = this.length - to;
	        if (after > 0) {
	            let last = nodes[nodes.length - 1];
	            if (last instanceof HeightMapGap)
	                nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
	            else
	                nodes.push(null, new HeightMapGap(after - 1));
	        }
	        if (from > 0) {
	            let first = nodes[0];
	            if (first instanceof HeightMapGap)
	                nodes[0] = new HeightMapGap(from + first.length);
	            else
	                nodes.unshift(new HeightMapGap(from - 1), null);
	        }
	        return HeightMap.of(nodes);
	    }
	    decomposeLeft(to, result) {
	        result.push(new HeightMapGap(to - 1), null);
	    }
	    decomposeRight(from, result) {
	        result.push(null, new HeightMapGap(this.length - from - 1));
	    }
	    updateHeight(oracle, offset = 0, force = false, measured) {
	        let end = offset + this.length;
	        if (measured && measured.from <= offset + this.length && measured.more) {
	            // Fill in part of this gap with measured lines. We know there
	            // can't be widgets or collapsed ranges in those lines, because
	            // they would already have been added to the heightmap (gaps
	            // only contain plain text).
	            let nodes = [], pos = Math.max(offset, measured.from);
	            if (measured.from > offset)
	                nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
	            while (pos <= end && measured.more) {
	                let len = oracle.doc.lineAt(pos).length;
	                if (nodes.length)
	                    nodes.push(null);
	                let line = new HeightMapText(len, measured.heights[measured.index++]);
	                line.outdated = false;
	                nodes.push(line);
	                pos += len + 1;
	            }
	            if (pos <= end)
	                nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
	            oracle.heightChanged = true;
	            return HeightMap.of(nodes);
	        }
	        else if (force || this.outdated) {
	            this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
	            this.outdated = false;
	        }
	        return this;
	    }
	    toString() { return `gap(${this.length})`; }
	}
	class HeightMapBranch extends HeightMap {
	    constructor(left, brk, right) {
	        super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
	        this.left = left;
	        this.right = right;
	        this.size = left.size + right.size;
	    }
	    get break() { return this.flags & 1 /* Break */; }
	    blockAt(height, doc, top, offset) {
	        let mid = top + this.left.height;
	        return height < mid || this.right.height == 0 ? this.left.blockAt(height, doc, top, offset)
	            : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
	    }
	    lineAt(value, type, doc, top, offset) {
	        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
	        let left = type == QueryType.ByHeight ? value < rightTop || this.right.height == 0 : value < rightOffset;
	        let base = left ? this.left.lineAt(value, type, doc, top, offset)
	            : this.right.lineAt(value, type, doc, rightTop, rightOffset);
	        if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
	            return base;
	        let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
	        if (left)
	            return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
	        else
	            return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
	    }
	    forEachLine(from, to, doc, top, offset, f) {
	        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
	        if (this.break) {
	            if (from < rightOffset)
	                this.left.forEachLine(from, to, doc, top, offset, f);
	            if (to >= rightOffset)
	                this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
	        }
	        else {
	            let mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
	            if (from < mid.from)
	                this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
	            if (mid.to >= from && mid.from <= to)
	                f(mid);
	            if (to > mid.to)
	                this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
	        }
	    }
	    replace(from, to, nodes, doc) {
	        let rightStart = this.left.length + this.break;
	        if (to < rightStart)
	            return this.balanced(this.left.replace(from, to, nodes, doc), this.right);
	        if (from > this.left.length)
	            return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes, doc));
	        let result = [];
	        if (from > 0)
	            this.decomposeLeft(from, result);
	        let left = result.length;
	        for (let node of nodes)
	            result.push(node);
	        if (from > 0)
	            mergeGaps(result, left - 1);
	        if (to < this.length) {
	            let right = result.length;
	            this.decomposeRight(to, result);
	            mergeGaps(result, right);
	        }
	        return HeightMap.of(result);
	    }
	    decomposeLeft(to, result) {
	        let left = this.left.length;
	        if (to <= left)
	            return this.left.decomposeLeft(to, result);
	        result.push(this.left);
	        if (this.break) {
	            left++;
	            if (to >= left)
	                result.push(null);
	        }
	        if (to > left)
	            this.right.decomposeLeft(to - left, result);
	    }
	    decomposeRight(from, result) {
	        let left = this.left.length, right = left + this.break;
	        if (from >= right)
	            return this.right.decomposeRight(from - right, result);
	        if (from < left)
	            this.left.decomposeRight(from, result);
	        if (this.break && from < right)
	            result.push(null);
	        result.push(this.right);
	    }
	    balanced(left, right) {
	        if (left.size > 2 * right.size || right.size > 2 * left.size)
	            return HeightMap.of(this.break ? [left, null, right] : [left, right]);
	        this.left = left;
	        this.right = right;
	        this.height = left.height + right.height;
	        this.outdated = left.outdated || right.outdated;
	        this.size = left.size + right.size;
	        this.length = left.length + this.break + right.length;
	        return this;
	    }
	    updateHeight(oracle, offset = 0, force = false, measured) {
	        let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
	        if (measured && measured.from <= offset + left.length && measured.more)
	            rebalance = left = left.updateHeight(oracle, offset, force, measured);
	        else
	            left.updateHeight(oracle, offset, force);
	        if (measured && measured.from <= rightStart + right.length && measured.more)
	            rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
	        else
	            right.updateHeight(oracle, rightStart, force);
	        if (rebalance)
	            return this.balanced(left, right);
	        this.height = this.left.height + this.right.height;
	        this.outdated = false;
	        return this;
	    }
	    toString() { return this.left + (this.break ? " " : "-") + this.right; }
	}
	function mergeGaps(nodes, around) {
	    let before, after;
	    if (nodes[around] == null &&
	        (before = nodes[around - 1]) instanceof HeightMapGap &&
	        (after = nodes[around + 1]) instanceof HeightMapGap)
	        nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
	}
	const relevantWidgetHeight = 5;
	class NodeBuilder {
	    constructor(pos, oracle) {
	        this.pos = pos;
	        this.oracle = oracle;
	        this.nodes = [];
	        this.lineStart = -1;
	        this.lineEnd = -1;
	        this.covering = null;
	        this.writtenTo = pos;
	    }
	    get isCovered() {
	        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
	    }
	    span(_from, to) {
	        if (this.lineStart > -1) {
	            let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
	            if (last instanceof HeightMapText)
	                last.length += end - this.pos;
	            else if (end > this.pos || !this.isCovered)
	                this.nodes.push(new HeightMapText(end - this.pos, -1));
	            this.writtenTo = end;
	            if (to > end) {
	                this.nodes.push(null);
	                this.writtenTo++;
	                this.lineStart = -1;
	            }
	        }
	        this.pos = to;
	    }
	    point(from, to, deco) {
	        if (from < to || deco.heightRelevant) {
	            let height = deco.widget ? Math.max(0, deco.widget.estimatedHeight) : 0;
	            let len = to - from;
	            if (deco.block) {
	                this.addBlock(new HeightMapBlock(len, height, deco.type));
	            }
	            else if (len || height >= relevantWidgetHeight) {
	                this.addLineDeco(height, len);
	            }
	        }
	        else if (to > from) {
	            this.span(from, to);
	        }
	        if (this.lineEnd > -1 && this.lineEnd < this.pos)
	            this.lineEnd = this.oracle.doc.lineAt(this.pos).end;
	    }
	    enterLine() {
	        if (this.lineStart > -1)
	            return;
	        let { start, end } = this.oracle.doc.lineAt(this.pos);
	        this.lineStart = start;
	        this.lineEnd = end;
	        if (this.writtenTo < start) {
	            if (this.writtenTo < start - 1 || this.nodes[this.nodes.length - 1] == null)
	                this.nodes.push(new HeightMapGap(start - this.writtenTo - 1));
	            this.nodes.push(null);
	        }
	        if (this.pos > start)
	            this.nodes.push(new HeightMapText(this.pos - start, -1));
	        this.writtenTo = this.pos;
	    }
	    ensureLine() {
	        this.enterLine();
	        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
	        if (last instanceof HeightMapText)
	            return last;
	        let line = new HeightMapText(0, -1);
	        this.nodes.push(line);
	        return line;
	    }
	    addBlock(block) {
	        this.enterLine();
	        if (block.type == BlockType.WidgetAfter && !this.isCovered)
	            this.ensureLine();
	        this.nodes.push(block);
	        this.writtenTo = this.pos = this.pos + block.length;
	        if (block.type != BlockType.WidgetBefore)
	            this.covering = block;
	    }
	    addLineDeco(height, length) {
	        let line = this.ensureLine();
	        line.length += length;
	        line.collapsed += length;
	        line.widgetHeight = Math.max(line.widgetHeight, height);
	        this.writtenTo = this.pos = this.pos + length;
	    }
	    finish(from) {
	        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
	        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
	            this.nodes.push(new HeightMapText(0, -1));
	        else if (this.writtenTo < this.pos || last == null)
	            this.nodes.push(new HeightMapGap(this.pos - this.writtenTo));
	        let pos = from;
	        for (let node of this.nodes) {
	            if (node instanceof HeightMapText)
	                node.updateHeight(this.oracle, pos);
	            pos += node ? node.length : 1;
	        }
	        return this.nodes;
	    }
	    // Always called with a region that on both sides either stretches
	    // to a line break or the end of the document.
	    // The returned array uses null to indicate line breaks, but never
	    // starts or ends in a line break, or has multiple line breaks next
	    // to each other.
	    static build(oracle, decorations, from, to) {
	        let builder = new NodeBuilder(from, oracle);
	        RangeSet.spans(decorations, from, to, builder);
	        return builder.finish(from);
	    }
	    get minPointSize() { return 0; }
	}
	function heightRelevantDecoChanges(a, b, diff) {
	    let comp = new DecorationComparator();
	    RangeSet.compare(a, b, diff, comp);
	    return comp.changes;
	}
	class DecorationComparator {
	    constructor() {
	        this.changes = [];
	    }
	    compareRange() { }
	    comparePoint(from, to, a, b) {
	        if (from < to || a && a.heightRelevant || b && b.heightRelevant)
	            addRange(from, to, this.changes);
	    }
	    get minPointSize() { return 0; }
	}

	const none$3 = [];
	const clickAddsSelectionRange = Facet.define();
	const dragMovesSelection = Facet.define();
	const mouseSelectionStyle = Facet.define();
	const exceptionSink = Facet.define();
	/// Log or report an unhandled exception in client code. Should
	/// probably only be used by extension code that allows client code to
	/// provide functions, and calls those functions in a context where an
	/// exception can't be propagated to calling code in a reasonable way
	/// (for example when in an event handler).
	///
	/// Either calls a handler registered with
	/// [`EditorView.exceptionSink`](#view.EditorView^exceptionSink),
	/// `window.onerror`, if defined, or `console.error` (in which case
	/// it'll pass `context`, when given, as first argument).
	function logException(state, exception, context) {
	    let handler = state.facet(exceptionSink);
	    if (handler.length)
	        handler[0](exception);
	    else if (window.onerror)
	        window.onerror(String(exception), context, undefined, undefined, exception);
	    else if (context)
	        console.error(context + ":", exception);
	    else
	        console.error(exception);
	}
	const editable = Facet.define({ combine: values => values.length ? values[0] : true });
	/// Plugin fields are a mechanism for allowing plugins to provide
	/// values that can be retrieved through the
	/// [`pluginField`](#view.EditorView.pluginField) view method.
	class PluginField {
	    static define() { return new PluginField(); }
	}
	/// Plugins can provide additional scroll margins (space around the
	/// sides of the scrolling element that should be considered
	/// invisible) through this field. This can be useful when the
	/// plugin introduces elements that cover part of that element (for
	/// example a horizontally fixed gutter).
	PluginField.scrollMargins = PluginField.define();
	let nextPluginID = 0;
	const viewPlugin = Facet.define();
	/// View plugins associate stateful values with a view. They can
	/// influence the way the content is drawn, and are notified of things
	/// that happen in the view.
	class ViewPlugin {
	    constructor(
	    /// @internal
	    id, 
	    /// @internal
	    create, 
	    /// @internal
	    fields) {
	        this.id = id;
	        this.create = create;
	        this.fields = fields;
	        this.extension = viewPlugin.of(this);
	    }
	    /// Define a plugin from a constructor function that creates the
	    /// plugin's value, given an editor view.
	    static define(create) {
	        return new ViewPlugin(nextPluginID++, create, []);
	    }
	    /// Create a plugin for a class whose constructor takes a single
	    /// editor view as argument.
	    static fromClass(cls) {
	        return ViewPlugin.define(view => new cls(view));
	    }
	    /// Create a new version of this plugin that provides a given
	    /// [plugin field](#view.PluginField).
	    provide(field, get) {
	        return new ViewPlugin(this.id, this.create, this.fields.concat({ field, get }));
	    }
	    decorations(get) {
	        return this.provide(pluginDecorations, get || ((value) => value.decorations));
	    }
	    eventHandlers(handlers) {
	        return this.provide(domEventHandlers, (value) => ({ plugin: value, handlers }));
	    }
	}
	// FIXME somehow ensure that no replacing decorations end up in here
	const pluginDecorations = PluginField.define();
	const domEventHandlers = PluginField.define();
	class PluginInstance {
	    constructor(value, spec) {
	        this.value = value;
	        this.spec = spec;
	        this.updateFunc = this.value.update ? this.value.update.bind(this.value) : () => undefined;
	    }
	    static create(spec, view) {
	        let value;
	        try {
	            value = spec.create(view);
	        }
	        catch (e) {
	            logException(view.state, e, "CodeMirror plugin crashed");
	            return PluginInstance.dummy;
	        }
	        return new PluginInstance(value, spec);
	    }
	    takeField(type, target) {
	        for (let { field, get } of this.spec.fields)
	            if (field == type)
	                target.push(get(this.value));
	    }
	    update(update) {
	        try {
	            this.updateFunc(update);
	            return this;
	        }
	        catch (e) {
	            logException(update.state, e, "CodeMirror plugin crashed");
	            if (this.value.destroy)
	                try {
	                    this.value.destroy();
	                }
	                catch (_) { }
	            return PluginInstance.dummy;
	        }
	    }
	    destroy(view) {
	        try {
	            if (this.value.destroy)
	                this.value.destroy();
	        }
	        catch (e) {
	            logException(view.state, e, "CodeMirror plugin crashed");
	        }
	    }
	}
	PluginInstance.dummy = new PluginInstance({}, ViewPlugin.define(() => ({})));
	const editorAttributes = Facet.define({
	    combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
	});
	const contentAttributes = Facet.define({
	    combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
	});
	// Provide decorations
	const decorations = Facet.define();
	const styleModule = Facet.define();
	class ChangedRange {
	    constructor(fromA, toA, fromB, toB) {
	        this.fromA = fromA;
	        this.toA = toA;
	        this.fromB = fromB;
	        this.toB = toB;
	    }
	    join(other) {
	        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
	    }
	    addToSet(set) {
	        let i = set.length, me = this;
	        for (; i > 0; i--) {
	            let range = set[i - 1];
	            if (range.fromA > me.toA)
	                continue;
	            if (range.toA < me.fromA)
	                break;
	            me = me.join(range);
	            set.splice(i - 1, 1);
	        }
	        set.splice(i, 0, me);
	        return set;
	    }
	    static extendWithRanges(diff, ranges) {
	        if (ranges.length == 0)
	            return diff;
	        let result = [];
	        for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
	            let next = dI == diff.length ? null : diff[dI], off = posA - posB;
	            let end = next ? next.fromB : 1e9;
	            while (rI < ranges.length && ranges[rI] < end) {
	                let from = ranges[rI], to = ranges[rI + 1];
	                let fromB = Math.max(posB, from), toB = Math.min(end, to);
	                if (fromB <= toB)
	                    new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
	                if (to > end)
	                    break;
	                else
	                    rI += 2;
	            }
	            if (!next)
	                return result;
	            new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
	            posA = next.toA;
	            posB = next.toB;
	        }
	    }
	}
	/// View [plugins](#view.ViewPlugin) are given instances of this
	/// class, which describe what happened, whenever the view is updated.
	class ViewUpdate {
	    /// @internal
	    constructor(
	    /// The editor view that the update is associated with.
	    view, 
	    /// The new editor state.
	    state, 
	    /// The transactions involved in the update. May be empty.
	    transactions = none$3) {
	        this.view = view;
	        this.state = state;
	        this.transactions = transactions;
	        /// @internal
	        this.flags = 0;
	        this.prevState = view.state;
	        this.changes = ChangeSet.empty(this.prevState.doc.length);
	        for (let tr of transactions)
	            this.changes = this.changes.compose(tr.changes);
	        let changedRanges = [];
	        this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
	        this.changedRanges = changedRanges;
	        let focus = view.hasFocus;
	        if (focus != view.inputState.notifiedFocused) {
	            view.inputState.notifiedFocused = focus;
	            this.flags != 1 /* Focus */;
	        }
	        if (this.docChanged)
	            this.flags |= 2 /* Height */;
	    }
	    /// Tells you whether the viewport changed in this update.
	    get viewportChanged() {
	        return (this.flags & 4 /* Viewport */) > 0;
	    }
	    /// Indicates whether the line height in the editor changed in this update.
	    get heightChanged() {
	        return (this.flags & 2 /* Height */) > 0;
	    }
	    /// True when this update indicates a focus change.
	    get focusChanged() {
	        return (this.flags & 1 /* Focus */) > 0;
	    }
	    /// Whether the document changed in this update.
	    get docChanged() {
	        return this.transactions.some(tr => tr.docChanged);
	    }
	    /// Whether the selection was explicitly set in this update.
	    get selectionSet() {
	        return this.transactions.some(tr => tr.selection);
	    }
	    /// @internal
	    get empty() { return this.flags == 0 && this.transactions.length == 0; }
	}

	function visiblePixelRange(dom, paddingTop) {
	    let rect = dom.getBoundingClientRect();
	    let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
	    let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
	    for (let parent = dom.parentNode; parent;) { // (Cast to any because TypeScript is useless with Node types)
	        if (parent.nodeType == 1) {
	            if ((parent.scrollHeight > parent.clientHeight || parent.scrollWidth > parent.clientWidth) &&
	                window.getComputedStyle(parent).overflow != "visible") {
	                let parentRect = parent.getBoundingClientRect();
	                left = Math.max(left, parentRect.left);
	                right = Math.min(right, parentRect.right);
	                top = Math.max(top, parentRect.top);
	                bottom = Math.min(bottom, parentRect.bottom);
	            }
	            parent = parent.parentNode;
	        }
	        else if (parent.nodeType == 11) { // Shadow root
	            parent = parent.host;
	        }
	        else {
	            break;
	        }
	    }
	    return { left: left - rect.left, right: right - rect.left,
	        top: top - (rect.top + paddingTop), bottom: bottom - (rect.top + paddingTop) };
	}
	// Line gaps are placeholder widgets used to hide pieces of overlong
	// lines within the viewport, as a kludge to keep the editor
	// responsive when a ridiculously long line is loaded into it.
	class LineGap {
	    constructor(from, to, size) {
	        this.from = from;
	        this.to = to;
	        this.size = size;
	    }
	    static same(a, b) {
	        if (a.length != b.length)
	            return false;
	        for (let i = 0; i < a.length; i++) {
	            let gA = a[i], gB = b[i];
	            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
	                return false;
	        }
	        return true;
	    }
	    draw(wrapping) {
	        return Decoration.replace({ widget: new LineGapWidget({ size: this.size, vertical: wrapping }) }).range(this.from, this.to);
	    }
	}
	class LineGapWidget extends WidgetType {
	    toDOM() {
	        let elt = document.createElement("div");
	        if (this.value.vertical) {
	            elt.style.height = this.value.size + "px";
	        }
	        else {
	            elt.style.width = this.value.size + "px";
	            elt.style.height = "2px";
	            elt.style.display = "inline-block";
	        }
	        return elt;
	    }
	    eq(other) { return this.value.size == other.size && this.value.vertical == other.vertical; }
	    get estimatedHeight() { return this.value.vertical ? this.value.size : -1; }
	}
	class ViewState {
	    constructor(state) {
	        this.state = state;
	        // These are contentDOM-local coordinates
	        this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
	        this.paddingTop = 0;
	        this.paddingBottom = 0;
	        this.heightOracle = new HeightOracle;
	        this.heightMap = HeightMap.empty();
	        this.scrollTo = null;
	        // Briefly set to true when printing, to disable viewport limiting
	        this.printing = false;
	        this.visibleRanges = [];
	        // Cursor 'assoc' is only significant when the cursor is on a line
	        // wrap point, where it must stick to the character that it is
	        // associated with. Since browsers don't provide a reasonable
	        // interface to set or query this, when a selection is set that
	        // might cause this to be signficant, this flag is set. The next
	        // measure phase will check whether the cursor is on a line-wrapping
	        // boundary and, if so, reset it to make sure it is positioned in
	        // the right place.
	        this.mustEnforceCursorAssoc = false;
	        this.heightMap = this.heightMap.applyChanges(state.facet(decorations), Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
	        this.viewport = this.getViewport(0, null);
	        this.lineGaps = this.ensureLineGaps([]);
	        this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
	        this.computeVisibleRanges();
	    }
	    update(update, scrollTo = null) {
	        let prev = this.state;
	        this.state = update.state;
	        let newDeco = this.state.facet(decorations);
	        let contentChanges = update.changedRanges;
	        let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(update.prevState.facet(decorations), newDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
	        let prevHeight = this.heightMap.height;
	        this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
	        if (this.heightMap.height != prevHeight)
	            update.flags |= 2 /* Height */;
	        let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
	        if (scrollTo && (scrollTo.head < viewport.from || scrollTo.head > viewport.to) || !this.viewportIsAppropriate(viewport))
	            viewport = this.getViewport(0, scrollTo);
	        if (!viewport.eq(this.viewport)) {
	            this.viewport = viewport;
	            update.flags |= 4 /* Viewport */;
	        }
	        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
	            update.flags |= this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
	        this.computeVisibleRanges();
	        if (scrollTo)
	            this.scrollTo = scrollTo;
	        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
	            update.state.selection.primary.empty && update.state.selection.primary.assoc)
	            this.mustEnforceCursorAssoc = true;
	    }
	    measure(docView, repeated) {
	        let dom = docView.dom, whiteSpace = "", direction = Direction.LTR;
	        if (!repeated) {
	            // Vertical padding
	            let style = window.getComputedStyle(dom);
	            whiteSpace = style.whiteSpace, direction = (style.direction == "rtl" ? Direction.RTL : Direction.LTR);
	            this.paddingTop = parseInt(style.paddingTop) || 0;
	            this.paddingBottom = parseInt(style.paddingBottom) || 0;
	        }
	        // Pixel viewport
	        let pixelViewport = this.printing ? { top: -1e8, bottom: 1e8, left: -1e8, right: 1e8 } : visiblePixelRange(dom, this.paddingTop);
	        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
	        this.pixelViewport = pixelViewport;
	        if (this.pixelViewport.bottom <= this.pixelViewport.top ||
	            this.pixelViewport.right <= this.pixelViewport.left)
	            return 0;
	        let lineHeights = docView.measureVisibleLineHeights();
	        let refresh = false, bias = 0;
	        if (!repeated) {
	            if (this.heightOracle.mustRefresh(lineHeights, whiteSpace, direction)) {
	                let { lineHeight, charWidth } = docView.measureTextSize();
	                refresh = this.heightOracle.refresh(whiteSpace, direction, lineHeight, charWidth, (docView.dom).clientWidth / charWidth, lineHeights);
	                if (refresh)
	                    docView.minWidth = 0;
	            }
	            if (dTop > 0 && dBottom > 0)
	                bias = Math.max(dTop, dBottom);
	            else if (dTop < 0 && dBottom < 0)
	                bias = Math.min(dTop, dBottom);
	        }
	        this.heightOracle.heightChanged = false;
	        this.heightMap = this.heightMap.updateHeight(this.heightOracle, 0, refresh, new MeasuredHeights(this.viewport.from, lineHeights));
	        let result = this.heightOracle.heightChanged ? 2 /* Height */ : 0;
	        if (!this.viewportIsAppropriate(this.viewport, bias) ||
	            this.scrollTo && (this.scrollTo.head < this.viewport.from || this.scrollTo.head > this.viewport.to)) {
	            this.viewport = this.getViewport(bias, this.scrollTo);
	            result |= 4 /* Viewport */;
	        }
	        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
	            result |= this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
	        this.computeVisibleRanges();
	        if (this.mustEnforceCursorAssoc) {
	            this.mustEnforceCursorAssoc = false;
	            // This is done in the read stage, because moving the selection
	            // to a line end is going to trigger a layout anyway, so it
	            // can't be a pure write. It should be rare that it does any
	            // writing.
	            docView.enforceCursorAssoc();
	        }
	        return result;
	    }
	    getViewport(bias, scrollTo) {
	        // This will divide VP.Margin between the top and the
	        // bottom, depending on the bias (the change in viewport position
	        // since the last update). It'll hold a number between 0 and 1
	        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
	        let map = this.heightMap, doc = this.state.doc, { top, bottom } = this.pixelViewport;
	        let viewport = new Viewport(map.lineAt(top - marginTop * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(bottom + (1 - marginTop) * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).to);
	        // If scrollTo is given, make sure the viewport includes that position
	        if (scrollTo) {
	            if (scrollTo.head < viewport.from) {
	                let { top: newTop } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
	                viewport = new Viewport(map.lineAt(newTop - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newTop + (bottom - top) + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
	            }
	            else if (scrollTo.head > viewport.to) {
	                let { bottom: newBottom } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
	                viewport = new Viewport(map.lineAt(newBottom - (bottom - top) - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newBottom + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
	            }
	        }
	        return viewport;
	    }
	    mapViewport(viewport, changes) {
	        let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
	        return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
	    }
	    // Checks if a given viewport covers the visible part of the
	    // document and not too much beyond that.
	    viewportIsAppropriate({ from, to }, bias = 0) {
	        let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0);
	        let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0);
	        return (from == 0 || top <= this.pixelViewport.top - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&
	            (to == this.state.doc.length ||
	                bottom >= this.pixelViewport.bottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&
	            (top > this.pixelViewport.top - 2 * 1000 /* Margin */ && bottom < this.pixelViewport.bottom + 2 * 1000 /* Margin */);
	    }
	    mapLineGaps(gaps, changes) {
	        if (!gaps.length || changes.empty)
	            return gaps;
	        let mapped = [];
	        for (let gap of gaps)
	            if (!changes.touchesRange(gap.from, gap.to))
	                mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
	        return mapped;
	    }
	    // Computes positions in the viewport where the start or end of a
	    // line should be hidden, trying to reuse existing line gaps when
	    // appropriate to avoid unneccesary redraws.
	    // Uses crude character-counting for the positioning and sizing,
	    // since actual DOM coordinates aren't always available and
	    // predictable. Relies on generous margins (see LG.Margin) to hide
	    // the artifacts this might produce from the user.
	    ensureLineGaps(current) {
	        let gaps = [];
	        // This won't work at all in predominantly right-to-left text.
	        if (this.heightOracle.direction != Direction.LTR)
	            return gaps;
	        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, line => {
	            if (line.length < 10000 /* Margin */)
	                return;
	            let structure = lineStructure(line.from, line.to, this.state);
	            if (structure.total < 10000 /* Margin */)
	                return;
	            let viewFrom, viewTo;
	            if (this.heightOracle.lineWrapping) {
	                if (line.from != this.viewport.from)
	                    viewFrom = line.from;
	                else
	                    viewFrom = findPosition(structure, (this.pixelViewport.top - line.top) / line.height);
	                if (line.to != this.viewport.to)
	                    viewTo = line.to;
	                else
	                    viewTo = findPosition(structure, (this.pixelViewport.bottom - line.top) / line.height);
	            }
	            else {
	                let totalWidth = structure.total * this.heightOracle.charWidth;
	                viewFrom = findPosition(structure, this.pixelViewport.left / totalWidth);
	                viewTo = findPosition(structure, this.pixelViewport.right / totalWidth);
	            }
	            let sel = this.state.selection.primary;
	            // Make sure the gap doesn't cover a selection end
	            if (sel.from <= viewFrom && sel.to >= line.from)
	                viewFrom = sel.from;
	            if (sel.from <= line.to && sel.to >= viewTo)
	                viewTo = sel.to;
	            let gapTo = viewFrom - 10000 /* Margin */, gapFrom = viewTo + 10000 /* Margin */;
	            if (gapTo > line.from + 5000 /* HalfMargin */)
	                gaps.push(find$2(current, gap => gap.from == line.from && gap.to > gapTo - 5000 /* HalfMargin */ && gap.to < gapTo + 5000 /* HalfMargin */) ||
	                    new LineGap(line.from, gapTo, this.gapSize(line, gapTo, true, structure)));
	            if (gapFrom < line.to - 5000 /* HalfMargin */)
	                gaps.push(find$2(current, gap => gap.to == line.to && gap.from > gapFrom - 5000 /* HalfMargin */ &&
	                    gap.from < gapFrom + 5000 /* HalfMargin */) ||
	                    new LineGap(gapFrom, line.to, this.gapSize(line, gapFrom, false, structure)));
	        });
	        return gaps;
	    }
	    gapSize(line, pos, start, structure) {
	        if (this.heightOracle.lineWrapping) {
	            let height = line.height * findFraction(structure, pos);
	            return start ? height : line.height - height;
	        }
	        else {
	            let ratio = findFraction(structure, pos);
	            return structure.total * this.heightOracle.charWidth * (start ? ratio : 1 - ratio);
	        }
	    }
	    updateLineGaps(gaps) {
	        if (!LineGap.same(gaps, this.lineGaps)) {
	            this.lineGaps = gaps;
	            this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
	            return 16 /* LineGaps */;
	        }
	        return 0;
	    }
	    computeVisibleRanges() {
	        let deco = this.state.facet(decorations);
	        if (this.lineGaps.length)
	            deco = deco.concat(this.lineGapDeco);
	        let ranges = [];
	        RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
	            span(from, to) { ranges.push({ from, to }); },
	            point() { },
	            minPointSize: 20
	        });
	        this.visibleRanges = ranges;
	    }
	    lineAt(pos, editorTop) {
	        return this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, editorTop + this.paddingTop, 0);
	    }
	    lineAtHeight(height, editorTop) {
	        return this.heightMap.lineAt(height, QueryType.ByHeight, this.state.doc, editorTop + this.paddingTop, 0);
	    }
	    blockAtHeight(height, editorTop) {
	        return this.heightMap.blockAt(height, this.state.doc, editorTop + this.paddingTop, 0);
	    }
	    forEachLine(from, to, f, editorTop) {
	        return this.heightMap.forEachLine(from, to, this.state.doc, editorTop + this.paddingTop, 0, f);
	    }
	}
	/// Indicates the range of the document that is in the visible
	/// viewport.
	class Viewport {
	    constructor(from, to) {
	        this.from = from;
	        this.to = to;
	    }
	    eq(b) { return this.from == b.from && this.to == b.to; }
	}
	function lineStructure(from, to, state) {
	    let ranges = [], pos = from, total = 0;
	    RangeSet.spans(state.facet(decorations), from, to, {
	        span() { },
	        point(from, to) {
	            if (from > pos) {
	                ranges.push({ from: pos, to: from });
	                total += from - pos;
	            }
	            pos = to;
	        },
	        minPointSize: 20 // We're only interested in collapsed ranges of a significant size
	    });
	    if (pos < to) {
	        ranges.push({ from: pos, to });
	        total += to - pos;
	    }
	    return { total, ranges };
	}
	function findPosition({ total, ranges }, ratio) {
	    if (ratio <= 0)
	        return ranges[0].from;
	    if (ratio >= 1)
	        return ranges[ranges.length - 1].to;
	    let dist = Math.floor(total * ratio);
	    for (let i = 0;; i++) {
	        let { from, to } = ranges[i], size = to - from;
	        if (dist <= size)
	            return from + dist;
	        dist -= size;
	    }
	}
	function findFraction(structure, pos) {
	    let counted = 0;
	    for (let { from, to } of structure.ranges) {
	        if (pos <= to) {
	            counted += pos - from;
	            break;
	        }
	        counted += to - from;
	    }
	    return counted / structure.total;
	}
	function find$2(array, f) {
	    for (let val of array)
	        if (f(val))
	            return val;
	    return undefined;
	}

	const none$4 = [];
	class DocView extends ContentView {
	    constructor(view) {
	        super();
	        this.view = view;
	        this.viewports = none$4;
	        this.compositionDeco = Decoration.none;
	        this.decorations = [];
	        // Track a minimum width for the editor. When measuring sizes in
	        // checkLayout, this is updated to point at the width of a given
	        // element and its extent in the document. When a change happens in
	        // that range, these are reset. That way, once we've seen a
	        // line/element of a given length, we keep the editor wide enough to
	        // fit at least that element, until it is changed, at which point we
	        // forget it again.
	        this.minWidth = 0;
	        this.minWidthFrom = 0;
	        this.minWidthTo = 0;
	        // Track whether the DOM selection was set in a lossy way, so that
	        // we don't mess it up when reading it back it
	        this.impreciseAnchor = null;
	        this.impreciseHead = null;
	        this.setDOM(view.contentDOM);
	        this.children = [new LineView];
	        this.children[0].setParent(this);
	        this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], this.updateDeco(), 0);
	    }
	    get root() { return this.view.root; }
	    get editorView() { return this.view; }
	    get length() { return this.view.state.doc.length; }
	    // Update the document view to a given state. scrollIntoView can be
	    // used as a hint to compute a new viewport that includes that
	    // position, if we know the editor is going to scroll that position
	    // into view.
	    update(update) {
	        var _a;
	        let changedRanges = update.changedRanges;
	        if (this.minWidth > 0 && changedRanges.length) {
	            if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
	                this.minWidth = 0;
	            }
	            else {
	                this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
	                this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
	            }
	        }
	        // When the DOM nodes around the selection are moved to another
	        // parent, Chrome sometimes reports a different selection through
	        // getSelection than the one that it actually shows to the user.
	        // This forces a selection update when lines are joined to work
	        // around that. Issue #54
	        let forceSelection = browser$1.chrome && !this.compositionDeco.size && update &&
	            update.state.doc.lines != update.prevState.doc.lines;
	        if (!((_a = this.view.inputState) === null || _a === void 0 ? void 0 : _a.composing))
	            this.compositionDeco = Decoration.none;
	        else if (update.transactions.length)
	            this.compositionDeco = computeCompositionDeco(this.view, update.changes);
	        let prevDeco = this.decorations, deco = this.updateDeco();
	        let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
	        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
	        let pointerSel = update.transactions.some(tr => tr.annotation(Transaction.userEvent) == "pointerselection");
	        if (this.dirty == 0 /* Not */ && changedRanges.length == 0 &&
	            !(update.flags & (4 /* Viewport */ | 16 /* LineGaps */)) &&
	            update.state.selection.primary.from >= this.view.viewport.from &&
	            update.state.selection.primary.to <= this.view.viewport.to) {
	            this.updateSelection(forceSelection, pointerSel);
	            return false;
	        }
	        else {
	            this.updateInner(changedRanges, deco, update.prevState.doc.length, forceSelection, pointerSel);
	            return true;
	        }
	    }
	    // Used both by update and checkLayout do perform the actual DOM
	    // update
	    updateInner(changes, deco, oldLength, forceSelection = false, pointerSel = false) {
	        this.updateChildren(changes, deco, oldLength);
	        this.view.observer.ignore(() => {
	            // Lock the height during redrawing, since Chrome sometimes
	            // messes with the scroll position during DOM mutation (though
	            // no relayout is triggered and I cannot imagine how it can
	            // recompute the scroll position without a layout)
	            this.dom.style.height = this.view.viewState.heightMap.height + "px";
	            this.dom.style.minWidth = this.minWidth ? this.minWidth + "px" : "";
	            this.sync();
	            this.dirty = 0 /* Not */;
	            this.updateSelection(forceSelection, pointerSel);
	            this.dom.style.height = "";
	        });
	    }
	    updateChildren(changes, deco, oldLength) {
	        let cursor = this.childCursor(oldLength);
	        for (let i = changes.length - 1;; i--) {
	            let next = i >= 0 ? changes[i] : null;
	            if (!next)
	                break;
	            let { fromA, toA, fromB, toB } = next;
	            let { content, breakAtStart } = ContentBuilder.build(this.view.state.doc, fromB, toB, deco);
	            let { i: toI, off: toOff } = cursor.findPos(toA, 1);
	            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
	            this.replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart);
	        }
	    }
	    replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart) {
	        let before = this.children[fromI], last = content.length ? content[content.length - 1] : null;
	        let breakAtEnd = last ? last.breakAfter : breakAtStart;
	        // Change within a single line
	        if (fromI == toI && !breakAtStart && !breakAtEnd && content.length < 2 &&
	            before.merge(fromOff, toOff, content.length ? last : null, fromOff == 0))
	            return;
	        let after = this.children[toI];
	        // Make sure the end of the line after the update is preserved in `after`
	        if (toOff < after.length || after.children.length && after.children[after.children.length - 1].length == 0) {
	            // If we're splitting a line, separate part of the start line to
	            // avoid that being mangled when updating the start line.
	            if (fromI == toI) {
	                after = after.split(toOff);
	                toOff = 0;
	            }
	            // If the element after the replacement should be merged with
	            // the last replacing element, update `content`
	            if (!breakAtEnd && last && after.merge(0, toOff, last, true)) {
	                content[content.length - 1] = after;
	            }
	            else {
	                // Remove the start of the after element, if necessary, and
	                // add it to `content`.
	                if (toOff || after.children.length && after.children[0].length == 0)
	                    after.merge(0, toOff, null, false);
	                content.push(after);
	            }
	        }
	        else if (after.breakAfter) {
	            // The element at `toI` is entirely covered by this range.
	            // Preserve its line break, if any.
	            if (last)
	                last.breakAfter = 1;
	            else
	                breakAtStart = 1;
	        }
	        // Since we've handled the next element from the current elements
	        // now, make sure `toI` points after that.
	        toI++;
	        before.breakAfter = breakAtStart;
	        if (fromOff > 0) {
	            if (!breakAtStart && content.length && before.merge(fromOff, before.length, content[0], false)) {
	                before.breakAfter = content.shift().breakAfter;
	            }
	            else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
	                before.merge(fromOff, before.length, null, false);
	            }
	            fromI++;
	        }
	        // Try to merge widgets on the boundaries of the replacement
	        while (fromI < toI && content.length) {
	            if (this.children[toI - 1].match(content[content.length - 1]))
	                toI--, content.pop();
	            else if (this.children[fromI].match(content[0]))
	                fromI++, content.shift();
	            else
	                break;
	        }
	        if (fromI < toI || content.length)
	            this.replaceChildren(fromI, toI, content);
	    }
	    // Sync the DOM selection to this.state.selection
	    updateSelection(force = false, fromPointer = false) {
	        if (!(fromPointer || this.mayControlSelection()))
	            return;
	        let primary = this.view.state.selection.primary;
	        // FIXME need to handle the case where the selection falls inside a block range
	        let anchor = this.domAtPos(primary.anchor);
	        let head = this.domAtPos(primary.head);
	        let domSel = getSelection(this.root);
	        // If the selection is already here, or in an equivalent position, don't touch it
	        if (force || !domSel.focusNode ||
	            (browser$1.gecko && primary.empty && nextToUneditable(domSel.focusNode, domSel.focusOffset)) ||
	            !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
	            !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
	            this.view.observer.ignore(() => {
	                if (primary.empty) {
	                    // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
	                    if (browser$1.gecko) {
	                        let nextTo = nextToUneditable(anchor.node, anchor.offset);
	                        if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
	                            let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
	                            if (text)
	                                anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
	                        }
	                    }
	                    domSel.collapse(anchor.node, anchor.offset);
	                    if (primary.bidiLevel != null && domSel.cursorBidiLevel != null)
	                        domSel.cursorBidiLevel = primary.bidiLevel;
	                }
	                else if (domSel.extend) {
	                    // Selection.extend can be used to create an 'inverted' selection
	                    // (one where the focus is before the anchor), but not all
	                    // browsers support it yet.
	                    domSel.collapse(anchor.node, anchor.offset);
	                    domSel.extend(head.node, head.offset);
	                }
	                else {
	                    // Primitive (IE) way
	                    let range = document.createRange();
	                    if (primary.anchor > primary.head)
	                        [anchor, head] = [head, anchor];
	                    range.setEnd(head.node, head.offset);
	                    range.setStart(anchor.node, anchor.offset);
	                    domSel.removeAllRanges();
	                    domSel.addRange(range);
	                }
	            });
	        }
	        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
	        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
	    }
	    enforceCursorAssoc() {
	        let cursor = this.view.state.selection.primary;
	        let sel = getSelection(this.root);
	        if (!cursor.empty || !cursor.assoc || !sel.modify)
	            return;
	        let line = LineView.find(this, cursor.head); // FIXME provide view-line-range finding helper
	        if (!line)
	            return;
	        let lineStart = line.posAtStart;
	        if (cursor.head == lineStart || cursor.head == lineStart + line.length)
	            return;
	        let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
	        if (!before || !after || before.bottom > after.top)
	            return;
	        let dom = this.domAtPos(cursor.head + cursor.assoc);
	        sel.collapse(dom.node, dom.offset);
	        sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
	    }
	    mayControlSelection() {
	        return this.view.state.facet(editable) ? this.root.activeElement == this.dom : hasSelection(this.dom, getSelection(this.root));
	    }
	    nearest(dom) {
	        for (let cur = dom; cur;) {
	            let domView = ContentView.get(cur);
	            if (domView && domView.rootView == this)
	                return domView;
	            cur = cur.parentNode;
	        }
	        return null;
	    }
	    posFromDOM(node, offset) {
	        let view = this.nearest(node);
	        if (!view)
	            throw new RangeError("Trying to find position for a DOM position outside of the document");
	        return view.localPosFromDOM(node, offset) + view.posAtStart;
	    }
	    domAtPos(pos) {
	        let { i, off } = this.childCursor().findPos(pos, -1);
	        for (; i < this.children.length - 1;) {
	            let child = this.children[i];
	            if (off < child.length || child instanceof LineView)
	                break;
	            i++;
	            off = 0;
	        }
	        return this.children[i].domAtPos(off);
	    }
	    coordsAt(pos, side) {
	        for (let off = this.length, i = this.children.length - 1;; i--) {
	            let child = this.children[i], start = off - child.breakAfter - child.length;
	            if (pos >= start && child.type != BlockType.WidgetAfter)
	                return child.coordsAt(pos - start, side);
	            off = start;
	        }
	    }
	    measureVisibleLineHeights() {
	        let result = [], { from, to } = this.view.viewState.viewport;
	        let minWidth = Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
	        for (let pos = 0, i = 0; i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (end > to)
	                break;
	            if (pos >= from) {
	                result.push(child.dom.getBoundingClientRect().height);
	                let width = child.dom.scrollWidth;
	                if (width > minWidth) {
	                    this.minWidth = minWidth = width;
	                    this.minWidthFrom = pos;
	                    this.minWidthTo = end;
	                }
	            }
	            pos = end + child.breakAfter;
	        }
	        return result;
	    }
	    measureTextSize() {
	        for (let child of this.children) {
	            if (child instanceof LineView) {
	                let measure = child.measureTextSize();
	                if (measure)
	                    return measure;
	            }
	        }
	        // If no workable line exists, force a layout of a measurable element
	        let dummy = document.createElement("div"), lineHeight, charWidth;
	        dummy.className = "cm-line";
	        dummy.textContent = "abc def ghi jkl mno pqr stu";
	        this.view.observer.ignore(() => {
	            this.dom.appendChild(dummy);
	            let rect = clientRectsFor(dummy.firstChild)[0];
	            lineHeight = dummy.getBoundingClientRect().height;
	            charWidth = rect ? rect.width / 27 : 7;
	            dummy.remove();
	        });
	        return { lineHeight, charWidth };
	    }
	    childCursor(pos = this.length) {
	        // Move back to start of last element when possible, so that
	        // `ChildCursor.findPos` doesn't have to deal with the edge case
	        // of being after the last element.
	        let i = this.children.length;
	        if (i)
	            pos -= this.children[--i].length;
	        return new ChildCursor(this.children, pos, i);
	    }
	    computeBlockGapDeco() {
	        let visible = this.view.viewState.viewport, viewports = [visible];
	        let { head, anchor } = this.view.state.selection.primary;
	        if (head < visible.from || head > visible.to) {
	            let { from, to } = this.view.viewState.lineAt(head, 0);
	            viewports.push(new Viewport(from, to));
	        }
	        if (!viewports.some(({ from, to }) => anchor >= from && anchor <= to)) {
	            let { from, to } = this.view.viewState.lineAt(anchor, 0);
	            viewports.push(new Viewport(from, to));
	        }
	        this.viewports = viewports.sort((a, b) => a.from - b.from);
	        let deco = [];
	        for (let pos = 0, i = 0;; i++) {
	            let next = i == viewports.length ? null : viewports[i];
	            let end = next ? next.from - 1 : this.length;
	            if (end > pos) {
	                let height = this.view.viewState.lineAt(end, 0).bottom - this.view.viewState.lineAt(pos, 0).top;
	                deco.push(Decoration.replace({ widget: new BlockGapWidget(height), block: true, inclusive: true }).range(pos, end));
	            }
	            if (!next)
	                break;
	            pos = next.to + 1;
	        }
	        return Decoration.set(deco);
	    }
	    updateDeco() {
	        return this.decorations = [
	            ...this.view.state.facet(decorations),
	            this.computeBlockGapDeco(),
	            this.view.viewState.lineGapDeco,
	            this.compositionDeco,
	            ...this.view.pluginField(pluginDecorations)
	        ];
	    }
	    scrollPosIntoView(pos, side) {
	        let rect = this.coordsAt(pos, side);
	        if (!rect)
	            return;
	        let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
	        for (let margins of this.view.pluginField(PluginField.scrollMargins))
	            if (margins) {
	                let { left, right, top, bottom } = margins;
	                if (left != null)
	                    mLeft = Math.max(mLeft, left);
	                if (right != null)
	                    mRight = Math.max(mRight, right);
	                if (top != null)
	                    mTop = Math.max(mTop, top);
	                if (bottom != null)
	                    mBottom = Math.max(mBottom, bottom);
	            }
	        scrollRectIntoView(this.dom, {
	            left: rect.left - mLeft, top: rect.top - mTop,
	            right: rect.right + mRight, bottom: rect.bottom + mBottom
	        });
	    }
	}
	// Browsers appear to reserve a fixed amount of bits for height
	// styles, and ignore or clip heights above that. For Chrome and
	// Firefox, this is in the 20 million range, so we try to stay below
	// that.
	const MaxNodeHeight = 1e7;
	class BlockGapWidget extends WidgetType {
	    toDOM() {
	        let elt = document.createElement("div");
	        this.updateDOM(elt);
	        return elt;
	    }
	    updateDOM(elt) {
	        if (this.value < MaxNodeHeight) {
	            while (elt.lastChild)
	                elt.lastChild.remove();
	            elt.style.height = this.value + "px";
	        }
	        else {
	            elt.style.height = "";
	            for (let remaining = this.value; remaining > 0; remaining -= MaxNodeHeight) {
	                let fill = elt.appendChild(document.createElement("div"));
	                fill.style.height = Math.min(remaining, MaxNodeHeight) + "px";
	            }
	        }
	        return true;
	    }
	    get estimatedHeight() { return this.value; }
	}
	function computeCompositionDeco(view, changes) {
	    let sel = getSelection(view.root);
	    let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
	    if (!textNode)
	        return Decoration.none;
	    let cView = view.docView.nearest(textNode);
	    let from, to, topNode = textNode;
	    if (cView instanceof InlineView) {
	        from = cView.posAtStart;
	        to = from + cView.length;
	        topNode = cView.dom;
	    }
	    else if (cView instanceof LineView) {
	        while (topNode.parentNode != cView.dom)
	            topNode = topNode.parentNode;
	        let prev = topNode.previousSibling;
	        while (prev && !ContentView.get(prev))
	            prev = prev.previousSibling;
	        from = to = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
	    }
	    else {
	        return Decoration.none;
	    }
	    let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
	    let text = textNode.nodeValue, { state } = view;
	    if (newTo - newFrom < text.length) {
	        if (state.sliceDoc(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text)
	            newTo = newFrom + text.length;
	        else if (state.sliceDoc(Math.max(0, newTo - text.length), newTo) == text)
	            newFrom = newTo - text.length;
	        else
	            return Decoration.none;
	    }
	    else if (state.sliceDoc(newFrom, newTo) != text) {
	        return Decoration.none;
	    }
	    return Decoration.set(Decoration.replace({ widget: new CompositionWidget({ top: topNode, text: textNode }) }).range(newFrom, newTo));
	}
	class CompositionWidget extends WidgetType {
	    eq(value) { return this.value.top == value.top && this.value.text == value.text; }
	    toDOM() { return this.value.top; }
	    ignoreEvent() { return false; }
	    get customView() { return CompositionView; }
	}
	function nearbyTextNode(node, offset, side) {
	    for (;;) {
	        if (node.nodeType == 3)
	            return node;
	        if (node.nodeType == 1 && offset > 0 && side <= 0) {
	            node = node.childNodes[offset - 1];
	            offset = maxOffset(node);
	        }
	        else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
	            node = node.childNodes[offset];
	            offset = 0;
	        }
	        else {
	            return null;
	        }
	    }
	}
	function nextToUneditable(node, offset) {
	    if (node.nodeType != 1)
	        return 0;
	    return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) |
	        (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
	}
	class DecorationComparator$1 {
	    constructor() {
	        this.changes = [];
	    }
	    compareRange(from, to) { addRange(from, to, this.changes); }
	    comparePoint(from, to) { addRange(from, to, this.changes); }
	}
	function findChangedDeco(a, b, diff) {
	    let comp = new DecorationComparator$1;
	    RangeSet.compare(a, b, diff, comp);
	    return comp.changes;
	}

	function groupAt(state, pos, bias = 1) {
	    let categorize = state.charCategorizer(pos);
	    let line = state.doc.lineAt(pos), linePos = pos - line.start;
	    if (line.length == 0)
	        return EditorSelection.cursor(pos);
	    if (linePos == 0)
	        bias = 1;
	    else if (linePos == line.length)
	        bias = -1;
	    let from = linePos, to = linePos;
	    if (bias < 0)
	        from = line.findClusterBreak(linePos, false);
	    else
	        to = line.findClusterBreak(linePos, true);
	    let cat = categorize(line.slice(from, to));
	    while (from > 0) {
	        let prev = line.findClusterBreak(from, false);
	        if (categorize(line.slice(prev, from)) != cat)
	            break;
	        from = prev;
	    }
	    while (to < line.length) {
	        let next = line.findClusterBreak(to, true);
	        if (categorize(line.slice(to, next)) != cat)
	            break;
	        to = next;
	    }
	    return EditorSelection.range(from + line.start, to + line.start);
	}
	// Search the DOM for the {node, offset} position closest to the given
	// coordinates. Very inefficient and crude, but can usually be avoided
	// by calling caret(Position|Range)FromPoint instead.
	// FIXME holding arrow-up/down at the end of the viewport is a rather
	// common use case that will repeatedly trigger this code. Maybe
	// introduce some element of binary search after all?
	function getdx(x, rect) {
	    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
	}
	function getdy(y, rect) {
	    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
	}
	function yOverlap(a, b) {
	    return a.top < b.bottom - 1 && a.bottom > b.top + 1;
	}
	function upTop(rect, top) {
	    return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
	}
	function upBot(rect, bottom) {
	    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
	}
	function domPosAtCoords(parent, x, y) {
	    let closest, closestRect, closestX, closestY;
	    let above, below, aboveRect, belowRect;
	    for (let child = parent.firstChild; child; child = child.nextSibling) {
	        let rects = clientRectsFor(child);
	        for (let i = 0; i < rects.length; i++) {
	            let rect = rects[i];
	            if (closestRect && yOverlap(closestRect, rect))
	                rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
	            let dx = getdx(x, rect), dy = getdy(y, rect);
	            if (dx == 0 && dy == 0)
	                return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
	            if (!closest || closestY > dy || closestY == dy && closestX > dx) {
	                closest = child;
	                closestRect = rect;
	                closestX = dx;
	                closestY = dy;
	            }
	            if (dx == 0) {
	                if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
	                    above = child;
	                    aboveRect = rect;
	                }
	                else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
	                    below = child;
	                    belowRect = rect;
	                }
	            }
	            else if (aboveRect && yOverlap(aboveRect, rect)) {
	                aboveRect = upBot(aboveRect, rect.bottom);
	            }
	            else if (belowRect && yOverlap(belowRect, rect)) {
	                belowRect = upTop(belowRect, rect.top);
	            }
	        }
	    }
	    if (aboveRect && aboveRect.bottom >= y) {
	        closest = above;
	        closestRect = aboveRect;
	    }
	    else if (belowRect && belowRect.top <= y) {
	        closest = below;
	        closestRect = belowRect;
	    }
	    if (!closest)
	        return { node: parent, offset: 0 };
	    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
	    if (closest.nodeType == 3)
	        return domPosInText(closest, clipX, y);
	    if (!closestX && closest.contentEditable == "true")
	        return domPosAtCoords(closest, clipX, y);
	    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
	        (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
	    return { node: parent, offset };
	}
	function domPosInText(node, x, y) {
	    let len = node.nodeValue.length, range = document.createRange();
	    for (let i = 0; i < len; i++) {
	        range.setEnd(node, i + 1);
	        range.setStart(node, i);
	        let rects = range.getClientRects();
	        for (let j = 0; j < rects.length; j++) {
	            let rect = rects[j];
	            if (rect.top == rect.bottom)
	                continue;
	            if (rect.left - 1 <= x && rect.right + 1 >= x &&
	                rect.top - 1 <= y && rect.bottom + 1 >= y) {
	                let right = x >= (rect.left + rect.right) / 2, after = right;
	                if (browser$1.webkit || browser$1.gecko) {
	                    // Check for RTL on browsers that support getting client
	                    // rects for empty ranges.
	                    range.setEnd(node, i);
	                    let rectBefore = range.getBoundingClientRect();
	                    if (rectBefore.left == rect.right)
	                        after = !right;
	                }
	                return { node, offset: i + (after ? 1 : 0) };
	            }
	        }
	    }
	    return { node, offset: 0 };
	}
	function posAtCoords(view, { x, y }, bias = -1) {
	    let content = view.contentDOM.getBoundingClientRect(), block;
	    let halfLine = view.defaultLineHeight / 2;
	    for (let bounced = false;;) {
	        block = view.blockAtHeight(y, content.top);
	        if (block.top > y || block.bottom < y) {
	            bias = block.top > y ? -1 : 1;
	            y = Math.min(block.bottom - halfLine, Math.max(block.top + halfLine, y));
	            if (bounced)
	                return -1;
	            else
	                bounced = true;
	        }
	        if (block.type == BlockType.Text)
	            break;
	        y = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
	    }
	    let lineStart = block.from;
	    // If this is outside of the rendered viewport, we can't determine a position
	    if (lineStart < view.viewport.from)
	        return view.viewport.from == 0 ? 0 : -1;
	    if (lineStart > view.viewport.to)
	        return view.viewport.to == view.state.doc.length ? view.state.doc.length : -1;
	    // Clip x to the viewport sides
	    x = Math.max(content.left + 1, Math.min(content.right - 1, x));
	    let root = view.root, element = root.elementFromPoint(x, y);
	    // There's visible editor content under the point, so we can try
	    // using caret(Position|Range)FromPoint as a shortcut
	    let node, offset = -1;
	    if (element && view.contentDOM.contains(element) && !(view.docView.nearest(element) instanceof WidgetView)) {
	        if (root.caretPositionFromPoint) {
	            let pos = root.caretPositionFromPoint(x, y);
	            if (pos)
	                ({ offsetNode: node, offset } = pos);
	        }
	        else if (root.caretRangeFromPoint) {
	            let range = root.caretRangeFromPoint(x, y);
	            if (range)
	                ({ startContainer: node, startOffset: offset } = range);
	        }
	    }
	    // No luck, do our own (potentially expensive) search
	    if (!node) {
	        let line = LineView.find(view.docView, lineStart);
	        ({ node, offset } = domPosAtCoords(line.dom, x, y));
	    }
	    return view.docView.posFromDOM(node, offset);
	}
	function moveToLineBoundary(view, start, forward, includeWrap) {
	    let line = view.state.doc.lineAt(start.head);
	    let coords = !includeWrap || !view.lineWrapping ? null
	        : view.coordsAtPos(start.assoc < 0 && start.head > line.start ? start.head - 1 : start.head);
	    if (coords) {
	        let editorRect = view.dom.getBoundingClientRect();
	        let pos = view.posAtCoords({ x: forward == (view.textDirection == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
	            y: (coords.top + coords.bottom) / 2 });
	        if (pos > -1)
	            return EditorSelection.cursor(pos, forward ? -1 : 1);
	    }
	    let lineView = LineView.find(view.docView, start.head);
	    let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.end : line.start);
	    return EditorSelection.cursor(end, forward ? -1 : 1);
	}
	function moveByChar(view, start, forward, by) {
	    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
	    for (let cur = start, check = null;;) {
	        let next = moveVisually(line, spans, view.textDirection, cur, forward), char = movedOver;
	        if (!next) {
	            if (line.number == (forward ? view.state.doc.lines : 1))
	                return cur;
	            char = "\n";
	            line = view.state.doc.line(line.number + (forward ? 1 : -1));
	            spans = view.bidiSpans(line);
	            next = EditorSelection.cursor(forward ? line.start : line.end);
	        }
	        if (!check) {
	            if (!by)
	                return next;
	            check = by(char);
	        }
	        else if (!check(char)) {
	            return cur;
	        }
	        cur = next;
	    }
	}
	function byGroup(view, pos, start) {
	    let categorize = view.state.charCategorizer(pos);
	    let cat = categorize(start);
	    return (next) => {
	        let nextCat = categorize(next);
	        if (cat == CharCategory.Space)
	            cat = nextCat;
	        return cat == nextCat;
	    };
	}
	function moveVertically(view, start, forward, distance) {
	    var _a;
	    let startPos = start.head, dir = forward ? 1 : -1;
	    let startCoords = view.coordsAtPos(startPos);
	    if (startCoords) {
	        let rect = view.dom.getBoundingClientRect();
	        let goal = (_a = start.goalColumn) !== null && _a !== void 0 ? _a : startCoords.left - rect.left;
	        let resolvedGoal = rect.left + goal;
	        let dist = distance !== null && distance !== void 0 ? distance : 5;
	        for (let startY = dir < 0 ? startCoords.top : startCoords.bottom, extra = 0; extra < 50; extra += 10) {
	            let pos = posAtCoords(view, { x: resolvedGoal, y: startY + (dist + extra) * dir }, dir);
	            if (pos < 0)
	                break;
	            if (pos != startPos)
	                return EditorSelection.cursor(pos, undefined, undefined, goal);
	        }
	    }
	    // Outside of the drawn viewport, use a crude column-based approach
	    let { doc } = view.state, line = doc.lineAt(startPos), tabSize = view.state.tabSize;
	    let goal = start.goalColumn, goalCol = 0;
	    if (goal == null) {
	        for (const iter = doc.iterRange(line.start, startPos); !iter.next().done;)
	            goalCol = countColumn(iter.value, goalCol, tabSize);
	        goal = goalCol * view.defaultCharacterWidth;
	    }
	    else {
	        goalCol = Math.round(goal / view.defaultCharacterWidth);
	    }
	    if (dir < 0 && line.start == 0)
	        return EditorSelection.cursor(0, undefined, undefined, goal);
	    else if (dir > 0 && line.end == doc.length)
	        return EditorSelection.cursor(line.end, undefined, undefined, goal);
	    let otherLine = doc.line(line.number + dir);
	    let result = otherLine.start;
	    let seen = 0;
	    for (const iter = doc.iterRange(otherLine.start, otherLine.end); seen >= goalCol && !iter.next().done;) {
	        const { offset, leftOver } = findColumn(iter.value, seen, goalCol, tabSize);
	        seen = goalCol - leftOver;
	        result += offset;
	    }
	    return EditorSelection.cursor(result, undefined, undefined, goal);
	}

	// This will also be where dragging info and such goes
	class InputState {
	    constructor(view) {
	        this.lastKeyCode = 0;
	        this.lastKeyTime = 0;
	        this.lastSelectionOrigin = null;
	        this.lastSelectionTime = 0;
	        this.registeredEvents = [];
	        this.customHandlers = [];
	        this.composing = false;
	        this.compositionEndedAt = 0;
	        this.mouseSelection = null;
	        for (let type in handlers) {
	            let handler = handlers[type];
	            view.contentDOM.addEventListener(type, (event) => {
	                if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))
	                    return;
	                if (this.runCustomHandlers(type, view, event))
	                    event.preventDefault();
	                else
	                    handler(view, event);
	            });
	            this.registeredEvents.push(type);
	        }
	        // Must always run, even if a custom handler handled the event
	        view.contentDOM.addEventListener("keydown", (event) => {
	            view.inputState.lastKeyCode = event.keyCode;
	            view.inputState.lastKeyTime = Date.now();
	        });
	        if (view.root.activeElement == view.contentDOM)
	            view.dom.classList.add("cm-focused");
	        this.notifiedFocused = view.hasFocus;
	        this.ensureHandlers(view);
	    }
	    setSelectionOrigin(origin) {
	        this.lastSelectionOrigin = origin;
	        this.lastSelectionTime = Date.now();
	    }
	    ensureHandlers(view) {
	        let handlers = this.customHandlers = view.pluginField(domEventHandlers);
	        for (let set of handlers) {
	            for (let type in set.handlers)
	                if (this.registeredEvents.indexOf(type) < 0) {
	                    this.registeredEvents.push(type);
	                    (type != "scroll" ? view.contentDOM : view.scrollDOM).addEventListener(type, (event) => {
	                        if (!eventBelongsToEditor(view, event))
	                            return;
	                        if (this.runCustomHandlers(type, view, event))
	                            event.preventDefault();
	                    });
	                }
	        }
	    }
	    runCustomHandlers(type, view, event) {
	        for (let set of this.customHandlers) {
	            let handler = set.handlers[type];
	            if (handler) {
	                try {
	                    if (handler.call(set.plugin, event, view) || event.defaultPrevented)
	                        return true;
	                }
	                catch (e) {
	                    logException(view.state, e);
	                }
	            }
	        }
	        return false;
	    }
	    ignoreDuringComposition(event) {
	        if (!/^key/.test(event.type))
	            return false;
	        if (this.composing)
	            return true;
	        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
	        // On some input method editors (IMEs), the Enter key is used to
	        // confirm character selection. On Safari, when Enter is pressed,
	        // compositionend and keydown events are sometimes emitted in the
	        // wrong order. The key event should still be ignored, even when
	        // it happens after the compositionend event.
	        if (browser$1.safari && event.timeStamp - this.compositionEndedAt < 500) {
	            this.compositionEndedAt = 0;
	            return true;
	        }
	        return false;
	    }
	    startMouseSelection(view, event, style) {
	        if (this.mouseSelection)
	            this.mouseSelection.destroy();
	        this.mouseSelection = new MouseSelection(this, view, event, style);
	    }
	    update(update) {
	        if (this.mouseSelection)
	            this.mouseSelection.update(update);
	        this.lastKeyCode = this.lastSelectionTime = 0;
	    }
	    destroy() {
	        if (this.mouseSelection)
	            this.mouseSelection.destroy();
	    }
	}
	class MouseSelection {
	    constructor(inputState, view, startEvent, style) {
	        this.inputState = inputState;
	        this.view = view;
	        this.startEvent = startEvent;
	        this.style = style;
	        let doc = view.contentDOM.ownerDocument;
	        doc.addEventListener("mousemove", this.move = this.move.bind(this));
	        doc.addEventListener("mouseup", this.up = this.up.bind(this));
	        this.extend = startEvent.shiftKey;
	        this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
	        this.dragMove = dragMovesSelection$1(view, startEvent);
	        this.dragging = isInPrimarySelection(view, startEvent) ? null : false;
	        // When clicking outside of the selection, immediately apply the
	        // effect of starting the selection
	        if (this.dragging === false) {
	            startEvent.preventDefault();
	            this.select(startEvent);
	        }
	    }
	    move(event) {
	        if (event.buttons == 0)
	            return this.destroy();
	        if (this.dragging !== false)
	            return;
	        this.select(event);
	    }
	    up() {
	        if (this.dragging == null)
	            this.select(this.startEvent);
	        this.destroy();
	    }
	    destroy() {
	        let doc = this.view.contentDOM.ownerDocument;
	        doc.removeEventListener("mousemove", this.move);
	        doc.removeEventListener("mouseup", this.up);
	        this.inputState.mouseSelection = null;
	    }
	    select(event) {
	        let selection = this.style.get(event, this.extend, this.multiple);
	        if (!selection.eq(this.view.state.selection) || selection.primary.assoc != this.view.state.selection.primary.assoc)
	            this.view.dispatch(this.view.state.update({
	                selection,
	                annotations: Transaction.userEvent.of("pointerselection"),
	                scrollIntoView: true
	            }));
	    }
	    update(update) {
	        if (update.docChanged && this.dragging)
	            this.dragging = this.dragging.map(update.changes);
	        this.style.update(update);
	    }
	}
	function addsSelectionRange(view, event) {
	    let facet = view.state.facet(clickAddsSelectionRange);
	    return facet.length ? facet[0](event) : browser$1.mac ? event.metaKey : event.ctrlKey;
	}
	function dragMovesSelection$1(view, event) {
	    let facet = view.state.facet(dragMovesSelection);
	    return facet.length ? facet[0](event) : browser$1.mac ? !event.altKey : !event.ctrlKey;
	}
	function isInPrimarySelection(view, event) {
	    let { primary } = view.state.selection;
	    if (primary.empty)
	        return false;
	    // On boundary clicks, check whether the coordinates are inside the
	    // selection's client rectangles
	    let sel = getSelection(view.root);
	    if (sel.rangeCount == 0)
	        return true;
	    let rects = sel.getRangeAt(0).getClientRects();
	    for (let i = 0; i < rects.length; i++) {
	        let rect = rects[i];
	        if (rect.left <= event.clientX && rect.right >= event.clientX &&
	            rect.top <= event.clientY && rect.bottom >= event.clientY)
	            return true;
	    }
	    return false;
	}
	function eventBelongsToEditor(view, event) {
	    if (!event.bubbles)
	        return true;
	    if (event.defaultPrevented)
	        return false;
	    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
	        if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
	            return false;
	    return true;
	}
	const handlers = Object.create(null);
	// This is very crude, but unfortunately both these browsers _pretend_
	// that they have a clipboard API—all the objects and methods are
	// there, they just don't work, and they are hard to test.
	const brokenClipboardAPI = (browser$1.ie && browser$1.ie_version < 15) ||
	    (browser$1.ios && browser$1.webkit_version < 604);
	function capturePaste(view) {
	    let parent = view.dom.parentNode;
	    if (!parent)
	        return;
	    let target = parent.appendChild(document.createElement("textarea"));
	    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
	    target.focus();
	    setTimeout(() => {
	        view.focus();
	        target.remove();
	        doPaste(view, target.value);
	    }, 50);
	}
	function doPaste(view, input) {
	    let text = view.state.toText(input), i = 1;
	    let changes = text.lines == view.state.selection.ranges.length ?
	        view.state.changeByRange(range => {
	            let line = text.line(i++);
	            return { changes: { from: range.from, to: range.to, insert: line.slice() },
	                range: EditorSelection.cursor(range.from + line.length) };
	        }) : view.state.replaceSelection(text);
	    view.dispatch(view.state.update(changes, {
	        annotations: Transaction.userEvent.of("paste"),
	        scrollIntoView: true
	    }));
	}
	function mustCapture(event) {
	    let mods = (event.ctrlKey ? 1 /* Ctrl */ : 0) | (event.metaKey ? 8 /* Meta */ : 0) |
	        (event.altKey ? 2 /* Alt */ : 0) | (event.shiftKey ? 4 /* Shift */ : 0);
	    let code = event.keyCode, macCtrl = browser$1.mac && mods == 1 /* Ctrl */;
	    return code == 8 || (macCtrl && code == 72) || // Backspace, Ctrl-h on Mac
	        code == 46 || (macCtrl && code == 68) || // Delete, Ctrl-d on Mac
	        code == 27 || // Esc
	        (mods == (browser$1.mac ? 8 /* Meta */ : 1 /* Ctrl */) && // Ctrl/Cmd-[biyz]
	            (code == 66 || code == 73 || code == 89 || code == 90));
	}
	handlers.keydown = (view, event) => {
	    if (mustCapture(event))
	        event.preventDefault();
	    view.inputState.setSelectionOrigin("keyboardselection");
	};
	handlers.touchdown = handlers.touchmove = view => {
	    view.inputState.setSelectionOrigin("pointerselection");
	};
	handlers.mousedown = (view, event) => {
	    let style = null;
	    for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
	        style = makeStyle(view, event);
	        if (style)
	            break;
	    }
	    if (!style && event.button == 0)
	        style = basicMouseSelection(view, event);
	    if (style) {
	        focusPreventScroll(view.contentDOM);
	        view.inputState.startMouseSelection(view, event, style);
	    }
	};
	function rangeForClick(view, pos, bias, type) {
	    if (type == 1) { // Single click
	        return EditorSelection.cursor(pos, bias);
	    }
	    else if (type == 2) { // Double click
	        return groupAt(view.state, pos, bias);
	    }
	    else { // Triple click
	        let line = LineView.find(view.docView, pos);
	        if (line)
	            return EditorSelection.range(line.posAtStart, line.posAtEnd);
	        let { start, end } = view.state.doc.lineAt(pos);
	        return EditorSelection.range(start, end);
	    }
	}
	let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
	let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
	// Try to determine, for the given coordinates, associated with the
	// given position, whether they are related to the element before or
	// the element after the position.
	function findPositionSide(view, pos, x, y) {
	    let line = LineView.find(view.docView, pos);
	    if (!line)
	        return 1;
	    let off = pos - line.posAtStart;
	    // Line boundaries point into the line
	    if (off == 0)
	        return 1;
	    if (off == line.length)
	        return -1;
	    // Positions on top of an element point at that element
	    let before = line.coordsAt(off, -1);
	    if (before && inside(x, y, before))
	        return -1;
	    let after = line.coordsAt(off, 1);
	    if (after && inside(x, y, after))
	        return 1;
	    // This is probably a line wrap point. Pick before if the point is
	    // beside it.
	    return before && insideY(y, before) ? -1 : 1;
	}
	function queryPos(view, event) {
	    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY });
	    if (pos < 0)
	        return null;
	    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
	}
	function basicMouseSelection(view, event) {
	    let start = queryPos(view, event), type = event.detail;
	    let startSel = view.state.selection;
	    return {
	        update(update) {
	            if (update.changes) {
	                if (start)
	                    start.pos = update.changes.mapPos(start.pos);
	                startSel = startSel.map(update.changes);
	            }
	        },
	        get(event, extend, multiple) {
	            let cur = queryPos(view, event);
	            if (!cur || !start)
	                return startSel;
	            let range = rangeForClick(view, cur.pos, cur.bias, type);
	            if (start.pos != cur.pos && !extend) {
	                let startRange = rangeForClick(view, start.pos, start.bias, type);
	                let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
	                range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
	            }
	            if (extend)
	                return startSel.replaceRange(startSel.primary.extend(range.from, range.to));
	            else if (multiple)
	                return startSel.addRange(range);
	            else
	                return EditorSelection.create([range]);
	        }
	    };
	}
	handlers.dragstart = (view, event) => {
	    let { selection: { primary } } = view.state;
	    let { mouseSelection } = view.inputState;
	    if (mouseSelection)
	        mouseSelection.dragging = primary;
	    if (event.dataTransfer) {
	        event.dataTransfer.setData("Text", view.state.sliceDoc(primary.from, primary.to));
	        event.dataTransfer.effectAllowed = "copyMove";
	    }
	};
	handlers.drop = (view, event) => {
	    if (!event.dataTransfer)
	        return;
	    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY });
	    let text = event.dataTransfer.getData("Text");
	    if (dropPos < 0 || !text)
	        return;
	    event.preventDefault();
	    let { mouseSelection } = view.inputState;
	    let del = mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
	        { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
	    let ins = { from: dropPos, insert: text };
	    let changes = view.state.changes(del ? [del, ins] : ins);
	    view.focus();
	    view.dispatch(view.state.update({
	        changes,
	        selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
	        annotations: Transaction.userEvent.of("drop")
	    }));
	};
	handlers.paste = (view, event) => {
	    view.observer.flush();
	    let data = brokenClipboardAPI ? null : event.clipboardData;
	    let text = data && data.getData("text/plain");
	    if (text) {
	        doPaste(view, text);
	        event.preventDefault();
	    }
	    else {
	        capturePaste(view);
	    }
	};
	function captureCopy(view, text) {
	    // The extra wrapper is somehow necessary on IE/Edge to prevent the
	    // content from being mangled when it is put onto the clipboard
	    let parent = view.dom.parentNode;
	    if (!parent)
	        return;
	    let target = parent.appendChild(document.createElement("textarea"));
	    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
	    target.value = text;
	    target.focus();
	    target.selectionEnd = text.length;
	    target.selectionStart = 0;
	    setTimeout(() => {
	        target.remove();
	        view.focus();
	    }, 50);
	}
	function copiedRange(state) {
	    let content = [], ranges = [];
	    for (let range of state.selection.ranges)
	        if (!range.empty) {
	            content.push(state.sliceDoc(range.from, range.to));
	            ranges.push(range);
	        }
	    if (!content.length) {
	        // Nothing selected, do a line-wise copy
	        let upto = -1;
	        for (let { from } of state.selection.ranges) {
	            let line = state.doc.lineAt(from);
	            if (line.number > upto) {
	                content.push(line.slice());
	                ranges.push({ from: line.start, to: Math.min(state.doc.length, line.end + 1) });
	            }
	            upto = line.number;
	        }
	    }
	    return { text: content.join(state.lineBreak), ranges };
	}
	handlers.copy = handlers.cut = (view, event) => {
	    let { text, ranges } = copiedRange(view.state);
	    if (!text)
	        return;
	    let data = brokenClipboardAPI ? null : event.clipboardData;
	    if (data) {
	        event.preventDefault();
	        data.clearData();
	        data.setData("text/plain", text);
	    }
	    else {
	        captureCopy(view, text);
	    }
	    if (event.type == "cut")
	        view.dispatch(view.state.update({
	            changes: ranges,
	            scrollIntoView: true,
	            annotations: Transaction.userEvent.of("cut")
	        }));
	};
	handlers.focus = handlers.blur = view => {
	    setTimeout(() => {
	        if (view.hasFocus != view.inputState.notifiedFocused)
	            view.update([]);
	    }, 10);
	};
	handlers.beforeprint = view => {
	    view.viewState.printing = true;
	    view.requestMeasure();
	    setTimeout(() => {
	        view.viewState.printing = false;
	        view.requestMeasure();
	    }, 2000);
	};
	function forceClearComposition(view) {
	    if (view.docView.compositionDeco.size)
	        view.update([]);
	}
	handlers.compositionstart = handlers.compositionupdate = view => {
	    if (!view.inputState.composing) {
	        if (view.docView.compositionDeco.size) {
	            view.observer.flush();
	            forceClearComposition(view);
	        }
	        // FIXME possibly set a timeout to clear it again on Android
	        view.inputState.composing = true;
	    }
	};
	handlers.compositionend = view => {
	    view.inputState.composing = false;
	    view.inputState.compositionEndedAt = Date.now();
	    setTimeout(() => {
	        if (!view.inputState.composing)
	            forceClearComposition(view);
	    }, 50);
	};

	const observeOptions = {
	    childList: true,
	    characterData: true,
	    subtree: true,
	    characterDataOldValue: true
	};
	// IE11 has very broken mutation observers, so we also listen to
	// DOMCharacterDataModified there
	const useCharData = browser$1.ie && browser$1.ie_version <= 11;
	class DOMObserver {
	    constructor(view, onChange, onScrollChanged) {
	        this.view = view;
	        this.onChange = onChange;
	        this.onScrollChanged = onScrollChanged;
	        this.active = false;
	        this.ignoreSelection = new DOMSelection;
	        this.charDataQueue = [];
	        this.charDataTimeout = null;
	        this.scrollTargets = [];
	        this.intersection = null;
	        this.intersecting = false;
	        // Timeout for scheduling check of the parents that need scroll handlers
	        this.parentCheck = -1;
	        this.dom = view.contentDOM;
	        this.observer = new MutationObserver(mutations => this.flush(mutations));
	        if (useCharData)
	            this.onCharData = (event) => {
	                this.charDataQueue.push({ target: event.target,
	                    type: "characterData",
	                    oldValue: event.prevValue });
	                if (this.charDataTimeout == null)
	                    this.charDataTimeout = setTimeout(() => this.flush(), 20);
	            };
	        this.onSelectionChange = () => {
	            if (this.view.root.activeElement == this.dom)
	                this.flush();
	        };
	        this.start();
	        this.onScroll = this.onScroll.bind(this);
	        window.addEventListener("scroll", this.onScroll);
	        if (typeof IntersectionObserver == "function") {
	            this.intersection = new IntersectionObserver(entries => {
	                if (this.parentCheck < 0)
	                    this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
	                if (entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
	                    this.intersecting = !this.intersecting;
	                    this.onScroll();
	                }
	            }, {});
	            this.intersection.observe(this.dom);
	        }
	        this.listenForScroll();
	    }
	    onScroll() {
	        if (this.intersecting) {
	            this.flush();
	            this.onScrollChanged();
	        }
	    }
	    listenForScroll() {
	        this.parentCheck = -1;
	        let i = 0, changed = null;
	        for (let dom = this.dom; dom;) {
	            if (dom.nodeType == 1) {
	                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
	                    i++;
	                else if (!changed)
	                    changed = this.scrollTargets.slice(0, i);
	                if (changed)
	                    changed.push(dom);
	                dom = dom.parentNode;
	            }
	            else if (dom.nodeType == 11) { // Shadow root
	                dom = dom.host;
	            }
	            else {
	                break;
	            }
	        }
	        if (i < this.scrollTargets.length && !changed)
	            changed = this.scrollTargets.slice(0, i);
	        if (changed) {
	            for (let dom of this.scrollTargets)
	                dom.removeEventListener("scroll", this.onScroll);
	            for (let dom of this.scrollTargets = changed)
	                dom.addEventListener("scroll", this.onScroll);
	        }
	    }
	    ignore(f) {
	        if (!this.active)
	            return f();
	        try {
	            this.stop();
	            return f();
	        }
	        finally {
	            this.start();
	            this.clear();
	        }
	    }
	    start() {
	        if (this.active)
	            return;
	        this.observer.observe(this.dom, observeOptions);
	        // FIXME is this shadow-root safe?
	        this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
	        if (useCharData)
	            this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
	        this.active = true;
	    }
	    stop() {
	        if (!this.active)
	            return;
	        this.active = false;
	        this.observer.disconnect();
	        this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
	        if (useCharData)
	            this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
	    }
	    takeCharRecords() {
	        let result = this.charDataQueue;
	        if (result.length) {
	            this.charDataQueue = [];
	            clearTimeout(this.charDataTimeout);
	            this.charDataTimeout = null;
	        }
	        return result;
	    }
	    clearSelection() {
	        this.ignoreSelection.set(getSelection(this.view.root));
	    }
	    // Throw away any pending changes
	    clear() {
	        this.observer.takeRecords();
	        this.takeCharRecords();
	        this.clearSelection();
	    }
	    // Apply pending changes, if any
	    flush(records = this.observer.takeRecords()) {
	        if (this.charDataQueue.length)
	            records = records.concat(this.takeCharRecords());
	        let selection = getSelection(this.view.root);
	        let newSel = !this.ignoreSelection.eq(selection) && hasSelection(this.dom, selection);
	        if (records.length == 0 && !newSel)
	            return;
	        let from = -1, to = -1, typeOver = false;
	        for (let record of records) {
	            let range = this.readMutation(record);
	            if (!range)
	                continue;
	            if (range.typeOver)
	                typeOver = true;
	            if (from == -1) {
	                ({ from, to } = range);
	            }
	            else {
	                from = Math.min(range.from, from);
	                to = Math.max(range.to, to);
	            }
	        }
	        let apply = from > -1 || newSel;
	        if (!apply || !this.onChange(from, to, typeOver)) {
	            if (this.view.docView.dirty) {
	                this.ignore(() => this.view.docView.sync());
	                this.view.docView.dirty = 0 /* Not */;
	            }
	            this.view.docView.updateSelection();
	        }
	        this.clearSelection();
	    }
	    readMutation(rec) {
	        let cView = this.view.docView.nearest(rec.target);
	        if (!cView || cView.ignoreMutation(rec))
	            return null;
	        cView.markDirty();
	        if (rec.type == "childList") {
	            let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
	            let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
	            return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
	                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
	        }
	        else { // "characterData"
	            return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
	        }
	    }
	    destroy() {
	        this.stop();
	        if (this.intersection)
	            this.intersection.disconnect();
	        for (let dom of this.scrollTargets)
	            dom.removeEventListener("scroll", this.onScroll);
	        window.removeEventListener("scroll", this.onScroll);
	        clearTimeout(this.parentCheck);
	    }
	}
	function findChild(cView, dom, dir) {
	    while (dom) {
	        let curView = ContentView.get(dom);
	        if (curView && curView.parent == cView)
	            return curView;
	        let parent = dom.parentNode;
	        dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
	    }
	    return null;
	}

	// FIXME reconsider this kludge (does it break reading dom text with newlines?)
	const LineSep = "\ufdda"; // A Unicode 'non-character', used to denote newlines internally
	function applyDOMChange(view, start, end, typeOver) {
	    let change, newSel;
	    let sel = view.state.selection.primary, bounds;
	    if (start > -1 && (bounds = view.docView.domBoundsAround(start, end, 0))) {
	        let { from, to } = bounds;
	        let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view.contentDOM, view.root);
	        let reader = new DOMReader(selPoints);
	        reader.readRange(bounds.startDOM, bounds.endDOM);
	        newSel = selectionFromPoints(selPoints, from);
	        let preferredPos = sel.from, preferredSide = null;
	        // Prefer anchoring to end when Backspace is pressed
	        if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100) {
	            preferredPos = sel.to;
	            preferredSide = "end";
	        }
	        let diff = findDiff(view.state.doc.sliceString(from, to, LineSep), reader.text, preferredPos - from, preferredSide);
	        if (diff)
	            change = { from: from + diff.from, to: from + diff.toA,
	                insert: Text.of(reader.text.slice(diff.from, diff.toB).split(LineSep)) };
	    }
	    else if (view.hasFocus) {
	        let domSel = getSelection(view.root);
	        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
	        let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ? view.state.selection.primary.head
	            : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
	        let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset
	            ? view.state.selection.primary.anchor
	            : selectionCollapsed(domSel) ? head : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
	        if (head != sel.head || anchor != sel.anchor)
	            newSel = EditorSelection.single(anchor, head);
	    }
	    if (!change && !newSel)
	        return false;
	    // Heuristic to notice typing over a selected character
	    if (!change && typeOver && !sel.empty && newSel && newSel.primary.empty)
	        change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
	    if (change) {
	        let startState = view.state;
	        // Android browsers don't fire reasonable key events for enter,
	        // backspace, or delete. So this detects changes that look like
	        // they're caused by those keys, and reinterprets them as key
	        // events.
	        if (browser$1.android &&
	            ((change.from == sel.from && change.to == sel.to &&
	                change.insert.length == 1 && change.insert.lines == 2 &&
	                dispatchKey(view, "Enter", 10)) ||
	                (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
	                    dispatchKey(view, "Backspace", 8)) ||
	                (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
	                    dispatchKey(view, "Delete", 46))))
	            return view.state != startState;
	        let tr;
	        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3) {
	            let before = sel.from < change.from ? startState.doc.sliceString(sel.from, change.from, LineSep) : "";
	            let after = sel.to > change.to ? startState.doc.sliceString(change.to, sel.to, LineSep) : "";
	            tr = startState.replaceSelection(Text.of((before + change.insert.sliceString(0, undefined, LineSep) + after).split(LineSep)));
	        }
	        else {
	            let changes = startState.changes(change);
	            tr = {
	                changes,
	                selection: newSel && !startState.selection.primary.eq(newSel.primary) && newSel.primary.to <= changes.newLength
	                    ? startState.selection.replaceRange(newSel.primary) : undefined
	            };
	        }
	        view.dispatch(startState.update(tr, { scrollIntoView: true, annotations: Transaction.userEvent.of("input") }));
	        return true;
	    }
	    else if (newSel && !newSel.primary.eq(sel)) {
	        let scrollIntoView = false, annotations;
	        if (view.inputState.lastSelectionTime > Date.now() - 50) {
	            if (view.inputState.lastSelectionOrigin == "keyboardselection")
	                scrollIntoView = true;
	            else
	                annotations = Transaction.userEvent.of(view.inputState.lastSelectionOrigin);
	        }
	        view.dispatch(view.state.update({ selection: newSel, scrollIntoView, annotations }));
	        return true;
	    }
	    return false;
	}
	function findDiff(a, b, preferredPos, preferredSide) {
	    let minLen = Math.min(a.length, b.length);
	    let from = 0;
	    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
	        from++;
	    if (from == minLen && a.length == b.length)
	        return null;
	    let toA = a.length, toB = b.length;
	    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
	        toA--;
	        toB--;
	    }
	    if (preferredSide == "end") {
	        let adjust = Math.max(0, from - Math.min(toA, toB));
	        preferredPos -= toA + adjust - from;
	    }
	    if (toA < from && a.length < b.length) {
	        let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
	        from -= move;
	        toB = from + (toB - toA);
	        toA = from;
	    }
	    else if (toB < from) {
	        let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
	        from -= move;
	        toA = from + (toA - toB);
	        toB = from;
	    }
	    return { from, toA, toB };
	}
	class DOMReader {
	    constructor(points) {
	        this.points = points;
	        this.text = "";
	    }
	    readRange(start, end) {
	        if (!start)
	            return;
	        let parent = start.parentNode;
	        for (let cur = start;;) {
	            this.findPointBefore(parent, cur);
	            this.readNode(cur);
	            let next = cur.nextSibling;
	            if (next == end)
	                break;
	            let view = ContentView.get(cur), nextView = ContentView.get(next);
	            if ((view ? view.breakAfter : isBlockElement(cur)) ||
	                ((nextView ? nextView.breakAfter : isBlockElement(next)) && !(cur.nodeName == "BR" && !cur.cmIgnore)))
	                this.text += LineSep;
	            cur = next;
	        }
	        this.findPointBefore(parent, end);
	    }
	    readNode(node) {
	        if (node.cmIgnore)
	            return;
	        let view = ContentView.get(node);
	        let fromView = view && view.overrideDOMText;
	        let text;
	        if (fromView != null)
	            text = fromView.sliceString(0, undefined, LineSep);
	        else if (node.nodeType == 3)
	            text = node.nodeValue;
	        else if (node.nodeName == "BR")
	            text = node.nextSibling ? LineSep : "";
	        else if (node.nodeType == 1)
	            this.readRange(node.firstChild, null);
	        if (text != null) {
	            this.findPointIn(node, text.length);
	            this.text += text;
	        }
	    }
	    findPointBefore(node, next) {
	        for (let point of this.points)
	            if (point.node == node && node.childNodes[point.offset] == next)
	                point.pos = this.text.length;
	    }
	    findPointIn(node, maxLen) {
	        for (let point of this.points)
	            if (point.node == node)
	                point.pos = this.text.length + Math.min(point.offset, maxLen);
	    }
	}
	function isBlockElement(node) {
	    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
	}
	class DOMPoint {
	    constructor(node, offset) {
	        this.node = node;
	        this.offset = offset;
	        this.pos = -1;
	    }
	}
	function selectionPoints(dom, root) {
	    let result = [];
	    if (root.activeElement != dom)
	        return result;
	    let { anchorNode, anchorOffset, focusNode, focusOffset } = getSelection(root);
	    if (anchorNode) {
	        result.push(new DOMPoint(anchorNode, anchorOffset));
	        if (focusNode != anchorNode || focusOffset != anchorOffset)
	            result.push(new DOMPoint(focusNode, focusOffset));
	    }
	    return result;
	}
	function selectionFromPoints(points, base) {
	    if (points.length == 0)
	        return null;
	    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
	    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
	}
	function dispatchKey(view, name, code) {
	    let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
	    let down = new KeyboardEvent("keydown", options);
	    view.contentDOM.dispatchEvent(down);
	    let up = new KeyboardEvent("keyup", options);
	    view.contentDOM.dispatchEvent(up);
	    return down.defaultPrevented || up.defaultPrevented;
	}

	// The editor's update state machine looks something like this:
	//
	//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
	//                                         ↑      ↓
	//                                         Updating (measure)
	//
	// The difference between 'Idle' and 'Idle (unchecked)' lies in
	// whether a layout check has been scheduled. A regular update through
	// the `update` method updates the DOM in a write-only fashion, and
	// relies on a check (scheduled with `requestAnimationFrame`) to make
	// sure everything is where it should be and the viewport covers the
	// visible code. That check continues to measure and then optionally
	// update until it reaches a coherent state.
	/// An editor view represents the editor's user interface. It holds
	/// the editable DOM surface, and possibly other elements such as the
	/// line number gutter. It handles events and dispatches state
	/// transactions for editing actions.
	class EditorView {
	    /// Construct a new view. You'll usually want to put `view.dom` into
	    /// your document after creating a view, so that the user can see
	    /// it.
	    constructor(
	    /// Configuration options.
	    config = {}) {
	        this.plugins = [];
	        this.editorAttrs = {};
	        this.contentAttrs = {};
	        this.bidiCache = [];
	        /// @internal
	        this.updateState = 2 /* Updating */;
	        /// @internal
	        this.measureScheduled = -1;
	        /// @internal
	        this.measureRequests = [];
	        this.contentDOM = document.createElement("div");
	        this.scrollDOM = document.createElement("div");
	        this.scrollDOM.className = themeClass("scroller");
	        this.scrollDOM.appendChild(this.contentDOM);
	        this.dom = document.createElement("div");
	        this.dom.appendChild(this.scrollDOM);
	        this.dispatch = config.dispatch || ((tr) => this.update([tr]));
	        this.root = (config.root || document);
	        this.viewState = new ViewState(config.state || EditorState.create());
	        this.plugins = this.state.facet(viewPlugin).map(spec => PluginInstance.create(spec, this));
	        this.observer = new DOMObserver(this, (from, to, typeOver) => applyDOMChange(this, from, to, typeOver), () => this.measure());
	        this.docView = new DocView(this);
	        this.inputState = new InputState(this);
	        this.mountStyles();
	        this.updateAttrs();
	        this.updateState = 0 /* Idle */;
	        ensureGlobalHandler();
	        this.requestMeasure();
	        if (config.parent)
	            config.parent.appendChild(this.dom);
	    }
	    /// The current editor state.
	    get state() { return this.viewState.state; }
	    /// To be able to display large documents without consuming too much
	    /// memory or overloading the browser, CodeMirror only draws the
	    /// code that is visible (plus a margin around it) to the DOM. This
	    /// property tells you the extent of the current drawn viewport, in
	    /// document positions.
	    get viewport() { return this.viewState.viewport; }
	    /// When there are, for example, large collapsed ranges in the
	    /// viewport, its size can be a lot bigger than the actual visible
	    /// content. Thus, if you are doing something like styling the
	    /// content in the viewport, it is preferable to only do so for
	    /// these ranges, which are the subset of the viewport that is
	    /// actually drawn.
	    get visibleRanges() { return this.viewState.visibleRanges; }
	    /// Update the view for the given array of transactions. This will
	    /// update the visible document and selection to match the state
	    /// produced by the transactions, and notify view plugins of the
	    /// change.
	    update(transactions) {
	        if (this.updateState != 0 /* Idle */)
	            throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
	        this.updateState = 2 /* Updating */;
	        let state = this.state;
	        for (let tr of transactions) {
	            if (tr.startState != state)
	                throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
	            state = tr.state;
	        }
	        let update = new ViewUpdate(this, state, transactions);
	        let scrollTo = transactions.some(tr => tr.scrolledIntoView) ? state.selection.primary : null;
	        this.viewState.update(update, scrollTo);
	        this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
	        if (!update.empty)
	            this.updatePlugins(update);
	        let redrawn = this.docView.update(update);
	        if (this.state.facet(styleModule) != this.styleModules)
	            this.mountStyles();
	        this.updateAttrs();
	        this.updateState = 0 /* Idle */;
	        if (redrawn || scrollTo || this.viewState.mustEnforceCursorAssoc)
	            this.requestMeasure();
	    }
	    updatePlugins(update) {
	        let prevSpecs = update.prevState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
	        if (prevSpecs != specs) {
	            let newPlugins = [], reused = [];
	            for (let spec of specs) {
	                let found = prevSpecs.indexOf(spec);
	                if (found < 0) {
	                    newPlugins.push(PluginInstance.create(spec, this));
	                }
	                else {
	                    let plugin = this.plugins[found].update(update);
	                    reused.push(plugin);
	                    newPlugins.push(plugin);
	                }
	            }
	            for (let plugin of this.plugins)
	                if (reused.indexOf(plugin) < 0)
	                    plugin.destroy(this);
	            this.plugins = newPlugins;
	            this.inputState.ensureHandlers(this);
	        }
	        else {
	            for (let i = 0; i < this.plugins.length; i++)
	                this.plugins[i] = this.plugins[i].update(update);
	        }
	    }
	    /// @internal
	    measure() {
	        if (this.measureScheduled > -1)
	            cancelAnimationFrame(this.measureScheduled);
	        this.measureScheduled = 1; // Prevent requestMeasure calls from scheduling another animation frame
	        for (let i = 0;; i++) {
	            this.updateState = 1 /* Measuring */;
	            let changed = this.viewState.measure(this.docView, i > 0);
	            let measuring = this.measureRequests;
	            if (!changed && !measuring.length && this.viewState.scrollTo == null)
	                break;
	            this.measureRequests = [];
	            if (i > 5) {
	                console.warn("Viewport failed to stabilize");
	                break;
	            }
	            let measured = measuring.map(m => {
	                try {
	                    return m.read(this);
	                }
	                catch (e) {
	                    logException(this.state, e);
	                    return BadMeasure;
	                }
	            });
	            let update = new ViewUpdate(this, this.state);
	            update.flags |= changed;
	            this.updateState = 2 /* Updating */;
	            this.updatePlugins(update);
	            if (changed)
	                this.docView.update(update);
	            for (let i = 0; i < measuring.length; i++)
	                if (measured[i] != BadMeasure) {
	                    try {
	                        measuring[i].write(measured[i], this);
	                    }
	                    catch (e) {
	                        logException(this.state, e);
	                    }
	                }
	            if (this.viewState.scrollTo) {
	                this.docView.scrollPosIntoView(this.viewState.scrollTo.head, this.viewState.scrollTo.assoc);
	                this.viewState.scrollTo = null;
	            }
	            if (!(changed & 4 /* Viewport */) && this.measureRequests.length == 0)
	                break;
	        }
	        this.updateState = 0 /* Idle */;
	        this.measureScheduled = -1;
	    }
	    /// Get the CSS classes for the currently active editor themes.
	    get themeClasses() {
	        return baseThemeID + " " +
	            (this.state.facet(darkTheme) ? baseDarkThemeID : baseLightThemeID) + " " +
	            this.state.facet(theme).join(" ");
	    }
	    updateAttrs() {
	        let editorAttrs = combineAttrs(this.state.facet(editorAttributes), {
	            class: themeClass("wrap") + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
	        });
	        updateAttrs(this.dom, this.editorAttrs, editorAttrs);
	        this.editorAttrs = editorAttrs;
	        let contentAttrs = combineAttrs(this.state.facet(contentAttributes), {
	            spellcheck: "false",
	            contenteditable: String(this.state.facet(editable)),
	            class: themeClass("content"),
	            style: `${browser$1.tabSize}: ${this.state.tabSize}`,
	            role: "textbox",
	            "aria-multiline": "true"
	        });
	        updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
	        this.contentAttrs = contentAttrs;
	    }
	    mountStyles() {
	        this.styleModules = this.state.facet(styleModule);
	        StyleModule.mount(this.root, this.styleModules.concat(baseTheme).reverse());
	    }
	    /// Find the DOM parent node and offset (child offset if `node` is
	    /// an element, character offset when it is a text node) at the
	    /// given document position.
	    domAtPos(pos) {
	        return this.docView.domAtPos(pos);
	    }
	    /// Find the document position at the given DOM node. Can be useful
	    /// for associating positions with DOM events. Will raise an error
	    /// when `node` isn't part of the editor content.
	    posAtDOM(node, offset = 0) {
	        return this.docView.posFromDOM(node, offset);
	    }
	    readMeasured() {
	        if (this.updateState == 2 /* Updating */)
	            throw new Error("Reading the editor layout isn't allowed during an update");
	        if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)
	            this.measure();
	    }
	    /// Make sure plugins get a chance to measure the DOM before the
	    /// next frame. Calling this is preferable to messing with the DOM
	    /// directly from, for example, an even handler, because it'll make
	    /// sure measuring and drawing done by other components is
	    /// synchronized, avoiding unnecessary DOM layout computations.
	    requestMeasure(request) {
	        if (this.measureScheduled < 0)
	            this.measureScheduled = requestAnimationFrame(() => this.measure());
	        if (request) {
	            if (request.key != null)
	                for (let i = 0; i < this.measureRequests.length; i++) {
	                    if (this.measureRequests[i].key === request.key) {
	                        this.measureRequests[i] = request;
	                        return;
	                    }
	                }
	            this.measureRequests.push(request);
	        }
	    }
	    /// Collect all values provided by the active plugins for a given
	    /// field.
	    pluginField(field) {
	        // FIXME make this error when called during plugin updating
	        let result = [];
	        for (let plugin of this.plugins)
	            plugin.takeField(field, result);
	        return result;
	    }
	    /// Get the value of a specific plugin, if present. Note that
	    /// plugins that crash can be dropped from a view, so even when you
	    /// know you registered a given plugin, it is recommended to check
	    /// the return value of this method.
	    plugin(plugin) {
	        for (let inst of this.plugins)
	            if (inst.spec == plugin)
	                return inst.value;
	        return null;
	    }
	    /// Find the line or block widget at the given vertical position.
	    /// `editorTop`, if given, provides the vertical position of the top
	    /// of the editor. It defaults to the editor's screen position
	    /// (which will force a DOM layout).
	    blockAtHeight(height, editorTop) {
	        this.readMeasured();
	        return this.viewState.blockAtHeight(height, ensureTop(editorTop, this.contentDOM));
	    }
	    /// Find information for the line at the given vertical position.
	    /// The resulting block info might hold another array of block info
	    /// structs in its `type` field if this line consists of more than
	    /// one block.
	    lineAtHeight(height, editorTop) {
	        this.readMeasured();
	        return this.viewState.lineAtHeight(height, ensureTop(editorTop, this.contentDOM));
	    }
	    /// Find the height information for the given line.
	    lineAt(pos, editorTop) {
	        // FIXME separate line (extent, bidi, widgets) info from height queries
	        if (editorTop == null)
	            this.readMeasured();
	        return this.viewState.lineAt(pos, ensureTop(editorTop, this.contentDOM));
	    }
	    /// Iterate over the height information of the lines in the
	    /// viewport.
	    viewportLines(f, editorTop) {
	        let { from, to } = this.viewport;
	        this.viewState.forEachLine(from, to, f, ensureTop(editorTop, this.contentDOM));
	    }
	    /// The editor's total content height.
	    get contentHeight() {
	        return this.viewState.heightMap.height + this.viewState.paddingTop + this.viewState.paddingBottom;
	    }
	    /// Move a cursor position by [grapheme
	    /// cluster](#text.nextClusterBreak). `forward` determines whether
	    /// the motion is away from the line start, or towards it. Motion in
	    /// bidirectional text is in visual order, in the editor's [text
	    /// direction](#view.EditorView.textDirection). When the start
	    /// position was the last one on the line, the returned position
	    /// will be across the line break. If there is no further line, the
	    /// original position is returned.
	    moveByChar(start, forward, by) {
	        return moveByChar(this, start, forward, by);
	    }
	    /// Move a cursor position across the next group of either
	    /// [letters](#state.EditorState.charCategorizer) or non-letter
	    /// non-whitespace characters.
	    moveByGroup(start, forward) {
	        return moveByChar(this, start, forward, initial => byGroup(this, start.head, initial));
	    }
	    /// Move to the next line boundary in the given direction. If
	    /// `includeWrap` is true, line wrapping is on, and there is a
	    /// further wrap point on the current line, the wrap point will be
	    /// returned. Otherwise this function will return the start or end
	    /// of the line.
	    moveToLineBoundary(start, forward, includeWrap = true) {
	        return moveToLineBoundary(this, start, forward, includeWrap);
	    }
	    /// Move a cursor position vertically. When `distance` isn't given,
	    /// it defaults to moving to the next line (including wrapped
	    /// lines). Otherwise, `distance` should provide a positive distance
	    /// in pixels.
	    ///
	    /// When `start` has a
	    /// [`goalColumn`](#state.SelectionRange.goalColumn), the vertical
	    /// motion will use that as a target horizontal position. Otherwise,
	    /// the cursor's own horizontal position is used. The returned
	    /// cursor will have its goal column set to whichever column was
	    /// used.
	    moveVertically(start, forward, distance) {
	        return moveVertically(this, start, forward, distance);
	    }
	    /// Scroll the given document position into view.
	    scrollPosIntoView(pos) {
	        this.viewState.scrollTo = EditorSelection.cursor(pos);
	        this.requestMeasure();
	    }
	    /// Get the document position at the given screen coordinates.
	    /// Returns -1 if no valid position could be found.
	    posAtCoords(coords) {
	        this.readMeasured();
	        return posAtCoords(this, coords);
	    }
	    /// Get the screen coordinates at the given document position.
	    coordsAtPos(pos, side = 1) {
	        this.readMeasured();
	        let rect = this.docView.coordsAt(pos, side);
	        if (!rect || rect.left == rect.right)
	            return rect;
	        let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
	        let span = order[BidiSpan.find(order, pos - line.start, -1, side)];
	        let x = (span.dir == Direction.LTR) == (side < 0) ? rect.right : rect.left;
	        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
	    }
	    /// The default width of a character in the editor. May not
	    /// accurately reflect the width of all characters.
	    get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
	    /// The default height of a line in the editor.
	    get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
	    /// The text direction (`direction` CSS property) of the editor.
	    get textDirection() { return this.viewState.heightOracle.direction; }
	    /// Whether this editor [wraps lines](#view.EditorView.lineWrapping)
	    /// (as determined by the `white-space` CSS property of its content
	    /// element).
	    get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
	    /// Returns the bidirectional text structure of the given line
	    /// (which should be in the current document) as an array of span
	    /// objects. The order of these spans matches the [text
	    /// direction](#view.EditorView.textDirection)—if that is
	    /// left-to-right, the leftmost spans come first, otherwise the
	    /// rightmost spans come first.
	    bidiSpans(line) {
	        if (line.length > MaxBidiLine)
	            return trivialOrder(line.length);
	        let dir = this.textDirection;
	        for (let entry of this.bidiCache)
	            if (entry.from == line.start && entry.dir == dir)
	                return entry.order;
	        let order = computeOrder(line.slice(), this.textDirection);
	        this.bidiCache.push(new CachedOrder(line.start, line.end, dir, order));
	        return order;
	    }
	    /// Check whether the editor has focus.
	    get hasFocus() {
	        return this.root.activeElement == this.contentDOM;
	    }
	    /// Put focus on the editor.
	    focus() {
	        this.observer.ignore(() => {
	            focusPreventScroll(this.contentDOM);
	            this.docView.updateSelection();
	        });
	    }
	    /// Clean up this editor view, removing its element from the
	    /// document, unregistering event handlers, and notifying
	    /// plugins. The view instance can no longer be used after
	    /// calling this.
	    destroy() {
	        for (let plugin of this.plugins)
	            plugin.destroy(this);
	        this.inputState.destroy();
	        this.dom.remove();
	        this.observer.destroy();
	        if (this.measureScheduled > -1)
	            cancelAnimationFrame(this.measureScheduled);
	    }
	    /// Facet that can be used to add DOM event handlers. The value
	    /// should be an object mapping event names to handler functions. The
	    /// first such function to return true will be assumed to have handled
	    /// that event, and no other handlers or built-in behavior will be
	    /// activated for it.
	    static domEventHandlers(handlers) {
	        return ViewPlugin.define(() => ({})).eventHandlers(handlers);
	    }
	    /// Create a theme extension. The argument object should map [theme
	    /// selectors](#view.themeClass) to styles, which are (potentially
	    /// nested) [style
	    /// declarations](https://github.com/marijnh/style-mod#documentation)
	    /// providing the CSS styling for the selector.
	    ///
	    /// When `dark` is set to true, the theme will be marked as dark,
	    /// which causes the [base theme](#view.EditorView^baseTheme) rules
	    /// marked with `@dark` to apply instead of those marked with
	    /// `@light`.
	    static theme(spec, options) {
	        let prefix = StyleModule.newName();
	        let result = [theme.of(prefix), styleModule.of(buildTheme(prefix, spec))];
	        if (options && options.dark)
	            result.push(darkTheme.of(true));
	        return result;
	    }
	    /// Create an extension that adds styles to the base theme. The
	    /// given object works much like the one passed to
	    /// [`theme`](#view.EditorView^theme), but allows selectors to be
	    /// marked by adding `@dark` to their end to only apply when there
	    /// is a dark theme active, or by `@light` to only apply when there
	    /// is _no_ dark theme active.
	    static baseTheme(spec) {
	        return Precedence.Fallback.set(styleModule.of(buildTheme(baseThemeID, spec)));
	    }
	}
	/// Facet to add a [style
	/// module](https://github.com/marijnh/style-mod#readme) to an editor
	/// view. The view will ensure that the module is registered in its
	/// [document root](#view.EditorView.constructor^config.root).
	EditorView.styleModule = styleModule;
	/// Allows you to provide a function that should be called when the
	/// library catches an exception from an extension (mostly from view
	/// plugins, but may be used by other extensions to route exceptions
	/// from user-code-provided callbacks). This is mostly useful for
	/// debugging and logging. See [`logException`](#view.logException).
	EditorView.exceptionSink = exceptionSink;
	/// Facet that controls whether the editor content is editable. When
	/// its the highest-precedence value is `false`, editing is
	/// disabled, and the content element will no longer have its
	/// `contenteditable` attribute set to `true`. (Note that this
	/// doesn't affect API calls that change the editor content, even
	/// when those are bound to keys or buttons.)
	EditorView.editable = editable;
	/// Facet used to configure whether a given selection drag event
	/// should move or copy the selection. The given predicate will be
	/// called with the `mousedown` event, and can return `true` when
	/// the drag should move the content.
	EditorView.dragMovesSelection = dragMovesSelection;
	/// Facet used to configure whether a given selecting click adds
	/// a new range to the existing selection or replaces it entirely.
	EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
	/// Allows you to influence the way mouse selection happens. The
	/// functions in this facet will be called for a `mousedown` event
	/// on the editor, and can return an object that overrides the way a
	/// selection is computed from that mouse click or drag.
	EditorView.mouseSelectionStyle = mouseSelectionStyle;
	/// A facet that determines which [decorations](#view.Decoration)
	/// are shown in the view. See also [view
	/// plugins](#view.EditorView^decorations), which have a separate
	/// mechanism for providing decorations.
	EditorView.decorations = decorations;
	/// An extension that enables line wrapping in the editor.
	EditorView.lineWrapping = EditorView.theme({ content: { whiteSpace: "pre-wrap" } });
	/// Facet that provides attributes for the editor's editable DOM
	/// element.
	EditorView.contentAttributes = contentAttributes;
	/// Facet that provides editor DOM attributes for the editor's
	/// outer element.
	EditorView.editorAttributes = editorAttributes;
	// Maximum line length for which we compute accurate bidi info
	const MaxBidiLine = 4096;
	function ensureTop(given, dom) {
	    return given == null ? dom.getBoundingClientRect().top : given;
	}
	let resizeDebounce = -1;
	function ensureGlobalHandler() {
	    window.addEventListener("resize", () => {
	        if (resizeDebounce == -1)
	            resizeDebounce = setTimeout(handleResize, 50);
	    });
	}
	function handleResize() {
	    resizeDebounce = -1;
	    let found = document.querySelectorAll(".cm-content");
	    for (let i = 0; i < found.length; i++) {
	        let docView = ContentView.get(found[i]);
	        if (docView)
	            docView.editorView.requestMeasure();
	    }
	}
	const BadMeasure = {};
	class CachedOrder {
	    constructor(from, to, dir, order) {
	        this.from = from;
	        this.to = to;
	        this.dir = dir;
	        this.order = order;
	    }
	    static update(cache, changes) {
	        if (changes.empty)
	            return cache;
	        let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
	        for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
	            let entry = cache[i];
	            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
	                result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
	        }
	        return result;
	    }
	}

	const baseTheme$1 = EditorView.baseTheme({
	    matchingBracket: { color: "#0b0" },
	    nonmatchingBracket: { color: "#a22" }
	});
	const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
	const bracketMatchingConfig = Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            afterCursor: true,
	            brackets: DefaultBrackets,
	            maxScanDistance: DefaultScanDist
	        });
	    }
	});
	const matchingMark = Decoration.mark({ class: themeClass("matchingBracket") }), nonmatchingMark = Decoration.mark({ class: themeClass("nonmatchingBracket") });
	const bracketMatchingState = StateField.define({
	    create() { return Decoration.none; },
	    update(deco, tr, state) {
	        if (!tr.docChanged && !tr.selection)
	            return deco;
	        let decorations = [];
	        let config = state.facet(bracketMatchingConfig);
	        for (let range of state.selection.ranges) {
	            if (!range.empty)
	                continue;
	            let match = matchBrackets(state, range.head, -1, config)
	                || (range.head > 0 && matchBrackets(state, range.head - 1, 1, config))
	                || (config.afterCursor &&
	                    (matchBrackets(state, range.head, 1, config) ||
	                        (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1, config))));
	            if (!match)
	                continue;
	            let mark = match.matched ? matchingMark : nonmatchingMark;
	            decorations.push(mark.range(match.start.from, match.start.to));
	            if (match.end)
	                decorations.push(mark.range(match.end.from, match.end.to));
	        }
	        return Decoration.set(decorations, true);
	    },
	    provide: [EditorView.decorations]
	});
	const bracketMatchingUnique = [
	    bracketMatchingState,
	    baseTheme$1
	];
	/// Create an extension that enables bracket matching. Whenever the
	/// cursor is next to a bracket, that bracket and the one it matches
	/// are highlighted. Or, when no matching bracket is found, another
	/// highlighting style is used to indicate this.
	function bracketMatching(config = {}) {
	    return [bracketMatchingConfig.of(config), bracketMatchingUnique];
	}
	function matchingNodes(node, dir, brackets) {
	    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
	    if (byProp)
	        return byProp;
	    if (node.name.length == 1) {
	        let index = brackets.indexOf(node.name);
	        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
	            return [brackets[index + dir]];
	    }
	    return null;
	}
	/// Find the matching bracket for the token at `pos`, scanning
	/// direction `dir`. Only the `brackets` and `maxScanDistance`
	/// properties are used from `config`, if given. Returns null if no
	/// bracket was found at `pos`, or a match result otherwise.
	function matchBrackets(state, pos, dir, config = {}) {
	    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
	    let tree = state.tree, sub = tree.resolve(pos, dir), matches;
	    if (matches = matchingNodes(sub.type, dir, brackets))
	        return matchMarkedBrackets(state, pos, dir, sub, matches, brackets);
	    else
	        return matchPlainBrackets(state, pos, dir, tree, sub.type, maxScanDistance, brackets);
	}
	function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
	    let parent = token.parent, firstToken = { from: token.start, to: token.end };
	    let depth = 0;
	    return (parent && parent.iterate({
	        from: dir < 0 ? token.start : token.end,
	        to: dir < 0 ? parent.start : parent.end,
	        enter(type, from, to) {
	            if (dir < 0 ? to > token.start : from < token.end)
	                return undefined;
	            if (depth == 0 && matching.indexOf(type.name) > -1) {
	                return { start: firstToken, end: { from, to }, matched: true };
	            }
	            else if (matchingNodes(type, dir, brackets)) {
	                depth++;
	            }
	            else if (matchingNodes(type, -dir, brackets)) {
	                depth--;
	                if (depth == 0)
	                    return { start: firstToken, end: { from, to }, matched: false };
	            }
	            return false;
	        }
	    })) || { start: firstToken, matched: false };
	}
	function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
	    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
	    let bracket = brackets.indexOf(startCh);
	    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
	        return null;
	    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
	    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
	    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
	        let text = iter.value;
	        if (dir < 0)
	            distance += text.length;
	        let basePos = pos + distance * dir;
	        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
	            let found = brackets.indexOf(text[pos]);
	            if (found < 0 || tree.resolve(basePos + pos, 1).type != tokenType)
	                continue;
	            if ((found % 2 == 0) == (dir > 0)) {
	                depth++;
	            }
	            else if (depth == 1) { // Closing
	                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
	            }
	            else {
	                depth--;
	            }
	        }
	        if (dir > 0)
	            distance += text.length;
	    }
	    return iter.done ? { start: startToken, matched: false } : null;
	}

	function updateSel(sel, by) {
	    return EditorSelection.create(sel.ranges.map(by), sel.primaryIndex);
	}
	function setSel(state, selection) {
	    return state.update({ selection, scrollIntoView: true, annotations: Transaction.userEvent.of("keyboardselection") });
	}
	function moveSel({ state, dispatch }, how) {
	    let selection = updateSel(state.selection, how);
	    if (selection.eq(state.selection))
	        return false;
	    dispatch(setSel(state, selection));
	    return true;
	}
	function cursorByChar(view, forward) {
	    return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : EditorSelection.cursor(forward ? range.to : range.from));
	}
	/// Move the selection one character to the left (which is backward in
	/// left-to-right text, forward in right-to-left text).
	const cursorCharLeft = view => cursorByChar(view, view.textDirection != Direction.LTR);
	/// Move the selection one character to the right.
	const cursorCharRight = view => cursorByChar(view, view.textDirection == Direction.LTR);
	function cursorByGroup(view, forward) {
	    return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : EditorSelection.cursor(forward ? range.to : range.from));
	}
	/// Move the selection across one group of word or non-word (but also
	/// non-space) characters.
	const cursorGroupLeft = view => cursorByGroup(view, view.textDirection != Direction.LTR);
	/// Move the selection one group to the right.
	const cursorGroupRight = view => cursorByGroup(view, view.textDirection == Direction.LTR);
	/// Move the selection one group forward.
	const cursorGroupForward = view => cursorByGroup(view, true);
	/// Move the selection one group backward.
	const cursorGroupBackward = view => cursorByGroup(view, false);
	function interestingNode(state, node, bracketProp) {
	    if (node.type.prop(bracketProp))
	        return true;
	    let len = node.end - node.start;
	    return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.start, node.end))) || node.firstChild;
	}
	function moveBySyntax(state, start, forward) {
	    let pos = state.tree.resolve(start.head);
	    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
	    // Scan forward through child nodes to see if there's an interesting
	    // node ahead.
	    for (let at = start.head;;) {
	        let next = forward ? pos.childAfter(at) : pos.childBefore(at);
	        if (!next)
	            break;
	        if (interestingNode(state, next, bracketProp))
	            pos = next;
	        else
	            at = forward ? next.end : next.start;
	    }
	    let bracket = pos.type.prop(bracketProp), match, newPos;
	    if (bracket && (match = forward ? matchBrackets(state, pos.start, 1) : matchBrackets(state, pos.end, -1)) && match.matched)
	        newPos = forward ? match.end.to : match.end.from;
	    else
	        newPos = forward ? pos.end : pos.start;
	    return EditorSelection.cursor(newPos, forward ? -1 : 1);
	}
	/// Move the cursor over the next syntactic element to the left.
	const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction.LTR));
	/// Move the cursor over the next syntactic element to the right.
	const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction.LTR));
	function cursorByLine(view, forward) {
	    return moveSel(view, range => view.moveVertically(range, forward));
	}
	/// Move the selection one line up.
	const cursorLineUp = view => cursorByLine(view, false);
	/// Move the selection one line down.
	const cursorLineDown = view => cursorByLine(view, true);
	function cursorByPage(view, forward) {
	    return moveSel(view, range => view.moveVertically(range, forward, view.dom.clientHeight));
	}
	/// Move the selection one page up.
	const cursorPageUp = view => cursorByPage(view, false);
	/// Move the selection one page down.
	const cursorPageDown = view => cursorByPage(view, true);
	function moveByLineBoundary(view, start, forward) {
	    let line = view.lineAt(start.head), moved = view.moveToLineBoundary(start, forward);
	    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
	        moved = view.moveToLineBoundary(start, forward, false);
	    if (!forward && moved.head == line.from && line.length) {
	        let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
	        if (space && start.head > line.from + space)
	            moved = EditorSelection.cursor(line.from + space);
	    }
	    return moved;
	}
	/// Move the selection to the next line wrap point, or to the end of
	/// the line if there isn't one left on this line.
	const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
	/// Move the selection to previous line wrap point, or failing that to
	/// the start of the line.
	const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
	/// Move the selection to the start of the line.
	const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineAt(range.head).from, 1));
	/// Move the selection to the end of the line.
	const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineAt(range.head).to, -1));
	function toMatchingBracket(state, dispatch, extend) {
	    let found = false, selection = updateSel(state.selection, range => {
	        let matching = matchBrackets(state, range.head, -1)
	            || matchBrackets(state, range.head, 1)
	            || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
	            || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
	        if (!matching || !matching.end)
	            return range;
	        found = true;
	        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
	        return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
	    });
	    if (!found)
	        return false;
	    dispatch(setSel(state, selection));
	    return true;
	}
	/// Move the selection to the bracket matching the one it is currently
	/// on, if any.
	const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
	function extendSel(view, how) {
	    let selection = updateSel(view.state.selection, range => {
	        let head = how(range);
	        return EditorSelection.range(range.anchor, head.head, head.goalColumn);
	    });
	    if (selection.eq(view.state.selection))
	        return false;
	    view.dispatch(setSel(view.state, selection));
	    return true;
	}
	function selectByChar(view, forward) {
	    return extendSel(view, range => view.moveByChar(range, forward));
	}
	/// Move the selection head one character to the left, while leaving
	/// the anchor in place.
	const selectCharLeft = view => selectByChar(view, view.textDirection != Direction.LTR);
	/// Move the selection head one character to the right.
	const selectCharRight = view => selectByChar(view, view.textDirection == Direction.LTR);
	function selectByGroup(view, forward) {
	    return extendSel(view, range => view.moveByGroup(range, forward));
	}
	/// Move the selection head one [group](#commands.cursorGroupLeft) to
	/// the left.
	const selectGroupLeft = view => selectByGroup(view, view.textDirection != Direction.LTR);
	/// Move the selection head one group to the right.
	const selectGroupRight = view => selectByGroup(view, view.textDirection == Direction.LTR);
	/// Move the selection head one group forward.
	const selectGroupForward = view => selectByGroup(view, true);
	/// Move the selection head one group backward.
	const selectGroupBackward = view => selectByGroup(view, false);
	/// Move the selection head over the next syntactic element to the left.
	const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction.LTR));
	/// Move the selection head over the next syntactic element to the right.
	const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction.LTR));
	function selectByLine(view, forward) {
	    return extendSel(view, range => view.moveVertically(range, forward));
	}
	/// Move the selection head one line up.
	const selectLineUp = view => selectByLine(view, false);
	/// Move the selection head one line down.
	const selectLineDown = view => selectByLine(view, true);
	function selectByPage(view, forward) {
	    return extendSel(view, range => view.moveVertically(range, forward, view.dom.clientHeight));
	}
	/// Move the selection head one page up.
	const selectPageUp = view => selectByPage(view, false);
	/// Move the selection head one page down.
	const selectPageDown = view => selectByPage(view, true);
	/// Move the selection head to the next line boundary.
	const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
	/// Move the selection head to the previous line boundary.
	const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
	/// Move the selection head to the start of the line.
	const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineAt(range.head).from));
	/// Move the selection head to the end of the line.
	const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineAt(range.head).to));
	/// Move the selection to the start of the document.
	const cursorDocStart = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: 0 }));
	    return true;
	};
	/// Move the selection to the end of the document.
	const cursorDocEnd = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: state.doc.length }));
	    return true;
	};
	/// Move the selection head to the start of the document.
	const selectDocStart = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: state.selection.primary.anchor, head: 0 }));
	    return true;
	};
	/// Move the selection head to the end of the document.
	const selectDocEnd = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: state.selection.primary.anchor, head: state.doc.length }));
	    return true;
	};
	/// Select the entire document.
	const selectAll = ({ state, dispatch }) => {
	    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, annotations: Transaction.userEvent.of("keyboarselection") }));
	    return true;
	};
	/// Expand the selection to cover entire lines.
	const selectLine = ({ state, dispatch }) => {
	    let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
	    dispatch(state.update({ selection: new EditorSelection(ranges), annotations: Transaction.userEvent.of("keyboardselection") }));
	    return true;
	};
	/// Select the next syntactic construct that is larger than the
	/// selection. Note that this will only work insofar as the language
	/// [syntaxes](#state.EditorState^syntax) you use builds up a full
	/// syntax tree.
	const selectParentSyntax = ({ state, dispatch }) => {
	    let selection = updateSel(state.selection, range => {
	        var _a;
	        let context = state.tree.resolve(range.head, 1);
	        while (!((context.start < range.from && context.end >= range.to) ||
	            (context.end > range.to && context.start <= range.from) ||
	            !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
	            context = context.parent;
	        return EditorSelection.range(context.end, context.start);
	    });
	    dispatch(setSel(state, selection));
	    return true;
	};
	/// Simplify the current selection. When multiple ranges are selected,
	/// reduce it to its primary range. Otherwise, if the selection is
	/// non-empty, convert it to a cursor selection.
	const simplifySelection = ({ state, dispatch }) => {
	    let cur = state.selection, selection = null;
	    if (cur.ranges.length > 1)
	        selection = new EditorSelection([cur.primary]);
	    else if (!cur.primary.empty)
	        selection = new EditorSelection([EditorSelection.cursor(cur.primary.head)]);
	    if (!selection)
	        return false;
	    dispatch(setSel(state, selection));
	    return true;
	};
	function deleteBy(view, by) {
	    let { state } = view, changes = state.changeByRange(range => {
	        let { from, to } = range;
	        if (from == to) {
	            let towards = by(from);
	            from = Math.min(from, towards);
	            to = Math.max(to, towards);
	        }
	        return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
	    });
	    if (changes.changes.empty)
	        return false;
	    view.dispatch(view.state.update(changes, { scrollIntoView: true, annotations: Transaction.userEvent.of("delete") }));
	    return true;
	}
	const deleteByChar = (view, forward) => deleteBy(view, pos => {
	    let { state } = view, line = state.doc.lineAt(pos), before;
	    if (!forward && pos > line.start && pos < line.start + 200 &&
	        !/[^ \t]/.test(before = line.slice(0, pos - line.start))) {
	        if (before[before.length - 1] == "\t")
	            return pos - 1;
	        let col = countColumn(before, 0, state.tabSize), drop = col % state.indentUnit || state.indentUnit;
	        for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
	            pos--;
	        return pos;
	    }
	    let target = line.findClusterBreak(pos - line.start, forward) + line.start;
	    if (target == pos && line.number != (forward ? state.doc.lines : 0))
	        target += forward ? 1 : -1;
	    return target;
	});
	/// Delete the selection, or, for cursor selections, the character
	/// before the cursor.
	const deleteCharBackward = view => deleteByChar(view, false);
	/// Delete the selection or the character after the cursor.
	const deleteCharForward = view => deleteByChar(view, true);
	const deleteByGroup = (view, forward) => deleteBy(view, pos => {
	    let { state } = view, line = state.doc.lineAt(pos), categorize = state.charCategorizer(pos);
	    for (let cat = null;;) {
	        let next, nextChar;
	        if (pos == (forward ? line.end : line.start)) {
	            if (line.number == (forward ? state.doc.lines : 1))
	                break;
	            line = state.doc.line(line.number + (forward ? 1 : -1));
	            next = forward ? line.start : line.end;
	            nextChar = "\n";
	        }
	        else {
	            next = line.findClusterBreak(pos - line.start, forward) + line.start;
	            nextChar = line.slice(Math.min(pos, next) - line.start, Math.max(pos, next) - line.start);
	        }
	        let nextCat = categorize(nextChar);
	        if (cat != null && nextCat != cat)
	            break;
	        if (nextCat != CharCategory.Space)
	            cat = nextCat;
	        pos = next;
	    }
	    return pos;
	});
	/// Delete the selection or backward until the end of the next
	/// [group](#view.EditorView.moveByGroup).
	const deleteGroupBackward = view => deleteByGroup(view, false);
	/// Delete the selection or forward until the end of the next group.
	const deleteGroupForward = view => deleteByGroup(view, true);
	/// Delete the selection, or, if it is a cursor selection, delete to
	/// the end of the line. If the cursor is directly at the end of the
	/// line, delete the line break after it.
	const deleteToLineEnd = view => deleteBy(view, pos => {
	    let lineEnd = view.lineAt(pos).to;
	    if (pos < lineEnd)
	        return lineEnd;
	    return Math.max(view.state.doc.length, pos + 1);
	});
	/// Replace each selection range with a line break, leaving the cursor
	/// on the line before the break.
	const splitLine = ({ state, dispatch }) => {
	    let changes = state.changeByRange(range => {
	        return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
	            range: EditorSelection.cursor(range.from) };
	    });
	    dispatch(state.update(changes, { scrollIntoView: true, annotations: Transaction.userEvent.of("input") }));
	    return true;
	};
	/// Flip the characters before and after the cursor(s).
	const transposeChars = ({ state, dispatch }) => {
	    let changes = state.changeByRange(range => {
	        if (!range.empty || range.from == 0 || range.from == state.doc.length)
	            return { range };
	        let pos = range.from, line = state.doc.lineAt(pos);
	        let from = pos == line.start ? pos - 1 : line.findClusterBreak(pos - line.start, false) + line.start;
	        let to = pos == line.end ? pos + 1 : line.findClusterBreak(pos - line.start, true) + line.start;
	        return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
	            range: EditorSelection.cursor(to) };
	    });
	    if (changes.changes.empty)
	        return false;
	    dispatch(state.update(changes, { scrollIntoView: true }));
	    return true;
	};
	function selectedLineBlocks(state) {
	    let blocks = [], upto = -1;
	    for (let range of state.selection.ranges) {
	        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
	        if (upto == startLine.number)
	            blocks[blocks.length - 1].to = endLine.end;
	        else
	            blocks.push({ from: startLine.start, to: endLine.end });
	        upto = endLine.number;
	    }
	    return blocks;
	}
	function moveLine(state, dispatch, forward) {
	    let changes = [];
	    for (let block of selectedLineBlocks(state)) {
	        if (forward ? block.to == state.doc.length : block.from == 0)
	            continue;
	        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
	        if (forward)
	            changes.push({ from: block.to, to: nextLine.end }, { from: block.from, insert: nextLine.slice() + state.lineBreak });
	        else
	            changes.push({ from: nextLine.start, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.slice() });
	    }
	    if (!changes.length)
	        return false;
	    dispatch(state.update({ changes, scrollIntoView: true }));
	    return true;
	}
	/// Move the selected lines up one line.
	const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
	/// Move the selected lines down one line.
	const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
	function copyLine(state, dispatch, forward) {
	    let changes = [];
	    for (let block of selectedLineBlocks(state)) {
	        if (forward)
	            changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
	        else
	            changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
	    }
	    dispatch(state.update({ changes, scrollIntoView: true }));
	    return true;
	}
	/// Create a copy of the selected lines. Keep the selection in the top copy.
	const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
	/// Create a copy of the selected lines. Keep the selection in the bottom copy.
	const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
	/// Delete selected lines.
	const deleteLine = view => {
	    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
	        if (from > 0)
	            from--;
	        else if (to < state.doc.length)
	            to++;
	        return { from, to };
	    }));
	    let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
	    view.dispatch(state.update({ changes, selection, scrollIntoView: true }));
	    return true;
	};
	function indentString(state, n) {
	    let result = "";
	    if (state.indentWithTabs)
	        while (n >= state.tabSize) {
	            result += "\t";
	            n -= state.tabSize;
	        }
	    for (let i = 0; i < n; i++)
	        result += " ";
	    return result;
	}
	function getIndentation(cx, pos) {
	    for (let f of cx.state.facet(EditorState.indentation)) {
	        let result = f(cx, pos);
	        if (result > -1)
	            return result;
	    }
	    return -1;
	}
	/// Replace the selection with a newline and indent the newly created
	/// line(s). If the current line consists only of whitespace, this
	/// will also delete that whitespace.
	const insertNewlineAndIndent = ({ state, dispatch }) => {
	    let i = 0, indentation = state.selection.ranges.map(r => {
	        let indent = getIndentation(new IndentContext(state, undefined, r.from), r.from);
	        return indent > -1 ? indent : /^\s*/.exec(state.doc.lineAt(r.from).slice(0, 50))[0].length;
	    });
	    let changes = state.changeByRange(({ from, to }) => {
	        let indent = indentation[i++], line = state.doc.lineAt(to);
	        while (to < line.end && /s/.test(line.slice(to - line.start, to + 1 - line.start)))
	            to++;
	        if (from > line.start && from < line.start + 100 && !/\S/.test(line.slice(0, from)))
	            from = line.start;
	        return { changes: { from, to, insert: Text.of(["", indentString(state, indent)]) },
	            range: EditorSelection.cursor(from + 1 + indent) };
	    });
	    dispatch(state.update(changes, { scrollIntoView: true }));
	    return true;
	};
	function changeBySelectedLine(state, f) {
	    let atLine = -1;
	    return state.changeByRange(range => {
	        let changes = [];
	        for (let line = state.doc.lineAt(range.from);;) {
	            if (line.number > atLine) {
	                f(line, changes, range);
	                atLine = line.number;
	            }
	            if (range.to <= line.end)
	                break;
	            line = state.doc.lineAt(line.end + 1);
	        }
	        let changeSet = state.changes(changes);
	        return { changes,
	            range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
	    });
	}
	/// Add a [unit](#state.EditorState^indentUnit) of indentation to all
	/// selected lines.
	const indentMore = ({ state, dispatch }) => {
	    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
	        changes.push({ from: line.start, insert: state.facet(EditorState.indentUnit) });
	    })));
	    return true;
	};
	/// Remove a [unit](#state.EditorState^indentUnit) of indentation from
	/// all selected lines.
	const indentLess = ({ state, dispatch }) => {
	    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
	        let lineStart = line.slice(0, Math.min(line.length, 200));
	        let space = /^\s*/.exec(lineStart)[0];
	        if (!space)
	            return;
	        let col = countColumn(space, 0, state.tabSize), insert = indentString(state, Math.max(0, col - state.indentUnit)), keep = 0;
	        while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
	            keep++;
	        changes.push({ from: line.start + keep, to: line.start + space.length, insert: insert.slice(keep) });
	    })));
	    return true;
	};
	/// Array of key bindings containing the Emacs-style bindings that are
	/// available on macOS by default.
	///
	///  - Ctrl-b: [`cursorCharLeft`](#commands.cursorCharLeft) ([`selectCharLeft`](#commands.selectCharLeft) with Shift)
	///  - Ctrl-f: [`cursorCharRight`](#commands.cursorCharRight) ([`selectCharRight`](#commands.selectCharRight) with Shift)
	///  - Ctrl-p: [`cursorLineUp`](#commands.cursorLineUp) ([`selectLineUp`](#commands.selectLineUp) with Shift)
	///  - Ctrl-n: [`cursorLineDown`](#commands.cursorLineDown) ([`selectLineDown`](#commands.selectLineDown) with Shift)
	///  - Ctrl-a: [`cursorLineStart`](#commands.cursorLineStart) ([`selectLineStart`](#commands.selectLineStart) with Shift)
	///  - Ctrl-e: [`cursorLineEnd`](#commands.cursorLineEnd) ([`selectLineEnd`](#commands.selectLineEnd) with Shift)
	///  - Ctrl-d: [`deleteCharForward`](#commands.deleteCharForward)
	///  - Ctrl-h: [`deleteCharBackward`](#commands.deleteCharBackward)
	///  - Ctrl-k: [`deleteToLineEnd`](#commands.deleteToLineEnd)
	///  - Alt-d: [`deleteGroupForward`](#commands.deleteGroupForward)
	///  - Ctrl-Alt-h: [`deleteGroupBackward`](#commands.deleteGroupBackward)
	///  - Ctrl-o: [`splitLine`](#commands.splitLine)
	///  - Ctrl-t: [`transposeChars`](#commands.transposeChars)
	///  - Alt-f: [`cursorGroupForward`](#commands.cursorGroupForward) ([`selectGroupForward`](#commands.selectGroupForward) with Shift)
	///  - Alt-b: [`cursorGroupBackward`](#commands.cursorGroupBackward) ([`selectGroupBackward`](#commands.selectGroupBackward) with Shift)
	///  - Alt-<: [`cursorDocStart`](#commands.cursorDocStart)
	///  - Alt->: [`cursorDocEnd`](#commands.cursorDocEnd)
	///  - Ctrl-v: [`cursorPageDown`](#commands.cursorPageDown)
	///  - Alt-v: [`cursorPageUp`](#commands.cursorPageUp)
	const emacsStyleKeymap = [
	    { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft },
	    { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
	    { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
	    { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
	    { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
	    { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
	    { key: "Ctrl-d", run: deleteCharForward },
	    { key: "Ctrl-h", run: deleteCharBackward },
	    { key: "Ctrl-k", run: deleteToLineEnd },
	    { key: "Alt-d", run: deleteGroupForward },
	    { key: "Ctrl-Alt-h", run: deleteGroupBackward },
	    { key: "Ctrl-o", run: splitLine },
	    { key: "Ctrl-t", run: transposeChars },
	    { key: "Alt-f", run: cursorGroupForward, shift: selectGroupForward },
	    { key: "Alt-b", run: cursorGroupBackward, shift: selectGroupBackward },
	    { key: "Alt-<", run: cursorDocStart },
	    { key: "Alt->", run: cursorDocEnd },
	    { key: "Ctrl-v", run: cursorPageDown },
	    { key: "Alt-v", run: cursorPageUp },
	];
	/// An array of key bindings closely sticking to platform-standard or
	/// widely used bindings. (This includes the bindings from
	/// [`emacsStyleKeymap`](#commands.emacsStyleKeymap), with their `key`
	/// property changed to `mac`.)
	///
	///  - ArrowLeft: [`cursorCharLeft`](#commands.cursorCharLeft) ([`selectCharLeft`](#commands.selectCharLeft) with Shift)
	///  - ArrowRight: [`cursorCharRight`](#commands.cursorCharRight) ([`selectCharRight`](#commands.selectCharRight) with Shift)
	///  - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](#commands.cursorGroupLeft) ([`selectGroupLeft`](#commands.selectGroupLeft) with Shift)
	///  - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](#commands.cursorGroupRight) ([`selectGroupRight`](#commands.selectGroupRight) with Shift)
	///  - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](#commands.cursorLineStart) ([`selectLineStart`](#commands.selectLineStart) with Shift)
	///  - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](#commands.cursorLineEnd) ([`selectLineEnd`](#commands.selectLineEnd) with Shift)
	///  - ArrowUp: [`cursorLineUp`](#commands.cursorLineUp) ([`selectLineUp`](#commands.selectLineUp) with Shift)
	///  - ArrowDown: [`cursorLineDown`](#commands.cursorLineDown) ([`selectLineDown`](#commands.selectLineDown) with Shift)
	///  - Cmd-ArrowUp (on macOS): [`cursorDocStart`](#commands.cursorDocStart) ([`selectDocStart`](#commands.selectDocStart) with Shift)
	///  - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](#commands.cursorDocEnd) ([`selectDocEnd`](#commands.selectDocEnd) with Shift)
	///  - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](#commands.cursorPageUp) ([`selectPageUp`](#commands.selectPageUp) with Shift)
	///  - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](#commands.cursorPageDown) ([`selectPageDown`](#commands.selectPageDown) with Shift)
	///  - PageUp: [`cursorPageUp`](#commands.cursorPageUp) ([`selectPageUp`](#commands.selectPageUp) with Shift)
	///  - PageDown: [`cursorPageDown`](#commands.cursorPageDown) ([`selectPageDown`](#commands.selectPageDown) with Shift)
	///  - Home: [`cursorLineBoundaryBackward`](#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](#commands.selectLineBoundaryBackward) with Shift)
	///  - End: [`cursorLineBoundaryForward`](#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](#commands.selectLineBoundaryForward) with Shift)
	///  - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](#commands.cursorDocStart) ([`selectDocStart`](#commands.selectDocStart) with Shift)
	///  - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](#commands.cursorDocEnd) ([`selectDocEnd`](#commands.selectDocEnd) with Shift)
	///  - Enter: [`insertNewlineAndIndent`](#commands.insertNewlineAndIndent)
	///  - Ctrl-a (Cmd-a on macOS): [`selectAll`](#commands.selectAll)
	///  - Backspace: [`deleteCharBackward`](#commands.deleteCharBackward)
	///  - Delete: [`deleteCharForward`](#commands.deleteCharForward)
	///  - Ctrl-Backspace (Ctrl-Alt-Backspace on macOS): [`deleteGroupBackward`](#commands.deleteGroupBackward)
	///  - Ctrl-Delete (Alt-Backspace and Alt-Delete on macOS): [`deleteGroupForward`](#commands.deleteGroupForward)
	const standardKeymap = [
	    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft },
	    { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
	    { mac: "Cmd-ArrowLeft", run: cursorLineStart, shift: selectLineStart },
	    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight },
	    { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
	    { mac: "Cmd-ArrowRight", run: cursorLineEnd, shift: selectLineEnd },
	    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp },
	    { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
	    { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
	    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown },
	    { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
	    { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
	    { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
	    { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
	    { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
	    { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
	    { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
	    { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
	    { key: "Enter", run: insertNewlineAndIndent },
	    { key: "Mod-a", run: selectAll },
	    { key: "Backspace", run: deleteCharBackward },
	    { key: "Delete", run: deleteCharForward },
	    { key: "Mod-Backspace", mac: "Ctrl-Alt-Backspace", run: deleteGroupBackward },
	    { key: "Mod-Delete", mac: "Alt-Backspace", run: deleteGroupForward },
	    { mac: "Alt-Delete", run: deleteGroupForward },
	].concat(emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
	/// The default keymap. Includes all bindings from
	/// [`standardKeymap`](#commands.standardKeymap) plus the following:
	///
	/// - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](#commands.selectSyntaxLeft) with Shift)
	/// - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](#commands.cursorSyntaxRight) ([`selectSyntaxRight`](#commands.selectSyntaxRight) with Shift)
	/// - Alt-ArrowUp: [`moveLineUp`](#commands.moveLineUp)
	/// - Alt-ArrowDown: [`moveLineDown`](#commands.moveLineDown)
	/// - Shift-Alt-ArrowUp: [`copyLineUp`](#commands.copyLineUp)
	/// - Shift-Alt-ArrowDown: [`copyLineDown`](#commands.copyLineDown)
	/// - Escape: [`simplifySelection`](#commands.simplifySelection)
	/// - Ctrl-l (Cmd-l on macOS): [`selectLine`](#commands.selectLine)
	/// - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](#commands.selectParentSyntax)
	/// - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](#commands.indentLess)
	/// - Ctrl-] (Cmd-] on macOS): [`indentMore`](#commands.indentMore)
	/// - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](#commands.deleteLine)
	/// - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](#commands.cursorMatchingBracket)
	const defaultKeymap = [
	    { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
	    { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
	    { key: "Alt-ArrowUp", run: moveLineUp },
	    { key: "Shift-Alt-ArrowUp", run: copyLineUp },
	    { key: "Alt-ArrowDown", run: moveLineDown },
	    { key: "Shift-Alt-ArrowDown", run: copyLineDown },
	    { key: "Escape", run: simplifySelection },
	    { key: "Mod-l", run: selectLine },
	    { key: "Mod-i", run: selectParentSyntax },
	    { key: "Mod-[", run: indentLess },
	    { key: "Mod-]", run: indentMore },
	    { key: "Shift-Mod-k", run: deleteLine },
	    { key: "Shift-Mod-\\", run: cursorMatchingBracket }
	].concat(standardKeymap);

	const toggle = (e) =>
	  join (' ')
	       (includes ('collapsed') (e.classList) ?
	         append ('expanded') 
	                (without ('collapsed') (e.classList))
	         : append ('collapsed')  
	                  (without ('expanded') (e.classList)));

	const toggleOnClick = 
	  `onclick="this.classList = (${ toggle })(this)"`;

	const HTMLUndefined = () => 
	  `<div class="undefined-block"></div>`;

	const HTMLNumber = (n) =>
	  `<span class="pp-number collapsed text-orange-700" ${toggleOnClick}>
    <span class="collapsed">
      <span class="decimal">${n}</span>
    </span>
    <span class="expanded">
      <span class="label decimal">DEC</span>
      <span class="decimal">${n}</span>
      <span class="label hexadecimal">HEX</span>
      <span class="hexadecimal">${n.toString (16)}</span>
      <span class="label binary">BIN</span>
      <span class="binary">${n.toString (2)}</span>
    </span>
  </span>`;

	const HTMLString = (s) =>
	  `<span class="pp-string collapsed text-green-600"
         ${ toggleOnClick }>
    <span class="collapsed leading-tight h-4 w-11/12 truncate inline-block">"${s}"</span>
    <span class="expanded">"${s}"</span>
  </span>`;

	const HTMLArrayElement = (e) =>
	  `<span>${ toHTML (e) }</span>`;

	const HTMLArrayElements = (a) =>
	  join 
	    (', ')
	    (map (HTMLArrayElement) (a));

	const HTMLArray = (a) =>
	  `<span>
    <span class="text-blue-700">[Array]</span>
    <span class="text-red-700">[</span>
    ${ HTMLArrayElements (a) }
    <span class="text-red-700">]</span>
  </span>`;

	const HTMLPromise = (p) => {
	  let uuid = 'U' + v4();

	  p.then ((value) => 
	    document
	      .querySelector ('#' + uuid)
	      .innerHTML = `
        <span class="resolved">[[Resolved]]</span>
        <span class="value">${ toHTML (value) }</span>`
	  ).catch ((error) =>
	    document
	      .querySelector ('#' + uuid)
	      .innerHTML = `
        <span class="rejected">[[Rejected]]</span>
        <span class="error">${ toHTML (error) }</span>`
	  );

	  return `<span id="${ uuid }" class="pp-promise">
    <span class="pending">[[Pending]]</span>
  </span>`
	};

	const HTMLObjectProperty = (p, v) =>
	  `<span class="block -mt-2">
    <span>${ p }</span>
    <span>:</span>
    <span>${ toHTML (v) }</span>
  </span>`;

	const HTMLObjectProperties = (o) =>
	  join 
	    ('')
	    (map
	      ((k) => HTMLObjectProperty (k, o[k]))
	      (keys (o)));

	const HTMLObject = (o) => 
	  `<span class="">
    <span class="">
      <span class="text-blue-700">[Object]</span>
      <span class="test-red-700">{</span>
    </span>
    <span class="block pl-4">
      ${ HTMLObjectProperties (o) }
    </span>
    <span class="block test-red-700">}</span>
  </span>`;

	const HTMLBoolean = (b) =>
	  `<span class="text-purple-600">${b}</span>`;

	const toHTML =
	  cond ([
	    [isNil,           HTMLUndefined],
	    [is (Number),     HTMLNumber],
	    [is (String),     HTMLString],
	    [is (Array),      HTMLArray],
	    [is (Promise),    HTMLPromise],
	    [is (Object),     HTMLObject],
	    [equals (true),   HTMLBoolean],
	    [equals (false),  HTMLBoolean],
	    [T,               always]]);

	const evaluate_code = (host, code) => {
	  // TODO: Add hack to use import as if it was (pikaImport)
	  // let hack...to be able to use let with global variables
	  let modified = 
	    map$1 ((line) => 
	      line.replace (/^let/, 'var')
	          .replace (/^const/, 'var')
	          .replace (/@view/, 
	                   'document.querySelector (\'[data-uuid="' + host.uuid + '"] .view\')')
	          .replace (/@block/,
	                   'document.querySelector (\'[data-uuid="' + host.uuid + '"]\')'))
	        (code);

	  let strcode = modified.join('\n');

	  let result = window.eval (strcode);

	  dispatch$9 (host, 'scrolltoend');

	  host.result = toHTML (result);
	};

	// Helpers
	const isBeginningOfBlock = (view) => {
	  let selection = view.state.selection;
	  let range = selection.ranges [selection.primaryIndex];
	  return range.from === 0 && range.to === 0
	};

	const isEndOfBlock = (view) => {
	  let docLength = view.state.doc.length;
	  let selection = view.state.selection;
	  let range = selection.ranges [selection.primaryIndex];
	  return range.from === docLength && range.to === docLength
	};

	// There were problems rewriting these keys if defaultKeymap
	// was added.
	const filteredKeymap = 
	  filter ((i) => i.key !== 'PageUp' 
	              && i.key !== 'PageDown'
	              && i.key !== 'Backspace'
	              && i.key !== 'Delete'
	              && i.key !== 'ArrowUp'
	              && i.key !== 'ArrowDown'
	              && i.key !== 'Enter')
	         (defaultKeymap);

	const customKeymap = (host) => [
	  ...filteredKeymap,
	  { key: "ArrowUp",
	    run: (view) =>
	      isBeginningOfBlock (view) ?
	        dispatch$9 (host, 'prevblock')
	        : cursorLineUp (view),
	    shift: selectLineUp
	    },
	  { key: "ArrowDown",
	    run: (view) =>
	      isEndOfBlock (view) ?
	        dispatch$9 (host, 'nextblock')
	        : cursorLineDown (view),
	    shift: selectLineDown
	    },
	  { key: "Backspace",
	    run: (view) => 
	      isBeginningOfBlock (view) && isEndOfBlock (view) ?
	        dispatch$9 (host, 'deleteblock')
	        : deleteCharBackward (view)
	    },
	  { key: "Delete",
	    run: (view) =>
	      isBeginningOfBlock (view) && isEndOfBlock (view) ?
	        dispatch$9 (host, 'deleteblock')
	        : deleteCharForward (view)
	    },
	  { key: "Enter",
	    run: (view) => {
	      if (host.multiline) {
	        insertNewlineAndIndent (view); 
	      } else {
	        let txt = view.state.doc.text;
	        evaluate_code (host, txt);
	        dispatch$9 (host, 'createblockiflast');
	      }
	      return true
	    }},
	  { key: "Shift-Enter", 
	    run: (view) => {
	      host.multiline = true;
	      insertNewlineAndIndent (view);
	      return true
	    }},
	  { key: "Ctrl-Enter", 
	    run: (view) => {
	      let txt = view.state.doc.text;
	      evaluate_code (host, txt);
	      dispatch$9 (host, 'createblockiflast');
	      return true
	    }},
	  { key: "PageUp", 
	    run: (view) => 
	      isBeginningOfBlock (view) ?
	        dispatch$9 (host, 'prevblock')
	        : cursorPageUp (view)
	    },
	  { key: "PageDown", 
	    run: (view) => 
	      isEndOfBlock (view) ?
	        dispatch$9 (host, 'nextblock')
	        : cursorPageDown (view)
	    },
	  { key: "Ctrl-s",
	    run: (view) => {
	      dispatch$9 (host, 'savesession');
	      return true
	    }},
	  { key: "Ctrl-Shift-s",
	    run: (view) =>
	      dispatch$9 (host, 'saveblock')
	    },
	];

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics$1 = function(d, b) {
	    extendStatics$1 = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics$1(d, b);
	};

	function __extends$1(d, b) {
	    extendStatics$1(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	/// A parse stack. These are used internally by the parser to track
	/// parsing progress. They also provide some properties and methods
	/// that external code such as a tokenizer can use to get information
	/// about the parse state.
	var Stack = /** @class */ (function () {
	    /// @internal
	    function Stack(
	    // A group of values that the stack will share with all
	    // split instances
	    ///@internal
	    cx, 
	    // Holds state, pos, value stack pos (15 bits array index, 15 bits
	    // buffer index) triplets for all but the top state
	    /// @internal
	    stack, 
	    // The current parse state
	    /// @internal
	    state, 
	    // The position at which the next reduce should take place. This
	    // can be less than `this.pos` when skipped expressions have been
	    // added to the stack (which should be moved outside of the next
	    // reduction)
	    /// @internal
	    reducePos, 
	    // The input position up to which this stack has parsed.
	    pos, 
	    // The amount of error-recovery that happened on this stack
	    /// @internal
	    recovered, 
	    // The output buffer. Holds (type, start, end, size) quads
	    // representing nodes created by the parser, where `size` is
	    // amount of buffer array entries covered by this node.
	    /// @internal
	    buffer, 
	    // The base offset of the buffer. When stacks are split, the split
	    // instance shared the buffer history with its parent up to
	    // `bufferBase`, which is the absolute offset (including the
	    // offset of previous splits) into the buffer at which this stack
	    // starts writing.
	    /// @internal
	    bufferBase, 
	    // A parent stack from which this was split off, if any. This is
	    // set up so that it always points to a stack that has some
	    // additional buffer content, never to a stack with an equal
	    // `bufferBase`.
	    /// @internal
	    parent) {
	        this.cx = cx;
	        this.stack = stack;
	        this.state = state;
	        this.reducePos = reducePos;
	        this.pos = pos;
	        this.recovered = recovered;
	        this.buffer = buffer;
	        this.bufferBase = bufferBase;
	        this.parent = parent;
	    }
	    /// @internal
	    Stack.prototype.toString = function () {
	        return "[" + this.stack.filter(function (_, i) { return i % 3 == 0; }).concat(this.state) + "]@" + this.pos + (this.recovered ? "!" + this.recovered : "");
	    };
	    // Start an empty stack
	    /// @internal
	    Stack.start = function (cx, state, pos) {
	        if (pos === void 0) { pos = 0; }
	        return new Stack(cx, [], state, pos, pos, 0, [], 0, null);
	    };
	    // Push a state onto the stack, tracking its start position as well
	    // as the buffer base at that point.
	    /// @internal
	    Stack.prototype.pushState = function (state, start) {
	        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
	        this.state = state;
	    };
	    // Apply a reduce action
	    /// @internal
	    Stack.prototype.reduce = function (action) {
	        var depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
	        var parser = this.cx.parser;
	        if (depth == 0) {
	            // Zero-depth reductions are a special case—they add stuff to
	            // the stack without popping anything off.
	            if (type < parser.minRepeatTerm)
	                this.storeNode(type, this.reducePos, this.reducePos, 4, true);
	            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
	            return;
	        }
	        // Find the base index into `this.stack`, content after which will
	        // be dropped. Note that with `StayFlag` reductions we need to
	        // consume two extra frames (the dummy parent node for the skipped
	        // expression and the state that we'll be staying in, which should
	        // be moved to `this.state`).
	        var base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
	        var start = this.stack[base - 2];
	        var bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
	        if (type < parser.minRepeatTerm || // Normal term
	            (action & 131072 /* RepeatFlag */) || // Inner repeat marker
	            (type > parser.maxNode && type <= parser.maxRepeatWrap)) { // Repeat wrapper
	            var pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
	            this.storeNode(type, start, pos, count + 4, true);
	        }
	        if (action & 262144 /* StayFlag */) {
	            this.state = this.stack[base];
	        }
	        else {
	            var baseStateID = this.stack[base - 3];
	            this.state = parser.getGoto(baseStateID, type, true);
	        }
	        while (this.stack.length > base)
	            this.stack.pop();
	    };
	    // Shift a value into the buffer
	    /// @internal
	    Stack.prototype.storeNode = function (term, start, end, size, isReduce) {
	        if (size === void 0) { size = 4; }
	        if (isReduce === void 0) { isReduce = false; }
	        if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes
	            var cur = this, top = this.buffer.length;
	            if (top == 0 && cur.parent) {
	                top = cur.bufferBase - cur.parent.bufferBase;
	                cur = cur.parent;
	            }
	            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
	                if (start == end)
	                    return;
	                if (cur.buffer[top - 2] >= start) {
	                    cur.buffer[top - 2] = end;
	                    return;
	                }
	            }
	        }
	        if (!isReduce || this.pos == end) { // Simple case, just append
	            this.buffer.push(term, start, end, size);
	        }
	        else { // There may be skipped nodes that have to be moved forward
	            var index = this.buffer.length;
	            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
	                while (index > 0 && this.buffer[index - 2] > end) {
	                    // Move this record forward
	                    this.buffer[index] = this.buffer[index - 4];
	                    this.buffer[index + 1] = this.buffer[index - 3];
	                    this.buffer[index + 2] = this.buffer[index - 2];
	                    this.buffer[index + 3] = this.buffer[index - 1];
	                    index -= 4;
	                    if (size > 4)
	                        size -= 4;
	                }
	            this.buffer[index] = term;
	            this.buffer[index + 1] = start;
	            this.buffer[index + 2] = end;
	            this.buffer[index + 3] = size;
	        }
	    };
	    // Apply a shift action
	    /// @internal
	    Stack.prototype.shift = function (action, next, nextEnd) {
	        if (action & 131072 /* GotoFlag */) {
	            this.pushState(action & 65535 /* ValueMask */, this.pos);
	        }
	        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
	            var start = this.pos, nextState = action, parser = this.cx.parser;
	            if (nextEnd > this.pos || next <= parser.maxNode) {
	                this.pos = nextEnd;
	                if (!parser.stateFlag(nextState, 1 /* Skipped */))
	                    this.reducePos = nextEnd;
	            }
	            this.pushState(nextState, start);
	            if (next <= parser.maxNode)
	                this.buffer.push(next, start, nextEnd, 4);
	        }
	        else { // Shift-and-stay, which means this is a skipped token
	            if (next <= this.cx.parser.maxNode)
	                this.buffer.push(next, this.pos, nextEnd, 4);
	            this.pos = nextEnd;
	        }
	    };
	    // Apply an action
	    /// @internal
	    Stack.prototype.apply = function (action, next, nextEnd) {
	        if (action & 65536 /* ReduceFlag */)
	            this.reduce(action);
	        else
	            this.shift(action, next, nextEnd);
	    };
	    // Add a prebuilt node into the buffer. This may be a reused node or
	    // the result of running a nested parser.
	    /// @internal
	    Stack.prototype.useNode = function (value, next) {
	        var index = this.cx.reused.length - 1;
	        if (index < 0 || this.cx.reused[index] != value) {
	            this.cx.reused.push(value);
	            index++;
	        }
	        var start = this.pos;
	        this.reducePos = this.pos = start + value.length;
	        this.pushState(next, start);
	        this.buffer.push(index, start, this.reducePos, -1 /* size < 0 means this is a reused value */);
	    };
	    // Split the stack. Due to the buffer sharing and the fact
	    // that `this.stack` tends to stay quite shallow, this isn't very
	    // expensive.
	    /// @internal
	    Stack.prototype.split = function () {
	        var parent = this;
	        var off = parent.buffer.length;
	        // Because the top of the buffer (after this.pos) may be mutated
	        // to reorder reductions and skipped tokens, and shared buffers
	        // should be immutable, this copies any outstanding skipped tokens
	        // to the new buffer, and puts the base pointer before them.
	        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
	            off -= 4;
	        var buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
	        // Make sure parent points to an actual parent with content, if there is such a parent.
	        while (parent && base == parent.bufferBase)
	            parent = parent.parent;
	        return new Stack(this.cx, this.stack.slice(), this.state, this.reducePos, this.pos, this.recovered, buffer, base, parent);
	    };
	    // Try to recover from an error by 'deleting' (ignoring) one token.
	    /// @internal
	    Stack.prototype.recoverByDelete = function (next, nextEnd) {
	        var isNode = next <= this.cx.parser.maxNode;
	        if (isNode)
	            this.storeNode(next, this.pos, nextEnd);
	        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
	        this.pos = this.reducePos = nextEnd;
	        this.recovered += 2 /* Token */;
	    };
	    /// Check if the given term would be able to be shifted (optionally
	    /// after some reductions) on this stack. This can be useful for
	    /// external tokenizers that want to make sure they only provide a
	    /// given token when it applies.
	    Stack.prototype.canShift = function (term) {
	        for (var sim = new SimulatedStack(this);;) {
	            var action = this.cx.parser.stateSlot(sim.top, 4 /* DefaultReduce */) || this.cx.parser.hasAction(sim.top, term);
	            if ((action & 65536 /* ReduceFlag */) == 0)
	                return true;
	            if (action == 0)
	                return false;
	            sim.reduce(action);
	        }
	    };
	    Object.defineProperty(Stack.prototype, "ruleStart", {
	        /// Find the start position of the rule that is currently being parsed.
	        get: function () {
	            var force = this.cx.parser.stateSlot(this.state, 5 /* ForcedReduce */);
	            if (!(force & 65536 /* ReduceFlag */))
	                return 0;
	            var base = this.stack.length - (3 * (force >> 19 /* ReduceDepthShift */));
	            return this.stack[base + 1];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /// Find the start position of the innermost instance of any of the
	    /// given term types, or return `-1` when none of them are found.
	    ///
	    /// **Note:** this is only reliable when there is at least some
	    /// state that unambiguously matches the given rule on the stack.
	    /// I.e. if you have a grammar like this, where the difference
	    /// between `a` and `b` is only apparent at the third token:
	    ///
	    ///     a { b | c }
	    ///     b { "x" "y" "x" }
	    ///     c { "x" "y" "z" }
	    ///
	    /// Then a parse state after `"x"` will not reliably tell you that
	    /// `b` is on the stack. You _can_ pass `[b, c]` to reliably check
	    /// for either of those two rules (assuming that `a` isn't part of
	    /// some rule that includes other things starting with `"x"`).
	    Stack.prototype.startOf = function (types) {
	        var state = this.state, frame = this.stack.length, parser = this.cx.parser;
	        for (;;) {
	            var force = parser.stateSlot(state, 5 /* ForcedReduce */);
	            var depth = force >> 19 /* ReduceDepthShift */, term = force & 65535 /* ValueMask */;
	            if (types.indexOf(term) > -1) {
	                var base = frame - (3 * (force >> 19 /* ReduceDepthShift */));
	                return this.stack[base + 1];
	            }
	            if (frame == 0)
	                return -1;
	            if (depth == 0) {
	                frame -= 3;
	                state = this.stack[frame];
	            }
	            else {
	                frame -= 3 * (depth - 1);
	                state = parser.getGoto(this.stack[frame - 3], term, true);
	            }
	        }
	    };
	    // Apply up to Recover.MaxNext recovery actions that conceptually
	    // inserts some missing token or rule.
	    /// @internal
	    Stack.prototype.recoverByInsert = function (next) {
	        var _this = this;
	        var nextStates = this.cx.parser.nextStates(this.state);
	        if (nextStates.length > 4 /* MaxNext */) {
	            var best = nextStates.filter(function (s) { return s != _this.state && _this.cx.parser.hasAction(s, next); });
	            for (var i = 0; best.length < 4 /* MaxNext */ && i < nextStates.length; i++)
	                if (best.indexOf(nextStates[i]) < 0)
	                    best.push(nextStates[i]);
	            nextStates = best;
	        }
	        var result = [];
	        for (var i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i++) {
	            if (nextStates[i] == this.state)
	                continue;
	            var stack = this.split();
	            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
	            stack.pushState(nextStates[i], this.pos);
	            stack.recovered += 2 /* Token */;
	            result.push(stack);
	        }
	        return result;
	    };
	    // Force a reduce, if possible. Return false if that can't
	    // be done.
	    /// @internal
	    Stack.prototype.forceReduce = function () {
	        var reduce = this.cx.parser.stateSlot(this.state, 5 /* ForcedReduce */);
	        if ((reduce & 65536 /* ReduceFlag */) == 0)
	            return false;
	        if (!this.cx.parser.validAction(this.state, reduce)) {
	            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
	            this.recovered += 1 /* Reduce */;
	        }
	        this.reduce(reduce);
	        return true;
	    };
	    /// @internal
	    Stack.prototype.forceAll = function () {
	        while (!this.cx.parser.stateFlag(this.state, 2 /* Accepting */) && this.forceReduce()) { }
	        return this;
	    };
	    // Convert the stack's buffer to a syntax tree.
	    /// @internal
	    Stack.prototype.toTree = function () {
	        return Tree.build({ buffer: StackBufferCursor.create(this),
	            group: this.cx.parser.group,
	            topID: this.cx.topTerm,
	            maxBufferLength: this.cx.maxBufferLength,
	            reused: this.cx.reused,
	            minRepeatType: this.cx.parser.minRepeatTerm });
	    };
	    return Stack;
	}());
	var Recover;
	(function (Recover) {
	    Recover[Recover["Token"] = 2] = "Token";
	    Recover[Recover["Reduce"] = 1] = "Reduce";
	    Recover[Recover["MaxNext"] = 4] = "MaxNext";
	})(Recover || (Recover = {}));
	// Used to cheaply run some reductions to scan ahead without mutating
	// an entire stack
	var SimulatedStack = /** @class */ (function () {
	    function SimulatedStack(stack) {
	        this.stack = stack;
	        this.top = stack.state;
	        this.rest = stack.stack;
	        this.offset = this.rest.length;
	    }
	    SimulatedStack.prototype.reduce = function (action) {
	        var term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
	        if (depth == 0) {
	            if (this.rest == this.stack.stack)
	                this.rest = this.rest.slice();
	            this.rest.push(this.top, 0, 0);
	            this.offset += 3;
	        }
	        else {
	            this.offset -= (depth - 1) * 3;
	        }
	        var goto = this.stack.cx.parser.getGoto(this.rest[this.offset - 3], term, true);
	        this.top = goto;
	    };
	    return SimulatedStack;
	}());
	// This is given to `Tree.build` to build a buffer, and encapsulates
	// the parent-stack-walking necessary to read the nodes.
	var StackBufferCursor = /** @class */ (function () {
	    function StackBufferCursor(stack, pos, index) {
	        this.stack = stack;
	        this.pos = pos;
	        this.index = index;
	        this.buffer = stack.buffer;
	        if (this.index == 0)
	            this.maybeNext();
	    }
	    StackBufferCursor.create = function (stack) {
	        return new StackBufferCursor(stack, stack.bufferBase + stack.buffer.length, stack.buffer.length);
	    };
	    StackBufferCursor.prototype.maybeNext = function () {
	        var next = this.stack.parent;
	        if (next != null) {
	            this.index = this.stack.bufferBase - next.bufferBase;
	            this.stack = next;
	            this.buffer = next.buffer;
	        }
	    };
	    Object.defineProperty(StackBufferCursor.prototype, "id", {
	        get: function () { return this.buffer[this.index - 4]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StackBufferCursor.prototype, "start", {
	        get: function () { return this.buffer[this.index - 3]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StackBufferCursor.prototype, "end", {
	        get: function () { return this.buffer[this.index - 2]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StackBufferCursor.prototype, "size", {
	        get: function () { return this.buffer[this.index - 1]; },
	        enumerable: true,
	        configurable: true
	    });
	    StackBufferCursor.prototype.next = function () {
	        this.index -= 4;
	        this.pos -= 4;
	        if (this.index == 0)
	            this.maybeNext();
	    };
	    StackBufferCursor.prototype.fork = function () {
	        return new StackBufferCursor(this.stack, this.pos, this.index);
	    };
	    return StackBufferCursor;
	}());

	/// Tokenizers write the tokens they read into instances of this class.
	var Token = /** @class */ (function () {
	    function Token() {
	        /// The start of the token. This is set by the parser, and should not
	        /// be mutated by the tokenizer.
	        this.start = -1;
	        /// This starts at -1, and should be updated to a term id when a
	        /// matching token is found.
	        this.value = -1;
	        /// When setting `.value`, you should also set `.end` to the end
	        /// position of the token. (You'll usually want to use the `accept`
	        /// method.)
	        this.end = -1;
	    }
	    /// Accept a token, setting `value` and `end` to the given values.
	    Token.prototype.accept = function (value, end) {
	        this.value = value;
	        this.end = end;
	    };
	    return Token;
	}());
	/// An `InputStream` that is backed by a single, flat string.
	var StringStream = /** @class */ (function () {
	    function StringStream(string, length) {
	        if (length === void 0) { length = string.length; }
	        this.string = string;
	        this.length = length;
	    }
	    StringStream.prototype.get = function (pos) {
	        return pos < 0 || pos >= this.length ? -1 : this.string.charCodeAt(pos);
	    };
	    StringStream.prototype.read = function (from, to) { return this.string.slice(from, Math.min(this.length, to)); };
	    StringStream.prototype.clip = function (at) { return new StringStream(this.string, at); };
	    return StringStream;
	}());
	/// @internal
	var TokenGroup = /** @class */ (function () {
	    function TokenGroup(data, id) {
	        this.data = data;
	        this.id = id;
	    }
	    TokenGroup.prototype.token = function (input, token, stack) { readToken(this.data, input, token, stack, this.id); };
	    return TokenGroup;
	}());
	TokenGroup.prototype.contextual = false;
	var ExternalTokenizer = /** @class */ (function () {
	    function ExternalTokenizer(token, options) {
	        if (options === void 0) { options = {}; }
	        this.token = token;
	        this.contextual = options && options.contextual || false;
	    }
	    return ExternalTokenizer;
	}());
	// Tokenizer data is stored a big uint16 array containing, for each
	// state:
	//
	//  - A group bitmask, indicating what token groups are reachable from
	//    this state, so that paths that can only lead to tokens not in
	//    any of the current groups can be cut off early.
	//
	//  - The position of the end of the state's sequence of accepting
	//    tokens
	//
	//  - The number of outgoing edges for the state
	//
	//  - The accepting tokens, as (token id, group mask) pairs
	//
	//  - The outgoing edges, as (start character, end character, state
	//    index) triples, with end character being exclusive
	//
	// This function interprets that data, running through a stream as
	// long as new states with the a matching group mask can be reached,
	// and updating `token` when it matches a token.
	function readToken(data, input, token, stack, group) {
	    var state = 0, groupMask = 1 << group;
	    scan: for (var pos = token.start;;) {
	        if ((groupMask & data[state]) == 0)
	            break;
	        var accEnd = data[state + 1];
	        // Check whether this state can lead to a token in the current group
	        // Accept tokens in this state, possibly overwriting
	        // lower-precedence / shorter tokens
	        for (var i = state + 3; i < accEnd; i += 2)
	            if ((data[i + 1] & groupMask) > 0) {
	                var term = data[i];
	                if (token.value == -1 || token.value == term || stack.cx.parser.overrides(term, token.value)) {
	                    token.accept(term, pos);
	                    break;
	                }
	            }
	        var next = input.get(pos++);
	        // Do a binary search on the state's edges
	        for (var low = 0, high = data[state + 2]; low < high;) {
	            var mid = (low + high) >> 1;
	            var index = accEnd + mid + (mid << 1);
	            var from = data[index], to = data[index + 1];
	            if (next < from)
	                high = mid;
	            else if (next >= to)
	                low = mid + 1;
	            else {
	                state = data[index + 2];
	                continue scan;
	            }
	        }
	        break;
	    }
	}

	// See lezer-generator/src/encode.ts for comments about the encoding
	// used here
	function decodeArray(input, Type) {
	    if (Type === void 0) { Type = Uint16Array; }
	    var array = null;
	    for (var pos = 0, out = 0; pos < input.length;) {
	        var value = 0;
	        for (;;) {
	            var next = input.charCodeAt(pos++), stop = false;
	            if (next == 126 /* BigValCode */) {
	                value = 65535 /* BigVal */;
	                break;
	            }
	            if (next >= 92 /* Gap2 */)
	                next--;
	            if (next >= 34 /* Gap1 */)
	                next--;
	            var digit = next - 32 /* Start */;
	            if (digit >= 46 /* Base */) {
	                digit -= 46 /* Base */;
	                stop = true;
	            }
	            value += digit;
	            if (stop)
	                break;
	            value *= 46 /* Base */;
	        }
	        if (array)
	            array[out++] = value;
	        else
	            array = new Type(value);
	    }
	    return array;
	}

	// Environment variable used to control console output
	var verbose = typeof process != "undefined" && /\bparse\b/.test(process.env.LOG);
	var CacheCursor = /** @class */ (function () {
	    function CacheCursor(tree) {
	        this.start = [0];
	        this.index = [0];
	        this.nextStart = 0;
	        this.trees = [tree];
	    }
	    // `pos` must be >= any previously given `pos` for this cursor
	    CacheCursor.prototype.nodeAt = function (pos) {
	        if (pos < this.nextStart)
	            return null;
	        for (;;) {
	            var last = this.trees.length - 1;
	            if (last < 0) { // End of tree
	                this.nextStart = 1e9;
	                return null;
	            }
	            var top = this.trees[last], index = this.index[last];
	            if (index == top.children.length) {
	                this.trees.pop();
	                this.start.pop();
	                this.index.pop();
	                continue;
	            }
	            var next = top.children[index];
	            var start = this.start[last] + top.positions[index];
	            if (start >= pos)
	                return start == pos ? next : null;
	            if (next instanceof TreeBuffer) {
	                this.index[last]++;
	                this.nextStart = start + next.length;
	            }
	            else {
	                this.index[last]++;
	                if (start + next.length >= pos) { // Enter this node
	                    this.trees.push(next);
	                    this.start.push(start);
	                    this.index.push(0);
	                }
	            }
	        }
	    };
	    return CacheCursor;
	}());
	var CachedToken = /** @class */ (function (_super) {
	    __extends$1(CachedToken, _super);
	    function CachedToken() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.extended = -1;
	        _this.mask = 0;
	        return _this;
	    }
	    CachedToken.prototype.clear = function (start) {
	        this.start = start;
	        this.value = this.extended = -1;
	    };
	    return CachedToken;
	}(Token));
	var dummyToken = new Token;
	var TokenCache = /** @class */ (function () {
	    function TokenCache(parser) {
	        this.tokens = [];
	        this.mainToken = dummyToken;
	        this.actions = [];
	        this.tokens = parser.tokenizers.map(function (_) { return new CachedToken; });
	    }
	    TokenCache.prototype.getActions = function (stack, input) {
	        var actionIndex = 0;
	        var main = null;
	        var parser = stack.cx.parser, tokenizers = parser.tokenizers;
	        var mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
	        for (var i = 0; i < tokenizers.length; i++) {
	            if (((1 << i) & mask) == 0)
	                continue;
	            var tokenizer = tokenizers[i], token = this.tokens[i];
	            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask) {
	                this.updateCachedToken(token, tokenizer, stack, input);
	                token.mask = mask;
	            }
	            var startIndex = actionIndex;
	            if (token.extended > -1)
	                actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
	            actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
	            if (actionIndex > startIndex) {
	                main = token;
	                break;
	            }
	            if (!main || token.value != 0 /* Err */)
	                main = token;
	        }
	        while (this.actions.length > actionIndex)
	            this.actions.pop();
	        if (!main) {
	            main = dummyToken;
	            main.start = stack.pos;
	            if (stack.pos == input.length)
	                main.accept(stack.cx.parser.eofTerm, stack.pos);
	            else
	                main.accept(0 /* Err */, stack.pos + 1);
	        }
	        this.mainToken = main;
	        return this.actions;
	    };
	    TokenCache.prototype.updateCachedToken = function (token, tokenizer, stack, input) {
	        token.clear(stack.pos);
	        tokenizer.token(input, token, stack);
	        if (token.value > -1) {
	            var parser = stack.cx.parser;
	            var specIndex = findOffset(parser.data, parser.specializeTable, token.value);
	            if (specIndex >= 0) {
	                var found = parser.specializations[specIndex][input.read(token.start, token.end)];
	                if (found != null) {
	                    if ((found & 1) == 0 /* Specialize */)
	                        token.value = found >> 1;
	                    else
	                        token.extended = found >> 1;
	                }
	            }
	        }
	        else if (stack.pos == input.length) {
	            token.accept(stack.cx.parser.eofTerm, stack.pos);
	        }
	        else {
	            token.accept(0 /* Err */, stack.pos + 1);
	        }
	    };
	    TokenCache.prototype.putAction = function (action, token, end, index) {
	        // Don't add duplicate actions
	        for (var i = 0; i < index; i += 3)
	            if (this.actions[i] == action)
	                return index;
	        this.actions[index++] = action;
	        this.actions[index++] = token;
	        this.actions[index++] = end;
	        return index;
	    };
	    TokenCache.prototype.addActions = function (stack, token, end, index) {
	        var state = stack.state, parser = stack.cx.parser, data = parser.data;
	        for (var set = 0; set < 2; set++) {
	            for (var i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next = void 0; (next = data[i]) != 65535 /* End */; i += 3) {
	                if (next == token || (next == 0 /* Err */ && index == 0))
	                    index = this.putAction(data[i + 1] | (data[i + 2] << 16), token, end, index);
	            }
	        }
	        return index;
	    };
	    return TokenCache;
	}());
	var StackContext = /** @class */ (function () {
	    function StackContext(parser, maxBufferLength, input, topTerm, parent, wrapType // Set to -2 when a stack descending from this nesting event finishes
	    ) {
	        if (parent === void 0) { parent = null; }
	        if (wrapType === void 0) { wrapType = -1; }
	        this.parser = parser;
	        this.maxBufferLength = maxBufferLength;
	        this.input = input;
	        this.topTerm = topTerm;
	        this.parent = parent;
	        this.wrapType = wrapType;
	        this.reused = [];
	        this.tokens = new TokenCache(parser);
	    }
	    return StackContext;
	}());
	var recoverDist = 5, maxRemainingPerStep = 3, minBufferLengthPrune = 200, forceReduceLimit = 10;
	/// A parse context can be used for step-by-step parsing. After
	/// creating it, you repeatedly call `.advance()` until it returns a
	/// tree to indicate it has reached the end of the parse.
	var ParseContext = /** @class */ (function () {
	    /// @internal
	    function ParseContext(parser, input, _a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.cache, cache = _c === void 0 ? undefined : _c, _d = _b.strict, strict = _d === void 0 ? false : _d, _e = _b.bufferLength, bufferLength = _e === void 0 ? DefaultBufferLength : _e, _f = _b.top, top = _f === void 0 ? undefined : _f;
	        // The position to which the parse has advanced.
	        this.pos = 0;
	        this.recovering = 0;
	        this.tokenCount = 0;
	        var topInfo = top ? parser.topRules[top] : parser.defaultTop;
	        if (!topInfo)
	            throw new RangeError("Invalid top rule name " + top);
	        this.stacks = [Stack.start(new StackContext(parser, bufferLength, input, topInfo[1]), topInfo[0])];
	        this.strict = strict;
	        this.cache = cache ? new CacheCursor(cache) : null;
	    }
	    /// @internal
	    ParseContext.prototype.putStack = function (stack) {
	        this.stacks.push(stack);
	        if (this.pos < 0 || stack.pos < this.pos)
	            this.pos = stack.pos;
	    };
	    /// Move the parser forward. This will process all parse stacks at
	    /// `this.pos` and try to advance them to a further position. If no
	    /// stack for such a position is found, it'll start error-recovery.
	    ///
	    /// When the parse is finished, this will return a syntax tree. When
	    /// not, it returns `null`.
	    ParseContext.prototype.advance = function () {
	        var stacks = this.stacks, pos = this.pos;
	        // This will now hold stacks beyond `pos`.
	        this.stacks = [];
	        // Will be reset to the next position by `putStack`.
	        this.pos = -1;
	        var stopped = null, stoppedTokens = null;
	        // Keep advancing any stacks at `pos` until they either move
	        // forward or can't be advanced. Gather stacks that can't be
	        // advanced further in `stopped`.
	        for (var i = 0; i < stacks.length; i++) {
	            var stack = stacks[i];
	            for (;;) {
	                if (stack.pos > pos) {
	                    this.putStack(stack);
	                }
	                else {
	                    var result = this.advanceStack(stack, stacks);
	                    if (result) {
	                        stack = result;
	                        continue;
	                    }
	                    else {
	                        if (!stopped) {
	                            stopped = [];
	                            stoppedTokens = [];
	                        }
	                        stopped.push(stack);
	                        var tok = stack.cx.tokens.mainToken;
	                        stoppedTokens.push(tok.value, tok.end);
	                    }
	                }
	                break;
	            }
	        }
	        if (!this.stacks.length) {
	            var finished = stopped && findFinished(stopped);
	            if (finished)
	                return finished.toTree();
	            if (this.strict)
	                throw new SyntaxError("No parse at " + pos);
	            if (!this.recovering)
	                this.recovering = recoverDist;
	        }
	        if (this.recovering && stopped) {
	            var finished = this.runRecovery(stopped, stoppedTokens);
	            if (finished)
	                return finished.forceAll().toTree();
	        }
	        if (this.recovering) {
	            var maxRemaining = this.recovering == 1 ? 1 : this.recovering * maxRemainingPerStep;
	            if (this.stacks.length > maxRemaining) {
	                this.stacks.sort(function (a, b) { return a.recovered - b.recovered; });
	                this.stacks.length = maxRemaining;
	            }
	            if (this.stacks.some(function (s) { return s.reducePos > pos; }))
	                this.recovering--;
	        }
	        else if (this.stacks.length > 1 && this.stacks[0].buffer.length > minBufferLengthPrune) {
	            // Prune stacks that have been running without splitting for a
	            // while, to avoid getting stuck with multiple successful stacks
	            // running endlessly on.
	            var minLen = 1e9, minI = -1;
	            for (var i = 0; i < this.stacks.length; i++) {
	                var stack = this.stacks[i];
	                if (stack.buffer.length < minLen) {
	                    minLen = stack.buffer.length;
	                    minI = i;
	                }
	            }
	            if (minLen > minBufferLengthPrune)
	                this.stacks.splice(minI, 1);
	        }
	        this.tokenCount++;
	        return null;
	    };
	    // Returns an updated version of the given stack, or null if the
	    // stack can't advance normally. When `split` is given, stacks split
	    // off by ambiguous operations will be pushed to that, or given to
	    // `putStack` if they move `pos` forward.
	    ParseContext.prototype.advanceStack = function (stack, split) {
	        var start = stack.pos, _a = stack.cx, input = _a.input, parser = _a.parser;
	        var base = verbose ? stack + " -> " : "";
	        if (this.cache) {
	            for (var cached = this.cache.nodeAt(start); cached;) {
	                var match = parser.group.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
	                if (match > -1) {
	                    stack.useNode(cached, match);
	                    if (verbose)
	                        console.log(base + stack + (" (via reuse of " + parser.getName(cached.type.id) + ")"));
	                    return stack;
	                }
	                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
	                    break;
	                var inner = cached.children[0];
	                if (inner instanceof Tree)
	                    cached = inner;
	                else
	                    break;
	            }
	        }
	        var nest = parser.startNested(stack.state);
	        maybeNest: if (nest > -1) {
	            var _b = parser.nested[nest], grammar = _b.grammar, endToken = _b.end, placeholder = _b.placeholder;
	            var filterEnd = undefined, parseNode = null, nested = void 0, top = void 0, wrapType = undefined;
	            if (typeof grammar == "function") {
	                var query = grammar(input, stack);
	                if (query.stay)
	                    break maybeNest;
	                (parseNode = query.parseNode, nested = query.parser, top = query.top, filterEnd = query.filterEnd, wrapType = query.wrapType);
	            }
	            else {
	                nested = grammar;
	            }
	            var end = this.scanForNestEnd(stack, endToken, filterEnd);
	            var clippedInput = stack.cx.input.clip(end);
	            if (parseNode || !nested) {
	                var node = parseNode ? parseNode(clippedInput, stack.pos) : Tree.empty;
	                if (node.length != end - stack.pos)
	                    node = new Tree(node.type, node.children, node.positions, end - stack.pos);
	                if (wrapType != null)
	                    node = new Tree(parser.group.types[wrapType], [node], [0], node.length);
	                stack.useNode(node, parser.getGoto(stack.state, placeholder, true));
	                return stack;
	            }
	            else {
	                var topInfo = top ? nested.topRules[top] : nested.defaultTop;
	                var newStack = Stack.start(new StackContext(nested, stack.cx.maxBufferLength, clippedInput, topInfo[1], stack, wrapType), topInfo[0], stack.pos);
	                if (verbose)
	                    console.log(base + newStack + " (nested)");
	                return newStack;
	            }
	        }
	        var defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
	        if (defaultReduce > 0) {
	            stack.reduce(defaultReduce);
	            if (verbose)
	                console.log(base + stack + (" (via always-reduce " + parser.getName(defaultReduce & 65535 /* ValueMask */) + ")"));
	            return stack;
	        }
	        var actions = stack.cx.tokens.getActions(stack, input);
	        for (var i = 0; i < actions.length;) {
	            var action = actions[i++], term = actions[i++], end = actions[i++];
	            var last = i == actions.length || !split;
	            var localStack = last ? stack : stack.split();
	            localStack.apply(action, term, end);
	            if (verbose)
	                console.log(base + localStack + (" (via " + ((action & 65536 /* ReduceFlag */) == 0 ? "shift"
	                    : "reduce of " + parser.getName(action & 65535 /* ValueMask */)) + " for " + parser.getName(term) + " @ " + start + (localStack == stack ? "" : ", split") + ")"));
	            if (last)
	                return localStack;
	            else if (localStack.pos > start)
	                this.putStack(localStack);
	            else
	                split.push(localStack);
	        }
	        if (stack.cx.parent && stack.pos == input.length)
	            return finishNested(stack);
	        return null;
	    };
	    // Advance a given stack forward as far as it will go. Returns the
	    // (possibly updated) stack if it got stuck, or null if it moved
	    // forward and was given to `putStack`.
	    ParseContext.prototype.advanceFully = function (stack) {
	        var pos = stack.pos;
	        for (;;) {
	            var result = this.advanceStack(stack, null);
	            if (!result)
	                return stack;
	            if (result.pos > pos) {
	                this.putStack(result);
	                return null;
	            }
	            stack = result;
	        }
	    };
	    ParseContext.prototype.runRecovery = function (stacks, tokens) {
	        var finished = null;
	        for (var i = 0; i < stacks.length; i++) {
	            var stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
	            var base = verbose ? stack + " -> " : "";
	            var force = stack.split(), forceBase = base;
	            for (var j = 0; force.forceReduce() && j < forceReduceLimit; j++) {
	                if (verbose)
	                    console.log(forceBase + force + " (via force-reduce)");
	                var stopped = this.advanceFully(force);
	                if (!stopped)
	                    break;
	                force = stopped;
	                if (verbose)
	                    forceBase = stopped + " -> ";
	            }
	            for (var _i = 0, _a = stack.recoverByInsert(token); _i < _a.length; _i++) {
	                var insert = _a[_i];
	                if (verbose)
	                    console.log(base + insert + " (via recover-insert)");
	                this.advanceFully(insert);
	            }
	            if (stack.cx.input.length > stack.pos) {
	                if (tokenEnd == stack.pos) {
	                    tokenEnd++;
	                    token = 0 /* Err */;
	                }
	                stack.recoverByDelete(token, tokenEnd);
	                if (verbose)
	                    console.log(base + stack + (" (via recover-delete " + stack.cx.parser.getName(token) + ")"));
	                this.putStack(stack);
	            }
	            else if (!stack.cx.parent && (!finished || finished.recovered > stack.recovered)) {
	                finished = stack;
	            }
	        }
	        return finished;
	    };
	    /// Force the parse to finish, generating a tree containing the nodes
	    /// parsed so far.
	    ParseContext.prototype.forceFinish = function () {
	        return this.stacks[0].split().forceAll().toTree();
	    };
	    Object.defineProperty(ParseContext.prototype, "badness", {
	        /// A value that indicates how successful the parse is so far, as
	        /// the number of error-recovery steps taken divided by the number
	        /// of tokens parsed. Could be used to decide to abort a parse when
	        /// the input doesn't appear to match the grammar at all.
	        get: function () {
	            return this.stacks[0].recovered * 2 /* Token */ / this.tokenCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ParseContext.prototype.scanForNestEnd = function (stack, endToken, filter) {
	        var input = stack.cx.input;
	        for (var pos = stack.pos; pos < input.length; pos++) {
	            dummyToken.start = pos;
	            dummyToken.value = -1;
	            endToken.token(input, dummyToken, stack);
	            if (dummyToken.value > -1 && (!filter || filter(input.read(pos, dummyToken.end))))
	                return pos;
	        }
	        return input.length;
	    };
	    return ParseContext;
	}());
	/// A parser holds the parse tables for a given grammar, as generated
	/// by `lezer-generator`.
	var Parser = /** @class */ (function () {
	    /// @internal
	    function Parser(
	    /// The parse states for this grammar @internal
	    states, 
	    /// A blob of data that the parse states, as well as some
	    /// of `Parser`'s fields, point into @internal
	    data, 
	    /// The goto table. See `computeGotoTable` in
	    /// lezer-generator for details on the format @internal
	    goto, 
	    /// A node group with the node types used by this parser.
	    group, 
	    /// The first repeat-related term id @internal
	    minRepeatTerm, 
	    /// The tokenizer objects used by the grammar @internal
	    tokenizers, 
	    /// Maps top rule names to [state ID, top term ID] pairs.
	    topRules, 
	    /// Metadata about nested grammars used in this grammar @internal
	    nested, 
	    /// Points into this.data at an array of token types that
	    /// are specialized @internal
	    specializeTable, 
	    /// For each specialized token type, this holds an object mapping
	    /// names to numbers, with the first bit indicating whether the
	    /// specialization extends or replaces the original token, and the
	    /// rest of the bits holding the specialized token type. @internal
	    specializations, 
	    /// Points into this.data at an array that holds the
	    /// precedence order (higher precedence first) for ambiguous
	    /// tokens @internal
	    tokenPrecTable, 
	    /// An optional object mapping term ids to name strings @internal
	    termNames) {
	        if (termNames === void 0) { termNames = null; }
	        this.states = states;
	        this.data = data;
	        this.goto = goto;
	        this.group = group;
	        this.minRepeatTerm = minRepeatTerm;
	        this.tokenizers = tokenizers;
	        this.topRules = topRules;
	        this.nested = nested;
	        this.specializeTable = specializeTable;
	        this.specializations = specializations;
	        this.tokenPrecTable = tokenPrecTable;
	        this.termNames = termNames;
	        this.nextStateCache = [];
	        this.maxNode = this.group.types.length - 1;
	        this.maxRepeatWrap = this.group.types.length + (this.group.types.length - minRepeatTerm) - 1;
	        for (var i = 0, l = this.states.length / 6 /* Size */; i < l; i++)
	            this.nextStateCache[i] = null;
	    }
	    /// Parse a given string or stream.
	    Parser.prototype.parse = function (input, options) {
	        if (typeof input == "string")
	            input = new StringStream(input);
	        var cx = new ParseContext(this, input, options);
	        for (;;) {
	            var done = cx.advance();
	            if (done)
	                return done;
	        }
	    };
	    /// Create a `ParseContext`.
	    Parser.prototype.startParse = function (input, options) {
	        if (typeof input == "string")
	            input = new StringStream(input);
	        return new ParseContext(this, input, options);
	    };
	    /// Get a goto table entry @internal
	    Parser.prototype.getGoto = function (state, term, loose) {
	        if (loose === void 0) { loose = false; }
	        var table = this.goto;
	        if (term >= table[0])
	            return -1;
	        for (var pos = table[term + 1];;) {
	            var groupTag = table[pos++], last = groupTag & 1;
	            var target = table[pos++];
	            if (last && loose)
	                return target;
	            for (var end = pos + (groupTag >> 1); pos < end; pos++)
	                if (table[pos] == state)
	                    return target;
	            if (last)
	                return -1;
	        }
	    };
	    /// Check if this state has an action for a given terminal @internal
	    Parser.prototype.hasAction = function (state, terminal) {
	        var data = this.data;
	        for (var set = 0; set < 2; set++) {
	            for (var i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next = void 0; (next = data[i]) != 65535 /* End */; i += 3) {
	                if (next == terminal || next == 0 /* Err */)
	                    return data[i + 1] | (data[i + 2] << 16);
	            }
	        }
	        return 0;
	    };
	    /// @internal
	    Parser.prototype.stateSlot = function (state, slot) {
	        return this.states[(state * 6 /* Size */) + slot];
	    };
	    /// @internal
	    Parser.prototype.stateFlag = function (state, flag) {
	        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
	    };
	    /// @internal
	    Parser.prototype.startNested = function (state) {
	        var flags = this.stateSlot(state, 0 /* Flags */);
	        return flags & 4 /* StartNest */ ? flags >> 10 /* NestShift */ : -1;
	    };
	    /// @internal
	    Parser.prototype.validAction = function (state, action) {
	        if (action == this.stateSlot(state, 4 /* DefaultReduce */))
	            return true;
	        for (var i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
	            if (this.data[i] == 65535 /* End */)
	                return false;
	            if (action == (this.data[i + 1] | (this.data[i + 2] << 16)))
	                return true;
	        }
	    };
	    /// Get the states that can follow this one through shift actions or
	    /// goto jumps. @internal
	    Parser.prototype.nextStates = function (state) {
	        var cached = this.nextStateCache[state];
	        if (cached)
	            return cached;
	        var result = [];
	        for (var i = this.stateSlot(state, 1 /* Actions */); this.data[i] != 65535 /* End */; i += 3) {
	            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0 && result.indexOf(this.data[i + 1]) < 0)
	                result.push(this.data[i + 1]);
	        }
	        var table = this.goto, max = table[0];
	        for (var term = 0; term < max; term++) {
	            for (var pos = table[term + 1];;) {
	                var groupTag = table[pos++], target = table[pos++];
	                for (var end = pos + (groupTag >> 1); pos < end; pos++)
	                    if (table[pos] == state && result.indexOf(target) < 0)
	                        result.push(target);
	                if (groupTag & 1)
	                    break;
	            }
	        }
	        return this.nextStateCache[state] = result;
	    };
	    /// @internal
	    Parser.prototype.overrides = function (token, prev) {
	        var iPrev = findOffset(this.data, this.tokenPrecTable, prev);
	        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
	    };
	    /// Create a new `Parser` instance with different values for (some
	    /// of) the nested grammars. This can be used to, for example, swap
	    /// in a different language for a nested grammar or fill in a nested
	    /// grammar that was left blank by the original grammar.
	    Parser.prototype.withNested = function (spec) {
	        return new Parser(this.states, this.data, this.goto, this.group, this.minRepeatTerm, this.tokenizers, this.topRules, this.nested.map(function (obj) {
	            if (!Object.prototype.hasOwnProperty.call(spec, obj.name))
	                return obj;
	            return { name: obj.name, grammar: spec[obj.name], end: obj.end, placeholder: obj.placeholder };
	        }), this.specializeTable, this.specializations, this.tokenPrecTable, this.termNames);
	    };
	    /// Create a new `Parser` instance whose node types have the given
	    /// props added. You should use [`NodeProp.add`](#tree.NodeProp.add)
	    /// to create the arguments to this method.
	    Parser.prototype.withProps = function () {
	        var _a;
	        var props = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            props[_i] = arguments[_i];
	        }
	        return new Parser(this.states, this.data, this.goto, (_a = this.group).extend.apply(_a, props), this.minRepeatTerm, this.tokenizers, this.topRules, this.nested, this.specializeTable, this.specializations, this.tokenPrecTable, this.termNames);
	    };
	    /// Returns the name associated with a given term. This will only
	    /// work for all terms when the parser was generated with the
	    /// `--names` option. By default, only the names of tagged terms are
	    /// stored.
	    Parser.prototype.getName = function (term) {
	        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.group.types[term].name || term);
	    };
	    Object.defineProperty(Parser.prototype, "eofTerm", {
	        /// The eof term id is always allocated directly after the node
	        /// types. @internal
	        get: function () { return this.maxRepeatWrap + 1; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Parser.prototype, "hasNested", {
	        /// Tells you whether this grammar has any nested grammars.
	        get: function () { return this.nested.length > 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Parser.prototype, "defaultTop", {
	        /// @internal
	        get: function () { return this.topRules[Object.keys(this.topRules)[0]]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Parser.prototype, "topType", {
	        /// The node type produced by the default top rule.
	        get: function () { return this.group.types[this.defaultTop[1]]; },
	        enumerable: true,
	        configurable: true
	    });
	    /// (Used by the output of the parser generator) @internal
	    Parser.deserialize = function (spec) {
	        var tokenArray = decodeArray(spec.tokenData);
	        var nodeNames = spec.nodeNames.split(" "), minRepeatTerm = nodeNames.length;
	        for (var i = 0; i < spec.repeatNodeCount; i++)
	            nodeNames.push("");
	        var nodeProps = [];
	        for (var i = 0; i < nodeNames.length; i++)
	            nodeProps.push(noProps);
	        function setProp(nodeID, prop, value) {
	            if (nodeProps[nodeID] == noProps)
	                nodeProps[nodeID] = Object.create(null);
	            prop.set(nodeProps[nodeID], prop.deserialize(String(value)));
	        }
	        setProp(0, NodeProp.error, "");
	        if (spec.nodeProps)
	            for (var _i = 0, _a = spec.nodeProps; _i < _a.length; _i++) {
	                var propSpec = _a[_i];
	                var prop = propSpec[0];
	                for (var i = 1; i < propSpec.length; i += 2)
	                    setProp(propSpec[i], prop, propSpec[i + 1]);
	            }
	        var group = new NodeGroup(nodeNames.map(function (name, i) { return new NodeType(name, nodeProps[i], i); }));
	        return new Parser(decodeArray(spec.states, Uint32Array), decodeArray(spec.stateData), decodeArray(spec.goto), group, minRepeatTerm, spec.tokenizers.map(function (value) { return typeof value == "number" ? new TokenGroup(tokenArray, value) : value; }), spec.topRules, (spec.nested || []).map(function (_a) {
	            var name = _a[0], grammar = _a[1], endToken = _a[2], placeholder = _a[3];
	            return ({ name: name, grammar: grammar, end: new TokenGroup(decodeArray(endToken), 0), placeholder: placeholder });
	        }), spec.specializeTable, (spec.specializations || []).map(withoutPrototype), spec.tokenPrec, spec.termNames);
	    };
	    return Parser;
	}());
	var noProps = Object.create(null);
	function findOffset(data, start, term) {
	    for (var i = start, next = void 0; (next = data[i]) != 65535 /* End */; i++)
	        if (next == term)
	            return i - start;
	    return -1;
	}
	// Strip the prototypes from objects, so that they can safely be
	// accessed as maps.
	function withoutPrototype(obj) {
	    if (!(obj instanceof Object))
	        return obj;
	    var result = Object.create(null);
	    for (var prop in obj)
	        if (Object.prototype.hasOwnProperty.call(obj, prop))
	            result[prop] = obj[prop];
	    return result;
	}
	function findFinished(stacks) {
	    var best = null;
	    for (var _i = 0, stacks_1 = stacks; _i < stacks_1.length; _i++) {
	        var stack = stacks_1[_i];
	        if (stack.pos == stack.cx.input.length &&
	            stack.cx.parser.stateFlag(stack.state, 2 /* Accepting */) &&
	            (!best || best.recovered > stack.recovered))
	            best = stack;
	    }
	    return best;
	}
	function finishNested(stack) {
	    if (stack.cx.wrapType == -2)
	        return null; // Another nested stack already finished
	    var parent = stack.cx.parent, tree = stack.forceAll().toTree();
	    var parentParser = parent.cx.parser, info = parentParser.nested[parentParser.startNested(parent.state)];
	    tree = new Tree(tree.type, tree.children, tree.positions.map(function (p) { return p - parent.pos; }), stack.pos - parent.pos);
	    if (stack.cx.wrapType > -1)
	        tree = new Tree(parentParser.group.types[stack.cx.wrapType], [tree], [0], tree.length);
	    stack.cx.wrapType = -2;
	    parent.useNode(tree, parentParser.getGoto(parent.state, info.placeholder, true));
	    if (verbose)
	        console.log(parent + (" (via unnest " + (stack.cx.wrapType > -1 ? parentParser.getName(stack.cx.wrapType) : tree.type.name) + ")"));
	    return parent;
	}
	//# sourceMappingURL=index.es.js.map

	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const 
	  noSemi = 181,
	  PostfixOp = 1,
	  insertSemi = 182,
	  templateContent = 183,
	  templateDollarBrace = 184,
	  templateEnd = 185;

	/* Hand-written tokenizers for JavaScript tokens that can't be
	   expressed by lezer's built-in tokenizer. */

	const newline = [10, 13, 8232, 8233];
	const space = [9, 11, 12, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288];

	const braceR = 125, braceL = 123, semicolon = 59, slash = 47, star = 42,
	      plus = 43, minus = 45, dollar = 36, backtick = 96, backslash = 92;

	// FIXME this should technically enter block comments
	function newlineBefore(input, pos) {
	  for (let i = pos - 1; i >= 0; i--) {
	    let prev = input.get(i);
	    if (newline.indexOf(prev) > -1) return true
	    if (space.indexOf(prev) < 0) break
	  }
	  return false
	}

	const insertSemicolon = new ExternalTokenizer((input, token, stack) => {
	  let pos = token.start, next = input.get(pos);
	  if ((next == braceR || next == -1 || newlineBefore(input, pos)) && stack.canShift(insertSemi))
	    token.accept(insertSemi, token.start);
	}, {contextual: true});

	const noSemicolon = new ExternalTokenizer((input, token, stack) => {
	  let pos = token.start, next = input.get(pos++);
	  if (space.indexOf(next) > -1 || newline.indexOf(next) > -1) return
	  if (next == slash) {
	    let after = input.get(pos++);
	    if (after == slash || after == star) return
	  }
	  if (next != braceR && next != semicolon && next != -1 && !newlineBefore(input, token.start) &&
	      stack.canShift(noSemi))
	    token.accept(noSemi, token.start);
	}, {contextual: true});

	const postfix = new ExternalTokenizer((input, token, stack) => {
	  let pos = token.start, next = input.get(pos++);
	  if ((next == plus || next == minus) && next == input.get(pos++) &&
	      !newlineBefore(input, token.start) && stack.canShift(PostfixOp))
	    token.accept(PostfixOp, pos);
	}, {contextual: true});

	const template = new ExternalTokenizer((input, token) => {
	  let pos = token.start, afterDollar = false;
	  for (;;) {
	    let next = input.get(pos++);
	    if (next < 0) {
	      if (pos - 1 > token.start) token.accept(templateContent, pos - 1);
	      break
	    } else if (next == backtick) {
	      if (pos == token.start + 1) token.accept(templateEnd, pos);
	      else token.accept(templateContent, pos - 1);
	      break
	    } else if (next == braceL && afterDollar) {
	      if (pos == token.start + 2) token.accept(templateDollarBrace, pos);
	      else token.accept(templateContent, pos - 2);
	      break
	    } else if (next == 10 /* "\n" */ && pos > token.start + 1) {
	      // Break up template strings on lines, to avoid huge tokens
	      token.accept(templateContent, pos);
	      break
	    } else if (next == backslash && pos != input.length) {
	      pos++;
	    }
	    afterDollar = next == dollar;
	  }
	});

	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const parser = Parser.deserialize({
	  states: "!4xOYOSOOO$QOSO'#FvO&{O!lO'#CkO(wOSO'#CrO*sO!lO'#GmOXOO'#Gm'#GmO,oX#tO'#C|O,yOSO'#D]O/tOSO'#DaO1dOSO'#DkOXOO'#Dt'#DtO3YOSO'#DsO3^O!lO'#GjO5cOSO'#E]OXOO'#Gj'#GjOXOO'#Gs'#GsO5gOSO'#FdO5kO!fO'#FeOXOO'#G`'#G`OXOO(3Cx(3CxQXOSOOO/tOSO'#D^O5rOSO'#EbO5vOSO'#ChO6QOSO'#DsO6[OSO'#EcO6fOSO'#CaO7SOSO'#EkO7dOSO'#EnO7kOSO'#EtO7kOSO'#EvOYOSO'#ExO7kOSO'#EzO7kOSO'#E}O7oOSO'#FTO7sO!gO'#FXO/tOSO'#FZO7}O!gO'#F]O8XO!gO'#F`O5kO!fO'#FbOXOO,5<Q,5<QO8cO!lO'#CkO:zOSO'#GgO/tOSO'#GgO;ROSO,59^O;VOSO'#FzO;^OSO(3C|O=VOYO'#GoOXOO'#Go'#GoO>rOSO,59pO>vO`O'#DVO?jOSO'#DtO?}OSO'#GfO@[O!fO'#GeO@oOSO'#DlO5vOSO'#DrO6TOSO'#DsO@yO!fO'#FyO/tOSO'#FiOXOO,59i,59iOAaOSO'#D`OCVO`O,5:bO/tOSO,5:bO/tOSO,5:eO/tOSO,5:eO/tOSO,5:eO/tOSO,5:eO/tOSO,5:eO/tOSO,5:eO/tOSO,5:eO/tOSO,5:eO/tOSO,5:eO/tOSO,5:eO/tOSO,5:eOCZOSO,5:tOXOO,5:y,5:yOXOO,5:z,5:zOXOO,5:{,5:{ODyX#tO'#FxO/tOSO'#GlOXXO(3Cz(3CzOETX#tO,59hOEXOSO'#F{OXOO(3C}(3C}OHSOSO,59wOHWO!lO,59{OJVOSO,5:VO6[OSO'#GdOJZOSO'#GdOJbOSO,59YOJfOSO,5:_O/tOSO,5:wOYOSO,5<OOXOO'#Gc'#GcOXOO,5<P,5<POLUO!lO,59xOXOO'#Ck'#CkONTOSO,5:|OXOO'#Cc'#CcON[OSO'#CnO7oOSO,59SONlOSO,59SO6TOSO,59SONpOSO,5:_O5vOSO,59SONtOSO'#CrO! UO`O'#CvOXOO'#Gf'#GfO! fO!fO,5:}O! pOSO'#EgO! wOSO'#ChO! {OSO,58{O!!POSO,58{OXOO,58{,58{O!#oO!fO,58{O!#yOSO'#EmO!$QOSO'#GuO!$XOSO,5;VO!$]OSO,5;VO5kO!fO,5;VO!$aOSO'#EpOXOO'#Eq'#EqOXOO'#Er'#ErOYOSO,5;YO!&]OSO,5;YO/tOSO'#DkOYOSO,5;`OYOSO,5;bO!&aOSO,5;dOYOSO,5;fO!&eOSO,5;iO!&iOSO,5;oOXOO,5;s,5;sO/tOSO,5;sO5kO!fO,5;uOXOO,5;w,5;wO!)vOSO,5;wOXOO,5;z,5;zO!)vOSO,5;zOXOO,5;|,5;|O!)zOSO'#FwO!*ROSO(3CyOXOO,5=R,5=RO:zOSO,5=RO=VOYO,5=ZOXOO1G.x1G.xOXOO,5<U,5<UO!*fOYO-E9hO/tOSO,5<UOXOO,5=Z,5=ZOXOO1G/[1G/[O!,ROSO'#CxOXOO'#Gq'#GqO/tOSO'#GqO!,lOSO'#GqO!-VOSO'#DWO!-dO`O'#DWOCZOSO'#DWO!-qOSO'#GpO!-xOSO,59qO!-|OSO'#CwO!.ZOSO'#GhO!.bOSO,59bO!.fO`O'#DWO/tOSO,5=PO!.|O`O'#DoOXOO,5:W,5:WO/tOSO,5:WO!/gOSO,5:WO7oOSO,5:^ONlOSO,5:^O6TOSO,5:^OXOO,5<T,5<TO!/nO!lO-E9gO!1mOYO'#GrO/tOSO'#GrO!3YOSO,59zOXOO'#Cx'#CxOXOO1G/|1G/|O!3^OSO1G/|O!3bO!lO1G0PO!5aO!lO1G0PO!7`O!lO1G0PO!9_O!lO1G0PO!;^O!lO1G0PO!=]O!lO1G0PO!?[O!lO1G0PO!AZO!lO1G0PO!CYO!lO1G0PO!EXO!lO1G0PO!GWO!lO1G0PO!IVOrO'#CkOCZOSO'#DaO!KXOSO'#DsO!K]OrO1G0`O!LuOrO'#GjO!NkOSO'#E]OCZOSO'#D^O6TOSO'#DsOXXO,5<S,5<SO!NoO!lO'#GmO#!nOWO,5=WOXOO1G/S1G/SOXOO,5<V,5<VOXOO1G/c1G/cOXOO1G/q1G/qOJZOSO,5=OO#!rOSO'#GQO#!yOSO(3DSOXOO,5=O,5=OOXOO1G.t1G.tOXOO1G/y1G/yO##^O!lO1G0cOXOO1G1j1G1jOXOO1G/d1G/dOXOO1G0h1G0hO/tOSO1G0hOXOO1G.n1G.nO7oOSO1G.nONlOSO1G.nOJfOSO1G/yO6TOSO1G.nO6[OSO'#GgO6[OSO'#CwO#%]O!fO'#GRO6[OSO'#FqO5kO!fO1G0iOXOO'#DO'#DOO#%gOSO'#GtO#%qOSO,5;RO#%uOSO1G.gOXOO1G.g1G.gO5kO!fO1G.gO#%yOSO'#CkO#&TOSO'#GvO#&[OSO,5;XO#&`OSO'#GvO#&dOSO'#GUO#&kOSO(3DWOXOO,5=a,5=aO5rOSO1G0qO#&xOSO1G0qOXOO1G0q1G0qO#&|OYO,5=cO#(rOSO,5=cO#(|OSO,5;[O#*oOSO,5;[O6[OSO,5=cOXOO1G0t1G0tOYOSO1G0tOXOO1G0z1G0zOXOO1G0|1G0|O7kOSO1G1OO#*sOSO1G1QO#-zOSO'#FPOXOO1G1T1G1TO7oOSO1G1ZO#0{OSO1G1ZO5kO!fO1G1_OXOO1G1a1G1aOXOO'#F_'#F_O5kO!fO1G1cO5kO!fO1G1fOXOO,5<R,5<ROXOO-E9e-E9eO6[OSO,5<ROXOO1G2m1G2mOXOO1G2u1G2uO#1SOYO3)/SO#2oOSO,5=]OCZOSO,59cO6[OSO,59cO7oOSO,59rOCZOSO,59rOXOO'#D['#D[ONlOSO,59rO#2sOrO,59rO#4`OSO'#GfOXOO,59c,59cO#4jOSO'#GeO#4tOSO'#F|O#4{O`O(3DOOXOO,5=[,5=[OXOO1G/]1G/]O#5oOSO'#GPO#5vO`O(3DROXOO,5=S,5=SOXOO1G.|1G.|O!-dO`O,59rO#6ZO!lO1G2kO#8PO`O'#GOONlOSO'#DpO!-mO`O'#DpOXOO(3DQ(3DQO#8jOSO,5:ZO#8nO`O'#DpO#8{O`O'#DpO#9]OSO1G/rOXOO1G/r1G/rO/tOSO1G/rOXOO1G/x1G/xO7oOSO1G/xONlOSO1G/xO#9aOSO'#F}O#9hOSO(3DPOXOO,5=^,5=^O!1mOYO,5=^OXOO1G/f1G/fOXOO7+%h7+%hO#;aOrO,59{O#=POSO,5:_OCZOSO,5:eOCZOSO,5:eOCZOSO,5:eOCZOSO,5:eOCZOSO,5:eOCZOSO,5:eOCZOSO,5:eOCZOSO,5:eOCZOSO,5:eOCZOSO,5:eOCZOSO,5:eOCZOSO,5:tO/tOSO7+%zOCZOSO,5:wO#>oOrO,59xO#@_OSO,5:_O#@cO!lO'#FyOXXO1G2r1G2rOXOO1G2j1G2jOXOO,5<[,5<[O6[OSO,5<[OXOO-E9n-E9nO#9]OSO7+&SOXOO7+$Y7+$YO7oOSO7+$YOXOO7+%e7+%eONlOSO7+$YOXOO,5<],5<]OXOO-E9o-E9oOXOO7+&T7+&TO#BbOSO'#GSO#BiOSO(3DUOXOO,5=`,5=`O#BsO`O,5=`OXOO1G0m1G0mO5kO!fO7+$ROXOO7+$R7+$RO#BwOSO'#GTO#COOSO(3DVOXOO,5=b,5=bOXOO1G0s1G0sO5rOSO,5=bOXOO,5<`,5<`OXOO-E9r-E9rO#CYOSO7+&]O5kO!fO7+&]O/tOSO1G2}O/tOSO1G3OO#C^OSO1G0vO#EPOSO1G0vO#ETOSO1G0vO#FvO!fO1G2}OXOO7+&`7+&`O5kO!fO7+&jOYOSO7+&lO#GZOSO'#GVOXOO'#Gy'#GyOXOO(3DX(3DXO#J[OSO,5;kO/tOSO'#FQO#J`OSO'#FSOXOO7+&u7+&uO#JdOSO7+&uO6[OSO7+&uOXOO7+&y7+&yOXOO7+&}7+&}OXOO7+'Q7+'QOXOO3)/P3)/POXOO1G2w1G2wO#MnOrO1G.}O$ ZOSO1G.}OXOO1G/^1G/^O$ eOrO1G/^O7oOSO1G/^OCZOSO,5=POXOO,5<W,5<WOCZOSO'#DWOXOO-E9j-E9jOXOO,5<Z,5<ZOXOO-E9m-E9mONlOSO1G/^OXOO,5<Y,5<YO7oOSO,5:[ONlOSO,5:[OXOO1G/u1G/uO!-mO`O,5:[O$#QO`O,5:[OXOO7+%^7+%^O#9]OSO7+%^OXOO7+%d7+%dO7oOSO7+%dOXOO,5<X,5<XO$#_OYO-E9kO/tOSO,5<XOXOO1G2x1G2xO$$zOrO'#GmO$&jOrO1G0PO$(YOrO1G0PO$)xOrO1G0PO$+hOrO1G0PO$-WOrO1G0PO$.vOrO1G0PO$0fOrO1G0PO$2UOrO1G0PO$3tOrO1G0PO$5dOrO1G0PO$7SOrO1G0PO$8rOrO1G0`O$:[O!lO<<IfO$<ZOrO1G0cO#=POSO1G/yOXOO3)/Y3)/YOXOO<<In<<InOXOO<<Gt<<GtO7oOSO<<GtOXOO,5<^,5<^O$=yOSO-E9pOXOO'#Ei'#EiO$>TOSO1G2zOXOO<<Gm<<GmOXOO,5<_,5<_OXOO-E9q-E9qO$>[OSO,5<_O#&TOSO1G2|O$>`OSO<<IwOXOO<<Iw<<IwO$>dOSO7+(iO$>hOSO7+(jOXOO7+&b7+&bO$>lOSO7+&bO$>pOSO7+&bO$@cOSO7+&bO/tOSO7+(iO/tOSO7+(jOXOO<<JU<<JUOXOO<<JW<<JWOXOO,5<a,5<aOXOO1G1V1G1VO$@gOSO,5;lOXOO,5;n,5;nO7oOSO<<JaO$@kOSO<<JaOCZOSO7+$iOXOO7+$x7+$xO$@oOrO1G2kO7oOSO7+$xOXOO1G/v1G/vO7oOSO1G/vONlOSO1G/vO!-mO`O1G/vOXOO<<Hx<<HxOXOO<<IO<<IOO$B[OYO3)/VO$CwOrO'#FyOCZOSO'#FiOCZOSO7+%zOXOOAN=`AN=`O$EgO`O1G1xOXOO7+(f7+(fO5rOSO1G1yOXOO7+(h7+(hO5kO!fOAN?cOXOO<<LT<<LTOXOO<<LU<<LUOXOO<<I|<<I|O$EkOSO<<I|O$EoOSO<<I|O$GbOSO<<LTO$GfOSO<<LUOXOO1G1W1G1WOXOOAN?{AN?{O7oOSOAN?{O$GjOrO<<HTOXOO<<Hd<<HdOXOO7+%b7+%bO7oOSO7+%bONlOSO7+%bO$IVOrO-E9gO$JuOrO<<IfOXOO'#Ej'#EjOXOO8;$v8;$vOXOO8;$w8;$wOXOOG24}G24}OXOOAN?hAN?hO$LeOSOAN?hOXOOANAoANAoOXOOANApANApO$LiOSOG25gOXOO<<H|<<H|O7oOSO<<H|OXOOG25SG25SO7oOSOLD+ROXOOAN>hAN>hOXOO!$'Nm!$'Nm",
	  stateData: "%!OQOSROS%ROS~UjOX^OYbO]hO^gOaXOeROiVOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!afO#WiO#XiO#YiO#`kO#clO#imO#knO#moO#opO#rqO#xrO#|sO$OtO$QuO$TvO$VwO%TQO%_UO~UjOX^OYbO]hO^gOaXOeROiVOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!afO#WiO#XiO#YiO#`kO#clO#imO#knO#moO#opO#rqO#xrO#|sO$OtO$QuO$TvO$VwO%TQO%_UO$z$jX~PrXYrXarXerXgrXn$RXorX!^rX!i_X!krX!lrX!nrX!orX!prX!qrX!rrX!srX!trX!urX!vrX!wrX!xrX!yrX!zrX!{rX!}rX#QrX$|rX%_rX~X^O]!YO^!XOaXOc{OeROg!OOi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UOd$nPd%ZP~P!mOa!^Oe!`Og![O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UOY%aX$|%aX`%aXd%aXi%aXn%aX~$}!rO%O!qO%P$lP~UjOX^OYbO]hO^gOaXOeROiVOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!afO#WiO#XiO#YiO#`kO#clO#imO#knO#moO#opO#rqO#xrO#|sO$OtO$QuO$TvO$VwO%TQO%_UOh$oP~X^O]!YO^!XOaXOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO~X^O]!YO^!XOaXOc!yOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO`%WP~!i!|O~o!}O#Q!}OP%^XY%^Xa%^Xe%^Xg%^X!^%^X!k%^X!l%^X!n%^X!o%^X!p%^X!q%^X!r%^X!s%^X!t%^X!u%^X!v%^X!w%^X!x%^X!y%^X!z%^X!{%^X!}%^X$|%^X%_%^Xd%^X`%^X%b%^Xi%^Xn%^X~o!}O~n#OO~Y#PO$|#PO~%T#SO~a#VO%T#SO%U#UO~^#[Oa#VO%T#SO~e#]Oi#^O%T#SO~Z#dO]#bO^gOi#aO!afO#WiO#XiO#YiO%U#UO~X#kOi#gO%T#SO%U#UOW%iP~a#lO!U#pO~a#qO~iVO~Y#PO${#yO$|#PO~Y#PO${#|O$|#PO~Y#PO${$OO$|#PO~PrXarXd_XdrXerXg_XgrXo_XorX!^rX!i_X!krX!lrX!nrX!orX!prX!qrX!rrX!srX!trX!urX!vrX!wrX!xrX!yrX!zrX!{rX!}rX#QrX%_rXYrX$|rX`_X`rX%brX#grXirXnrX~g$ROd$kP~d$VO~g!OOd$nX~X^O]!YO^!XOaXOc$YOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UOd$^Zg$^Z~P!mOa!^Oe!`Og!OO!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UOd$nP~d$[O~X$`Oc$cOe$_Om$`O{$iO|$bO}$bO%U#UO%]$]Oh%[Ph%dP~d%YXg%YXo%YX!i!hX`%YXh%YX~o!}Od%YXg%YX`%YX~o$jOd%XXg%XX`%XXY%XX$|%XX~i$kO!b$mO%T#SO~g![OY$mX$|$mX`$mXd$mXi$mXn$mX~X^O]!YO^!XOaXOc$uOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO`%fP~%]$wO~X^O]%^O^!XOaXOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!R%]O!U%WO!V%WO!W%WO!X%WO!Y%WO!Z%WO![%WO!]%WO!^%WO!a!WO%T%VO%_UO~$}!rO%O!qO%P$lX~%P%bO~UjOX^OYbO]hO^gOaXOeROiVOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!afO#WiO#XiO#YiO#`kO#clO#imO#knO#moO#opO#rqO#xrO#|sO$OtO$QuO$TvO$VwO%TQO%_UOh$oX~h%dO~a!^Oe!`O!k!_O!l!_O%_UOP!TaY!Tag!Ta!^!Ta!n!Ta!o!Ta!p!Ta!q!Ta!r!Ta!s!Ta!t!Ta!u!Ta!v!Ta!w!Ta!x!Ta!y!Ta!z!Ta!{!Ta!}!Ta$|!Tad!Ta`!Ta%b!Tai!Tan!Ta~`%eO~g%hO`$tP~`%jO~X^O]!YO^!XOaXOeROiVOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UOY!Qag!Qa$|!Qad!Qa`!Qa%b!Qai!Qan!Qa~i$kO!b%pO~c!yOe#]Oi#^O%T#SO`%WP~a#VO~!i%tO~c%vOe#]Oi#^O%T#SOd%ZP~X$fOc%wOm$fO%]$wOh%[P~g%yOY$uP$|$uP~%T%{Oh%hP~^#[O~W&OO~X^O]hO^gOaXOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!afO%TyO%_UO~W&OOY#PO$|#PO~%T&ROh%jP~g&WOW$xP~#[&YO~W&ZO~X^OY&_O]!YO^!XOaXOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO#W&aO#X&aO#Y&aO%TyO%_UO~a#lO~#i&fO~i&hO~#y&kO#z&jOU#waX#waY#wa]#wa^#waa#wae#wai#wam#was#wat#wau#wav#waw#wa!R#wa!U#wa!V#wa!W#wa!X#wa!Y#wa!Z#wa![#wa!]#wa!^#wa!a#wa#W#wa#X#wa#Y#wa#`#wa#c#wa#i#wa#k#wa#m#wa#o#wa#r#wa#x#wa#|#wa$O#wa$Q#wa$T#wa$V#wa$z#wa%T#wa%_#wah#wa#p#waZ#wa#u#wa~%T&nO~g$ROd$kX~c&sOe#]Oi#^O%T#SOd$ZZg$ZZ~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UOd$^cg$^c~a!OXglXg!OXhlXh!OXnlXn!OXolX~n&yOo&xOa%eXgkXg%eXhkXh%eXn%eX~a#VOn&{OgzXhzX~X$^Oe$_Om$^O%]&|O~g'TOh$pP~h'VO~n&yOo&xOgkXhkX~g'XOh$sP~h'ZO~X$^Oe$_Om$^O|'[O}'[O%U#UO%]&|O~Y'aO{'cO|'`O}'`O!e'dO%U#UO%]&|Oh$rP~i$kO!b'gO~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UOY$]cg$]c$|$]c`$]cd$]c%b$]ci$]cn$]c~P!mOa!^Oe!`Og'lO!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UO`$qP~`'oO~d'pO~P!mOa!^Oe!`O!k!_O!l!_O%_UOY!mig!mi!^!mi!n!mi!o!mi!p!mi!q!mi!r!mi!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!k!_O!l!_O!n!aO%_UOY!mig!mi!^!mi!o!mi!p!mi!q!mi!r!mi!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO%_UOY!mig!mi!^!mi!r!mi!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO%_UOY!mig!mi!r!mi!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO%_UOY!mig!mi!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO%_UOY!mig!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO%_UOY!mig!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO%_UOY!mig!mi!x!mi!y!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO%_UOY!mig!mi!y!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO%_UOY!mig!mi!z!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO%_UOY!mig!mi!{!mi!}!mi$|!mid!mi`!mi%b!mii!min!mi~PrXarXerXorX!^rX!i_X!krX!lrX!nrX!orX!prX!qrX!rrX!srX!trX!urX!vrX!wrX!xrX!yrX!zrX!{rX!}rX#OrX#QrX%_rXg_XgrXh_XhrXo_X~!i'rO~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO#O(PO%_UO~o(QO#Q(QOP%^Xa%^Xe%^X!^%^X!k%^X!l%^X!n%^X!o%^X!p%^X!q%^X!r%^X!s%^X!t%^X!u%^X!v%^X!w%^X!x%^X!y%^X!z%^X!{%^X!}%^X#O%^X%_%^Xg%^Xh%^X~o(QO~P!mOa!^Oe!`Og![O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UO%b%aXY%aX$|%aXd%aX`%aXi%aXn%aX~%b(UO~g%hO`$tX~c(XOe#]Oi#^O%T#SO`$dZg$dZ~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UOY#Pig#Pi$|#Pid#Pi`#Pi%b#Pii#Pin#Pi~g%yOY$uX$|$uX~g(dO#[(fOh$vP~h(gO~X(hO~g_Xh_X#[rX~g(kOh$wP~h(mO~#[(nO~g&WOW$xX~i#gO%T#SOW$hZg$hZ~X(rO~o!}O!t(sO#Q!}O#g(tOP%^XY%^Xa%^Xe%^Xg%^X!^%^X!k%^X!l%^X!n%^X!o%^X!p%^X!q%^X!r%^X!s%^X!u%^X!v%^X!w%^X!x%^X!y%^X!z%^X!{%^X!}%^X%_%^X~o!}O!t(sO#g(tO~X^OY(uO]!YO^!XOaXOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO~Y(wO~#p({OU#niX#niY#ni]#ni^#nia#nie#nii#nim#nis#nit#niu#niv#niw#ni!R#ni!U#ni!V#ni!W#ni!X#ni!Y#ni!Z#ni![#ni!]#ni!^#ni!a#ni#W#ni#X#ni#Y#ni#`#ni#c#ni#i#ni#k#ni#m#ni#o#ni#r#ni#x#ni#|#ni$O#ni$Q#ni$T#ni$V#ni$z#ni%T#ni%_#nih#niZ#ni#u#ni~UjOX^OYbOZ)RO]hO^gOaXOeROiVOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!afO#WiO#XiO#YiO#`kO#clO#imO#knO#moO#opO#rqO#u)QO#xrO#|sO$OtO$QuO$TvO$VwO%TQO%_UOh$yP~a)UOiVO~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UOd$^kg$^k~d)ZO~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO%_UOgzahza~o(QOg%YXh%YX~o)aOg%XXh%XX~g'TOh$pX~X$^Oc)cOe$_Om$^O{$iO|$bO}$bO%U#UO%]&|Og$`Zh$`Z~g'XOh$sX~X$fOc%wOm$fO%]$wOg$cZh$cZ~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UOd%Xig%Xi`%XiY%Xi$|%Xi~Y'aO{'cO|'`O}'`O!e'dO%U#UO%]&|Oh$rX~h)kO~|)lO})lO%U#UO%]&|O~{)mO|)lO})lO%U#UO%]&|O~i$kO~g'lO`$qX~X^O]!YO^!XOaXOc)tOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO`$aZg$aZ~a!^Oe!`O!k!_O!l!_O%_UOP!Ta!^!Ta!n!Ta!o!Ta!p!Ta!q!Ta!r!Ta!s!Ta!t!Ta!u!Ta!v!Ta!w!Ta!x!Ta!y!Ta!z!Ta!{!Ta!}!Ta#O!Tag!Tah!Ta~X^O]%^O^!XOaXOeROiVOm^Os^Ot^Ou^Ov^Ow^O!R%]O!U%WO!V%WO!W%WO!X%WO!Y%WO!Z%WO![%WO!]%WO!^%WO!a!WO%T%VO%_UO~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO%_UO#O!Qag!Qah!Qa~!i*VO~g![O%b$mXP$mXY$mXa$mXe$mX!^$mX!k$mX!l$mX!n$mX!o$mX!p$mX!q$mX!r$mX!s$mX!t$mX!u$mX!v$mX!w$mX!x$mX!y$mX!z$mX!{$mX!}$mX$|$mX%_$mXd$mX`$mXi$mXn$mX~g(dOh$vX~%T%{Og$fZh$fZ~%]*^O~g(kOh$wX~%T&ROg$gZh$gZ~W*eO~X^O]!YO^!XO`*iOaXOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO~Y*kO~X^OY*kO]!YO^!XOaXOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO~o$jO!t*mO#g*nOY%XXg%XX$|%XX~UjOX^OYbOZ)RO]hO^gOaXOeROiVOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!afO#WiO#XiO#YiO#`kO#clO#imO#knO#moO#opO#rqO#u)QO#xrO#|sO$OtO$QuO$TvO$VwO%TQO%_UOh$yX~h*rO~n*tO~#z*uOU#wqX#wqY#wq]#wq^#wqa#wqe#wqi#wqm#wqs#wqt#wqu#wqv#wqw#wq!R#wq!U#wq!V#wq!W#wq!X#wq!Y#wq!Z#wq![#wq!]#wq!^#wq!a#wq#W#wq#X#wq#Y#wq#`#wq#c#wq#i#wq#k#wq#m#wq#o#wq#r#wq#x#wq#|#wq$O#wq$Q#wq$T#wq$V#wq$z#wq%T#wq%_#wqh#wq#p#wqZ#wq#u#wq~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO%_UOgkihki~o*wOgkihki~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO%_UOgzihzi~|+OO}+OO%U#UO%]&|O~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UO`$acg$ac~P!mOa!^Oe!`Og+TO!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO%_UO#O%aXh%aX~P!mOa!^Oe!`O!k!_O!l!_O%_UO!^!mi!n!mi!o!mi!p!mi!q!mi!r!mi!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!k!_O!l!_O!n'sO%_UO!^!mi!o!mi!p!mi!q!mi!r!mi!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO%_UO!^!mi!r!mi!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO%_UO!r!mi!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO%_UO!s!mi!t!mi!u!mi!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO%_UO!v!mi!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO%_UO!w!mi!x!mi!y!mi!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO%_UO!x!mi!y!mi!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO%_UO!y!mi!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O%_UO!z!mi!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O%_UO!{!mi!}!mi#O!mig!mih!mi~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO#O+UO%_UO~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO%_UOY!|yg!|y!}!|y$|!|yd!|y`!|y%b!|yi!|yn!|y~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO%_UO#O#Pig#Pih#Pi~#[+WOg$fch$fc~g(dOh$vP~#[+YO~X+[O~`+]O~`+^O~`+_O~X^O]!YO^!XO`+_OaXOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO~Y+aO~n+dO~`+fO~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO%_UOg%Xih%Xi~P!mOa!^Oe!`O!^!cO!k!_O!l!_O!n!aO!o!bO!p!bO!q!bO!r!dO!s!eO!t!eO!u!eO!v!fO!w!gO!x!hO!y!iO!z!jO!{!kO!}!lO%_UO`$akg$ak~g+TOP$mXa$mXe$mX!^$mX!k$mX!l$mX!n$mX!o$mX!p$mX!q$mX!r$mX!s$mX!t$mX!u$mX!v$mX!w$mX!x$mX!y$mX!z$mX!{$mX!}$mX#O$mX%_$mXh$mX~%]+nO~`+rO~X^O]!YO^!XO`+rOaXOeROi!SOm^Os^Ot^Ou^Ov^Ow^O!ReO!UWO!VWO!WWO!XWO!YWO!ZWO![WO!]WO!^WO!a!WO%TyO%_UO~`+tO~`+uO~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO%_UOgkyhky~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O!}(OO%_UOg$]c#O$]ch$]c~P!mOa!^Oe!`O!^'uO!k!_O!l!_O!n'sO!o'tO!p'tO!q'tO!r'vO!s'wO!t'wO!u'wO!v'xO!w'yO!x'zO!y'{O!z'|O!{'}O%_UO!}!|y#O!|yg!|yh!|y~`+yO~#z+zOU#w!ZX#w!ZY#w!Z]#w!Z^#w!Za#w!Ze#w!Zi#w!Zm#w!Zs#w!Zt#w!Zu#w!Zv#w!Zw#w!Z!R#w!Z!U#w!Z!V#w!Z!W#w!Z!X#w!Z!Y#w!Z!Z#w!Z![#w!Z!]#w!Z!^#w!Z!a#w!Z#W#w!Z#X#w!Z#Y#w!Z#`#w!Z#c#w!Z#i#w!Z#k#w!Z#m#w!Z#o#w!Z#r#w!Z#x#w!Z#|#w!Z$O#w!Z$Q#w!Z$T#w!Z$V#w!Z$z#w!Z%T#w!Z%_#w!Zh#w!Z#p#w!ZZ#w!Z#u#w!Z~R%]Q%T%R!ow~%T%]~",
	  goto: "!&S%nPPPPP%oP&PPPPP&rPP'WPP*iPPP-qPPP-q0Y0aPPP0i3o4kPPPPP6z6z8yPPP9P9h6zP;`6zPPPPPPPPP<i6zPP>w?ZP6z6z?_PAgPP6zPPPPPPPPPPPPPP6zPP6zP6z6z6z&rCjPPPDOPDRDU%oPDX%oPD_D_D_P%oP%oP%oP%oPP%oPDeDhPDh%oPPP%oP%oP%oPDl%oP%oP%o%oESEYEaEgEuE}FTFZFbFhFnFuF{GSGZGaGgGjGpGsGxHRHUHXH_HbHeHkHnHtHzH}PPPPPPPPIQPPIvJ{KPKwLeLiPLmP!!t!!xP!$t!$w!$z!%V!%Y!%m!%p!%s!%v!%z!&OmbOPVo!t#O#o#r#s#u&c&h({(|Q#YgQ#cjQ#ikS$b!S'TQ$q!XQ%u#[Q'[$iS'`$k'^S)l'c'dR+O)mn_OPVjo!t#O#o#r#s#u&c&h({(|R&P#d$vYOPVWehot!O!Y![!^!`!a!b!c!d!e!f!g!h!i!j!k!l!q!t!|!}#O#d#l#o#q#r#s#u#y$Y$_$j$m$u%W%]%^%p%t&_&c&h&x&{'g'l'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(s(t(u(w({(|)Q)a)c)t*V*k*m*n*w+T+U+aW!TRX{$cQ#TfQ#Xgl#_i!y#V#]$R%h%v%w%y&a&s&y(X)UQ#hkQ$n!WQ$p!XS%s#Y#[Q&S#gQ'j$qQ(_%uQ(p&WQ(q&YQ*b(kQ*d(nR+p+Y#rZOPRVWXeot{!O![!^!`!a!b!c!d!e!f!g!h!i!j!k!q!t!|!}#O#d#l#o#q#r#s#u#y$Y$_$j$m$u%p%t&_&c&h'g'l(P(s(t(u(w({(|)Q)t*k*m*n+aQ#WgS#Zh!YQ$o!X!U%X!l$c%W%]&x&{'r's't'u'v'w'x'y'z'{'|'}(O(Q)a)c*V*w+T+UU%r#X#Y#[Q&z$aS'i$p$qQ(S%^S(]%s%uQ)`&}Q)i'_Q)q'jQ*Z(_Q*z)gQ*|)jQ+j*}R+x+k#j]OPVWeot!O![!^!`!a!b!c!d!e!f!g!h!i!j!k!q!t!|!}#O#d#o#q#r#s#u#y$Y$_$j$m$u%p%t&_&c&h'g'l(P(s(t(u(w({(|)Q)t*k*m*n+aU!URX{l#_i!y#V#]$R%h%v%w%y&a&s&y(X)U!S%[!l%W%]&x&{'r's't'u'v'w'x'y'z'{'|'}(O(Q)a)c*V*w+T+UQ&^#lR'P$cS$g!S#^R)f'XU$f!S#^'XR$x!_$x^OPRVWXeot{!O![!^!`!a!b!c!d!e!f!g!h!i!j!k!l!q!t!|!}#O#d#l#o#q#r#s#u#y$Y$_$c$j$m$u%W%]%p%t&_&c&h&x&{'g'l'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(s(t(u(w({(|)Q)a)c)t*V*k*m*n*w+T+U+a#Z!oS!P!w#R$U$X$s$t$z${$|$}%O%P%Q%R%S%T%U%Y%`%l&v'O']'n'q(R)[)_)s)v)w)x)y)z){)|)}*O*P*Q*R*S*T*U*y+R+g+l+m!sTOPVXot!`!q!t!|#O#d#l#o#q#r#s#u#y$_$m%p%t&_&c&h'g'r(s(t(u(w({(|)Q*V*k*m*n+a#p[OPRVWXeot{!O![!^!`!a!b!c!d!e!f!g!h!i!j!k!q!t!|!}#O#d#o#q#r#s#u#y$Y$_$j$m$u%p%t&_&c&h'g'l(P(s(t(u(w({(|)Q)t*k*m*n+a!U%Z!l$c%W%]&x&{'r's't'u'v'w'x'y'z'{'|'}(O(Q)a)c*V*w+T+UQ%|#aQ&U#gQ&]#lQ*](dR*c(k$y^OPRVWXeot{!O![!^!`!a!b!c!d!e!f!g!h!i!j!k!l!q!t!|!}#O#d#l#o#q#r#s#u#y$Y$_$c$j$m$u%W%]%p%t&_&c&h&x&{'g'l'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(s(t(u(w({(|)Q)a)c)t*V*k*m*n*w+T+U+aQ$d!SR)d'TY$^!S$b$i'T'[S'_$k'^U)j'`'c'dS*})l)mR+k+OlbOPVo!t#O#o#r#s#u&c&h({(|Q#wrS%k!|'rQ%q#WQ'h$oQ([%rS(^%t*VQ)S&jQ)T&kQ)^&zQ)p'iQ*Y(]Q*x)`Q*{)iQ+Q)qQ+V*ZQ+e*uQ+h*zQ+i*|Q+v+fQ+w+jQ+{+xR+|+z#U!nS!P!w$U$X$s$t$z${$|$}%O%P%Q%R%S%T%U%Y%`%l&v'O']'n'q)[)_)s)v)w)x)y)z){)|)}*O*P*Q*R*S*T*U*y+R+g+l+mT%n#R(R$x^OPRVWXeot{!O![!^!`!a!b!c!d!e!f!g!h!i!j!k!l!q!t!|!}#O#d#l#o#q#r#s#u#y$Y$_$c$j$m$u%W%]%p%t&_&c&h&x&{'g'l'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(s(t(u(w({(|)Q)a)c)t*V*k*m*n*w+T+U+aQ#rmQ#snQ#upQ#vqR(z&fQ$l!WQ%o#TQ'f$nQ)n'eQ*X(ZR+P)oT'a$k'^#rZOPRVWXeot{!O![!^!`!a!b!c!d!e!f!g!h!i!j!k!q!t!|!}#O#d#l#o#q#r#s#u#y$Y$_$j$m$u%p%t&_&c&h'g'l(P(s(t(u(w({(|)Q)t*k*m*n+aS#Zh!Y!U%X!l$c%W%]&x&{'r's't'u'v'w'x'y'z'{'|'}(O(Q)a)c*V*w+T+UR(S%^#p[OPRVWXeot{!O![!^!`!a!b!c!d!e!f!g!h!i!j!k!q!t!|!}#O#d#o#q#r#s#u#y$Y$_$j$m$u%p%t&_&c&h'g'l(P(s(t(u(w({(|)Q)t*k*m*n+a!U%Z!l$c%W%]&x&{'r's't'u'v'w'x'y'z'{'|'}(O(Q)a)c*V*w+T+UR&]#ln_OPVjo!t#O#o#r#s#u&c&h({(|R&_#lR#fjR*_(fR+o+WQ#hkR(p&WQ#olR&c#pR&i#vT(}&h(|l`OPVo!t#O#o#r#s#u&c&h({(|Q&o#|R&p$OQPORxPS$Qz$TR&q$QQ!pUR%_!pQ!ZSU$r!Z(T+SQ(T%`R+S)vU}R!P$UR$W}Q!tVR%c!tQ'S$dR)b'SS'k$t'nR)r'kQ'^$kR)h'^Q'W$gR)e'WS%g!z%fR(W%gQ%x#`R(`%xS(c%|*_R*[(cS(j&S*dR*a(jQ&V#hR(o&VQ(|&hR*q(|RdOQ$SzR&t$TR!sUV!]S%`)vQ!QRQ$Z!PR&u$UR!vVR'U$dQ'm$tR)u'nR'b$kR'Y$gQ%i!zR(V%fR%z#`Q(e%|R+X*_Q(l&SR+Z*dR&X#hR)P&hScOPS!uV!tQ#toQ%m#OQ&b#oQ&d#rQ&e#sQ&g#uQ(y&cS(}&h(|R*p({Q#QaQ#xsQ#{uQ#}vQ$PwQ&P#fQ&[#kQ&m#zQ(b%zQ(i&QQ)V&lQ)W&oQ)X&pQ*`(hQ*f(rQ*o(zR+q+[T!{X#VSzR#]S!zX#VS#`i&aS$T{%vQ%f!yQ&r$RS'Q$c%wQ(Y%hQ(a%yQ)Y&sR*W(Xj!VRXi{!y#V#]$R%h%v%y&s(XS'R$c%wQ(x&aQ)]&yR*v)UT|R#]T$h!S#^!hSOPVXot!`!t#O#d#l#o#q#r#s#u#y$_$m%p&_&c&h'g(s(t(u(w({(|)Q*k*m*n+aQ!PRQ!wWQ#ReQ$U{Q$X!OQ$s![Q$t!^Q$z!aQ${!bQ$|!cQ$}!dQ%O!eQ%P!fQ%Q!gQ%R!hQ%S!iQ%T!jQ%U!kQ%Y!lU%`!q!|%tQ%l!}Q&v$YS'O$c)cQ']$jQ'n$uQ'q%WQ(R%]Q)[&xQ)_&{Q)s'lS)v'r*VQ)w'sQ)x'tQ)y'uQ)z'vQ){'wQ)|'xQ)}'yQ*O'zQ*P'{Q*Q'|Q*R'}Q*S(OQ*T(PQ*U(QQ*y)aQ+R)tQ+g*wQ+l+TR+m+UT!rU!plaOPVo!t#O#o#r#s#u&c&h({(|S!xX#qQ#ztQ$y!`Q%a!qS%k!|'rQ&Q#dQ&`#lQ&l#yQ&w$_Q'e$mQ(Z%pS(^%t*VQ(v&_Q)o'gQ*g(sQ*h(tQ*j(uQ*l(wQ*s)QQ+`*kQ+b*mQ+c*nR+s+aR!RRR$e!SS$a!S'TS&}$b$iR)g'[R$v!^lbOPVo!t#O#o#r#s#u&c&h({(|R#ejR%}#aR#jkR&T#gT#ml#pT#nl#pT)O&h(|",
	  nodeNames: "⚠ PostfixOp LineComment BlockComment Script ExportDeclaration export Star from String ; default FunctionDeclaration async function VariableDefinition ) ( ParamList Spread ] [ ArrayPattern , } { ObjectPattern PatternProperty PropertyName Number : Equals TemplateString SequenceExpression VariableName BooleanLiteral this null super RegExp ArrayExpression ObjectExpression Property async get set PropertyNameDefinition Block NewExpression new ArgList UnaryExpression await yield void typeof delete LogicOp BitOp ArithOp ArithOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration static FunctionExpression ArrowFunction ParamList Arrow MemberExpression . ?. BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp in instanceof CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplatExpression ClassDeclaration VariableDeclaration let var const ExportGroup as VariableName VariableName ImportDeclaration import ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try catch finally ReturnStatement return ThrowStatement throw BreakStatement break Label ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",
	  nodeProps: [
	    [NodeProp.top, 4,true],
	    [NodeProp.openedBy, 16,"(",20,"[",24,"{"],
	    [NodeProp.closedBy, 17,")",21,"]",25,"}"]
	  ],
	  repeatNodeCount: 16,
	  tokenData: "=R~R!SX^$_pq$_qr%Srs%itu&]uv&vvw'Twx'exy(Syz(Xz{(^{|(s|})T}!O)Y!O!P)e!P!Q*u!Q!R5i!R![6c![!]8S!]!^8Z!^!_8`!_!`8x!`!a9b!a!b9x!c!}&]!}#O:_#P#Q:d#Q#R:i#R#S&]#S#T:q#T#o&]#o#p:v#p#q:{#q#r;W#r#s;_#y#z$_$f$g$_$g#BY&]#BY#BZ;d#BZ$IS&]$IS$I_;d$I_$I|&]$I|$JO;d$JO$JT&]$JT$JU;d$JU$KV&]$KV$KW;d$KW&FU&]&FU&FV;d&FV~&]~$dY%R~X^$_pq$_#y#z$_$f$g$_#BY#BZ$_$IS$I_$_$I|$JO$_$JT$JU$_$KV$KW$_&FU&FV$_Z%XP!ZP!_!`%[Y%aP!vY!_!`%dY%iO!vY~%nUX~OY%iZr%irs&Qs#O%i#O#P&V#P~%i~&VOX~~&YPO~%i_&dU%]S%TZtu&]!Q![&]!c!}&]#R#S&]#T#o&]$g~&]~&{P!p~!_!`'OY'TO#QY~'YQ!y~vw'`!_!`'O~'eO!z~~'jUX~OY'eZw'ewx&Qx#O'e#O#P'|#P~'e~(PPO~'e~(XOa~~(^O`~_(eQ%UT!qYz{(k!_!`'OY(pP!nY!_!`'O~(xQ!^~{|)O!_!`'O~)TO!]~~)YOg~~)_Q!^~}!O)O!_!`'O_)jQ!kY!O!P)p!Q![){T)sP!O!P)vT){OcTT*QRmT!Q![){!g!h*Z#X#Y*ZT*^R{|*g}!O*g!Q![*mT*jP!Q![*mT*rPmT!Q![*m~*zZ!oYOY+mZz+mz{-f{!P+m!P!Q3z!Q!_+m!_!`4V!`!}+m!}#O4s#O#P5`#P~+mP+rVwPOY+mZ!P+m!P!Q,X!Q!}+m!}#O,p#O#P-]#P~+mP,^UwP#Z#[,X#]#^,X#a#b,X#g#h,X#i#j,X#m#n,XP,sTOY,pZ#O,p#O#P-S#P#Q+m#Q~,pP-VQOY,pZ~,pP-`QOY+mZ~+m~-kYwPOY-fYZ.ZZz-fz{/O{!P-f!P!Q2v!Q!}-f!}#O0^#O#P2d#P~-f~.^ROz.Zz{.g{~.Z~.jTOz.Zz{.g{!P.Z!P!Q.y!Q~.Z~/OOR~~/TYwPOY-fYZ.ZZz-fz{/O{!P-f!P!Q/s!Q!}-f!}#O0^#O#P2d#P~-f~/zUR~wP#Z#[,X#]#^,X#a#b,X#g#h,X#i#j,X#m#n,X~0aWOY0^YZ.ZZz0^z{0y{#O0^#O#P2Q#P#Q-f#Q~0^~0|YOY0^YZ.ZZz0^z{0y{!P0^!P!Q1l!Q#O0^#O#P2Q#P#Q-f#Q~0^~1qTR~OY,pZ#O,p#O#P-S#P#Q+m#Q~,p~2TTOY0^YZ.ZZz0^z{0y{~0^~2gTOY-fYZ.ZZz-fz{/O{~-f~2{_wPOz.Zz{.g{#Z.Z#Z#[2v#[#].Z#]#^2v#^#a.Z#a#b2v#b#g.Z#g#h2v#h#i.Z#i#j2v#j#m.Z#m#n2v#n~.Z~4PQQ~OY3zZ~3zZ4^V#QYwPOY+mZ!P+m!P!Q,X!Q!}+m!}#O,p#O#P-]#P~+mP4vTOY4sZ#O4s#O#P5V#P#Q+m#Q~4sP5YQOY4sZ~4sP5cQOY+mZ~+mT5nVmT!O!P6T!Q![6c!g!h*Z#U#V6t#X#Y*Z#c#d7Y#l#m7hT6YRmT!Q![6T!g!h*Z#X#Y*ZT6hSmT!O!P6T!Q![6c!g!h*Z#X#Y*ZT6wQ!Q!R6}!R!S6}T7SQmT!Q!R6}!R!S6}T7]P!Q!Y7`T7ePmT!Q!Y7`T7kR!Q![7t!c!i7t#T#Z7tT7yRmT!Q![7t!c!i7t#T#Z7tZ8ZOnR#OW~8`OY~~8eQ!s~!^!_8k!_!`8s~8pP!r~!_!`'O~8xO!s~~8}Qo~!_!`9T!`!a9]Y9YP!vY!_!`%d~9bO!i~~9gQ!s~!_!`8s!`!a9m~9rQ!r~!_!`'O!`!a8k~9}Q!}~!O!P:T!a!b:Y~:YO!l~~:_O!{~~:dOe~~:iOd~~:nP!x~!_!`'O~:vO%_~~:{Oi~~;QQ!w~!_!`'O#p#q:Y_;_Oh]%bQ~;dO![~~;mf%]S%TZ%R~X^$_pq$_tu&]!Q![&]!c!}&]#R#S&]#T#o&]#y#z$_$f$g$_$g#BY&]#BY#BZ;d#BZ$IS&]$IS$I_;d$I_$I|&]$I|$JO;d$JO$JT&]$JT$JU;d$JU$KV&]$KV$KW;d$KW&FU&]&FU&FV;d&FV~&]",
	  tokenizers: [noSemicolon, postfix, 0, 1, 2, 3, insertSemicolon, template],
	  topRules: {"Script":[0,4]},
	  specializeTable: 8507,
	  specializations: [{export:12, from:17, default:22, async:27, function:28, true:70, false:70, this:72, null:74, super:76, new:98, await:105, yield:107, void:108, typeof:110, delete:112, class:126, extends:128, in:164, instanceof:166, let:200, var:202, const:204, as:209, import:216, for:222, of:231, while:234, with:238, do:242, if:246, else:248, switch:252, case:258, try:264, catch:266, finally:268, return:272, throw:276, break:280, continue:286, debugger:290},
	   {async:87, get:89, set:91, static:135}],
	  tokenPrec: 8499
	});

	/// A syntax tree node prop used to associate indentation strategies
	/// with node types. Such a strategy is a function from an indentation
	/// context to a number. That number may be -1, to indicate that no
	/// definitive indentation can be determined, or a column number to
	/// which the given line should be indented.
	const indentNodeProp = new NodeProp();
	function syntaxIndentation(syntax) {
	    return EditorState.indentation.of((cx, pos) => {
	        return computeIndentation(cx, syntax.getTree(cx.state), pos);
	    });
	}
	// Compute the indentation for a given position from the syntax tree.
	function computeIndentation(cx, ast, pos) {
	    let tree = ast.resolve(pos);
	    // Enter previous nodes that end in empty error terms, which means
	    // they were broken off by error recovery, so that indentation
	    // works even if the constructs haven't been finished.
	    for (let scan = tree, scanPos = pos;;) {
	        let last = scan.childBefore(scanPos);
	        if (!last)
	            break;
	        if (last.type.prop(NodeProp.error) && last.start == last.end) {
	            tree = scan;
	            scanPos = last.start;
	        }
	        else {
	            scan = last;
	            scanPos = scan.end + 1;
	        }
	    }
	    for (; tree; tree = tree.parent) {
	        let strategy = indentStrategy(tree);
	        if (strategy)
	            return strategy(new TreeIndentContext(cx, pos, tree));
	    }
	    return -1;
	}
	function indentStrategy(tree) {
	    let strategy = tree.type.prop(indentNodeProp);
	    if (strategy)
	        return strategy;
	    let first = tree.firstChild, close;
	    if (first && (close = first.type.prop(NodeProp.closedBy))) {
	        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
	        return cx => delimitedStrategy(cx, true, 1, undefined, closed ? last.start : undefined);
	    }
	    return tree.parent == null ? topIndent : null;
	}
	function topIndent() { return 0; }
	/// Objects of this type provide context information and helper
	/// methods to indentation functions.
	class TreeIndentContext extends IndentContext {
	    /// @internal
	    constructor(base, 
	    /// The position at which indentation is being computed.
	    pos, 
	    /// The syntax tree node for which the indentation strategy is
	    /// registered.
	    node) {
	        super(base.state, base.overrideIndentation, base.simulateBreak);
	        this.pos = pos;
	        this.node = node;
	    }
	    /// Get the text directly after `this.pos`, either the entire line
	    /// or the next 100 characters, whichever is shorter.
	    get textAfter() {
	        return this.textAfterPos(this.pos);
	    }
	    /// Get the indentation at the reference line for `this.node`, which
	    /// is the line on which it starts, unless there is a node that is
	    /// _not_ a parent of this node covering the start of that line. If
	    /// so, the line at the start of that node is tried, again skipping
	    /// on if it is covered by another such node.
	    get baseIndent() {
	        let line = this.state.doc.lineAt(this.node.start);
	        // Skip line starts that are covered by a sibling (or cousin, etc)
	        for (;;) {
	            let atBreak = this.node.resolve(line.start);
	            while (atBreak.parent && atBreak.parent.start == atBreak.start)
	                atBreak = atBreak.parent;
	            if (isParent(atBreak, this.node))
	                break;
	            line = this.state.doc.lineAt(atBreak.start);
	        }
	        return this.lineIndent(line);
	    }
	}
	function isParent(parent, of) {
	    for (let cur = of; cur; cur = cur.parent)
	        if (parent == cur)
	            return true;
	    return false;
	}
	// Check whether a delimited node is aligned (meaning there are
	// non-skipped nodes on the same line as the opening delimiter). And
	// if so, return the opening token.
	function bracketedAligned(context) {
	    let tree = context.node;
	    let openToken = tree.childAfter(tree.start), last = tree.lastChild;
	    if (!openToken || context.simulateBreak == openToken.end)
	        return null;
	    let openLine = context.state.doc.lineAt(openToken.start);
	    for (let pos = openToken.end;;) {
	        let next = tree.childAfter(pos);
	        if (!next || next == last)
	            return null;
	        if (!next.type.prop(NodeProp.skipped))
	            return next.start < openLine.end ? openToken : null;
	        pos = next.end;
	    }
	}
	function delimitedStrategy(context, align, units, closing, closedAt) {
	    let after = context.textAfter, space = after.match(/^\s*/)[0].length;
	    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
	    let aligned = align ? bracketedAligned(context) : null;
	    if (aligned)
	        return closed ? context.column(aligned.start) : context.column(aligned.end);
	    return context.baseIndent + (closed ? 0 : context.unit * units);
	}
	/// An indentation strategy that aligns a node content to its base
	/// indentation.
	const flatIndent = (context) => context.baseIndent;
	/// Creates an indentation strategy that, by default, indents
	/// continued lines one unit more than the node's base indentation.
	/// You can provide `except` to prevent indentation of lines that
	/// match a pattern (for example `/^else\b/` in `if`/`else`
	/// constructs), and you can change the amount of units used with the
	/// `units` option.
	function continuedIndent({ except, units = 1 } = {}) {
	    return (context) => {
	        let matchExcept = except && except.test(context.textAfter);
	        return context.baseIndent + (matchExcept ? 0 : units * context.unit);
	    };
	}

	/// This node prop is used to associate folding information with node
	/// types. Given a subtree, it should check whether that tree is
	/// foldable and return the range that can be collapsed when it is.
	const foldNodeProp = new NodeProp();
	function syntaxFolding(syntax) {
	    return EditorState.foldable.of((state, start, end) => {
	        let inner = syntax.getTree(state).resolve(end);
	        let found = null;
	        for (let cur = inner; cur; cur = cur.parent) {
	            if (cur.end <= end || cur.start > end)
	                continue;
	            if (found && cur.start < start)
	                break;
	            let prop = cur.type.prop(foldNodeProp);
	            if (prop) {
	                let value = prop(cur, state);
	                if (value && value.from <= end && value.from >= start && value.to > end)
	                    found = value;
	            }
	        }
	        return found;
	    });
	}

	/// A [syntax provider](#state.Syntax) based on a
	/// [Lezer](https://lezer.codemirror.net) parser.
	class LezerSyntax {
	    /// Create a syntax instance for the given parser. You'll usually
	    /// want to use the
	    /// [`withProps`](https://lezer.codemirror.net/docs/ref/#lezer.Parser.withProps)
	    /// method to register CodeMirror-specific syntax node props in the
	    /// parser, before passing it to this constructor.
	    constructor(parser) {
	        this.parser = parser;
	        let setSyntax = StateEffect.define();
	        this.field = StateField.define({
	            create(state) { return SyntaxState.advance(Tree.empty, parser, state.doc); },
	            update(value, tr, state) { return value.apply(tr, state, parser, setSyntax); }
	        });
	        this.extension = [
	            EditorState.syntax.of(this),
	            this.field,
	            ViewPlugin.define(view => new HighlightWorker(view, this, setSyntax)),
	            syntaxIndentation(this),
	            syntaxFolding(this)
	        ];
	    }
	    getTree(state) {
	        return state.field(this.field).tree;
	    }
	    parsePos(state) {
	        return state.field(this.field).upto;
	    }
	    ensureTree(state, upto, timeout = 100) {
	        let field = state.field(this.field);
	        if (field.upto >= upto)
	            return field.updatedTree;
	        if (!field.parse)
	            field.startParse(this.parser, state.doc);
	        if (field.parse.pos < upto) {
	            let done = work(field.parse, timeout, upto);
	            if (done)
	                return field.stopParse(done, state.doc.length);
	        }
	        return field.parse.pos < upto ? null : field.stopParse();
	    }
	    get docNodeType() { return this.parser.topType; }
	    docNodeTypeAt(state, pos) {
	        let type = this.docNodeType;
	        if (this.parser.hasNested) {
	            let tree = this.getTree(state);
	            let target = tree.resolve(pos);
	            while (target) {
	                if (target.type.prop(NodeProp.top))
	                    return target.type;
	                target = target.parent;
	            }
	        }
	        return type;
	    }
	}
	class DocStream {
	    constructor(doc, length = doc.length) {
	        this.doc = doc;
	        this.length = length;
	        this.cursorPos = 0;
	        this.string = "";
	        this.cursor = doc.iter();
	    }
	    get(pos) {
	        if (pos >= this.length)
	            return -1;
	        let stringStart = this.cursorPos - this.string.length;
	        if (pos < stringStart || pos >= this.cursorPos) {
	            if (pos < this.cursorPos) { // Reset the cursor if we have to go back
	                this.cursor = this.doc.iter();
	                this.cursorPos = 0;
	            }
	            this.string = this.cursor.next(pos - this.cursorPos).value;
	            this.cursorPos = pos + this.string.length;
	            stringStart = this.cursorPos - this.string.length;
	        }
	        return this.string.charCodeAt(pos - stringStart);
	    }
	    read(from, to) {
	        let stringStart = this.cursorPos - this.string.length;
	        if (from < stringStart || to >= this.cursorPos)
	            return this.doc.sliceString(from, to);
	        else
	            return this.string.slice(from - stringStart, to - stringStart);
	    }
	    clip(at) {
	        return new DocStream(this.doc, at);
	    }
	}
	function work(parse, time, upto = 5000000 /* MaxPos */) {
	    let endTime = Date.now() + time;
	    for (;;) {
	        let done = parse.advance();
	        if (done)
	            return done;
	        if (parse.pos > upto || Date.now() > endTime)
	            return null;
	    }
	}
	function takeTree(parse, base) {
	    let parsed = parse.forceFinish();
	    let cache = parsed.applyChanges([{ fromA: parse.pos, toA: parsed.length, fromB: parse.pos, toB: parsed.length }])
	        .append(base.applyChanges([{ fromA: 0, toA: parse.pos, fromB: 0, toB: parse.pos }]));
	    return { parsed, cache };
	}
	class SyntaxState {
	    constructor(
	    // The current tree. Immutable, because directly accessible from
	    // the editor state.
	    tree, 
	    // The point upto which the document has been parsed.
	    upto, 
	    // The tree that can be used as cache for further incremental
	    // parsing. May differ from tree/updatedTree if a parse is broken
	    // off halfway—in that case, this one will have nodes that touch
	    // the break-off point dropped/decomposed so that they don't get
	    // incorrectly reused. The other properties will have those nodes,
	    // since they may be useful for code consuming the tree.
	    cache) {
	        this.tree = tree;
	        this.upto = upto;
	        this.cache = cache;
	        // In-progress parse, if any
	        this.parse = null;
	        this.updatedTree = tree;
	    }
	    static advance(cache, parser, doc) {
	        let parse = parser.startParse(new DocStream(doc), { cache });
	        let done = work(parse, 25 /* Apply */);
	        if (done)
	            return new SyntaxState(done, doc.length, done);
	        let result = takeTree(parse, cache);
	        return new SyntaxState(result.parsed, parse.pos, result.cache);
	    }
	    apply(tr, newState, parser, effect) {
	        for (let e of tr.effects)
	            if (e.is(effect))
	                return e.value;
	        if (!tr.docChanged)
	            return this;
	        let ranges = [];
	        tr.changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
	        return SyntaxState.advance((this.parse ? takeTree(this.parse, this.updatedTree).cache : this.cache).applyChanges(ranges), parser, newState.doc);
	    }
	    startParse(parser, doc) {
	        this.parse = parser.startParse(new DocStream(doc), { cache: this.cache });
	    }
	    stopParse(tree, upto) {
	        if (!tree)
	            ({ parsed: tree, cache: this.cache } = takeTree(this.parse, this.updatedTree));
	        else
	            this.cache = tree;
	        this.updatedTree = tree;
	        this.upto = upto !== null && upto !== void 0 ? upto : this.parse.pos;
	        this.parse = null;
	        return tree;
	    }
	}
	let requestIdle = typeof window != "undefined" && window.requestIdleCallback ||
	    ((callback, { timeout }) => setTimeout(callback, timeout));
	let cancelIdle = typeof window != "undefined" && window.cancelIdleCallback || clearTimeout;
	// FIXME figure out some way to back off from full re-parses when the
	// document is large—you could waste a lot of battery re-parsing a
	// multi-megabyte document every time you insert a backtick, even if
	// it happens in the background.
	class HighlightWorker {
	    constructor(view, syntax, setSyntax) {
	        this.view = view;
	        this.syntax = syntax;
	        this.setSyntax = setSyntax;
	        this.working = -1;
	        this.work = this.work.bind(this);
	        this.scheduleWork();
	    }
	    update(update) {
	        if (update.docChanged)
	            this.scheduleWork();
	    }
	    scheduleWork() {
	        if (this.working > -1)
	            return;
	        let { state } = this.view, field = state.field(this.syntax.field);
	        if (field.upto >= state.doc.length)
	            return;
	        this.working = requestIdle(this.work, { timeout: 200 /* Pause */ });
	    }
	    work(deadline) {
	        this.working = -1;
	        let { state } = this.view, field = state.field(this.syntax.field);
	        if (field.upto >= state.doc.length)
	            return;
	        if (!field.parse)
	            field.startParse(this.syntax.parser, state.doc);
	        let done = work(field.parse, deadline ? Math.max(25 /* MinSlice */, deadline.timeRemaining()) : 100 /* Slice */);
	        if (done || field.parse.badness > .8) {
	            let tree = field.stopParse(done, state.doc.length);
	            this.view.dispatch(state.update({
	                effects: this.setSyntax.of(new SyntaxState(tree, state.doc.length, field.cache))
	            }));
	        }
	        else {
	            this.scheduleWork();
	        }
	    }
	    destroy() {
	        if (this.working >= 0)
	            cancelIdle(this.working);
	    }
	}

	const Inherit = 1;
	/// A tag system defines a set of node (token) tags used for
	/// highlighting. You'll usually want to use the
	/// [default](#highlight.defaultTags) set, but it is possible to
	/// define your own custom system when that doesn't fit your use case.
	class TagSystem {
	    /// Define a tag system. Each tag identifies a type of syntactic
	    /// element, which can have a single type and any number of flags.
	    /// The `flags` argument should be an array of flag names, and the
	    /// `types` argument an array of type names. Type names may have a
	    /// `"name=parentName"` format to specify that this type is an
	    /// instance of some other type, which means that, if no styling for
	    /// the type itself is provided, it'll fall back to the parent
	    /// type's styling.
	    ///
	    /// You can specify a `subtypes` property to assign a given number
	    /// of sub-types to each type. These are automatically generated
	    /// types with the base type name suffixed with `#1` to `#`_`N`_
	    /// (where _N_ is the number given in the `subtypes` field) that
	    /// have the base type as parent type.
	    constructor(options) {
	        /// @internal
	        this.typeNames = [""];
	        /// @internal
	        this.typeIDs = Object.create(null);
	        /// A [node
	        /// prop](https://lezer.codemirror.net/docs/ref#tree.NodeProp) used
	        /// to associate styling tag information with syntax tree nodes.
	        this.prop = new NodeProp();
	        this.flags = options.flags;
	        this.types = options.types;
	        this.flagMask = Math.pow(2, this.flags.length) - 1;
	        this.typeShift = this.flags.length;
	        let subtypes = options.subtypes || 0;
	        let parentNames = [undefined];
	        this.typeIDs[""] = 0;
	        let typeID = 1;
	        for (let type of options.types) {
	            let match = /^([\w\-]+)(?:=([\w-]+))?$/.exec(type);
	            if (!match)
	                throw new RangeError("Invalid type name " + type);
	            let id = typeID++;
	            this.typeNames[id] = match[1];
	            this.typeIDs[match[1]] = id;
	            parentNames[id] = match[2];
	            for (let i = 0; i < subtypes; i++) {
	                let subID = typeID++, name = match[1] + "#" + (i + 1);
	                this.typeNames[subID] = name;
	                this.typeIDs[name] = subID;
	                parentNames[subID] = match[1];
	            }
	        }
	        this.parents = parentNames.map(name => {
	            if (name == null)
	                return 0;
	            let id = this.typeIDs[name];
	            if (id == null)
	                throw new RangeError(`Unknown parent type '${name}' specified`);
	            return id;
	        });
	        if (this.flags.length > 29 || this.typeNames.length > Math.pow(2, 29 - this.flags.length))
	            throw new RangeError("Too many style tag flags to fit in a 30-bit integer");
	    }
	    /// Parse a tag name into a numeric ID. Only necessary if you are
	    /// manually defining [node properties](#highlight.TagSystem.prop)
	    /// for this system.
	    get(name) {
	        let value = name.charCodeAt(0) == 43 ? 1 : 0; // Check for leading '+'
	        for (let part of (value ? name.slice(1) : name).split(" "))
	            if (part) {
	                let flag = this.flags.indexOf(part);
	                if (flag > -1) {
	                    value += 1 << flag;
	                }
	                else {
	                    let typeID = this.typeIDs[part];
	                    if (typeID == null)
	                        throw new RangeError(`Unknown tag type '${part}'`);
	                    if (value >> this.typeShift)
	                        throw new RangeError(`Multiple tag types specified in '${name}'`);
	                    value += typeID << this.typeShift;
	                }
	            }
	        return value;
	    }
	    /// Create a
	    /// [`PropSource`](https://lezer.codemirror.net/docs/ref#tree.PropSource)
	    /// that adds node properties for this system. `tags` should map
	    /// node type
	    /// [selectors](https://lezer.codemirror.net/docs/ref#tree.NodeType^match)
	    /// to tag names.
	    add(tags) {
	        let match = NodeType.match(tags);
	        return this.prop.add((type) => {
	            let found = match(type);
	            return found == null ? undefined : this.get(found);
	        });
	    }
	    /// Create a highlighter extension for this system, styling the
	    /// given tags using the given CSS objects.
	    highlighter(spec) {
	        let styling = new Styling(this, spec);
	        return [
	            ViewPlugin.define(view => new Highlighter(view, this.prop, styling)).decorations(),
	            EditorView.styleModule.of(styling.module)
	        ];
	    }
	    /// @internal
	    specificity(tag) {
	        let flags = tag & this.flagMask, spec = 0;
	        for (let i = 1; i <= this.flags.length; i++)
	            if (flags & (1 << i))
	                spec++;
	        for (let type = tag >> (this.flags.length + 1); type; type = this.parents[type])
	            spec += 1000;
	        return spec;
	    }
	}
	/// The set of highlighting tags used by regular language packages and
	/// themes.
	const defaultTags = new TagSystem({
	    flags: ["invalid", "meta", "standard",
	        "definition", "constant", "local", "control",
	        "link", "strong", "emphasis", "monospace",
	        "changed", "inserted", "deleted"],
	    subtypes: 7,
	    types: [
	        "comment",
	        "lineComment=comment",
	        "blockComment=comment",
	        "docComment=comment",
	        "name",
	        "variableName=name",
	        "typeName=name",
	        "propertyName=name",
	        "className=name",
	        "labelName=name",
	        "namespace=name",
	        "literal",
	        "string=literal",
	        "docString=string",
	        "character=string",
	        "number=literal",
	        "integer=number",
	        "float=number",
	        "regexp=literal",
	        "escape=literal",
	        "color=literal",
	        "content",
	        "heading=content",
	        "list=content",
	        "quote=content",
	        "keyword",
	        "self=keyword",
	        "null=keyword",
	        "atom=keyword",
	        "unit=keyword",
	        "modifier=keyword",
	        "operatorKeyword=keyword",
	        "operator",
	        "derefOperator=operator",
	        "arithmeticOperator=operator",
	        "logicOperator=operator",
	        "bitwiseOperator=operator",
	        "compareOperator=operator",
	        "updateOperator=operator",
	        "typeOperator=operator",
	        "punctuation",
	        "separator=punctuation",
	        "bracket=punctuation",
	        "angleBracket=bracket",
	        "squareBracket=bracket",
	        "paren=bracket",
	        "brace=bracket"
	    ]
	});
	/// Used to add a set of tags to a language syntax via
	/// [`Parser.withProps`](https://lezer.codemirror.net/docs/ref#lezer.Parser.withProps).
	/// The argument object can use syntax node selectors (see
	/// [`NodeType.match`](https://lezer.codemirror.net/docs/ref#tree.NodeType^match))
	/// as property names, and tag names (in the [default tag
	/// system](#highlight.defaultTags)) as values.
	const styleTags = (tags) => defaultTags.add(tags);
	/// Create a highlighter theme that adds the given styles to the given
	/// tags. The spec's property names must be [tag
	/// names](#highlight.defaultTags) or comma-separated lists of tag
	/// names. The values should be
	/// [`style-mod`](https://github.com/marijnh/style-mod#documentation)
	/// style objects that define the CSS for that tag.
	const highlighter = (spec) => defaultTags.highlighter(spec);
	class StyleRule {
	    constructor(type, flags, specificity, cls) {
	        this.type = type;
	        this.flags = flags;
	        this.specificity = specificity;
	        this.cls = cls;
	    }
	}
	class Styling {
	    constructor(tags, spec) {
	        this.tags = tags;
	        this.cache = Object.create(null);
	        let modSpec = Object.create(null);
	        let nextCls = 0;
	        let rules = [];
	        for (let prop in spec) {
	            let cls = "c" + nextCls++;
	            modSpec[cls] = spec[prop];
	            for (let part of prop.split(/\s*,\s*/)) {
	                let tag = tags.get(part);
	                rules.push(new StyleRule(tag >> tags.typeShift, tag & tags.flagMask, tags.specificity(tag), cls));
	            }
	        }
	        this.rules = rules.sort((a, b) => b.specificity - a.specificity);
	        this.module = new StyleModule(modSpec);
	    }
	    match(tag) {
	        let known = this.cache[tag];
	        if (known != null)
	            return known;
	        let result = "";
	        let type = tag >> this.tags.typeShift, flags = tag & this.tags.flagMask;
	        for (;;) {
	            for (let rule of this.rules) {
	                if (rule.type == type && (rule.flags & flags) == rule.flags) {
	                    if (result)
	                        result += " ";
	                    result += this.module[rule.cls];
	                    flags &= ~rule.flags;
	                    if (type)
	                        break;
	                }
	            }
	            if (type)
	                type = this.tags.parents[type];
	            else
	                break;
	        }
	        return this.cache[tag] = result;
	    }
	}
	class Highlighter {
	    constructor(view, prop, styling) {
	        this.prop = prop;
	        this.styling = styling;
	        this.tree = view.state.tree;
	        this.decorations = this.buildDeco(view.visibleRanges, this.tree);
	    }
	    update(update) {
	        let syntax = update.state.facet(EditorState.syntax);
	        if (!syntax.length) {
	            this.decorations = Decoration.none;
	        }
	        else if (syntax[0].parsePos(update.state) < update.view.viewport.to) {
	            this.decorations = this.decorations.map(update.changes);
	        }
	        else if (this.tree != syntax[0].getTree(update.state) || update.viewportChanged) {
	            this.tree = syntax[0].getTree(update.state);
	            this.decorations = this.buildDeco(update.view.visibleRanges, this.tree);
	        }
	    }
	    buildDeco(ranges, tree) {
	        let builder = new RangeSetBuilder();
	        let start = 0;
	        function flush(pos, style) {
	            if (pos > start && style)
	                builder.add(start, pos, Decoration.mark({ class: style })); // FIXME cache these
	            start = pos;
	        }
	        for (let { from, to } of ranges) {
	            start = from;
	            // The current node's own classes
	            let curClass = "";
	            let context = [];
	            let inherited = [];
	            tree.iterate({
	                from, to,
	                enter: (type, start) => {
	                    let inheritedClass = inherited.length ? inherited[inherited.length - 1] : "";
	                    let cls = inheritedClass;
	                    let style = type.prop(this.prop);
	                    if (style != null) {
	                        let val = this.styling.match(style);
	                        if (val) {
	                            if (cls)
	                                cls += " ";
	                            cls += val;
	                        }
	                        if (style & Inherit)
	                            inheritedClass = cls;
	                    }
	                    context.push(cls);
	                    if (inheritedClass)
	                        inherited.push(inheritedClass);
	                    if (cls != curClass) {
	                        flush(start, curClass);
	                        curClass = cls;
	                    }
	                },
	                leave: (_t, _s, end) => {
	                    context.pop();
	                    inherited.pop();
	                    let backTo = context.length ? context[context.length - 1] : "";
	                    if (backTo != curClass) {
	                        flush(Math.min(to, end), curClass);
	                        curClass = backTo;
	                    }
	                }
	            });
	        }
	        return builder.finish();
	    }
	}
	/// A default highlighter (works well with light themes).
	const defaultHighlighter = highlighter({
	    deleted: { textDecoration: "line-through" },
	    inserted: { textDecoration: "underline" },
	    link: { textDecoration: "underline" },
	    strong: { fontWeight: "bold" },
	    emphasis: { fontStyle: "italic" },
	    invalid: { color: "#f00" },
	    keyword: { color: "#708" },
	    atom: { color: "#219" },
	    number: { color: "#164" },
	    string: { color: "#a11" },
	    "regexp, escape": { color: "#e40" },
	    "variableName definition": { color: "#00f" },
	    typeName: { color: "#085" },
	    className: { color: "#167" },
	    "propertyName definition": { color: "#00c" },
	    comment: { color: "#940" },
	    meta: { color: "#555" },
	});

	const statementIndent = continuedIndent({ except: /^{/ });
	/// A syntax provider based on the [Lezer JavaScript
	/// parser](https://github.com/lezer-parser/javascript), extended with
	/// highlighting and indentation information.
	const javascriptSyntax = new LezerSyntax(parser.withProps(languageData.add({
	    Script: {
	        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
	        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
	    }
	}), indentNodeProp.add(type => {
	    if (type.name == "IfStatement")
	        return continuedIndent({ except: /^\s*({|else\b)/ });
	    if (type.name == "TryStatement")
	        return continuedIndent({ except: /^\s*({|catch|finally)\b/ });
	    if (type.name == "LabeledStatement")
	        return flatIndent;
	    if (type.name == "SwitchBody")
	        return context => {
	            let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
	            return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
	        };
	    if (type.name == "TemplateString" || type.name == "BlockComment")
	        return () => -1;
	    if (/(Statement|Declaration)$/.test(type.name) || type.name == "Property")
	        return statementIndent;
	    return undefined;
	}), foldNodeProp.add({
	    Block(tree) { return { from: tree.start + 1, to: tree.end - 1 }; },
	    ObjectExpression(tree) { return { from: tree.start + 1, to: tree.end - 1 }; },
	    ArrayExpression(tree) { return { from: tree.start + 1, to: tree.end - 1 }; },
	    BlockComment(tree) { return { from: tree.start + 2, to: tree.end - 2 }; }
	}), styleTags({
	    "get set async static": "modifier",
	    "for while do if else switch try catch finally return throw break continue default case": "keyword control",
	    "in of await yield void typeof delete instanceof": "operatorKeyword",
	    "export import let var const function class extends": "keyword definition",
	    "with debugger from as": "keyword",
	    TemplateString: "string#2",
	    "BooleanLiteral Super": "atom",
	    this: "self",
	    null: "null",
	    Star: "modifier",
	    VariableName: "variableName",
	    VariableDefinition: "variableName definition",
	    Label: "labelName",
	    PropertyName: "propertyName",
	    PropertyNameDefinition: "propertyName definition",
	    "PostfixOp UpdateOp": "updateOperator",
	    LineComment: "lineComment",
	    BlockComment: "blockComment",
	    Number: "number",
	    String: "string",
	    ArithOp: "arithmeticOperator",
	    LogicOp: "logicOperator",
	    BitOp: "bitwiseOperator",
	    CompareOp: "compareOperator",
	    RegExp: "regexp",
	    Equals: "operator definition",
	    Spread: "punctuation",
	    "Arrow :": "punctuation definition",
	    "( )": "paren",
	    "[ ]": "squareBracket",
	    "{ }": "brace",
	    ".": "derefOperator",
	    ", ;": "separator"
	})));
	/// Returns an extension that installs the JavaScript syntax provider.
	function javascript() { return javascriptSyntax.extension; }

	const fromHistory = Annotation.define();
	/// Transaction annotation that will prevent that annotation from
	/// being combined with other annotations in the undo history. Given
	/// `"before"`, it'll prevent merging with previous transactions. With
	/// `"after"`, subsequent transactions won't be combined with this
	/// one. With `"full"`, the transaction is isolated on both sides.
	const isolateHistory = Annotation.define();
	/// This facet provides a way to register functions that, given a
	/// transaction, provide a set of effects that the history should
	/// store when inverting the transaction. This can be used to
	/// integrate some kinds of effects in the history, so that they can
	/// be undone (and redone again).
	const invertedEffects = Facet.define();
	const historyConfig = Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            minDepth: 100,
	            newGroupDelay: 500
	        }, { minDepth: Math.max, newGroupDelay: Math.min });
	    }
	});
	const historyField = StateField.define({
	    create() {
	        return HistoryState.empty;
	    },
	    update(state, tr, newState) {
	        let config = newState.facet(historyConfig);
	        let fromHist = tr.annotation(fromHistory);
	        if (fromHist) {
	            let item = HistEvent.fromTransaction(tr), from = fromHist.side;
	            let other = from == 0 /* Done */ ? state.undone : state.done;
	            if (item)
	                other = updateBranch(other, other.length, config.minDepth, item);
	            else
	                other = addSelection(other, tr.startState.selection);
	            return new HistoryState(from == 0 /* Done */ ? fromHist.rest : other, from == 0 /* Done */ ? other : fromHist.rest);
	        }
	        let isolate = tr.annotation(isolateHistory);
	        if (isolate == "full" || isolate == "before")
	            state = state.isolate();
	        if (tr.annotation(Transaction.addToHistory) === false)
	            return tr.changes.length ? state.addMapping(tr.changes.desc) : state;
	        let event = HistEvent.fromTransaction(tr);
	        let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
	        if (event)
	            state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
	        else if (tr.selection)
	            state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
	        if (isolate == "full" || isolate == "after")
	            state = state.isolate();
	        return state;
	    }
	});
	/// Create a history extension with the given configuration.
	function history(config = {}) {
	    // FIXME register beforeinput handler
	    return [
	        historyField,
	        historyConfig.of(config)
	    ];
	}
	// History events store groups of changes or effects that need to be
	// undone/redone together.
	class HistEvent {
	    constructor(
	    // The changes in this event. Normal events hold at least one
	    // change or effect. But it may be necessary to store selection
	    // events before the first change, in which case a special type of
	    // instance is created which doesn't hold any changes, with
	    // changes == startSelection == undefined
	    changes, 
	    // The effects associated with this event
	    effects, mapped, 
	    // The selection before this event
	    startSelection, 
	    // Stores selection changes after this event, to be used for
	    // selection undo/redo.
	    selectionsAfter) {
	        this.changes = changes;
	        this.effects = effects;
	        this.mapped = mapped;
	        this.startSelection = startSelection;
	        this.selectionsAfter = selectionsAfter;
	    }
	    setSelAfter(after) {
	        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
	    }
	    // This does not check `addToHistory` and such, it assumes the
	    // transaction needs to be converted to an item. Returns null when
	    // there are no changes or effects in the transaction.
	    static fromTransaction(tr) {
	        let effects = none$5;
	        for (let invert of tr.startState.facet(invertedEffects)) {
	            let result = invert(tr);
	            if (result.length)
	                effects = effects.concat(result);
	        }
	        if (!effects.length && tr.changes.empty)
	            return null;
	        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, tr.startState.selection, none$5);
	    }
	    static selection(selections) {
	        return new HistEvent(undefined, none$5, undefined, undefined, selections);
	    }
	}
	function updateBranch(branch, to, maxLen, newEvent) {
	    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
	    let newBranch = branch.slice(start, to);
	    newBranch.push(newEvent);
	    return newBranch;
	}
	function isAdjacent(a, b) {
	    let ranges = [], isAdjacent = false;
	    a.iterChangedRanges((f, t) => ranges.push(f, t));
	    b.iterChangedRanges((_f, _t, f, t) => {
	        for (let i = 0; i < ranges.length;) {
	            let from = ranges[i++], to = ranges[i++];
	            if (t >= from && f <= to)
	                isAdjacent = true;
	        }
	    });
	    return isAdjacent;
	}
	function eqSelectionShape(a, b) {
	    return a.ranges.length == b.ranges.length &&
	        a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
	}
	function conc(a, b) {
	    return !a.length ? b : !b.length ? a : a.concat(b);
	}
	const none$5 = [];
	const MaxSelectionsPerEvent = 200;
	function addSelection(branch, selection) {
	    if (!branch.length) {
	        return [HistEvent.selection([selection])];
	    }
	    else {
	        let lastEvent = branch[branch.length - 1];
	        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
	        if (sels.length && sels[sels.length - 1].eq(selection))
	            return branch;
	        sels.push(selection);
	        return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
	    }
	}
	// Assumes the top item has one or more selectionAfter values
	function popSelection(branch) {
	    let last = branch[branch.length - 1];
	    let newBranch = branch.slice();
	    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
	    return newBranch;
	}
	// Add a mapping to the top event in the given branch. If this maps
	// away all the changes and effects in that item, drop it and
	// propagate the mapping to the next item.
	function addMappingToBranch(branch, mapping) {
	    if (!branch.length)
	        return branch;
	    let length = branch.length, selections = none$5;
	    while (length) {
	        let event = mapEvent(branch[length - 1], mapping, selections);
	        if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
	            let result = branch.slice(0, length);
	            result[length - 1] = event;
	            return result;
	        }
	        else { // Drop this event, since there's no changes or effects left
	            mapping = event.mapped;
	            length--;
	            selections = event.selectionsAfter;
	        }
	    }
	    return selections.length ? [HistEvent.selection(selections)] : none$5;
	}
	function mapEvent(event, mapping, extraSelections) {
	    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none$5, extraSelections);
	    // Change-less events don't store mappings (they are always the last event in a branch)
	    if (!event.changes)
	        return HistEvent.selection(selections);
	    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
	    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
	    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(mapping), selections);
	}
	class HistoryState {
	    constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
	        this.done = done;
	        this.undone = undone;
	        this.prevTime = prevTime;
	        this.prevUserEvent = prevUserEvent;
	    }
	    isolate() {
	        return this.prevTime ? new HistoryState(this.done, this.undone) : this;
	    }
	    addChanges(event, time, userEvent, newGroupDelay, maxLen) {
	        let done = this.done, lastEvent = done[done.length - 1];
	        if (lastEvent && lastEvent.changes &&
	            time - this.prevTime < newGroupDelay &&
	            !lastEvent.selectionsAfter.length &&
	            lastEvent.changes.length && event.changes &&
	            isAdjacent(lastEvent.changes, event.changes)) {
	            done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$5));
	        }
	        else {
	            done = updateBranch(done, done.length, maxLen, event);
	        }
	        return new HistoryState(done, none$5, time, userEvent);
	    }
	    addSelection(selection, time, userEvent, newGroupDelay) {
	        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$5;
	        if (last.length > 0 &&
	            time - this.prevTime < newGroupDelay &&
	            userEvent == "keyboardselection" && this.prevUserEvent == userEvent &&
	            eqSelectionShape(last[last.length - 1], selection))
	            return this;
	        return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
	    }
	    addMapping(mapping) {
	        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
	    }
	    pop(side, state, selection) {
	        let branch = side == 0 /* Done */ ? this.done : this.undone;
	        if (branch.length == 0)
	            return null;
	        let event = branch[branch.length - 1];
	        if (selection && event.selectionsAfter.length) {
	            return state.update({
	                selection: event.selectionsAfter[event.selectionsAfter.length - 1],
	                annotations: fromHistory.of({ side, rest: popSelection(branch) })
	            });
	        }
	        else if (!event.changes) {
	            return null;
	        }
	        else {
	            let rest = branch.length == 1 ? none$5 : branch.slice(0, branch.length - 1);
	            if (event.mapped)
	                rest = addMappingToBranch(rest, event.mapped);
	            return state.update({
	                changes: event.changes,
	                selection: event.startSelection,
	                effects: event.effects,
	                annotations: fromHistory.of({ side, rest }),
	                filter: false
	            });
	        }
	    }
	}
	HistoryState.empty = new HistoryState(none$5, none$5);

	/// A gutter marker represents a bit of information attached to a line
	/// in a specific gutter. Your own custom markers have to extend this
	/// class.
	class GutterMarker extends RangeValue {
	    /// @internal
	    compare(other) {
	        return this == other || this.constructor == other.constructor && this.eq(other);
	    }
	    /// Render the DOM node for this marker, if any.
	    toDOM(_view) { return null; }
	    /// Create a range that places this marker at the given position.
	    at(pos) { return new Range(pos, pos, this); }
	}
	GutterMarker.prototype.elementClass = "";
	GutterMarker.prototype.mapMode = MapMode.TrackBefore;
	const defaults = {
	    style: "",
	    renderEmptyElements: false,
	    elementStyle: "",
	    markers: () => RangeSet.empty,
	    lineMarker: () => null,
	    initialSpacer: null,
	    updateSpacer: null,
	    domEventHandlers: {}
	};
	const activeGutters = Facet.define();
	/// Define an editor gutter.
	function gutter(config) {
	    return [gutters(), activeGutters.of(fillConfig(config, defaults))];
	}
	const baseTheme$2 = EditorView.baseTheme({
	    gutters: {
	        display: "flex",
	        height: "100%",
	        boxSizing: "border-box",
	        left: 0
	    },
	    "gutters@light": {
	        backgroundColor: "#f5f5f5",
	        color: "#999",
	        borderRight: "1px solid silver"
	    },
	    "gutters@dark": {
	        backgroundColor: "#333338",
	        color: "#ccc"
	    },
	    gutter: {
	        display: "flex !important",
	        flexDirection: "column",
	        flexShrink: 0,
	        boxSizing: "border-box",
	        height: "100%",
	        overflow: "hidden"
	    },
	    gutterElement: {
	        boxSizing: "border-box"
	    },
	    "gutterElement.lineNumber": {
	        padding: "0 3px 0 5px",
	        minWidth: "20px",
	        textAlign: "right",
	        whiteSpace: "nowrap"
	    }
	});
	const unfixGutters = Facet.define({
	    combine: values => values.some(x => x)
	});
	/// The gutter-drawing plugin is automatically enabled when you add a
	/// gutter, but you can use this function to explicitly configure it.
	///
	/// Unless `fixed` is explicitly set to `false`, the gutters are
	/// fixed, meaning they don't scroll along with the content
	/// horizontally.
	function gutters(config) {
	    let result = [
	        gutterView,
	        baseTheme$2
	    ];
	    if (config && config.fixed === false)
	        result.push(unfixGutters.of(true));
	    return result;
	}
	const gutterView = ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.dom = document.createElement("div");
	        this.dom.className = themeClass("gutters");
	        this.dom.setAttribute("aria-hidden", "true");
	        this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
	        for (let gutter of this.gutters)
	            this.dom.appendChild(gutter.dom);
	        this.fixed = !view.state.facet(unfixGutters);
	        if (this.fixed) {
	            // FIXME IE11 fallback, which doesn't support position: sticky,
	            // by using position: relative + event handlers that realign the
	            // gutter (or just force fixed=false on IE11?)
	            this.dom.style.position = "sticky";
	        }
	        view.scrollDOM.insertBefore(this.dom, view.contentDOM);
	    }
	    update(update) {
	        if (!this.updateGutters(update))
	            return;
	        let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport));
	        this.view.viewportLines(line => {
	            let text;
	            if (Array.isArray(line.type))
	                text = line.type.find(b => b.type == BlockType.Text);
	            else
	                text = line.type == BlockType.Text ? line : undefined;
	            if (!text)
	                return;
	            for (let cx of contexts)
	                cx.line(this.view, text);
	        }, 0);
	        for (let cx of contexts)
	            cx.finish();
	        this.dom.style.minHeight = this.view.contentHeight + "px";
	        if (update.state.facet(unfixGutters) != !this.fixed) {
	            this.fixed = !this.fixed;
	            this.dom.style.position = this.fixed ? "sticky" : "";
	        }
	    }
	    updateGutters(update) {
	        let prev = update.prevState.facet(activeGutters), cur = update.state.facet(activeGutters);
	        let change = update.docChanged || update.heightChanged;
	        if (prev == cur) {
	            for (let gutter of this.gutters)
	                if (gutter.update(update))
	                    change = true;
	        }
	        else {
	            change = true;
	            let gutters = [];
	            for (let conf of cur) {
	                let known = prev.indexOf(conf);
	                if (known < 0) {
	                    gutters.push(new SingleGutterView(this.view, conf));
	                }
	                else {
	                    this.gutters[known].update(update);
	                    gutters.push(this.gutters[known]);
	                }
	            }
	            for (let g of this.gutters)
	                g.dom.remove();
	            for (let g of gutters)
	                this.dom.appendChild(g.dom);
	            this.gutters = gutters;
	        }
	        return change;
	    }
	}).provide(PluginField.scrollMargins, value => {
	    if (value.gutters.length == 0 || !value.fixed)
	        return null;
	    return value.view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
	});
	class UpdateContext {
	    constructor(gutter, viewport) {
	        this.gutter = gutter;
	        this.localMarkers = [];
	        this.i = 0;
	        this.height = 0;
	        this.cursor = RangeSet.iter(Array.isArray(gutter.markers) ? gutter.markers : [gutter.markers], viewport.from);
	    }
	    line(view, line) {
	        if (this.localMarkers.length)
	            this.localMarkers = [];
	        while (this.cursor.value && this.cursor.from <= line.from) {
	            if (this.cursor.from == line.from)
	                this.localMarkers.push(this.cursor.value);
	            this.cursor.next();
	        }
	        let forLine = this.gutter.config.lineMarker(view, line, this.localMarkers);
	        if (forLine)
	            this.localMarkers.unshift(forLine);
	        let gutter = this.gutter;
	        if (this.localMarkers.length == 0 && !gutter.config.renderEmptyElements)
	            return;
	        let above = line.top - this.height;
	        if (this.i == gutter.elements.length) {
	            let newElt = new GutterElement(view, line.height, above, this.localMarkers, gutter.elementClass);
	            gutter.elements.push(newElt);
	            gutter.dom.appendChild(newElt.dom);
	        }
	        else {
	            let markers = this.localMarkers, elt = gutter.elements[this.i];
	            if (sameMarkers(markers, elt.markers)) {
	                markers = elt.markers;
	                this.localMarkers.length = 0;
	            }
	            elt.update(view, line.height, above, markers, gutter.elementClass);
	        }
	        this.height = line.bottom;
	        this.i++;
	    }
	    finish() {
	        let gutter = this.gutter;
	        while (gutter.elements.length > this.i)
	            gutter.dom.removeChild(gutter.elements.pop().dom);
	    }
	}
	class SingleGutterView {
	    constructor(view, config) {
	        this.view = view;
	        this.config = config;
	        this.elements = [];
	        this.spacer = null;
	        this.dom = document.createElement("div");
	        this.dom.className = themeClass("gutter" + (this.config.style ? "." + this.config.style : ""));
	        this.elementClass = themeClass("gutterElement" + (this.config.style ? "." + this.config.style : ""));
	        for (let prop in config.domEventHandlers) {
	            this.dom.addEventListener(prop, (event) => {
	                let line = view.lineAtHeight(event.clientY);
	                if (config.domEventHandlers[prop](view, line, event))
	                    event.preventDefault();
	            });
	        }
	        this.markers = config.markers(view.state);
	        if (config.initialSpacer) {
	            this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)], this.elementClass);
	            this.dom.appendChild(this.spacer.dom);
	            this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
	        }
	    }
	    update(update) {
	        let prevMarkers = this.markers;
	        this.markers = this.config.markers(update.state);
	        if (this.spacer && this.config.updateSpacer) {
	            let updated = this.config.updateSpacer(this.spacer.markers[0], update);
	            if (updated != this.spacer.markers[0])
	                this.spacer.update(update.view, 0, 0, [updated], this.elementClass);
	        }
	        return this.markers == prevMarkers;
	    }
	    destroy() {
	        this.dom.remove();
	    }
	}
	class GutterElement {
	    constructor(view, height, above, markers, eltClass) {
	        this.height = -1;
	        this.above = 0;
	        this.dom = document.createElement("div");
	        this.update(view, height, above, markers, eltClass);
	    }
	    update(view, height, above, markers, cssClass) {
	        if (this.height != height)
	            this.dom.style.height = (this.height = height) + "px";
	        if (this.above != above)
	            this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
	        if (this.markers != markers) {
	            this.markers = markers;
	            for (let ch; ch = this.dom.lastChild;)
	                ch.remove();
	            let cls = cssClass;
	            for (let m of markers) {
	                let dom = m.toDOM(view);
	                if (dom)
	                    this.dom.appendChild(dom);
	                let c = m.elementClass;
	                if (c)
	                    cls += " " + c;
	            }
	            this.dom.className = cls;
	        }
	    }
	}
	function sameMarkers(a, b) {
	    if (a.length != b.length)
	        return false;
	    for (let i = 0; i < a.length; i++)
	        if (!a[i].compare(b[i]))
	            return false;
	    return true;
	}
	/// Facet used to provide markers to the line number gutter.
	const lineNumberMarkers = Facet.define();
	const lineNumberConfig = Facet.define({
	    combine(values) {
	        return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
	            domEventHandlers(a, b) {
	                let result = {};
	                for (let event in a)
	                    result[event] = a[event];
	                for (let event in b) {
	                    let exists = result[event], add = b[event];
	                    result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
	                }
	                return result;
	            }
	        });
	    }
	});
	class NumberMarker extends GutterMarker {
	    constructor(number) {
	        super();
	        this.number = number;
	    }
	    eq(other) { return this.number == other.number; }
	    toDOM(view) {
	        let config = view.state.facet(lineNumberConfig);
	        return document.createTextNode(config.formatNumber(this.number));
	    }
	}
	const lineNumberGutter = gutter({
	    style: "lineNumber",
	    markers(state) { return state.facet(lineNumberMarkers); },
	    lineMarker(view, line, others) {
	        if (others.length)
	            return null;
	        // FIXME try to make the line number queries cheaper?
	        return new NumberMarker(view.state.doc.lineAt(line.from).number);
	    },
	    initialSpacer(view) {
	        return new NumberMarker(maxLineNumber(view.state.doc.lines));
	    },
	    updateSpacer(spacer, update) {
	        let max = maxLineNumber(update.view.state.doc.lines);
	        return max == spacer.number ? spacer : new NumberMarker(max);
	    }
	});
	/// Create a line number gutter extension. The order in which the
	/// gutters appear is determined by their extension priority.
	function lineNumbers(config = {}) {
	    return [
	        lineNumberConfig.of(config),
	        lineNumberGutter
	    ];
	}
	function maxLineNumber(lines) {
	    let last = 9;
	    while (last < lines)
	        last = last * 10 + 9;
	    return last;
	}

	function mapRange(range, mapping) {
	    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
	    return from >= to ? undefined : { from, to };
	}
	const foldEffect = StateEffect.define({ map: mapRange });
	const unfoldEffect = StateEffect.define({ map: mapRange });
	const foldState = StateField.define({
	    create() {
	        return Decoration.none;
	    },
	    update(folded, tr) {
	        folded = folded.map(tr.changes);
	        for (let e of tr.effects) {
	            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))
	                folded = folded.update({ add: [FoldWidget.decoration.range(e.value.from, e.value.to)] });
	            else if (e.is(unfoldEffect)) {
	                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
	                    filterFrom: e.value.from, filterTo: e.value.to });
	            }
	        }
	        // Clear folded ranges that cover the selection head
	        if (tr.selection) {
	            let onSelection = false, { head } = tr.selection.primary;
	            folded.between(head, head, (a, b) => { if (a < head && b > head)
	                onSelection = true; });
	            if (onSelection)
	                folded = folded.update({
	                    filterFrom: head,
	                    filterTo: head,
	                    filter: (a, b) => b <= head || a >= head
	                });
	        }
	        return folded;
	    },
	    provide: [EditorView.decorations]
	});
	function foldInside(state, from, to) {
	    var _a;
	    let found = null;
	    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
	        if (!found || found.from > from)
	            found = ({ from, to });
	    });
	    return found;
	}
	function foldExists(folded, from, to) {
	    let found = false;
	    folded.between(from, from, (a, b) => { if (a == from && b == to)
	        found = true; });
	    return found;
	}
	function getFoldable(state, from, to) {
	    return state.facet(EditorState.foldable).reduce((value, f) => value || f(state, from, to), null);
	}
	const defaultConfig = {
	    placeholderDOM: null,
	    placeholderText: "…"
	};
	const foldConfig = Facet.define({
	    combine(values) { return combineConfig(values, defaultConfig); }
	});
	/// Create an extension that configures code folding.
	function codeFolding(config) {
	    let result = [foldState, baseTheme$3];
	    if (config)
	        result.push(foldConfig.of(config));
	    return result;
	}
	class FoldWidget extends WidgetType {
	    ignoreEvents() { return false; }
	    toDOM(view) {
	        let { state } = view, conf = state.facet(foldConfig);
	        if (conf.placeholderDOM)
	            return conf.placeholderDOM();
	        let element = document.createElement("span");
	        element.textContent = conf.placeholderText;
	        element.setAttribute("aria-label", state.phrase("folded code"));
	        element.title = state.phrase("unfold");
	        element.className = themeClass("foldPlaceholder");
	        element.onclick = event => {
	            let line = view.lineAt(view.posAtDOM(event.target));
	            let folded = foldInside(view.state, line.from, line.to);
	            if (folded)
	                view.dispatch(view.state.update({ effects: unfoldEffect.of(folded) }));
	            event.preventDefault();
	        };
	        return element;
	    }
	}
	FoldWidget.decoration = Decoration.replace({ widget: new FoldWidget(null) });
	const foldGutterDefaults = {
	    openText: "⌄",
	    closedText: "›"
	};
	class FoldMarker extends GutterMarker {
	    constructor(config, open) {
	        super();
	        this.config = config;
	        this.open = open;
	    }
	    eq(other) { return this.config == other.config && this.open == other.open; }
	    toDOM(view) {
	        let span = document.createElement("span");
	        span.textContent = this.open ? this.config.openText : this.config.closedText;
	        span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
	        return span;
	    }
	}
	/// Create an extension that registers a fold gutter, which shows a
	/// fold status indicator before lines which can be clicked to fold or
	/// unfold the line.
	function foldGutter(config = {}) {
	    let fullConfig = fillConfig(config, foldGutterDefaults);
	    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
	    return [
	        gutter({
	            style: "foldGutter",
	            lineMarker(view, line) {
	                // FIXME optimize this. At least don't run it for updates that
	                // don't change anything relevant
	                let folded = foldInside(view.state, line.from, line.to);
	                if (folded)
	                    return canUnfold;
	                if (getFoldable(view.state, line.from, line.to))
	                    return canFold;
	                return null;
	            },
	            initialSpacer() {
	                return new FoldMarker(fullConfig, false);
	            },
	            domEventHandlers: {
	                click: (view, line) => {
	                    let folded = foldInside(view.state, line.from, line.to);
	                    if (folded) {
	                        view.dispatch(view.state.update({ effects: unfoldEffect.of(folded) }));
	                        return true;
	                    }
	                    let range = getFoldable(view.state, line.from, line.to);
	                    if (range) {
	                        view.dispatch(view.state.update({ effects: foldEffect.of(range) }));
	                        return true;
	                    }
	                    return false;
	                }
	            }
	        }),
	        codeFolding()
	    ];
	}
	const baseTheme$3 = EditorView.baseTheme({
	    foldPlaceholder: {
	        backgroundColor: "#eee",
	        border: "1px solid silver",
	        color: "#888",
	        borderRadius: ".2em",
	        margin: "0 1px",
	        padding: "0 1px",
	        cursor: "pointer"
	    },
	    "gutterElement.foldGutter": {
	        padding: "0 1px",
	        cursor: "pointer"
	    }
	});

	var base = {
	  8: "Backspace",
	  9: "Tab",
	  10: "Enter",
	  12: "NumLock",
	  13: "Enter",
	  16: "Shift",
	  17: "Control",
	  18: "Alt",
	  20: "CapsLock",
	  27: "Escape",
	  32: " ",
	  33: "PageUp",
	  34: "PageDown",
	  35: "End",
	  36: "Home",
	  37: "ArrowLeft",
	  38: "ArrowUp",
	  39: "ArrowRight",
	  40: "ArrowDown",
	  44: "PrintScreen",
	  45: "Insert",
	  46: "Delete",
	  59: ";",
	  61: "=",
	  91: "Meta",
	  92: "Meta",
	  106: "*",
	  107: "+",
	  108: ",",
	  109: "-",
	  110: ".",
	  111: "/",
	  144: "NumLock",
	  145: "ScrollLock",
	  160: "Shift",
	  161: "Shift",
	  162: "Control",
	  163: "Control",
	  164: "Alt",
	  165: "Alt",
	  173: "-",
	  186: ";",
	  187: "=",
	  188: ",",
	  189: "-",
	  190: ".",
	  191: "/",
	  192: "`",
	  219: "[",
	  220: "\\",
	  221: "]",
	  222: "'",
	  229: "q"
	};

	var shift = {
	  48: ")",
	  49: "!",
	  50: "@",
	  51: "#",
	  52: "$",
	  53: "%",
	  54: "^",
	  55: "&",
	  56: "*",
	  57: "(",
	  59: ":",
	  61: "+",
	  173: "_",
	  186: ":",
	  187: "+",
	  188: "<",
	  189: "_",
	  190: ">",
	  191: "?",
	  192: "~",
	  219: "{",
	  220: "|",
	  221: "}",
	  222: "\"",
	  229: "Q"
	};

	var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
	var safari = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
	var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
	var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
	var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
	var brokenModifierNames = chrome$1 && (mac || +chrome$1[1] < 57) || gecko$1 && mac;

	// Fill in the digit keys
	for (var i$1 = 0; i$1 < 10; i$1++) base[48 + i$1] = base[96 + i$1] = String(i$1);

	// The function keys
	for (var i$1 = 1; i$1 <= 24; i$1++) base[i$1 + 111] = "F" + i$1;

	// And the alphabetic keys
	for (var i$1 = 65; i$1 <= 90; i$1++) {
	  base[i$1] = String.fromCharCode(i$1 + 32);
	  shift[i$1] = String.fromCharCode(i$1);
	}

	// For each code that doesn't have a shift-equivalent, copy the base name
	for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

	function keyName(event) {
	  // Don't trust event.key in Chrome when there are modifiers until
	  // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
	  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
	    (safari || ie$1) && event.shiftKey && event.key && event.key.length == 1;
	  var name = (!ignoreKey && event.key) ||
	    (event.shiftKey ? shift : base)[event.keyCode] ||
	    event.key || "Unidentified";
	  // Edge sometimes produces wrong names (Issue #3)
	  if (name == "Esc") name = "Escape";
	  if (name == "Del") name = "Delete";
	  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
	  if (name == "Left") name = "ArrowLeft";
	  if (name == "Up") name = "ArrowUp";
	  if (name == "Right") name = "ArrowRight";
	  if (name == "Down") name = "ArrowDown";
	  return name
	}

	const currentPlatform = typeof navigator == "undefined" ? "key"
	    : /Mac/.test(navigator.platform) ? "mac"
	        : /Win/.test(navigator.platform) ? "win"
	            : /Linux|X11/.test(navigator.platform) ? "linux"
	                : "key";
	function normalizeKeyName(name, platform) {
	    const parts = name.split(/-(?!$)/);
	    let result = parts[parts.length - 1];
	    if (result == "Space")
	        result = " ";
	    let alt, ctrl, shift, meta;
	    for (let i = 0; i < parts.length - 1; ++i) {
	        const mod = parts[i];
	        if (/^(cmd|meta|m)$/i.test(mod))
	            meta = true;
	        else if (/^a(lt)?$/i.test(mod))
	            alt = true;
	        else if (/^(c|ctrl|control)$/i.test(mod))
	            ctrl = true;
	        else if (/^s(hift)?$/i.test(mod))
	            shift = true;
	        else if (/^mod$/i.test(mod)) {
	            if (platform == "mac")
	                meta = true;
	            else
	                ctrl = true;
	        }
	        else
	            throw new Error("Unrecognized modifier name: " + mod);
	    }
	    if (alt)
	        result = "Alt-" + result;
	    if (ctrl)
	        result = "Ctrl-" + result;
	    if (meta)
	        result = "Meta-" + result;
	    if (shift)
	        result = "Shift-" + result;
	    return result;
	}
	function modifiers(name, event, shift) {
	    if (event.altKey)
	        name = "Alt-" + name;
	    if (event.ctrlKey)
	        name = "Ctrl-" + name;
	    if (event.metaKey)
	        name = "Meta-" + name;
	    if (shift !== false && event.shiftKey)
	        name = "Shift-" + name;
	    return name;
	}
	const keymaps = Facet.define();
	const handleKeyEvents = EditorView.domEventHandlers({
	    keydown(event, view) {
	        return runHandlers(view.state.facet(keymaps), event, view, "editor");
	    }
	});
	/// Create a view extension that registers a keymap.
	///
	/// You can add multiple keymap extensions to an editor. Their
	/// priorities determine their precedence (the ones specified early or
	/// with high priority get checked first). When a handler has returned
	/// `true` for a given key, no further handlers are called.
	///
	/// When a key is bound multiple times (either in a single keymap or
	/// in separate maps), the bound commands all get a chance to handle
	/// the key stroke, in order of precedence, until one of them returns
	/// true.
	function keymap(bindings, platform) {
	    return [handleKeyEvents, keymaps.of(buildKeymap(bindings, platform))];
	}
	/// Run the key handlers registered for a given scope. Returns true if
	/// any of them handled the event.
	function runScopeHandlers(view, event, scope) {
	    return runHandlers(view.state.facet(keymaps), event, view, scope);
	}
	let storedPrefix = null;
	const PrefixTimeout = 4000;
	function buildKeymap(bindings, platform = currentPlatform) {
	    let bound = Object.create(null);
	    let isPrefix = Object.create(null);
	    let checkPrefix = (name, is) => {
	        let current = isPrefix[name];
	        if (current == null)
	            isPrefix[name] = is;
	        else if (current != is)
	            throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
	    };
	    let add = (scope, key, command, preventDefault) => {
	        let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
	        let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
	        for (let i = 1; i < parts.length; i++) {
	            let prefix = parts.slice(0, i).join(" ");
	            checkPrefix(prefix, true);
	            if (!scopeObj[prefix])
	                scopeObj[prefix] = {
	                    preventDefault: true,
	                    commands: [(view) => {
	                            let ourObj = storedPrefix = { view, prefix, scope };
	                            setTimeout(() => { if (storedPrefix == ourObj)
	                                storedPrefix = null; }, PrefixTimeout);
	                            return true;
	                        }]
	                };
	        }
	        let full = parts.join(" ");
	        checkPrefix(full, false);
	        let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
	        binding.commands.push(command);
	        if (preventDefault)
	            binding.preventDefault = true;
	    };
	    for (let b of bindings) {
	        let name = b[platform] || b.key;
	        if (!name)
	            continue;
	        for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
	            add(scope, name, b.run, b.preventDefault);
	            if (b.shift)
	                add(scope, "Shift-" + name, b.shift, b.preventDefault);
	        }
	    }
	    return bound;
	}
	function runHandlers(maps, event, view, scope) {
	    let name = keyName(event), isChar = name.length == 1 && name != " ";
	    let prefix = "";
	    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
	        prefix = storedPrefix.prefix + " ";
	        storedPrefix = null;
	    }
	    let fallthrough = !!prefix;
	    let runFor = (binding) => {
	        if (binding) {
	            for (let cmd of binding.commands)
	                if (cmd(view))
	                    return true;
	            if (binding.preventDefault)
	                fallthrough = true;
	        }
	        return false;
	    };
	    for (let map of maps) {
	        let scopeObj = map[scope], baseName;
	        if (!scopeObj)
	            continue;
	        if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
	            return true;
	        if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&
	            (baseName = base[event.keyCode]) && baseName != name) {
	            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
	                return true;
	        }
	        else if (isChar && event.shiftKey) {
	            if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
	                return true;
	        }
	    }
	    return fallthrough;
	}

	const Specials = /[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b-\u200c\u200e\u200f\u2028\u2029\ufeff\ufff9-\ufffc]/gu;
	const Names = {
	    0: "null",
	    7: "bell",
	    8: "backspace",
	    10: "newline",
	    11: "vertical tab",
	    13: "carriage return",
	    27: "escape",
	    8203: "zero width space",
	    8204: "zero width non-joiner",
	    8205: "zero width joiner",
	    8206: "left-to-right mark",
	    8207: "right-to-left mark",
	    8232: "line separator",
	    8233: "paragraph separator",
	    65279: "zero width no-break space",
	    65532: "object replacement"
	};
	const specialCharConfig = Facet.define({
	    combine(configs) {
	        // FIXME make configurations compose properly
	        let config = combineConfig(configs, {
	            render: null,
	            specialChars: Specials,
	            addSpecialChars: null
	        });
	        let styles = document.body.style;
	        config.replaceTabs = (styles.tabSize || styles.MozTabSize) == null;
	        if (config.replaceTabs)
	            config.specialChars = new RegExp("\t|" + config.specialChars.source, "gu");
	        if (config.addSpecialChars)
	            config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, "gu");
	        return config;
	    }
	});
	/// Returns an extension that installs highlighting of special
	/// characters.
	function specialChars(config = {}) {
	    return [specialCharConfig.of(config), specialCharPlugin, styleExt];
	}
	const specialCharPlugin = ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.decorations = Decoration.none;
	        this.decorationCache = Object.create(null);
	        this.recompute();
	    }
	    update(update) {
	        let confChange = update.prevState.facet(specialCharConfig) != update.state.facet(specialCharConfig);
	        if (confChange)
	            this.decorationCache = Object.create(null);
	        if (confChange || update.changes.length || update.viewportChanged)
	            this.recompute();
	    }
	    recompute() {
	        let decorations = [];
	        for (let { from, to } of this.view.visibleRanges)
	            this.getDecorationsFor(from, to, decorations);
	        this.decorations = Decoration.set(decorations);
	    }
	    getDecorationsFor(from, to, target) {
	        let config = this.view.state.facet(specialCharConfig);
	        let { doc } = this.view.state;
	        for (let pos = from, cursor = doc.iterRange(from, to), m; !cursor.next().done;) {
	            if (!cursor.lineBreak) {
	                while (m = config.specialChars.exec(cursor.value)) {
	                    let code = m[0].codePointAt ? m[0].codePointAt(0) : m[0].charCodeAt(0), deco;
	                    if (code == null)
	                        continue;
	                    if (code == 9) {
	                        let line = doc.lineAt(pos + m.index);
	                        let size = this.view.state.tabSize, col = countColumn(doc.sliceString(line.start, pos + m.index), 0, size);
	                        deco = Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });
	                    }
	                    else {
	                        deco = this.decorationCache[code] ||
	                            (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(config, code) }));
	                    }
	                    target.push(deco.range(pos + m.index, pos + m.index + m[0].length));
	                }
	            }
	            pos += cursor.value.length;
	        }
	    }
	}).decorations();
	// Assigns placeholder characters from the Control Pictures block to
	// ASCII control characters
	function placeHolder(code) {
	    if (code >= 32)
	        return null;
	    if (code == 10)
	        return "\u2424";
	    return String.fromCharCode(9216 + code);
	}
	const DefaultPlaceholder = "\u2022";
	class SpecialCharWidget extends WidgetType {
	    constructor(options, code) {
	        super(code);
	        this.options = options;
	    }
	    toDOM() {
	        let ph = placeHolder(this.value) || DefaultPlaceholder;
	        let desc = "Control character " + (Names[this.value] || this.value);
	        let custom = this.options.render && this.options.render(this.value, desc, ph);
	        if (custom)
	            return custom;
	        let span = document.createElement("span");
	        span.textContent = ph;
	        span.title = desc;
	        span.setAttribute("aria-label", desc);
	        span.style.color = "red";
	        return span;
	    }
	    ignoreEvent() { return false; }
	}
	class TabWidget extends WidgetType {
	    toDOM() {
	        let span = document.createElement("span");
	        span.textContent = "\t";
	        span.className = style.tab;
	        span.style.width = this.value + "px";
	        return span;
	    }
	    ignoreEvent() { return false; }
	}
	const style = new StyleModule({
	    tab: {
	        display: "inline-block",
	        overflow: "hidden",
	        verticalAlign: "bottom"
	    }
	});
	const styleExt = EditorView.styleModule.of(style);

	const panelConfig = Facet.define({
	    combine(configs) {
	        let topContainer, bottomContainer;
	        for (let c of configs) {
	            topContainer = topContainer || c.topContainer;
	            bottomContainer = bottomContainer || c.bottomContainer;
	        }
	        return { topContainer, bottomContainer };
	    }
	});
	/// Enables the panel-managing extension.
	function panels(config) {
	    let ext = [panelPlugin, baseTheme$4];
	    if (config)
	        ext.push(panelConfig.of(config));
	    return ext;
	}
	/// Opening a panel is done by providing an object describing the
	/// panel through this facet.
	const showPanel = Facet.define();
	/// Get the active panel created by the given constructor, if any.
	/// This can be useful when you need access to your panels' DOM
	/// structure.
	function getPanel(view, panel) {
	    let plugin = view.plugin(panelPlugin);
	    let index = view.state.facet(showPanel).indexOf(panel);
	    return plugin && index > -1 ? plugin.panels[index] : null;
	}
	const panelPlugin = ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.specs = view.state.facet(showPanel);
	        this.panels = this.specs.map(spec => spec(view));
	        let conf = view.state.facet(panelConfig);
	        this.top = new PanelGroup(view, true, conf.topContainer);
	        this.bottom = new PanelGroup(view, false, conf.bottomContainer);
	        this.top.sync(this.panels.filter(p => p.top));
	        this.bottom.sync(this.panels.filter(p => !p.top));
	        for (let p of this.panels) {
	            p.dom.className += " " + panelClass(p);
	            if (p.mount)
	                p.mount();
	        }
	    }
	    update(update) {
	        let conf = update.state.facet(panelConfig);
	        if (this.top.container != conf.topContainer) {
	            this.top.sync([]);
	            this.top = new PanelGroup(update.view, true, conf.topContainer);
	        }
	        if (this.bottom.container != conf.bottomContainer) {
	            this.bottom.sync([]);
	            this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
	        }
	        this.top.syncClasses();
	        this.bottom.syncClasses();
	        let specs = update.state.facet(showPanel);
	        if (specs != this.specs) {
	            let panels = [], top = [], bottom = [], mount = [];
	            for (let spec of specs) {
	                let known = this.specs.indexOf(spec), panel;
	                if (known < 0) {
	                    panel = spec(update.view);
	                    mount.push(panel);
	                }
	                else {
	                    panel = this.panels[known];
	                    if (panel.update)
	                        panel.update(update);
	                }
	                panels.push(panel);
	                (panel.top ? top : bottom).push(panel);
	            }
	            this.specs = specs;
	            this.panels = panels;
	            this.top.sync(top);
	            this.bottom.sync(bottom);
	            for (let p of mount) {
	                p.dom.className += " " + panelClass(p);
	                if (p.mount)
	                    p.mount();
	            }
	        }
	        else {
	            for (let p of this.panels)
	                if (p.update)
	                    p.update(update);
	        }
	    }
	    destroy() {
	        this.top.sync([]);
	        this.bottom.sync([]);
	    }
	}).provide(PluginField.scrollMargins, value => ({ top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() }));
	function panelClass(panel) {
	    return themeClass(panel.style ? `panel.${panel.style}` : "panel");
	}
	class PanelGroup {
	    constructor(view, top, container) {
	        this.view = view;
	        this.top = top;
	        this.container = container;
	        this.dom = undefined;
	        this.classes = "";
	        this.panels = [];
	        this.syncClasses();
	    }
	    sync(panels) {
	        this.panels = panels;
	        this.syncDOM();
	    }
	    syncDOM() {
	        if (this.panels.length == 0) {
	            if (this.dom) {
	                this.dom.remove();
	                this.dom = undefined;
	            }
	            return;
	        }
	        if (!this.dom) {
	            this.dom = document.createElement("div");
	            this.dom.className = themeClass(this.top ? "panels.top" : "panels.bottom");
	            this.dom.style[this.top ? "top" : "bottom"] = "0";
	            let parent = this.container || this.view.dom;
	            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
	        }
	        let curDOM = this.dom.firstChild;
	        for (let panel of this.panels) {
	            if (panel.dom.parentNode == this.dom) {
	                while (curDOM != panel.dom)
	                    curDOM = rm$1(curDOM);
	                curDOM = curDOM.nextSibling;
	            }
	            else {
	                this.dom.insertBefore(panel.dom, curDOM);
	            }
	        }
	        while (curDOM)
	            curDOM = rm$1(curDOM);
	    }
	    scrollMargin() {
	        return !this.dom || this.container ? 0
	            : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - this.view.scrollDOM.getBoundingClientRect().top
	                : this.view.scrollDOM.getBoundingClientRect().bottom - this.dom.getBoundingClientRect().top);
	    }
	    syncClasses() {
	        if (!this.container || this.classes == this.view.themeClasses)
	            return;
	        for (let cls of this.classes.split(" "))
	            if (cls)
	                this.container.classList.remove(cls);
	        for (let cls of (this.classes = this.view.themeClasses).split(" "))
	            if (cls)
	                this.container.classList.add(cls);
	    }
	}
	function rm$1(node) {
	    let next = node.nextSibling;
	    node.remove();
	    return next;
	}
	const baseTheme$4 = EditorView.baseTheme({
	    panels: {
	        boxSizing: "border-box",
	        position: "sticky",
	        left: 0,
	        right: 0,
	        "& input, & button": {
	            verticalAlign: "middle",
	            color: "inherit",
	            backgroundColor: "inherit",
	            fontSize: "70%"
	        },
	        "& button": {
	            padding: ".2em 1em",
	            borderRadius: "3px"
	        },
	        "& input": {
	            border: "1px solid silver",
	            padding: ".2em .5em"
	        }
	    },
	    "panels@light": {
	        backgroundColor: "#f5f5f5",
	        color: "black",
	        "& button": {
	            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
	            border: "1px solid #888",
	            "&:active": {
	                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
	            }
	        }
	    },
	    "panels.top@light": {
	        borderBottom: "1px solid silver"
	    },
	    "panels.bottom@light": {
	        borderTop: "1px solid silver"
	    },
	    "panels@dark": {
	        backgroundColor: "#333338",
	        color: "white",
	        "& button": {
	            backgroundImage: "linear-gradient(#555, #111)",
	            border: "1px solid #888",
	            "&:active": {
	                backgroundImage: "linear-gradient(#111, #333)"
	            }
	        },
	        "& input": {
	            border: "1px solid #555"
	        }
	    }
	});

	const basicNormalize = String.prototype.normalize ? x => x.normalize("NFKD") : x => x;
	/// A search cursor provides an iterator over text matches in a
	/// document.
	class SearchCursor {
	    /// Create a text cursor. The query is the search string, `from` to
	    /// `to` provides the region to search.
	    ///
	    /// When `normalize` is given, it will be called, on both the query
	    /// string and the content it is matched against, before comparing.
	    /// You can, for example, create a case-insensitive search by
	    /// passing `s => s.toLowerCase()`.
	    ///
	    /// Text is always normalized with
	    /// [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
	    /// (when supported).
	    constructor(text, query, from = 0, to = text.length, normalize) {
	        /// The current match (only holds a meaningful value after
	        /// [`next`](#search.SearchCursor.next) has been called and when
	        /// `done` is false).
	        this.value = { from: 0, to: 0 };
	        /// Whether the end of the iterated region has been reached.
	        this.done = false;
	        this.matches = [];
	        this.buffer = "";
	        this.bufferPos = 0;
	        this.iter = text.iterRange(from, to);
	        this.bufferStart = from;
	        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
	        this.query = this.normalize(query);
	    }
	    peek() {
	        if (this.bufferPos == this.buffer.length) {
	            this.bufferStart += this.buffer.length;
	            this.iter.next();
	            if (this.iter.done)
	                return -1;
	            this.bufferPos = 0;
	            this.buffer = this.iter.value;
	        }
	        return this.buffer.charCodeAt(this.bufferPos);
	    }
	    /// Look for the next match. Updates the iterator's
	    /// [`value`](#search.SearchCursor.value) and
	    /// [`done`](#search.SearchCursor.done) properties. Should be called
	    /// at least once before using the cursor.
	    next() {
	        for (;;) {
	            let next = this.peek();
	            if (next < 0) {
	                this.done = true;
	                return this;
	            }
	            let str = String.fromCharCode(next), start = this.bufferStart + this.bufferPos;
	            this.bufferPos++;
	            for (;;) {
	                let peek = this.peek();
	                if (peek < 0xDC00 || peek >= 0xE000)
	                    break;
	                this.bufferPos++;
	                str += String.fromCharCode(peek);
	            }
	            let norm = this.normalize(str);
	            for (let i = 0, pos = start;; i++) {
	                let code = norm.charCodeAt(i);
	                let match = this.match(code, pos);
	                if (match) {
	                    this.value = match;
	                    return this;
	                }
	                if (i == norm.length - 1)
	                    break;
	                if (pos == start && i < str.length && str.charCodeAt(i) == code)
	                    pos++;
	            }
	        }
	    }
	    match(code, pos) {
	        let match = null;
	        for (let i = 0; i < this.matches.length; i += 2) {
	            let index = this.matches[i], keep = false;
	            if (this.query.charCodeAt(index) == code) {
	                if (index == this.query.length - 1) {
	                    match = { from: this.matches[i + 1], to: pos + 1 };
	                }
	                else {
	                    this.matches[i]++;
	                    keep = true;
	                }
	            }
	            if (!keep) {
	                this.matches.splice(i, 2);
	                i -= 2;
	            }
	        }
	        if (this.query.charCodeAt(0) == code) {
	            if (this.query.length == 1)
	                match = { from: pos, to: pos + 1 };
	            else
	                this.matches.push(1, pos);
	        }
	        return match;
	    }
	}

	class Query {
	    constructor(search, replace, caseInsensitive) {
	        this.search = search;
	        this.replace = replace;
	        this.caseInsensitive = caseInsensitive;
	    }
	    eq(other) {
	        return this.search == other.search && this.replace == other.replace && this.caseInsensitive == other.caseInsensitive;
	    }
	    cursor(doc, from = 0, to = doc.length) {
	        return new SearchCursor(doc, this.search, from, to, this.caseInsensitive ? x => x.toLowerCase() : undefined);
	    }
	    get valid() { return !!this.search; }
	}
	const setQuery = StateEffect.define();
	const togglePanel = StateEffect.define();
	const searchState = StateField.define({
	    create() {
	        return new SearchState(new Query("", "", false), []);
	    },
	    update(value, tr) {
	        for (let effect of tr.effects) {
	            if (effect.is(setQuery))
	                value = new SearchState(effect.value, value.panel);
	            else if (effect.is(togglePanel))
	                value = new SearchState(value.query, effect.value ? [createSearchPanel] : []);
	        }
	        return value;
	    },
	    provide: [showPanel.nFrom(s => s.panel)]
	});
	class SearchState {
	    constructor(query, panel) {
	        this.query = query;
	        this.panel = panel;
	    }
	}
	const matchMark = Decoration.mark({ class: themeClass("searchMatch") }), selectedMatchMark = Decoration.mark({ class: themeClass("searchMatch.selected") });
	const searchHighlighter = ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.decorations = this.highlight(view.state.field(searchState));
	    }
	    update(update) {
	        let state = update.state.field(searchState);
	        if (state != update.prevState.field(searchState) || update.docChanged || update.selectionSet)
	            this.decorations = this.highlight(state);
	    }
	    highlight({ query, panel }) {
	        if (!panel.length || !query.valid)
	            return Decoration.none;
	        let state = this.view.state, viewport = this.view.viewport;
	        let cursor = query.cursor(state.doc, Math.max(0, viewport.from - query.search.length), Math.min(viewport.to + query.search.length, state.doc.length));
	        let builder = new RangeSetBuilder();
	        while (!cursor.next().done) {
	            let { from, to } = cursor.value;
	            let selected = state.selection.ranges.some(r => r.from == from && r.to == to);
	            builder.add(from, to, selected ? selectedMatchMark : matchMark);
	        }
	        return builder.finish();
	    }
	}).decorations();
	function searchCommand(f) {
	    return view => {
	        let state = view.state.field(searchState, false);
	        return state && state.query.valid ? f(view, state) : openSearchPanel(view);
	    };
	}
	function findNextMatch(doc, from, query) {
	    let cursor = query.cursor(doc, from).next();
	    if (cursor.done) {
	        cursor = query.cursor(doc, 0, from + query.search.length - 1).next();
	        if (cursor.done)
	            return null;
	    }
	    return cursor.value;
	}
	/// Open the search panel if it isn't already open, and move the
	/// selection to the first match after the current primary selection.
	/// Will wrap around to the start of the document when it reaches the
	/// end.
	const findNext = searchCommand((view, state) => {
	    let { from, to } = view.state.selection.primary;
	    let next = findNextMatch(view.state.doc, view.state.selection.primary.from + 1, state.query);
	    if (!next || next.from == from && next.to == to)
	        return false;
	    view.dispatch(view.state.update({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true }));
	    maybeAnnounceMatch(view);
	    return true;
	});
	const FindPrevChunkSize = 10000;
	// Searching in reverse is, rather than implementing inverted search
	// cursor, done by scanning chunk after chunk forward.
	function findPrevInRange(query, doc, from, to) {
	    for (let pos = to;;) {
	        let start = Math.max(from, pos - FindPrevChunkSize - query.search.length);
	        let cursor = query.cursor(doc, start, pos), range = null;
	        while (!cursor.next().done)
	            range = cursor.value;
	        if (range)
	            return range;
	        if (start == from)
	            return null;
	        pos -= FindPrevChunkSize;
	    }
	}
	/// Move the selection to the previous instance of the search query,
	/// before the current primary selection. Will wrap past the start
	/// of the document to start searching at the end again.
	const findPrevious = searchCommand((view, { query }) => {
	    let { state } = view;
	    let range = findPrevInRange(query, state.doc, 0, state.selection.primary.to - 1) ||
	        findPrevInRange(query, state.doc, state.selection.primary.from + 1, state.doc.length);
	    if (!range)
	        return false;
	    view.dispatch(state.update({ selection: { anchor: range.from, head: range.to }, scrollIntoView: true }));
	    maybeAnnounceMatch(view);
	    return true;
	});
	/// Select all instances of the search query.
	const selectMatches = searchCommand((view, { query }) => {
	    let cursor = query.cursor(view.state.doc), ranges = [];
	    while (!cursor.next().done)
	        ranges.push(EditorSelection.range(cursor.value.from, cursor.value.to));
	    if (!ranges.length)
	        return false;
	    view.dispatch(view.state.update({ selection: EditorSelection.create(ranges) }));
	    return true;
	});
	/// Replace the current match of the search query.
	const replaceNext = searchCommand((view, { query }) => {
	    let { state } = view, next = findNextMatch(state.doc, state.selection.primary.from, query);
	    if (!next)
	        return false;
	    let { from, to } = state.selection.primary, changes = [], selection;
	    if (next.from == from && next.to == to) {
	        changes.push({ from: next.from, to: next.to, insert: query.replace });
	        next = findNextMatch(state.doc, next.to, query);
	    }
	    if (next) {
	        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - query.replace.length;
	        selection = { anchor: next.from - off, head: next.to - off };
	    }
	    view.dispatch(state.update({ changes, selection, scrollIntoView: !!selection }));
	    if (next)
	        maybeAnnounceMatch(view);
	    return true;
	});
	/// Replace all instances of the search query with the given
	/// replacement.
	const replaceAll = searchCommand((view, { query }) => {
	    let cursor = query.cursor(view.state.doc), changes = [];
	    while (!cursor.next().done) {
	        let { from, to } = cursor.value;
	        changes.push({ from, to, insert: query.replace });
	    }
	    if (!changes.length)
	        return false;
	    view.dispatch(view.state.update({ changes }));
	    return true;
	});
	function createSearchPanel(view) {
	    let { query } = view.state.field(searchState);
	    return {
	        dom: buildPanel({
	            view,
	            query,
	            updateQuery(q) {
	                if (!query.eq(q)) {
	                    query = q;
	                    view.dispatch(view.state.update({ effects: setQuery.of(query) }));
	                }
	            }
	        }),
	        mount() {
	            this.dom.querySelector("[name=search]").select();
	        },
	        pos: 80,
	        style: "search"
	    };
	}
	const tag = typeof Symbol == "function" ? Symbol("search") : "__search-tag";
	/// Make sure the search panel is open and focused.
	const openSearchPanel = view => {
	    let state = view.state.field(searchState, false);
	    if (state && state.panel.length)
	        return false;
	    view.dispatch(view.state.update({ effects: togglePanel.of(true),
	        replaceExtensions: state ? undefined : { [tag]: searchExtensions } }));
	    return true;
	};
	/// Close the search panel.
	const closeSearchPanel = view => {
	    let state = view.state.field(searchState, false);
	    if (!state || !state.panel.length)
	        return false;
	    let panel = getPanel(view, createSearchPanel);
	    if (panel && panel.dom.contains(view.root.activeElement))
	        view.focus();
	    view.dispatch(view.state.update({ effects: togglePanel.of(false) }));
	    return true;
	};
	function elt(name, props = null, children = []) {
	    let e = document.createElement(name);
	    if (props)
	        for (let prop in props) {
	            let value = props[prop];
	            if (typeof value == "string")
	                e.setAttribute(prop, value);
	            else
	                e[prop] = value;
	        }
	    for (let child of children)
	        e.appendChild(typeof child == "string" ? document.createTextNode(child) : child);
	    return e;
	}
	// FIXME sync when search state changes independently
	function buildPanel(conf) {
	    function p(phrase) { return conf.view.state.phrase(phrase); }
	    let searchField = elt("input", {
	        value: conf.query.search,
	        placeholder: p("Find"),
	        "aria-label": p("Find"),
	        name: "search",
	        onchange: update,
	        onkeyup: update
	    });
	    let replaceField = elt("input", {
	        value: conf.query.replace,
	        placeholder: p("Replace"),
	        "aria-label": p("Replace"),
	        name: "replace",
	        onchange: update,
	        onkeyup: update
	    });
	    let caseField = elt("input", {
	        type: "checkbox",
	        name: "case",
	        checked: !conf.query.caseInsensitive,
	        onchange: update
	    });
	    function update() {
	        conf.updateQuery(new Query(searchField.value, replaceField.value, !caseField.checked));
	    }
	    function keydown(e) {
	        if (runScopeHandlers(conf.view, e, "search-panel")) {
	            e.preventDefault();
	        }
	        else if (e.keyCode == 27) {
	            e.preventDefault();
	            closeSearchPanel(conf.view);
	        }
	        else if (e.keyCode == 13 && e.target == searchField) {
	            e.preventDefault();
	            (e.shiftKey ? findPrevious : findNext)(conf.view);
	        }
	        else if (e.keyCode == 13 && e.target == replaceField) {
	            e.preventDefault();
	            replaceNext(conf.view);
	        }
	    }
	    let panel = elt("div", { onkeydown: keydown }, [
	        searchField,
	        elt("button", { name: "next", onclick: () => findNext(conf.view) }, [p("next")]),
	        elt("button", { name: "prev", onclick: () => findPrevious(conf.view) }, [p("previous")]),
	        elt("button", { name: "select", onclick: () => selectMatches(conf.view) }, [p("all")]),
	        elt("label", null, [caseField, "match case"]),
	        elt("br"),
	        replaceField,
	        elt("button", { name: "replace", onclick: () => replaceNext(conf.view) }, [p("replace")]),
	        elt("button", { name: "replaceAll", onclick: () => replaceAll(conf.view) }, [p("replace all")]),
	        elt("button", { name: "close", onclick: () => closeSearchPanel(conf.view), "aria-label": p("close") }, ["×"]),
	        elt("div", { style: "position: absolute; top: -10000px", "aria-live": "polite" })
	    ]);
	    return panel;
	}
	const AnnounceMargin = 30;
	const Break = /[\s\.,:;?!]/;
	// FIXME this is a kludge
	function maybeAnnounceMatch(view) {
	    let { from, to } = view.state.selection.primary;
	    let lineStart = view.state.doc.lineAt(from).start, lineEnd = view.state.doc.lineAt(to).end;
	    let start = Math.max(lineStart, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
	    let text = view.state.sliceDoc(start, end);
	    if (start != lineStart) {
	        for (let i = 0; i < AnnounceMargin; i++)
	            if (!Break.test(text[i + 1]) && Break.test(text[i])) {
	                text = text.slice(i);
	                break;
	            }
	    }
	    if (end != lineEnd) {
	        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
	            if (!Break.test(text[i - 1]) && Break.test(text[i])) {
	                text = text.slice(0, i);
	                break;
	            }
	    }
	    let panel = getPanel(view, createSearchPanel);
	    if (!panel || !panel.dom.contains(view.root.activeElement))
	        return;
	    let live = panel.dom.querySelector("div[aria-live]");
	    live.textContent = view.state.phrase("current match") + ". " + text;
	}
	const baseTheme$5 = EditorView.baseTheme({
	    "panel.search": {
	        padding: "2px 6px 4px",
	        position: "relative",
	        "& [name=close]": {
	            position: "absolute",
	            top: "0",
	            right: "4px",
	            backgroundColor: "inherit",
	            border: "none",
	            font: "inherit",
	            padding: 0,
	            margin: 0
	        },
	        "& input, & button": {
	            margin: ".2em .5em .2em 0"
	        },
	        "& label": {
	            fontSize: "80%"
	        }
	    },
	    "searchMatch@light": { backgroundColor: "#ffa" },
	    "searchMatch@dark": { backgroundColor: "#088" },
	    "searchMatch.selected@light": { backgroundColor: "#fca" },
	    "searchMatch.selected@dark": { backgroundColor: "#808" }
	});
	const searchExtensions = [
	    searchState,
	    searchHighlighter,
	    panels(),
	    baseTheme$5
	];

	/// Mark lines that have a cursor on them with the \`activeLine\`
	/// theme selector.
	function highlightActiveLine() {
	    return [defaultTheme, activeLineHighlighter];
	}
	const lineDeco = Decoration.line({ attributes: { class: themeClass("activeLine") } });
	const activeLineHighlighter = ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.decorations = this.getDeco(view);
	    }
	    update(update) {
	        if (update.docChanged || update.selectionSet)
	            this.decorations = this.getDeco(update.view);
	    }
	    getDeco(view) {
	        let lastLineStart = -1, deco = [];
	        for (let r of view.state.selection.ranges) {
	            if (!r.empty)
	                continue;
	            let line = view.lineAt(r.head, 0);
	            if (line.from > lastLineStart) {
	                deco.push(lineDeco.range(line.from));
	                lastLineStart = line.from;
	            }
	        }
	        return Decoration.set(deco);
	    }
	}).decorations();
	const defaultHighlightOptions = {
	    highlightWordAroundCursor: false,
	    minSelectionLength: 1,
	    maxMatches: 100
	};
	const highlightConfig = Facet.define({
	    combine(options) {
	        return combineConfig(options, defaultHighlightOptions, {
	            highlightWordAroundCursor: (a, b) => a || b,
	            minSelectionLength: Math.min,
	            maxMatches: Math.min
	        });
	    }
	});
	/// This extension highlights text that matches the selection. It uses
	/// the `selectionMatch` theme selector for the highlighting. When
	/// `highlightWordAroundCursor` is enabled, the word at the cursor
	/// itself will be highlighted with `selectionMatch.main`.
	function highlightSelectionMatches(options) {
	    let ext = [defaultTheme, matchHighlighter];
	    if (options)
	        ext.push(highlightConfig.of(options));
	    return ext;
	}
	function wordAt(doc, pos, check) {
	    let line = doc.lineAt(pos);
	    let from = pos - line.start, to = pos - line.start;
	    while (from > 0) {
	        let prev = line.findClusterBreak(from, false);
	        if (check(line.slice(prev, from)) != CharCategory.Word)
	            break;
	        from = prev;
	    }
	    while (to < line.length) {
	        let next = line.findClusterBreak(to, true);
	        if (check(line.slice(to, next)) != CharCategory.Word)
	            break;
	        to = next;
	    }
	    return from == to ? null : line.slice(from, to);
	}
	const matchDeco = Decoration.mark({ class: themeClass("selectionMatch") });
	const mainMatchDeco = Decoration.mark({ class: themeClass("selectionMatch.main") });
	const matchHighlighter = ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.decorations = this.getDeco(view);
	    }
	    update(update) {
	        if (update.selectionSet || update.docChanged)
	            this.decorations = this.getDeco(update.view);
	    }
	    getDeco(view) {
	        let conf = view.state.facet(highlightConfig);
	        let { state } = view, sel = state.selection;
	        if (sel.ranges.length > 1)
	            return Decoration.none;
	        let range = sel.primary, query, check = null;
	        if (range.empty) {
	            if (!conf.highlightWordAroundCursor)
	                return Decoration.none;
	            check = state.charCategorizer(range.head);
	            query = wordAt(state.doc, range.head, check);
	            if (!query)
	                return Decoration.none;
	        }
	        else {
	            let len = range.to - range.from;
	            if (len < conf.minSelectionLength || len > 200)
	                return Decoration.none;
	            query = state.sliceDoc(range.from, range.to).trim();
	            if (!query)
	                return Decoration.none;
	        }
	        let deco = [];
	        for (let part of view.visibleRanges) {
	            let cursor = new SearchCursor(state.doc, query, part.from, part.to);
	            while (!cursor.next().done) {
	                let { from, to } = cursor.value;
	                if (!check || ((from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
	                    (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word))) {
	                    if (check && from <= range.from && to >= range.to)
	                        deco.push(mainMatchDeco.range(from, to));
	                    else if (from >= range.to || to <= range.from)
	                        deco.push(matchDeco.range(from, to));
	                    if (deco.length > conf.maxMatches)
	                        return Decoration.none;
	                }
	            }
	        }
	        return Decoration.set(deco);
	    }
	}).decorations();
	const defaultTheme = EditorView.baseTheme({
	    "activeLine@light": { backgroundColor: "#e8f2ff" },
	    "activeLine@dark": { backgroundColor: "#223039" },
	    "selectionMatch": { backgroundColor: "#cfb" }
	});

	const chalky = "#e5c07b", coral = "#e06c75", dark = "#5c6370", fountainBlue = "#56b6c2", green = "#98c379", invalid = "#ffffff", lightDark = "#7f848e", lightWhite = "#abb2bf", malibu = "#61afef", purple = "#c678dd", whiskey = "#d19a66", background = "#282c34", selection = "#405948", cursor = "#528bff";
	const oneDarkTheme = EditorView.theme({
	    wrap: {
	        color: lightWhite,
	        backgroundColor: background,
	        "& ::selection": { backgroundColor: selection },
	        caretColor: cursor
	    },
	    secondaryCursor: { borderLeft: `1.4px solid ${cursor}` },
	    secondarySelection: { backgroundColor: selection },
	    panels: { backgroundColor: background, color: lightWhite },
	    "panels.top": { borderBottom: "2px solid black" },
	    "panels.bottom": { borderTop: "2px solid black" },
	    searchMatch: {
	        backgroundColor: "#42557b",
	        border: "1px solid #457dff"
	    },
	    "searchMatch.selected": {
	        backgroundColor: "#6199ff2f"
	    },
	    activeLine: { backgroundColor: "#2c313c" },
	    selectionMatch: { backgroundColor: "#354139" },
	    "matchingBracket, nonmatchingBracket": {
	        backgroundColor: "#515a6b",
	        border: "1px solid #515a6b"
	    },
	    gutters: {
	        backgroundColor: background,
	        color: "#495162",
	        border: "none"
	    },
	    "gutterElement.lineNumber": { color: "inherit" },
	    foldPlaceholder: {
	        backgroundColor: "none",
	        border: "none",
	        color: "#ddd"
	    },
	    tooltip: {
	        border: "1px solid #181a1f",
	        backgroundColor: "#606862"
	    },
	    "tooltip.autocomplete": {
	        "& > li[aria-selected]": { backgroundColor: background }
	    }
	}, { dark: true });
	const oneDarkHighlighter = highlighter({
	    invalid: { color: invalid },
	    comment: { color: lightDark },
	    keyword: { color: purple },
	    "name, deleted": { color: coral },
	    "operator, operatorKeyword, regexp": { color: fountainBlue },
	    "string, inserted": { color: green },
	    propertyName: { color: malibu },
	    "color, name constant, name standard": { color: whiskey },
	    "name definition": { color: lightWhite },
	    "typeName, className, number, changed": { color: chalky },
	    "meta": { color: dark },
	    strong: { fontWeight: "bold" },
	    emphasis: { fontStyle: "italic" },
	    link: { color: dark, textDecoration: "underline" },
	    heading: { fontWeight: "bold", color: coral }
	});
	/// Extension to enable the One Dark theme.
	const oneDark = [oneDarkTheme, oneDarkHighlighter];

	// Reserved word lists for various dialects of the language

	var reservedWords = {
	  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
	  5: "class enum extends super const export import",
	  6: "enum",
	  strict: "implements interface let package private protected public static yield",
	  strictBind: "eval arguments"
	};

	// And the keywords

	var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

	var keywords = {
	  5: ecma5AndLessKeywords,
	  "5module": ecma5AndLessKeywords + " export import",
	  6: ecma5AndLessKeywords + " const class extends export import super"
	};

	var keywordRelationalOperator = /^in(stanceof)?$/;

	// ## Character categories

	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `bin/generate-identifier-regex.js`.
	var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
	var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";

	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by bin/generate-identifier-regex.js

	// eslint-disable-next-line comma-spacing
	var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];

	// eslint-disable-next-line comma-spacing
	var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];

	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) { return false }
	    pos += set[i + 1];
	    if (pos >= code) { return true }
	  }
	}

	// Test whether a given character code starts an identifier.

	function isIdentifierStart(code, astral) {
	  if (code < 65) { return code === 36 }
	  if (code < 91) { return true }
	  if (code < 97) { return code === 95 }
	  if (code < 123) { return true }
	  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }
	  if (astral === false) { return false }
	  return isInAstralSet(code, astralIdentifierStartCodes)
	}

	// Test whether a given character is part of an identifier.

	function isIdentifierChar(code, astral) {
	  if (code < 48) { return code === 36 }
	  if (code < 58) { return true }
	  if (code < 65) { return false }
	  if (code < 91) { return true }
	  if (code < 97) { return code === 95 }
	  if (code < 123) { return true }
	  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }
	  if (astral === false) { return false }
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
	}

	// ## Token types

	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.

	// All token type variables start with an underscore, to make them
	// easy to recognize.

	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// The `startsExpr` property is used to check if the token ends a
	// `yield` expression. It is set on all token types that either can
	// directly start an expression (like a quotation mark) or can
	// continue an expression (like the body of a string).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.

	var TokenType = function TokenType(label, conf) {
	  if ( conf === void 0 ) conf = {};

	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};

	function binop(name, prec) {
	  return new TokenType(name, {beforeExpr: true, binop: prec})
	}
	var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};

	// Map keyword names to token types.

	var keywords$1 = {};

	// Succinct definitions of keyword token types
	function kw(name, options) {
	  if ( options === void 0 ) options = {};

	  options.keyword = name;
	  return keywords$1[name] = new TokenType(name, options)
	}

	var types$1 = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),

	  // Punctuation token types.
	  bracketL: new TokenType("[", {beforeExpr: true, startsExpr: true}),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", {beforeExpr: true, startsExpr: true}),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", {beforeExpr: true, startsExpr: true}),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  questionDot: new TokenType("?."),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  invalidTemplate: new TokenType("invalidTemplate"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", {beforeExpr: true, startsExpr: true}),

	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.

	  eq: new TokenType("=", {beforeExpr: true, isAssign: true}),
	  assign: new TokenType("_=", {beforeExpr: true, isAssign: true}),
	  incDec: new TokenType("++/--", {prefix: true, postfix: true, startsExpr: true}),
	  prefix: new TokenType("!/~", {beforeExpr: true, prefix: true, startsExpr: true}),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=/===/!==", 6),
	  relational: binop("</>/<=/>=", 7),
	  bitShift: binop("<</>>/>>>", 8),
	  plusMin: new TokenType("+/-", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10),
	  starstar: new TokenType("**", {beforeExpr: true}),
	  coalesce: binop("??", 1),

	  // Keyword token types.
	  _break: kw("break"),
	  _case: kw("case", beforeExpr),
	  _catch: kw("catch"),
	  _continue: kw("continue"),
	  _debugger: kw("debugger"),
	  _default: kw("default", beforeExpr),
	  _do: kw("do", {isLoop: true, beforeExpr: true}),
	  _else: kw("else", beforeExpr),
	  _finally: kw("finally"),
	  _for: kw("for", {isLoop: true}),
	  _function: kw("function", startsExpr),
	  _if: kw("if"),
	  _return: kw("return", beforeExpr),
	  _switch: kw("switch"),
	  _throw: kw("throw", beforeExpr),
	  _try: kw("try"),
	  _var: kw("var"),
	  _const: kw("const"),
	  _while: kw("while", {isLoop: true}),
	  _with: kw("with"),
	  _new: kw("new", {beforeExpr: true, startsExpr: true}),
	  _this: kw("this", startsExpr),
	  _super: kw("super", startsExpr),
	  _class: kw("class", startsExpr),
	  _extends: kw("extends", beforeExpr),
	  _export: kw("export"),
	  _import: kw("import", startsExpr),
	  _null: kw("null", startsExpr),
	  _true: kw("true", startsExpr),
	  _false: kw("false", startsExpr),
	  _in: kw("in", {beforeExpr: true, binop: 7}),
	  _instanceof: kw("instanceof", {beforeExpr: true, binop: 7}),
	  _typeof: kw("typeof", {beforeExpr: true, prefix: true, startsExpr: true}),
	  _void: kw("void", {beforeExpr: true, prefix: true, startsExpr: true}),
	  _delete: kw("delete", {beforeExpr: true, prefix: true, startsExpr: true})
	};

	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.

	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	var lineBreakG = new RegExp(lineBreak.source, "g");

	function isNewLine(code, ecma2019String) {
	  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))
	}

	var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

	var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

	var ref = Object.prototype;
	var hasOwnProperty = ref.hasOwnProperty;
	var toString$2 = ref.toString;

	// Checks if an object has a property.

	function has$1(obj, propName) {
	  return hasOwnProperty.call(obj, propName)
	}

	var isArray$1 = Array.isArray || (function (obj) { return (
	  toString$2.call(obj) === "[object Array]"
	); });

	function wordsRegexp(words) {
	  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")
	}

	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.

	var Position = function Position(line, col) {
	  this.line = line;
	  this.column = col;
	};

	Position.prototype.offset = function offset (n) {
	  return new Position(this.line, this.column + n)
	};

	var SourceLocation = function SourceLocation(p, start, end) {
	  this.start = start;
	  this.end = end;
	  if (p.sourceFile !== null) { this.source = p.sourceFile; }
	};

	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.

	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    lineBreakG.lastIndex = cur;
	    var match = lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur)
	    }
	  }
	}

	// A second optional argument can be given to further configure
	// the parser process. These options are recognized:

	var defaultOptions = {
	  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
	  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10
	  // (2019). This influences support for strict mode, the set of
	  // reserved words, and support for new syntax features. The default
	  // is 10.
	  ecmaVersion: 10,
	  // `sourceType` indicates the mode the code should be parsed in.
	  // Can be either `"script"` or `"module"`. This influences global
	  // strict mode and parsing of `import` and `export` declarations.
	  sourceType: "script",
	  // `onInsertedSemicolon` can be a callback that will be called
	  // when a semicolon is automatically inserted. It will be passed
	  // the position of the comma as an offset, and if `locations` is
	  // enabled, it is given the location as a `{line, column}` object
	  // as second argument.
	  onInsertedSemicolon: null,
	  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
	  // trailing commas.
	  onTrailingComma: null,
	  // By default, reserved words are only enforced if ecmaVersion >= 5.
	  // Set `allowReserved` to a boolean value to explicitly turn this on
	  // an off. When this option has the value "never", reserved words
	  // and keywords can also not be used as property names.
	  allowReserved: null,
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  // When enabled, await identifiers are allowed to appear at the top-level scope,
	  // but they are still not allowed in non-async functions.
	  allowAwaitOutsideFunction: false,
	  // When enabled, hashbang directive in the beginning of file
	  // is allowed and treated as a line comment.
	  allowHashBang: false,
	  // When `locations` is on, `loc` properties holding objects with
	  // `start` and `end` properties in `{line, column}` form (with
	  // line being 1-based and column 0-based) will be attached to the
	  // nodes.
	  locations: false,
	  // A function can be passed as `onToken` option, which will
	  // cause Acorn to call that function with object in the same
	  // format as tokens returned from `tokenizer().getToken()`. Note
	  // that you are not allowed to call the parser from the
	  // callback—that will corrupt its internal state.
	  onToken: null,
	  // A function can be passed as `onComment` option, which will
	  // cause Acorn to call that function with `(block, text, start,
	  // end)` parameters whenever a comment is skipped. `block` is a
	  // boolean indicating whether this is a block (`/* */`) comment,
	  // `text` is the content of the comment, and `start` and `end` are
	  // character offsets that denote the start and end of the comment.
	  // When the `locations` option is on, two more parameters are
	  // passed, the full `{line, column}` locations of the start and
	  // end of the comments. Note that you are not allowed to call the
	  // parser from the callback—that will corrupt its internal state.
	  onComment: null,
	  // Nodes have their start and end characters offsets recorded in
	  // `start` and `end` properties (directly on the node, rather than
	  // the `loc` object, which holds line/column data. To also add a
	  // [semi-standardized][range] `range` property holding a `[start,
	  // end]` array with the same numbers, set the `ranges` option to
	  // `true`.
	  //
	  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
	  ranges: false,
	  // It is possible to parse multiple files into a single AST by
	  // passing the tree produced by parsing the first file as
	  // `program` option in subsequent parses. This will add the
	  // toplevel forms of the parsed file to the `Program` (top) node
	  // of an existing parse tree.
	  program: null,
	  // When `locations` is on, you can pass this to record the source
	  // file in every node's `loc` object.
	  sourceFile: null,
	  // This value, if given, is stored in every node, whether
	  // `locations` is on or off.
	  directSourceFile: null,
	  // When enabled, parenthesized expressions are represented by
	  // (non-standard) ParenthesizedExpression nodes
	  preserveParens: false
	};

	// Interpret and default an options object

	function getOptions(opts) {
	  var options = {};

	  for (var opt in defaultOptions)
	    { options[opt] = opts && has$1(opts, opt) ? opts[opt] : defaultOptions[opt]; }

	  if (options.ecmaVersion >= 2015)
	    { options.ecmaVersion -= 2009; }

	  if (options.allowReserved == null)
	    { options.allowReserved = options.ecmaVersion < 5; }

	  if (isArray$1(options.onToken)) {
	    var tokens = options.onToken;
	    options.onToken = function (token) { return tokens.push(token); };
	  }
	  if (isArray$1(options.onComment))
	    { options.onComment = pushComment(options, options.onComment); }

	  return options
	}

	function pushComment(options, array) {
	  return function(block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "Block" : "Line",
	      value: text,
	      start: start,
	      end: end
	    };
	    if (options.locations)
	      { comment.loc = new SourceLocation(this, startLoc, endLoc); }
	    if (options.ranges)
	      { comment.range = [start, end]; }
	    array.push(comment);
	  }
	}

	// Each scope gets a bitset that may contain these flags
	var
	    SCOPE_TOP = 1,
	    SCOPE_FUNCTION = 2,
	    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,
	    SCOPE_ASYNC = 4,
	    SCOPE_GENERATOR = 8,
	    SCOPE_ARROW = 16,
	    SCOPE_SIMPLE_CATCH = 32,
	    SCOPE_SUPER = 64,
	    SCOPE_DIRECT_SUPER = 128;

	function functionFlags(async, generator) {
	  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)
	}

	// Used in checkLVal and declareName to determine the type of a binding
	var
	    BIND_NONE = 0, // Not a binding
	    BIND_VAR = 1, // Var-style binding
	    BIND_LEXICAL = 2, // Let- or const-style binding
	    BIND_FUNCTION = 3, // Function declaration
	    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding
	    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function

	var Parser$1 = function Parser(options, input, startPos) {
	  this.options = options = getOptions(options);
	  this.sourceFile = options.sourceFile;
	  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
	  var reserved = "";
	  if (options.allowReserved !== true) {
	    for (var v = options.ecmaVersion;; v--)
	      { if (reserved = reservedWords[v]) { break } }
	    if (options.sourceType === "module") { reserved += " await"; }
	  }
	  this.reservedWords = wordsRegexp(reserved);
	  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
	  this.reservedWordsStrict = wordsRegexp(reservedStrict);
	  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
	  this.input = String(input);

	  // Used to signal to callers of `readWord1` whether the word
	  // contained any escape sequences. This is needed because words with
	  // escape sequences must not be interpreted as keywords.
	  this.containsEsc = false;

	  // Set up token state

	  // The current position of the tokenizer in the input.
	  if (startPos) {
	    this.pos = startPos;
	    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
	    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
	  } else {
	    this.pos = this.lineStart = 0;
	    this.curLine = 1;
	  }

	  // Properties of the current token:
	  // Its type
	  this.type = types$1.eof;
	  // For tokens that include more information than their type, the value
	  this.value = null;
	  // Its start and end offset
	  this.start = this.end = this.pos;
	  // And, if locations are used, the {line, column} object
	  // corresponding to those offsets
	  this.startLoc = this.endLoc = this.curPosition();

	  // Position information for the previous token
	  this.lastTokEndLoc = this.lastTokStartLoc = null;
	  this.lastTokStart = this.lastTokEnd = this.pos;

	  // The context stack is used to superficially track syntactic
	  // context to predict whether a regular expression is allowed in a
	  // given position.
	  this.context = this.initialContext();
	  this.exprAllowed = true;

	  // Figure out if it's a module code.
	  this.inModule = options.sourceType === "module";
	  this.strict = this.inModule || this.strictDirective(this.pos);

	  // Used to signify the start of a potential arrow function
	  this.potentialArrowAt = -1;

	  // Positions to delayed-check that yield/await does not exist in default parameters.
	  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
	  // Labels in scope.
	  this.labels = [];
	  // Thus-far undefined exports.
	  this.undefinedExports = {};

	  // If enabled, skip leading hashbang line.
	  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!")
	    { this.skipLineComment(2); }

	  // Scope tracking for duplicate variable names (see scope.js)
	  this.scopeStack = [];
	  this.enterScope(SCOPE_TOP);

	  // For RegExp validation
	  this.regexpState = null;
	};

	var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };

	Parser$1.prototype.parse = function parse () {
	  var node = this.options.program || this.startNode();
	  this.nextToken();
	  return this.parseTopLevel(node)
	};

	prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };
	prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };
	prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };
	prototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };
	prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };
	prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };

	// Switch to a getter for 7.0.0.
	Parser$1.prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };

	Parser$1.extend = function extend () {
	    var plugins = [], len = arguments.length;
	    while ( len-- ) plugins[ len ] = arguments[ len ];

	  var cls = this;
	  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }
	  return cls
	};

	Parser$1.parse = function parse (input, options) {
	  return new this(options, input).parse()
	};

	Parser$1.parseExpressionAt = function parseExpressionAt (input, pos, options) {
	  var parser = new this(options, input, pos);
	  parser.nextToken();
	  return parser.parseExpression()
	};

	Parser$1.tokenizer = function tokenizer (input, options) {
	  return new this(options, input)
	};

	Object.defineProperties( Parser$1.prototype, prototypeAccessors );

	var pp$1 = Parser$1.prototype;

	// ## Parser utilities

	var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;
	pp$1.strictDirective = function(start) {
	  for (;;) {
	    // Try to find string literal.
	    skipWhiteSpace.lastIndex = start;
	    start += skipWhiteSpace.exec(this.input)[0].length;
	    var match = literal.exec(this.input.slice(start));
	    if (!match) { return false }
	    if ((match[1] || match[2]) === "use strict") {
	      skipWhiteSpace.lastIndex = start + match[0].length;
	      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
	      var next = this.input.charAt(end);
	      return next === ";" || next === "}" ||
	        (lineBreak.test(spaceAfter[0]) &&
	         !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "="))
	    }
	    start += match[0].length;

	    // Skip semicolon, if any.
	    skipWhiteSpace.lastIndex = start;
	    start += skipWhiteSpace.exec(this.input)[0].length;
	    if (this.input[start] === ";")
	      { start++; }
	  }
	};

	// Predicate that tests whether the next token is of the given
	// type, and if yes, consumes it as a side effect.

	pp$1.eat = function(type) {
	  if (this.type === type) {
	    this.next();
	    return true
	  } else {
	    return false
	  }
	};

	// Tests whether parsed token is a contextual keyword.

	pp$1.isContextual = function(name) {
	  return this.type === types$1.name && this.value === name && !this.containsEsc
	};

	// Consumes contextual keyword if possible.

	pp$1.eatContextual = function(name) {
	  if (!this.isContextual(name)) { return false }
	  this.next();
	  return true
	};

	// Asserts that following token is given contextual keyword.

	pp$1.expectContextual = function(name) {
	  if (!this.eatContextual(name)) { this.unexpected(); }
	};

	// Test whether a semicolon can be inserted at the current position.

	pp$1.canInsertSemicolon = function() {
	  return this.type === types$1.eof ||
	    this.type === types$1.braceR ||
	    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
	};

	pp$1.insertSemicolon = function() {
	  if (this.canInsertSemicolon()) {
	    if (this.options.onInsertedSemicolon)
	      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }
	    return true
	  }
	};

	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.

	pp$1.semicolon = function() {
	  if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }
	};

	pp$1.afterTrailingComma = function(tokType, notNext) {
	  if (this.type === tokType) {
	    if (this.options.onTrailingComma)
	      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }
	    if (!notNext)
	      { this.next(); }
	    return true
	  }
	};

	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.

	pp$1.expect = function(type) {
	  this.eat(type) || this.unexpected();
	};

	// Raise an unexpected token error.

	pp$1.unexpected = function(pos) {
	  this.raise(pos != null ? pos : this.start, "Unexpected token");
	};

	function DestructuringErrors() {
	  this.shorthandAssign =
	  this.trailingComma =
	  this.parenthesizedAssign =
	  this.parenthesizedBind =
	  this.doubleProto =
	    -1;
	}

	pp$1.checkPatternErrors = function(refDestructuringErrors, isAssign) {
	  if (!refDestructuringErrors) { return }
	  if (refDestructuringErrors.trailingComma > -1)
	    { this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element"); }
	  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
	  if (parens > -1) { this.raiseRecoverable(parens, "Parenthesized pattern"); }
	};

	pp$1.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
	  if (!refDestructuringErrors) { return false }
	  var shorthandAssign = refDestructuringErrors.shorthandAssign;
	  var doubleProto = refDestructuringErrors.doubleProto;
	  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }
	  if (shorthandAssign >= 0)
	    { this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"); }
	  if (doubleProto >= 0)
	    { this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property"); }
	};

	pp$1.checkYieldAwaitInDefaultParams = function() {
	  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))
	    { this.raise(this.yieldPos, "Yield expression cannot be a default value"); }
	  if (this.awaitPos)
	    { this.raise(this.awaitPos, "Await expression cannot be a default value"); }
	};

	pp$1.isSimpleAssignTarget = function(expr) {
	  if (expr.type === "ParenthesizedExpression")
	    { return this.isSimpleAssignTarget(expr.expression) }
	  return expr.type === "Identifier" || expr.type === "MemberExpression"
	};

	var pp$1$1 = Parser$1.prototype;

	// ### Statement parsing

	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.

	pp$1$1.parseTopLevel = function(node) {
	  var exports = {};
	  if (!node.body) { node.body = []; }
	  while (this.type !== types$1.eof) {
	    var stmt = this.parseStatement(null, true, exports);
	    node.body.push(stmt);
	  }
	  if (this.inModule)
	    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)
	      {
	        var name = list[i];

	        this.raiseRecoverable(this.undefinedExports[name].start, ("Export '" + name + "' is not defined"));
	      } }
	  this.adaptDirectivePrologue(node.body);
	  this.next();
	  node.sourceType = this.options.sourceType;
	  return this.finishNode(node, "Program")
	};

	var loopLabel = {kind: "loop"}, switchLabel = {kind: "switch"};

	pp$1$1.isLet = function(context) {
	  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) { return false }
	  skipWhiteSpace.lastIndex = this.pos;
	  var skip = skipWhiteSpace.exec(this.input);
	  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
	  // For ambiguous cases, determine if a LexicalDeclaration (or only a
	  // Statement) is allowed here. If context is not empty then only a Statement
	  // is allowed. However, `let [` is an explicit negative lookahead for
	  // ExpressionStatement, so special-case it first.
	  if (nextCh === 91) { return true } // '['
	  if (context) { return false }

	  if (nextCh === 123) { return true } // '{'
	  if (isIdentifierStart(nextCh, true)) {
	    var pos = next + 1;
	    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }
	    var ident = this.input.slice(next, pos);
	    if (!keywordRelationalOperator.test(ident)) { return true }
	  }
	  return false
	};

	// check 'async [no LineTerminator here] function'
	// - 'async /*foo*/ function' is OK.
	// - 'async /*\n*/ function' is invalid.
	pp$1$1.isAsyncFunction = function() {
	  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
	    { return false }

	  skipWhiteSpace.lastIndex = this.pos;
	  var skip = skipWhiteSpace.exec(this.input);
	  var next = this.pos + skip[0].length;
	  return !lineBreak.test(this.input.slice(this.pos, next)) &&
	    this.input.slice(next, next + 8) === "function" &&
	    (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))
	};

	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.

	pp$1$1.parseStatement = function(context, topLevel, exports) {
	  var starttype = this.type, node = this.startNode(), kind;

	  if (this.isLet(context)) {
	    starttype = types$1._var;
	    kind = "let";
	  }

	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.

	  switch (starttype) {
	  case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
	  case types$1._debugger: return this.parseDebuggerStatement(node)
	  case types$1._do: return this.parseDoStatement(node)
	  case types$1._for: return this.parseForStatement(node)
	  case types$1._function:
	    // Function as sole body of either an if statement or a labeled statement
	    // works, but not when it is part of a labeled statement that is the sole
	    // body of an if statement.
	    if ((context && (this.strict || context !== "if" && context !== "label")) && this.options.ecmaVersion >= 6) { this.unexpected(); }
	    return this.parseFunctionStatement(node, false, !context)
	  case types$1._class:
	    if (context) { this.unexpected(); }
	    return this.parseClass(node, true)
	  case types$1._if: return this.parseIfStatement(node)
	  case types$1._return: return this.parseReturnStatement(node)
	  case types$1._switch: return this.parseSwitchStatement(node)
	  case types$1._throw: return this.parseThrowStatement(node)
	  case types$1._try: return this.parseTryStatement(node)
	  case types$1._const: case types$1._var:
	    kind = kind || this.value;
	    if (context && kind !== "var") { this.unexpected(); }
	    return this.parseVarStatement(node, kind)
	  case types$1._while: return this.parseWhileStatement(node)
	  case types$1._with: return this.parseWithStatement(node)
	  case types$1.braceL: return this.parseBlock(true, node)
	  case types$1.semi: return this.parseEmptyStatement(node)
	  case types$1._export:
	  case types$1._import:
	    if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
	      skipWhiteSpace.lastIndex = this.pos;
	      var skip = skipWhiteSpace.exec(this.input);
	      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
	      if (nextCh === 40 || nextCh === 46) // '(' or '.'
	        { return this.parseExpressionStatement(node, this.parseExpression()) }
	    }

	    if (!this.options.allowImportExportEverywhere) {
	      if (!topLevel)
	        { this.raise(this.start, "'import' and 'export' may only appear at the top level"); }
	      if (!this.inModule)
	        { this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'"); }
	    }
	    return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)

	    // If the statement does not start with a statement keyword or a
	    // brace, it's an ExpressionStatement or LabeledStatement. We
	    // simply start parsing an expression, and afterwards, if the
	    // next token is a colon and the expression was a simple
	    // Identifier node, we switch to interpreting it as a label.
	  default:
	    if (this.isAsyncFunction()) {
	      if (context) { this.unexpected(); }
	      this.next();
	      return this.parseFunctionStatement(node, true, !context)
	    }

	    var maybeName = this.value, expr = this.parseExpression();
	    if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon))
	      { return this.parseLabeledStatement(node, maybeName, expr, context) }
	    else { return this.parseExpressionStatement(node, expr) }
	  }
	};

	pp$1$1.parseBreakContinueStatement = function(node, keyword) {
	  var isBreak = keyword === "break";
	  this.next();
	  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }
	  else if (this.type !== types$1.name) { this.unexpected(); }
	  else {
	    node.label = this.parseIdent();
	    this.semicolon();
	  }

	  // Verify that there is an actual destination to break or
	  // continue to.
	  var i = 0;
	  for (; i < this.labels.length; ++i) {
	    var lab = this.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) { break }
	      if (node.label && isBreak) { break }
	    }
	  }
	  if (i === this.labels.length) { this.raise(node.start, "Unsyntactic " + keyword); }
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
	};

	pp$1$1.parseDebuggerStatement = function(node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement")
	};

	pp$1$1.parseDoStatement = function(node) {
	  this.next();
	  this.labels.push(loopLabel);
	  node.body = this.parseStatement("do");
	  this.labels.pop();
	  this.expect(types$1._while);
	  node.test = this.parseParenExpression();
	  if (this.options.ecmaVersion >= 6)
	    { this.eat(types$1.semi); }
	  else
	    { this.semicolon(); }
	  return this.finishNode(node, "DoWhileStatement")
	};

	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.

	pp$1$1.parseForStatement = function(node) {
	  this.next();
	  var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual("await")) ? this.lastTokStart : -1;
	  this.labels.push(loopLabel);
	  this.enterScope(0);
	  this.expect(types$1.parenL);
	  if (this.type === types$1.semi) {
	    if (awaitAt > -1) { this.unexpected(awaitAt); }
	    return this.parseFor(node, null)
	  }
	  var isLet = this.isLet();
	  if (this.type === types$1._var || this.type === types$1._const || isLet) {
	    var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
	    this.next();
	    this.parseVar(init$1, true, kind);
	    this.finishNode(init$1, "VariableDeclaration");
	    if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1) {
	      if (this.options.ecmaVersion >= 9) {
	        if (this.type === types$1._in) {
	          if (awaitAt > -1) { this.unexpected(awaitAt); }
	        } else { node.await = awaitAt > -1; }
	      }
	      return this.parseForIn(node, init$1)
	    }
	    if (awaitAt > -1) { this.unexpected(awaitAt); }
	    return this.parseFor(node, init$1)
	  }
	  var refDestructuringErrors = new DestructuringErrors;
	  var init = this.parseExpression(true, refDestructuringErrors);
	  if (this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
	    if (this.options.ecmaVersion >= 9) {
	      if (this.type === types$1._in) {
	        if (awaitAt > -1) { this.unexpected(awaitAt); }
	      } else { node.await = awaitAt > -1; }
	    }
	    this.toAssignable(init, false, refDestructuringErrors);
	    this.checkLVal(init);
	    return this.parseForIn(node, init)
	  } else {
	    this.checkExpressionErrors(refDestructuringErrors, true);
	  }
	  if (awaitAt > -1) { this.unexpected(awaitAt); }
	  return this.parseFor(node, init)
	};

	pp$1$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {
	  this.next();
	  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)
	};

	pp$1$1.parseIfStatement = function(node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  // allow function declarations in branches, but only in non-strict mode
	  node.consequent = this.parseStatement("if");
	  node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
	  return this.finishNode(node, "IfStatement")
	};

	pp$1$1.parseReturnStatement = function(node) {
	  if (!this.inFunction && !this.options.allowReturnOutsideFunction)
	    { this.raise(this.start, "'return' outside of function"); }
	  this.next();

	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.

	  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }
	  else { node.argument = this.parseExpression(); this.semicolon(); }
	  return this.finishNode(node, "ReturnStatement")
	};

	pp$1$1.parseSwitchStatement = function(node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(types$1.braceL);
	  this.labels.push(switchLabel);
	  this.enterScope(0);

	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.

	  var cur;
	  for (var sawDefault = false; this.type !== types$1.braceR;) {
	    if (this.type === types$1._case || this.type === types$1._default) {
	      var isCase = this.type === types$1._case;
	      if (cur) { this.finishNode(cur, "SwitchCase"); }
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"); }
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(types$1.colon);
	    } else {
	      if (!cur) { this.unexpected(); }
	      cur.consequent.push(this.parseStatement(null));
	    }
	  }
	  this.exitScope();
	  if (cur) { this.finishNode(cur, "SwitchCase"); }
	  this.next(); // Closing brace
	  this.labels.pop();
	  return this.finishNode(node, "SwitchStatement")
	};

	pp$1$1.parseThrowStatement = function(node) {
	  this.next();
	  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
	    { this.raise(this.lastTokEnd, "Illegal newline after throw"); }
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement")
	};

	// Reused empty array added for node fields that are always empty.

	var empty$3 = [];

	pp$1$1.parseTryStatement = function(node) {
	  this.next();
	  node.block = this.parseBlock();
	  node.handler = null;
	  if (this.type === types$1._catch) {
	    var clause = this.startNode();
	    this.next();
	    if (this.eat(types$1.parenL)) {
	      clause.param = this.parseBindingAtom();
	      var simple = clause.param.type === "Identifier";
	      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
	      this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
	      this.expect(types$1.parenR);
	    } else {
	      if (this.options.ecmaVersion < 10) { this.unexpected(); }
	      clause.param = null;
	      this.enterScope(0);
	    }
	    clause.body = this.parseBlock(false);
	    this.exitScope();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }
	  node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
	  if (!node.handler && !node.finalizer)
	    { this.raise(node.start, "Missing catch or finally clause"); }
	  return this.finishNode(node, "TryStatement")
	};

	pp$1$1.parseVarStatement = function(node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration")
	};

	pp$1$1.parseWhileStatement = function(node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.labels.push(loopLabel);
	  node.body = this.parseStatement("while");
	  this.labels.pop();
	  return this.finishNode(node, "WhileStatement")
	};

	pp$1$1.parseWithStatement = function(node) {
	  if (this.strict) { this.raise(this.start, "'with' in strict mode"); }
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement("with");
	  return this.finishNode(node, "WithStatement")
	};

	pp$1$1.parseEmptyStatement = function(node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement")
	};

	pp$1$1.parseLabeledStatement = function(node, maybeName, expr, context) {
	  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)
	    {
	    var label = list[i$1];

	    if (label.name === maybeName)
	      { this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	  } }
	  var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;
	  for (var i = this.labels.length - 1; i >= 0; i--) {
	    var label$1 = this.labels[i];
	    if (label$1.statementStart === node.start) {
	      // Update information about previous labels on this node
	      label$1.statementStart = this.start;
	      label$1.kind = kind;
	    } else { break }
	  }
	  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});
	  node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
	  this.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement")
	};

	pp$1$1.parseExpressionStatement = function(node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement")
	};

	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).

	pp$1$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {
	  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;
	  if ( node === void 0 ) node = this.startNode();

	  node.body = [];
	  this.expect(types$1.braceL);
	  if (createNewLexicalScope) { this.enterScope(0); }
	  while (this.type !== types$1.braceR) {
	    var stmt = this.parseStatement(null);
	    node.body.push(stmt);
	  }
	  if (exitStrict) { this.strict = false; }
	  this.next();
	  if (createNewLexicalScope) { this.exitScope(); }
	  return this.finishNode(node, "BlockStatement")
	};

	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.

	pp$1$1.parseFor = function(node, init) {
	  node.init = init;
	  this.expect(types$1.semi);
	  node.test = this.type === types$1.semi ? null : this.parseExpression();
	  this.expect(types$1.semi);
	  node.update = this.type === types$1.parenR ? null : this.parseExpression();
	  this.expect(types$1.parenR);
	  node.body = this.parseStatement("for");
	  this.exitScope();
	  this.labels.pop();
	  return this.finishNode(node, "ForStatement")
	};

	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.

	pp$1$1.parseForIn = function(node, init) {
	  var isForIn = this.type === types$1._in;
	  this.next();

	  if (
	    init.type === "VariableDeclaration" &&
	    init.declarations[0].init != null &&
	    (
	      !isForIn ||
	      this.options.ecmaVersion < 8 ||
	      this.strict ||
	      init.kind !== "var" ||
	      init.declarations[0].id.type !== "Identifier"
	    )
	  ) {
	    this.raise(
	      init.start,
	      ((isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer")
	    );
	  } else if (init.type === "AssignmentPattern") {
	    this.raise(init.start, "Invalid left-hand side in for-loop");
	  }
	  node.left = init;
	  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
	  this.expect(types$1.parenR);
	  node.body = this.parseStatement("for");
	  this.exitScope();
	  this.labels.pop();
	  return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement")
	};

	// Parse a list of variable declarations.

	pp$1$1.parseVar = function(node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarId(decl, kind);
	    if (this.eat(types$1.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === "const" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual("of")))) {
	      this.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) {
	      this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(types$1.comma)) { break }
	  }
	  return node
	};

	pp$1$1.parseVarId = function(decl, kind) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
	};

	var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;

	// Parse a function declaration or literal (depending on the
	// `statement & FUNC_STATEMENT`).

	// Remove `allowExpressionBody` for 7.0.0, as it is only called with false
	pp$1$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {
	  this.initFunction(node);
	  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
	    if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))
	      { this.unexpected(); }
	    node.generator = this.eat(types$1.star);
	  }
	  if (this.options.ecmaVersion >= 8)
	    { node.async = !!isAsync; }

	  if (statement & FUNC_STATEMENT) {
	    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();
	    if (node.id && !(statement & FUNC_HANGING_STATEMENT))
	      // If it is a regular function declaration in sloppy mode, then it is
	      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
	      // mode depends on properties of the current scope (see
	      // treatFunctionsAsVar).
	      { this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }
	  }

	  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
	  this.yieldPos = 0;
	  this.awaitPos = 0;
	  this.awaitIdentPos = 0;
	  this.enterScope(functionFlags(node.async, node.generator));

	  if (!(statement & FUNC_STATEMENT))
	    { node.id = this.type === types$1.name ? this.parseIdent() : null; }

	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody, false);

	  this.yieldPos = oldYieldPos;
	  this.awaitPos = oldAwaitPos;
	  this.awaitIdentPos = oldAwaitIdentPos;
	  return this.finishNode(node, (statement & FUNC_STATEMENT) ? "FunctionDeclaration" : "FunctionExpression")
	};

	pp$1$1.parseFunctionParams = function(node) {
	  this.expect(types$1.parenL);
	  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
	  this.checkYieldAwaitInDefaultParams();
	};

	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).

	pp$1$1.parseClass = function(node, isStatement) {
	  this.next();

	  // ecma-262 14.6 Class Definitions
	  // A class definition is always strict mode code.
	  var oldStrict = this.strict;
	  this.strict = true;

	  this.parseClassId(node, isStatement);
	  this.parseClassSuper(node);
	  var classBody = this.startNode();
	  var hadConstructor = false;
	  classBody.body = [];
	  this.expect(types$1.braceL);
	  while (this.type !== types$1.braceR) {
	    var element = this.parseClassElement(node.superClass !== null);
	    if (element) {
	      classBody.body.push(element);
	      if (element.type === "MethodDefinition" && element.kind === "constructor") {
	        if (hadConstructor) { this.raise(element.start, "Duplicate constructor in the same class"); }
	        hadConstructor = true;
	      }
	    }
	  }
	  this.strict = oldStrict;
	  this.next();
	  node.body = this.finishNode(classBody, "ClassBody");
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
	};

	pp$1$1.parseClassElement = function(constructorAllowsSuper) {
	  var this$1 = this;

	  if (this.eat(types$1.semi)) { return null }

	  var method = this.startNode();
	  var tryContextual = function (k, noLineBreak) {
	    if ( noLineBreak === void 0 ) noLineBreak = false;

	    var start = this$1.start, startLoc = this$1.startLoc;
	    if (!this$1.eatContextual(k)) { return false }
	    if (this$1.type !== types$1.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }
	    if (method.key) { this$1.unexpected(); }
	    method.computed = false;
	    method.key = this$1.startNodeAt(start, startLoc);
	    method.key.name = k;
	    this$1.finishNode(method.key, "Identifier");
	    return false
	  };

	  method.kind = "method";
	  method.static = tryContextual("static");
	  var isGenerator = this.eat(types$1.star);
	  var isAsync = false;
	  if (!isGenerator) {
	    if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
	      isAsync = true;
	      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
	    } else if (tryContextual("get")) {
	      method.kind = "get";
	    } else if (tryContextual("set")) {
	      method.kind = "set";
	    }
	  }
	  if (!method.key) { this.parsePropertyName(method); }
	  var key = method.key;
	  var allowsDirectSuper = false;
	  if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" ||
	      key.type === "Literal" && key.value === "constructor")) {
	    if (method.kind !== "method") { this.raise(key.start, "Constructor can't have get/set modifier"); }
	    if (isGenerator) { this.raise(key.start, "Constructor can't be a generator"); }
	    if (isAsync) { this.raise(key.start, "Constructor can't be an async method"); }
	    method.kind = "constructor";
	    allowsDirectSuper = constructorAllowsSuper;
	  } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
	    this.raise(key.start, "Classes may not have a static property named prototype");
	  }
	  this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);
	  if (method.kind === "get" && method.value.params.length !== 0)
	    { this.raiseRecoverable(method.value.start, "getter should have no params"); }
	  if (method.kind === "set" && method.value.params.length !== 1)
	    { this.raiseRecoverable(method.value.start, "setter should have exactly one param"); }
	  if (method.kind === "set" && method.value.params[0].type === "RestElement")
	    { this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params"); }
	  return method
	};

	pp$1$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
	  method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
	  return this.finishNode(method, "MethodDefinition")
	};

	pp$1$1.parseClassId = function(node, isStatement) {
	  if (this.type === types$1.name) {
	    node.id = this.parseIdent();
	    if (isStatement)
	      { this.checkLVal(node.id, BIND_LEXICAL, false); }
	  } else {
	    if (isStatement === true)
	      { this.unexpected(); }
	    node.id = null;
	  }
	};

	pp$1$1.parseClassSuper = function(node) {
	  node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;
	};

	// Parses module export declaration.

	pp$1$1.parseExport = function(node, exports) {
	  this.next();
	  // export * from '...'
	  if (this.eat(types$1.star)) {
	    if (this.options.ecmaVersion >= 11) {
	      if (this.eatContextual("as")) {
	        node.exported = this.parseIdent(true);
	        this.checkExport(exports, node.exported.name, this.lastTokStart);
	      } else {
	        node.exported = null;
	      }
	    }
	    this.expectContextual("from");
	    if (this.type !== types$1.string) { this.unexpected(); }
	    node.source = this.parseExprAtom();
	    this.semicolon();
	    return this.finishNode(node, "ExportAllDeclaration")
	  }
	  if (this.eat(types$1._default)) { // export default ...
	    this.checkExport(exports, "default", this.lastTokStart);
	    var isAsync;
	    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
	      var fNode = this.startNode();
	      this.next();
	      if (isAsync) { this.next(); }
	      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
	    } else if (this.type === types$1._class) {
	      var cNode = this.startNode();
	      node.declaration = this.parseClass(cNode, "nullableID");
	    } else {
	      node.declaration = this.parseMaybeAssign();
	      this.semicolon();
	    }
	    return this.finishNode(node, "ExportDefaultDeclaration")
	  }
	  // export var|const|let|function|class ...
	  if (this.shouldParseExportStatement()) {
	    node.declaration = this.parseStatement(null);
	    if (node.declaration.type === "VariableDeclaration")
	      { this.checkVariableExport(exports, node.declaration.declarations); }
	    else
	      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }
	    node.specifiers = [];
	    node.source = null;
	  } else { // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers(exports);
	    if (this.eatContextual("from")) {
	      if (this.type !== types$1.string) { this.unexpected(); }
	      node.source = this.parseExprAtom();
	    } else {
	      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
	        // check for keywords used as local names
	        var spec = list[i];

	        this.checkUnreserved(spec.local);
	        // check if export is defined
	        this.checkLocalExport(spec.local);
	      }

	      node.source = null;
	    }
	    this.semicolon();
	  }
	  return this.finishNode(node, "ExportNamedDeclaration")
	};

	pp$1$1.checkExport = function(exports, name, pos) {
	  if (!exports) { return }
	  if (has$1(exports, name))
	    { this.raiseRecoverable(pos, "Duplicate export '" + name + "'"); }
	  exports[name] = true;
	};

	pp$1$1.checkPatternExport = function(exports, pat) {
	  var type = pat.type;
	  if (type === "Identifier")
	    { this.checkExport(exports, pat.name, pat.start); }
	  else if (type === "ObjectPattern")
	    { for (var i = 0, list = pat.properties; i < list.length; i += 1)
	      {
	        var prop = list[i];

	        this.checkPatternExport(exports, prop);
	      } }
	  else if (type === "ArrayPattern")
	    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
	      var elt = list$1[i$1];

	        if (elt) { this.checkPatternExport(exports, elt); }
	    } }
	  else if (type === "Property")
	    { this.checkPatternExport(exports, pat.value); }
	  else if (type === "AssignmentPattern")
	    { this.checkPatternExport(exports, pat.left); }
	  else if (type === "RestElement")
	    { this.checkPatternExport(exports, pat.argument); }
	  else if (type === "ParenthesizedExpression")
	    { this.checkPatternExport(exports, pat.expression); }
	};

	pp$1$1.checkVariableExport = function(exports, decls) {
	  if (!exports) { return }
	  for (var i = 0, list = decls; i < list.length; i += 1)
	    {
	    var decl = list[i];

	    this.checkPatternExport(exports, decl.id);
	  }
	};

	pp$1$1.shouldParseExportStatement = function() {
	  return this.type.keyword === "var" ||
	    this.type.keyword === "const" ||
	    this.type.keyword === "class" ||
	    this.type.keyword === "function" ||
	    this.isLet() ||
	    this.isAsyncFunction()
	};

	// Parses a comma-separated list of module exports.

	pp$1$1.parseExportSpecifiers = function(exports) {
	  var nodes = [], first = true;
	  // export { x, y as z } [from '...']
	  this.expect(types$1.braceL);
	  while (!this.eat(types$1.braceR)) {
	    if (!first) {
	      this.expect(types$1.comma);
	      if (this.afterTrailingComma(types$1.braceR)) { break }
	    } else { first = false; }

	    var node = this.startNode();
	    node.local = this.parseIdent(true);
	    node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
	    this.checkExport(exports, node.exported.name, node.exported.start);
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }
	  return nodes
	};

	// Parses import declaration.

	pp$1$1.parseImport = function(node) {
	  this.next();
	  // import '...'
	  if (this.type === types$1.string) {
	    node.specifiers = empty$3;
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = this.parseImportSpecifiers();
	    this.expectContextual("from");
	    node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration")
	};

	// Parses a comma-separated list of module imports.

	pp$1$1.parseImportSpecifiers = function() {
	  var nodes = [], first = true;
	  if (this.type === types$1.name) {
	    // import defaultObj, { x, y as z } from '...'
	    var node = this.startNode();
	    node.local = this.parseIdent();
	    this.checkLVal(node.local, BIND_LEXICAL);
	    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
	    if (!this.eat(types$1.comma)) { return nodes }
	  }
	  if (this.type === types$1.star) {
	    var node$1 = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    node$1.local = this.parseIdent();
	    this.checkLVal(node$1.local, BIND_LEXICAL);
	    nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
	    return nodes
	  }
	  this.expect(types$1.braceL);
	  while (!this.eat(types$1.braceR)) {
	    if (!first) {
	      this.expect(types$1.comma);
	      if (this.afterTrailingComma(types$1.braceR)) { break }
	    } else { first = false; }

	    var node$2 = this.startNode();
	    node$2.imported = this.parseIdent(true);
	    if (this.eatContextual("as")) {
	      node$2.local = this.parseIdent();
	    } else {
	      this.checkUnreserved(node$2.imported);
	      node$2.local = node$2.imported;
	    }
	    this.checkLVal(node$2.local, BIND_LEXICAL);
	    nodes.push(this.finishNode(node$2, "ImportSpecifier"));
	  }
	  return nodes
	};

	// Set `ExpressionStatement#directive` property for directive prologues.
	pp$1$1.adaptDirectivePrologue = function(statements) {
	  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
	    statements[i].directive = statements[i].expression.raw.slice(1, -1);
	  }
	};
	pp$1$1.isDirectiveCandidate = function(statement) {
	  return (
	    statement.type === "ExpressionStatement" &&
	    statement.expression.type === "Literal" &&
	    typeof statement.expression.value === "string" &&
	    // Reject parenthesized strings.
	    (this.input[statement.start] === "\"" || this.input[statement.start] === "'")
	  )
	};

	var pp$2 = Parser$1.prototype;

	// Convert existing expression atom to assignable pattern
	// if possible.

	pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {
	  if (this.options.ecmaVersion >= 6 && node) {
	    switch (node.type) {
	    case "Identifier":
	      if (this.inAsync && node.name === "await")
	        { this.raise(node.start, "Cannot use 'await' as identifier inside an async function"); }
	      break

	    case "ObjectPattern":
	    case "ArrayPattern":
	    case "RestElement":
	      break

	    case "ObjectExpression":
	      node.type = "ObjectPattern";
	      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
	      for (var i = 0, list = node.properties; i < list.length; i += 1) {
	        var prop = list[i];

	      this.toAssignable(prop, isBinding);
	        // Early error:
	        //   AssignmentRestProperty[Yield, Await] :
	        //     `...` DestructuringAssignmentTarget[Yield, Await]
	        //
	        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
	        if (
	          prop.type === "RestElement" &&
	          (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")
	        ) {
	          this.raise(prop.argument.start, "Unexpected token");
	        }
	      }
	      break

	    case "Property":
	      // AssignmentProperty has type === "Property"
	      if (node.kind !== "init") { this.raise(node.key.start, "Object pattern can't contain getter or setter"); }
	      this.toAssignable(node.value, isBinding);
	      break

	    case "ArrayExpression":
	      node.type = "ArrayPattern";
	      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
	      this.toAssignableList(node.elements, isBinding);
	      break

	    case "SpreadElement":
	      node.type = "RestElement";
	      this.toAssignable(node.argument, isBinding);
	      if (node.argument.type === "AssignmentPattern")
	        { this.raise(node.argument.start, "Rest elements cannot have a default value"); }
	      break

	    case "AssignmentExpression":
	      if (node.operator !== "=") { this.raise(node.left.end, "Only '=' operator can be used for specifying default value."); }
	      node.type = "AssignmentPattern";
	      delete node.operator;
	      this.toAssignable(node.left, isBinding);
	      // falls through to AssignmentPattern

	    case "AssignmentPattern":
	      break

	    case "ParenthesizedExpression":
	      this.toAssignable(node.expression, isBinding, refDestructuringErrors);
	      break

	    case "ChainExpression":
	      this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
	      break

	    case "MemberExpression":
	      if (!isBinding) { break }

	    default:
	      this.raise(node.start, "Assigning to rvalue");
	    }
	  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
	  return node
	};

	// Convert list of expression atoms to binding list.

	pp$2.toAssignableList = function(exprList, isBinding) {
	  var end = exprList.length;
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) { this.toAssignable(elt, isBinding); }
	  }
	  if (end) {
	    var last = exprList[end - 1];
	    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
	      { this.unexpected(last.argument.start); }
	  }
	  return exprList
	};

	// Parses spread element.

	pp$2.parseSpread = function(refDestructuringErrors) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
	  return this.finishNode(node, "SpreadElement")
	};

	pp$2.parseRestBinding = function() {
	  var node = this.startNode();
	  this.next();

	  // RestElement inside of a function parameter must be an identifier
	  if (this.options.ecmaVersion === 6 && this.type !== types$1.name)
	    { this.unexpected(); }

	  node.argument = this.parseBindingAtom();

	  return this.finishNode(node, "RestElement")
	};

	// Parses lvalue (assignable) atom.

	pp$2.parseBindingAtom = function() {
	  if (this.options.ecmaVersion >= 6) {
	    switch (this.type) {
	    case types$1.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(types$1.bracketR, true, true);
	      return this.finishNode(node, "ArrayPattern")

	    case types$1.braceL:
	      return this.parseObj(true)
	    }
	  }
	  return this.parseIdent()
	};

	pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
	  var elts = [], first = true;
	  while (!this.eat(close)) {
	    if (first) { first = false; }
	    else { this.expect(types$1.comma); }
	    if (allowEmpty && this.type === types$1.comma) {
	      elts.push(null);
	    } else if (allowTrailingComma && this.afterTrailingComma(close)) {
	      break
	    } else if (this.type === types$1.ellipsis) {
	      var rest = this.parseRestBinding();
	      this.parseBindingListItem(rest);
	      elts.push(rest);
	      if (this.type === types$1.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
	      this.expect(close);
	      break
	    } else {
	      var elem = this.parseMaybeDefault(this.start, this.startLoc);
	      this.parseBindingListItem(elem);
	      elts.push(elem);
	    }
	  }
	  return elts
	};

	pp$2.parseBindingListItem = function(param) {
	  return param
	};

	// Parses assignment pattern around given atom if possible.

	pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
	  left = left || this.parseBindingAtom();
	  if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }
	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern")
	};

	// Verify that a node is an lval — something that can be assigned
	// to.
	// bindingType can be either:
	// 'var' indicating that the lval creates a 'var' binding
	// 'let' indicating that the lval creates a lexical ('let' or 'const') binding
	// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references

	pp$2.checkLVal = function(expr, bindingType, checkClashes) {
	  if ( bindingType === void 0 ) bindingType = BIND_NONE;

	  switch (expr.type) {
	  case "Identifier":
	    if (bindingType === BIND_LEXICAL && expr.name === "let")
	      { this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"); }
	    if (this.strict && this.reservedWordsStrictBind.test(expr.name))
	      { this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode"); }
	    if (checkClashes) {
	      if (has$1(checkClashes, expr.name))
	        { this.raiseRecoverable(expr.start, "Argument name clash"); }
	      checkClashes[expr.name] = true;
	    }
	    if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }
	    break

	  case "ChainExpression":
	    this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
	    break

	  case "MemberExpression":
	    if (bindingType) { this.raiseRecoverable(expr.start, "Binding member expression"); }
	    break

	  case "ObjectPattern":
	    for (var i = 0, list = expr.properties; i < list.length; i += 1)
	      {
	    var prop = list[i];

	    this.checkLVal(prop, bindingType, checkClashes);
	  }
	    break

	  case "Property":
	    // AssignmentProperty has type === "Property"
	    this.checkLVal(expr.value, bindingType, checkClashes);
	    break

	  case "ArrayPattern":
	    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
	      var elem = list$1[i$1];

	    if (elem) { this.checkLVal(elem, bindingType, checkClashes); }
	    }
	    break

	  case "AssignmentPattern":
	    this.checkLVal(expr.left, bindingType, checkClashes);
	    break

	  case "RestElement":
	    this.checkLVal(expr.argument, bindingType, checkClashes);
	    break

	  case "ParenthesizedExpression":
	    this.checkLVal(expr.expression, bindingType, checkClashes);
	    break

	  default:
	    this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
	  }
	};

	// A recursive descent parser operates by defining functions for all

	var pp$3 = Parser$1.prototype;

	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.

	pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {
	  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement")
	    { return }
	  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
	    { return }
	  var key = prop.key;
	  var name;
	  switch (key.type) {
	  case "Identifier": name = key.name; break
	  case "Literal": name = String(key.value); break
	  default: return
	  }
	  var kind = prop.kind;
	  if (this.options.ecmaVersion >= 6) {
	    if (name === "__proto__" && kind === "init") {
	      if (propHash.proto) {
	        if (refDestructuringErrors) {
	          if (refDestructuringErrors.doubleProto < 0)
	            { refDestructuringErrors.doubleProto = key.start; }
	          // Backwards-compat kludge. Can be removed in version 6.0
	        } else { this.raiseRecoverable(key.start, "Redefinition of __proto__ property"); }
	      }
	      propHash.proto = true;
	    }
	    return
	  }
	  name = "$" + name;
	  var other = propHash[name];
	  if (other) {
	    var redefinition;
	    if (kind === "init") {
	      redefinition = this.strict && other.init || other.get || other.set;
	    } else {
	      redefinition = other.init || other[kind];
	    }
	    if (redefinition)
	      { this.raiseRecoverable(key.start, "Redefinition of property"); }
	  } else {
	    other = propHash[name] = {
	      init: false,
	      get: false,
	      set: false
	    };
	  }
	  other[kind] = true;
	};

	// ### Expression parsing

	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function(s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.

	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).

	pp$3.parseExpression = function(noIn, refDestructuringErrors) {
	  var startPos = this.start, startLoc = this.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
	  if (this.type === types$1.comma) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors)); }
	    return this.finishNode(node, "SequenceExpression")
	  }
	  return expr
	};

	// Parse an assignment expression. This includes applications of
	// operators like `+=`.

	pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {
	  if (this.isContextual("yield")) {
	    if (this.inGenerator) { return this.parseYield(noIn) }
	    // The tokenizer will assume an expression is allowed after
	    // `yield`, but this isn't that kind of yield
	    else { this.exprAllowed = false; }
	  }

	  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
	  if (refDestructuringErrors) {
	    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
	    oldTrailingComma = refDestructuringErrors.trailingComma;
	    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
	  } else {
	    refDestructuringErrors = new DestructuringErrors;
	    ownDestructuringErrors = true;
	  }

	  var startPos = this.start, startLoc = this.startLoc;
	  if (this.type === types$1.parenL || this.type === types$1.name)
	    { this.potentialArrowAt = this.start; }
	  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
	  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }
	  if (this.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.value;
	    node.left = this.type === types$1.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
	    if (!ownDestructuringErrors) {
	      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
	    }
	    if (refDestructuringErrors.shorthandAssign >= node.left.start)
	      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly
	    this.checkLVal(left);
	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression")
	  } else {
	    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }
	  }
	  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }
	  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }
	  return left
	};

	// Parse a ternary conditional (`?:`) operator.

	pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {
	  var startPos = this.start, startLoc = this.startLoc;
	  var expr = this.parseExprOps(noIn, refDestructuringErrors);
	  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
	  if (this.eat(types$1.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(types$1.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression")
	  }
	  return expr
	};

	// Start the precedence parser.

	pp$3.parseExprOps = function(noIn, refDestructuringErrors) {
	  var startPos = this.start, startLoc = this.startLoc;
	  var expr = this.parseMaybeUnary(refDestructuringErrors, false);
	  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
	  return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)
	};

	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.

	pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.type.binop;
	  if (prec != null && (!noIn || this.type !== types$1._in)) {
	    if (prec > minPrec) {
	      var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;
	      var coalesce = this.type === types$1.coalesce;
	      if (coalesce) {
	        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.
	        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.
	        prec = types$1.logicalAND.binop;
	      }
	      var op = this.value;
	      this.next();
	      var startPos = this.start, startLoc = this.startLoc;
	      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
	      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
	      if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {
	        this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
	      }
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)
	    }
	  }
	  return left
	};

	pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.operator = op;
	  node.right = right;
	  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
	};

	// Parse unary operators, both prefix and postfix.

	pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {
	  var startPos = this.start, startLoc = this.startLoc, expr;
	  if (this.isContextual("await") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {
	    expr = this.parseAwait();
	    sawUnary = true;
	  } else if (this.type.prefix) {
	    var node = this.startNode(), update = this.type === types$1.incDec;
	    node.operator = this.value;
	    node.prefix = true;
	    this.next();
	    node.argument = this.parseMaybeUnary(null, true);
	    this.checkExpressionErrors(refDestructuringErrors, true);
	    if (update) { this.checkLVal(node.argument); }
	    else if (this.strict && node.operator === "delete" &&
	             node.argument.type === "Identifier")
	      { this.raiseRecoverable(node.start, "Deleting local variable in strict mode"); }
	    else { sawUnary = true; }
	    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  } else {
	    expr = this.parseExprSubscripts(refDestructuringErrors);
	    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
	    while (this.type.postfix && !this.canInsertSemicolon()) {
	      var node$1 = this.startNodeAt(startPos, startLoc);
	      node$1.operator = this.value;
	      node$1.prefix = false;
	      node$1.argument = expr;
	      this.checkLVal(expr);
	      this.next();
	      expr = this.finishNode(node$1, "UpdateExpression");
	    }
	  }

	  if (!sawUnary && this.eat(types$1.starstar))
	    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false) }
	  else
	    { return expr }
	};

	// Parse call, dot, and `[]`-subscript expressions.

	pp$3.parseExprSubscripts = function(refDestructuringErrors) {
	  var startPos = this.start, startLoc = this.startLoc;
	  var expr = this.parseExprAtom(refDestructuringErrors);
	  if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")")
	    { return expr }
	  var result = this.parseSubscripts(expr, startPos, startLoc);
	  if (refDestructuringErrors && result.type === "MemberExpression") {
	    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }
	    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }
	  }
	  return result
	};

	pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {
	  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&
	      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&
	      this.potentialArrowAt === base.start;
	  var optionalChained = false;

	  while (true) {
	    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);

	    if (element.optional) { optionalChained = true; }
	    if (element === base || element.type === "ArrowFunctionExpression") {
	      if (optionalChained) {
	        var chainNode = this.startNodeAt(startPos, startLoc);
	        chainNode.expression = element;
	        element = this.finishNode(chainNode, "ChainExpression");
	      }
	      return element
	    }

	    base = element;
	  }
	};

	pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {
	  var optionalSupported = this.options.ecmaVersion >= 11;
	  var optional = optionalSupported && this.eat(types$1.questionDot);
	  if (noCalls && optional) { this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions"); }

	  var computed = this.eat(types$1.bracketL);
	  if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.object = base;
	    node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never");
	    node.computed = !!computed;
	    if (computed) { this.expect(types$1.bracketR); }
	    if (optionalSupported) {
	      node.optional = optional;
	    }
	    base = this.finishNode(node, "MemberExpression");
	  } else if (!noCalls && this.eat(types$1.parenL)) {
	    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
	    this.yieldPos = 0;
	    this.awaitPos = 0;
	    this.awaitIdentPos = 0;
	    var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
	    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
	      this.checkPatternErrors(refDestructuringErrors, false);
	      this.checkYieldAwaitInDefaultParams();
	      if (this.awaitIdentPos > 0)
	        { this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"); }
	      this.yieldPos = oldYieldPos;
	      this.awaitPos = oldAwaitPos;
	      this.awaitIdentPos = oldAwaitIdentPos;
	      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)
	    }
	    this.checkExpressionErrors(refDestructuringErrors, true);
	    this.yieldPos = oldYieldPos || this.yieldPos;
	    this.awaitPos = oldAwaitPos || this.awaitPos;
	    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
	    var node$1 = this.startNodeAt(startPos, startLoc);
	    node$1.callee = base;
	    node$1.arguments = exprList;
	    if (optionalSupported) {
	      node$1.optional = optional;
	    }
	    base = this.finishNode(node$1, "CallExpression");
	  } else if (this.type === types$1.backQuote) {
	    if (optional || optionalChained) {
	      this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
	    }
	    var node$2 = this.startNodeAt(startPos, startLoc);
	    node$2.tag = base;
	    node$2.quasi = this.parseTemplate({isTagged: true});
	    base = this.finishNode(node$2, "TaggedTemplateExpression");
	  }
	  return base
	};

	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.

	pp$3.parseExprAtom = function(refDestructuringErrors) {
	  // If a division operator appears in an expression position, the
	  // tokenizer got confused, and we force it to read a regexp instead.
	  if (this.type === types$1.slash) { this.readRegexp(); }

	  var node, canBeArrow = this.potentialArrowAt === this.start;
	  switch (this.type) {
	  case types$1._super:
	    if (!this.allowSuper)
	      { this.raise(this.start, "'super' keyword outside a method"); }
	    node = this.startNode();
	    this.next();
	    if (this.type === types$1.parenL && !this.allowDirectSuper)
	      { this.raise(node.start, "super() call outside constructor of a subclass"); }
	    // The `super` keyword can appear at below:
	    // SuperProperty:
	    //     super [ Expression ]
	    //     super . IdentifierName
	    // SuperCall:
	    //     super ( Arguments )
	    if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)
	      { this.unexpected(); }
	    return this.finishNode(node, "Super")

	  case types$1._this:
	    node = this.startNode();
	    this.next();
	    return this.finishNode(node, "ThisExpression")

	  case types$1.name:
	    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
	    var id = this.parseIdent(false);
	    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function))
	      { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }
	    if (canBeArrow && !this.canInsertSemicolon()) {
	      if (this.eat(types$1.arrow))
	        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }
	      if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc) {
	        id = this.parseIdent(false);
	        if (this.canInsertSemicolon() || !this.eat(types$1.arrow))
	          { this.unexpected(); }
	        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)
	      }
	    }
	    return id

	  case types$1.regexp:
	    var value = this.value;
	    node = this.parseLiteral(value.value);
	    node.regex = {pattern: value.pattern, flags: value.flags};
	    return node

	  case types$1.num: case types$1.string:
	    return this.parseLiteral(this.value)

	  case types$1._null: case types$1._true: case types$1._false:
	    node = this.startNode();
	    node.value = this.type === types$1._null ? null : this.type === types$1._true;
	    node.raw = this.type.keyword;
	    this.next();
	    return this.finishNode(node, "Literal")

	  case types$1.parenL:
	    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
	    if (refDestructuringErrors) {
	      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))
	        { refDestructuringErrors.parenthesizedAssign = start; }
	      if (refDestructuringErrors.parenthesizedBind < 0)
	        { refDestructuringErrors.parenthesizedBind = start; }
	    }
	    return expr

	  case types$1.bracketL:
	    node = this.startNode();
	    this.next();
	    node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);
	    return this.finishNode(node, "ArrayExpression")

	  case types$1.braceL:
	    return this.parseObj(false, refDestructuringErrors)

	  case types$1._function:
	    node = this.startNode();
	    this.next();
	    return this.parseFunction(node, 0)

	  case types$1._class:
	    return this.parseClass(this.startNode(), false)

	  case types$1._new:
	    return this.parseNew()

	  case types$1.backQuote:
	    return this.parseTemplate()

	  case types$1._import:
	    if (this.options.ecmaVersion >= 11) {
	      return this.parseExprImport()
	    } else {
	      return this.unexpected()
	    }

	  default:
	    this.unexpected();
	  }
	};

	pp$3.parseExprImport = function() {
	  var node = this.startNode();

	  // Consume `import` as an identifier for `import.meta`.
	  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.
	  if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword import"); }
	  var meta = this.parseIdent(true);

	  switch (this.type) {
	  case types$1.parenL:
	    return this.parseDynamicImport(node)
	  case types$1.dot:
	    node.meta = meta;
	    return this.parseImportMeta(node)
	  default:
	    this.unexpected();
	  }
	};

	pp$3.parseDynamicImport = function(node) {
	  this.next(); // skip `(`

	  // Parse node.source.
	  node.source = this.parseMaybeAssign();

	  // Verify ending.
	  if (!this.eat(types$1.parenR)) {
	    var errorPos = this.start;
	    if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {
	      this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
	    } else {
	      this.unexpected(errorPos);
	    }
	  }

	  return this.finishNode(node, "ImportExpression")
	};

	pp$3.parseImportMeta = function(node) {
	  this.next(); // skip `.`

	  var containsEsc = this.containsEsc;
	  node.property = this.parseIdent(true);

	  if (node.property.name !== "meta")
	    { this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"); }
	  if (containsEsc)
	    { this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"); }
	  if (this.options.sourceType !== "module")
	    { this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"); }

	  return this.finishNode(node, "MetaProperty")
	};

	pp$3.parseLiteral = function(value) {
	  var node = this.startNode();
	  node.value = value;
	  node.raw = this.input.slice(this.start, this.end);
	  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1); }
	  this.next();
	  return this.finishNode(node, "Literal")
	};

	pp$3.parseParenExpression = function() {
	  this.expect(types$1.parenL);
	  var val = this.parseExpression();
	  this.expect(types$1.parenR);
	  return val
	};

	pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
	  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
	  if (this.options.ecmaVersion >= 6) {
	    this.next();

	    var innerStartPos = this.start, innerStartLoc = this.startLoc;
	    var exprList = [], first = true, lastIsComma = false;
	    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
	    this.yieldPos = 0;
	    this.awaitPos = 0;
	    // Do not save awaitIdentPos to allow checking awaits nested in parameters
	    while (this.type !== types$1.parenR) {
	      first ? first = false : this.expect(types$1.comma);
	      if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
	        lastIsComma = true;
	        break
	      } else if (this.type === types$1.ellipsis) {
	        spreadStart = this.start;
	        exprList.push(this.parseParenItem(this.parseRestBinding()));
	        if (this.type === types$1.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
	        break
	      } else {
	        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
	      }
	    }
	    var innerEndPos = this.start, innerEndLoc = this.startLoc;
	    this.expect(types$1.parenR);

	    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
	      this.checkPatternErrors(refDestructuringErrors, false);
	      this.checkYieldAwaitInDefaultParams();
	      this.yieldPos = oldYieldPos;
	      this.awaitPos = oldAwaitPos;
	      return this.parseParenArrowList(startPos, startLoc, exprList)
	    }

	    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }
	    if (spreadStart) { this.unexpected(spreadStart); }
	    this.checkExpressionErrors(refDestructuringErrors, true);
	    this.yieldPos = oldYieldPos || this.yieldPos;
	    this.awaitPos = oldAwaitPos || this.awaitPos;

	    if (exprList.length > 1) {
	      val = this.startNodeAt(innerStartPos, innerStartLoc);
	      val.expressions = exprList;
	      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	    } else {
	      val = exprList[0];
	    }
	  } else {
	    val = this.parseParenExpression();
	  }

	  if (this.options.preserveParens) {
	    var par = this.startNodeAt(startPos, startLoc);
	    par.expression = val;
	    return this.finishNode(par, "ParenthesizedExpression")
	  } else {
	    return val
	  }
	};

	pp$3.parseParenItem = function(item) {
	  return item
	};

	pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
	  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)
	};

	// New's precedence is slightly tricky. It must allow its argument to
	// be a `[]` or dot subscript expression, but not a call — at least,
	// not without wrapping it in parentheses. Thus, it uses the noCalls
	// argument to parseSubscripts to prevent it from consuming the
	// argument list.

	var empty$1$1 = [];

	pp$3.parseNew = function() {
	  if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword new"); }
	  var node = this.startNode();
	  var meta = this.parseIdent(true);
	  if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {
	    node.meta = meta;
	    var containsEsc = this.containsEsc;
	    node.property = this.parseIdent(true);
	    if (node.property.name !== "target")
	      { this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"); }
	    if (containsEsc)
	      { this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"); }
	    if (!this.inNonArrowFunction())
	      { this.raiseRecoverable(node.start, "'new.target' can only be used in functions"); }
	    return this.finishNode(node, "MetaProperty")
	  }
	  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;
	  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	  if (isImport && node.callee.type === "ImportExpression") {
	    this.raise(startPos, "Cannot use new with import()");
	  }
	  if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }
	  else { node.arguments = empty$1$1; }
	  return this.finishNode(node, "NewExpression")
	};

	// Parse template expression.

	pp$3.parseTemplateElement = function(ref) {
	  var isTagged = ref.isTagged;

	  var elem = this.startNode();
	  if (this.type === types$1.invalidTemplate) {
	    if (!isTagged) {
	      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
	    }
	    elem.value = {
	      raw: this.value,
	      cooked: null
	    };
	  } else {
	    elem.value = {
	      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
	      cooked: this.value
	    };
	  }
	  this.next();
	  elem.tail = this.type === types$1.backQuote;
	  return this.finishNode(elem, "TemplateElement")
	};

	pp$3.parseTemplate = function(ref) {
	  if ( ref === void 0 ) ref = {};
	  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;

	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement({isTagged: isTagged});
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    if (this.type === types$1.eof) { this.raise(this.pos, "Unterminated template literal"); }
	    this.expect(types$1.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(types$1.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral")
	};

	pp$3.isAsyncProp = function(prop) {
	  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" &&
	    (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&
	    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
	};

	// Parse an object literal or binding pattern.

	pp$3.parseObj = function(isPattern, refDestructuringErrors) {
	  var node = this.startNode(), first = true, propHash = {};
	  node.properties = [];
	  this.next();
	  while (!this.eat(types$1.braceR)) {
	    if (!first) {
	      this.expect(types$1.comma);
	      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }
	    } else { first = false; }

	    var prop = this.parseProperty(isPattern, refDestructuringErrors);
	    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }
	    node.properties.push(prop);
	  }
	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
	};

	pp$3.parseProperty = function(isPattern, refDestructuringErrors) {
	  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
	  if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
	    if (isPattern) {
	      prop.argument = this.parseIdent(false);
	      if (this.type === types$1.comma) {
	        this.raise(this.start, "Comma is not permitted after the rest element");
	      }
	      return this.finishNode(prop, "RestElement")
	    }
	    // To disallow parenthesized identifier via `this.toAssignable()`.
	    if (this.type === types$1.parenL && refDestructuringErrors) {
	      if (refDestructuringErrors.parenthesizedAssign < 0) {
	        refDestructuringErrors.parenthesizedAssign = this.start;
	      }
	      if (refDestructuringErrors.parenthesizedBind < 0) {
	        refDestructuringErrors.parenthesizedBind = this.start;
	      }
	    }
	    // Parse argument.
	    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
	    // To disallow trailing comma via `this.toAssignable()`.
	    if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
	      refDestructuringErrors.trailingComma = this.start;
	    }
	    // Finish
	    return this.finishNode(prop, "SpreadElement")
	  }
	  if (this.options.ecmaVersion >= 6) {
	    prop.method = false;
	    prop.shorthand = false;
	    if (isPattern || refDestructuringErrors) {
	      startPos = this.start;
	      startLoc = this.startLoc;
	    }
	    if (!isPattern)
	      { isGenerator = this.eat(types$1.star); }
	  }
	  var containsEsc = this.containsEsc;
	  this.parsePropertyName(prop);
	  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
	    isAsync = true;
	    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
	    this.parsePropertyName(prop, refDestructuringErrors);
	  } else {
	    isAsync = false;
	  }
	  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
	  return this.finishNode(prop, "Property")
	};

	pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
	  if ((isGenerator || isAsync) && this.type === types$1.colon)
	    { this.unexpected(); }

	  if (this.eat(types$1.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
	    prop.kind = "init";
	  } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
	    if (isPattern) { this.unexpected(); }
	    prop.kind = "init";
	    prop.method = true;
	    prop.value = this.parseMethod(isGenerator, isAsync);
	  } else if (!isPattern && !containsEsc &&
	             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
	             (prop.key.name === "get" || prop.key.name === "set") &&
	             (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {
	    if (isGenerator || isAsync) { this.unexpected(); }
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    prop.value = this.parseMethod(false);
	    var paramCount = prop.kind === "get" ? 0 : 1;
	    if (prop.value.params.length !== paramCount) {
	      var start = prop.value.start;
	      if (prop.kind === "get")
	        { this.raiseRecoverable(start, "getter should have no params"); }
	      else
	        { this.raiseRecoverable(start, "setter should have exactly one param"); }
	    } else {
	      if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
	        { this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params"); }
	    }
	  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
	    if (isGenerator || isAsync) { this.unexpected(); }
	    this.checkUnreserved(prop.key);
	    if (prop.key.name === "await" && !this.awaitIdentPos)
	      { this.awaitIdentPos = startPos; }
	    prop.kind = "init";
	    if (isPattern) {
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
	    } else if (this.type === types$1.eq && refDestructuringErrors) {
	      if (refDestructuringErrors.shorthandAssign < 0)
	        { refDestructuringErrors.shorthandAssign = this.start; }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
	    } else {
	      prop.value = prop.key;
	    }
	    prop.shorthand = true;
	  } else { this.unexpected(); }
	};

	pp$3.parsePropertyName = function(prop) {
	  if (this.options.ecmaVersion >= 6) {
	    if (this.eat(types$1.bracketL)) {
	      prop.computed = true;
	      prop.key = this.parseMaybeAssign();
	      this.expect(types$1.bracketR);
	      return prop.key
	    } else {
	      prop.computed = false;
	    }
	  }
	  return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never")
	};

	// Initialize empty function node.

	pp$3.initFunction = function(node) {
	  node.id = null;
	  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }
	  if (this.options.ecmaVersion >= 8) { node.async = false; }
	};

	// Parse object or class method.

	pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
	  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

	  this.initFunction(node);
	  if (this.options.ecmaVersion >= 6)
	    { node.generator = isGenerator; }
	  if (this.options.ecmaVersion >= 8)
	    { node.async = !!isAsync; }

	  this.yieldPos = 0;
	  this.awaitPos = 0;
	  this.awaitIdentPos = 0;
	  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));

	  this.expect(types$1.parenL);
	  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
	  this.checkYieldAwaitInDefaultParams();
	  this.parseFunctionBody(node, false, true);

	  this.yieldPos = oldYieldPos;
	  this.awaitPos = oldAwaitPos;
	  this.awaitIdentPos = oldAwaitIdentPos;
	  return this.finishNode(node, "FunctionExpression")
	};

	// Parse arrow function expression with given parameters.

	pp$3.parseArrowExpression = function(node, params, isAsync) {
	  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

	  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
	  this.initFunction(node);
	  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }

	  this.yieldPos = 0;
	  this.awaitPos = 0;
	  this.awaitIdentPos = 0;

	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true, false);

	  this.yieldPos = oldYieldPos;
	  this.awaitPos = oldAwaitPos;
	  this.awaitIdentPos = oldAwaitIdentPos;
	  return this.finishNode(node, "ArrowFunctionExpression")
	};

	// Parse function body and check parameters.

	pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {
	  var isExpression = isArrowFunction && this.type !== types$1.braceL;
	  var oldStrict = this.strict, useStrict = false;

	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	    this.checkParams(node, false);
	  } else {
	    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
	    if (!oldStrict || nonSimple) {
	      useStrict = this.strictDirective(this.end);
	      // If this is a strict mode function, verify that argument names
	      // are not repeated, and it does not try to bind the words `eval`
	      // or `arguments`.
	      if (useStrict && nonSimple)
	        { this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list"); }
	    }
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldLabels = this.labels;
	    this.labels = [];
	    if (useStrict) { this.strict = true; }

	    // Add the params to varDeclaredNames to ensure that an error is thrown
	    // if a let/const declaration in the function clashes with one of the params.
	    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
	    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
	    if (this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }
	    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);
	    node.expression = false;
	    this.adaptDirectivePrologue(node.body.body);
	    this.labels = oldLabels;
	  }
	  this.exitScope();
	};

	pp$3.isSimpleParamList = function(params) {
	  for (var i = 0, list = params; i < list.length; i += 1)
	    {
	    var param = list[i];

	    if (param.type !== "Identifier") { return false
	  } }
	  return true
	};

	// Checks function params for various disallowed patterns such as using "eval"
	// or "arguments" and duplicate parameters.

	pp$3.checkParams = function(node, allowDuplicates) {
	  var nameHash = {};
	  for (var i = 0, list = node.params; i < list.length; i += 1)
	    {
	    var param = list[i];

	    this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
	  }
	};

	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).

	pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
	  var elts = [], first = true;
	  while (!this.eat(close)) {
	    if (!first) {
	      this.expect(types$1.comma);
	      if (allowTrailingComma && this.afterTrailingComma(close)) { break }
	    } else { first = false; }

	    var elt = (void 0);
	    if (allowEmpty && this.type === types$1.comma)
	      { elt = null; }
	    else if (this.type === types$1.ellipsis) {
	      elt = this.parseSpread(refDestructuringErrors);
	      if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)
	        { refDestructuringErrors.trailingComma = this.start; }
	    } else {
	      elt = this.parseMaybeAssign(false, refDestructuringErrors);
	    }
	    elts.push(elt);
	  }
	  return elts
	};

	pp$3.checkUnreserved = function(ref) {
	  var start = ref.start;
	  var end = ref.end;
	  var name = ref.name;

	  if (this.inGenerator && name === "yield")
	    { this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"); }
	  if (this.inAsync && name === "await")
	    { this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"); }
	  if (this.keywords.test(name))
	    { this.raise(start, ("Unexpected keyword '" + name + "'")); }
	  if (this.options.ecmaVersion < 6 &&
	    this.input.slice(start, end).indexOf("\\") !== -1) { return }
	  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
	  if (re.test(name)) {
	    if (!this.inAsync && name === "await")
	      { this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"); }
	    this.raiseRecoverable(start, ("The keyword '" + name + "' is reserved"));
	  }
	};

	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.

	pp$3.parseIdent = function(liberal, isBinding) {
	  var node = this.startNode();
	  if (this.type === types$1.name) {
	    node.name = this.value;
	  } else if (this.type.keyword) {
	    node.name = this.type.keyword;

	    // To fix https://github.com/acornjs/acorn/issues/575
	    // `class` and `function` keywords push new context into this.context.
	    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
	    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
	    if ((node.name === "class" || node.name === "function") &&
	        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
	      this.context.pop();
	    }
	  } else {
	    this.unexpected();
	  }
	  this.next(!!liberal);
	  this.finishNode(node, "Identifier");
	  if (!liberal) {
	    this.checkUnreserved(node);
	    if (node.name === "await" && !this.awaitIdentPos)
	      { this.awaitIdentPos = node.start; }
	  }
	  return node
	};

	// Parses yield expression inside generator.

	pp$3.parseYield = function(noIn) {
	  if (!this.yieldPos) { this.yieldPos = this.start; }

	  var node = this.startNode();
	  this.next();
	  if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(types$1.star);
	    node.argument = this.parseMaybeAssign(noIn);
	  }
	  return this.finishNode(node, "YieldExpression")
	};

	pp$3.parseAwait = function() {
	  if (!this.awaitPos) { this.awaitPos = this.start; }

	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeUnary(null, false);
	  return this.finishNode(node, "AwaitExpression")
	};

	var pp$4 = Parser$1.prototype;

	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.

	pp$4.raise = function(pos, message) {
	  var loc = getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;
	  throw err
	};

	pp$4.raiseRecoverable = pp$4.raise;

	pp$4.curPosition = function() {
	  if (this.options.locations) {
	    return new Position(this.curLine, this.pos - this.lineStart)
	  }
	};

	var pp$5 = Parser$1.prototype;

	var Scope = function Scope(flags) {
	  this.flags = flags;
	  // A list of var-declared names in the current lexical scope
	  this.var = [];
	  // A list of lexically-declared names in the current lexical scope
	  this.lexical = [];
	  // A list of lexically-declared FunctionDeclaration names in the current lexical scope
	  this.functions = [];
	};

	// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.

	pp$5.enterScope = function(flags) {
	  this.scopeStack.push(new Scope(flags));
	};

	pp$5.exitScope = function() {
	  this.scopeStack.pop();
	};

	// The spec says:
	// > At the top level of a function, or script, function declarations are
	// > treated like var declarations rather than like lexical declarations.
	pp$5.treatFunctionsAsVarInScope = function(scope) {
	  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)
	};

	pp$5.declareName = function(name, bindingType, pos) {
	  var redeclared = false;
	  if (bindingType === BIND_LEXICAL) {
	    var scope = this.currentScope();
	    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
	    scope.lexical.push(name);
	    if (this.inModule && (scope.flags & SCOPE_TOP))
	      { delete this.undefinedExports[name]; }
	  } else if (bindingType === BIND_SIMPLE_CATCH) {
	    var scope$1 = this.currentScope();
	    scope$1.lexical.push(name);
	  } else if (bindingType === BIND_FUNCTION) {
	    var scope$2 = this.currentScope();
	    if (this.treatFunctionsAsVar)
	      { redeclared = scope$2.lexical.indexOf(name) > -1; }
	    else
	      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }
	    scope$2.functions.push(name);
	  } else {
	    for (var i = this.scopeStack.length - 1; i >= 0; --i) {
	      var scope$3 = this.scopeStack[i];
	      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||
	          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
	        redeclared = true;
	        break
	      }
	      scope$3.var.push(name);
	      if (this.inModule && (scope$3.flags & SCOPE_TOP))
	        { delete this.undefinedExports[name]; }
	      if (scope$3.flags & SCOPE_VAR) { break }
	    }
	  }
	  if (redeclared) { this.raiseRecoverable(pos, ("Identifier '" + name + "' has already been declared")); }
	};

	pp$5.checkLocalExport = function(id) {
	  // scope.functions must be empty as Module code is always strict.
	  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&
	      this.scopeStack[0].var.indexOf(id.name) === -1) {
	    this.undefinedExports[id.name] = id;
	  }
	};

	pp$5.currentScope = function() {
	  return this.scopeStack[this.scopeStack.length - 1]
	};

	pp$5.currentVarScope = function() {
	  for (var i = this.scopeStack.length - 1;; i--) {
	    var scope = this.scopeStack[i];
	    if (scope.flags & SCOPE_VAR) { return scope }
	  }
	};

	// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.
	pp$5.currentThisScope = function() {
	  for (var i = this.scopeStack.length - 1;; i--) {
	    var scope = this.scopeStack[i];
	    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }
	  }
	};

	var Node$1 = function Node(parser, pos, loc) {
	  this.type = "";
	  this.start = pos;
	  this.end = 0;
	  if (parser.options.locations)
	    { this.loc = new SourceLocation(parser, loc); }
	  if (parser.options.directSourceFile)
	    { this.sourceFile = parser.options.directSourceFile; }
	  if (parser.options.ranges)
	    { this.range = [pos, 0]; }
	};

	// Start an AST node, attaching a start offset.

	var pp$6 = Parser$1.prototype;

	pp$6.startNode = function() {
	  return new Node$1(this, this.start, this.startLoc)
	};

	pp$6.startNodeAt = function(pos, loc) {
	  return new Node$1(this, pos, loc)
	};

	// Finish an AST node, adding `type` and `end` properties.

	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  if (this.options.locations)
	    { node.loc.end = loc; }
	  if (this.options.ranges)
	    { node.range[1] = pos; }
	  return node
	}

	pp$6.finishNode = function(node, type) {
	  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
	};

	// Finish node at given position

	pp$6.finishNodeAt = function(node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc)
	};

	// The algorithm used to determine whether a regexp can appear at a

	var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	  this.generator = !!generator;
	};

	var types$1$1 = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", false),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) { return p.tryReadTemplateToken(); }),
	  f_stat: new TokContext("function", false),
	  f_expr: new TokContext("function", true),
	  f_expr_gen: new TokContext("function", true, false, null, true),
	  f_gen: new TokContext("function", false, false, null, true)
	};

	var pp$7 = Parser$1.prototype;

	pp$7.initialContext = function() {
	  return [types$1$1.b_stat]
	};

	pp$7.braceIsBlock = function(prevType) {
	  var parent = this.curContext();
	  if (parent === types$1$1.f_expr || parent === types$1$1.f_stat)
	    { return true }
	  if (prevType === types$1.colon && (parent === types$1$1.b_stat || parent === types$1$1.b_expr))
	    { return !parent.isExpr }

	  // The check for `tt.name && exprAllowed` detects whether we are
	  // after a `yield` or `of` construct. See the `updateContext` for
	  // `tt.name`.
	  if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)
	    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }
	  if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)
	    { return true }
	  if (prevType === types$1.braceL)
	    { return parent === types$1$1.b_stat }
	  if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)
	    { return false }
	  return !this.exprAllowed
	};

	pp$7.inGeneratorContext = function() {
	  for (var i = this.context.length - 1; i >= 1; i--) {
	    var context = this.context[i];
	    if (context.token === "function")
	      { return context.generator }
	  }
	  return false
	};

	pp$7.updateContext = function(prevType) {
	  var update, type = this.type;
	  if (type.keyword && prevType === types$1.dot)
	    { this.exprAllowed = false; }
	  else if (update = type.updateContext)
	    { update.call(this, prevType); }
	  else
	    { this.exprAllowed = type.beforeExpr; }
	};

	// Token-specific context update code

	types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
	  if (this.context.length === 1) {
	    this.exprAllowed = true;
	    return
	  }
	  var out = this.context.pop();
	  if (out === types$1$1.b_stat && this.curContext().token === "function") {
	    out = this.context.pop();
	  }
	  this.exprAllowed = !out.isExpr;
	};

	types$1.braceL.updateContext = function(prevType) {
	  this.context.push(this.braceIsBlock(prevType) ? types$1$1.b_stat : types$1$1.b_expr);
	  this.exprAllowed = true;
	};

	types$1.dollarBraceL.updateContext = function() {
	  this.context.push(types$1$1.b_tmpl);
	  this.exprAllowed = true;
	};

	types$1.parenL.updateContext = function(prevType) {
	  var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
	  this.context.push(statementParens ? types$1$1.p_stat : types$1$1.p_expr);
	  this.exprAllowed = true;
	};

	types$1.incDec.updateContext = function() {
	  // tokExprAllowed stays unchanged
	};

	types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
	  if (prevType.beforeExpr && prevType !== types$1.semi && prevType !== types$1._else &&
	      !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&
	      !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types$1$1.b_stat))
	    { this.context.push(types$1$1.f_expr); }
	  else
	    { this.context.push(types$1$1.f_stat); }
	  this.exprAllowed = false;
	};

	types$1.backQuote.updateContext = function() {
	  if (this.curContext() === types$1$1.q_tmpl)
	    { this.context.pop(); }
	  else
	    { this.context.push(types$1$1.q_tmpl); }
	  this.exprAllowed = false;
	};

	types$1.star.updateContext = function(prevType) {
	  if (prevType === types$1._function) {
	    var index = this.context.length - 1;
	    if (this.context[index] === types$1$1.f_expr)
	      { this.context[index] = types$1$1.f_expr_gen; }
	    else
	      { this.context[index] = types$1$1.f_gen; }
	  }
	  this.exprAllowed = true;
	};

	types$1.name.updateContext = function(prevType) {
	  var allowed = false;
	  if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
	    if (this.value === "of" && !this.exprAllowed ||
	        this.value === "yield" && this.inGeneratorContext())
	      { allowed = true; }
	  }
	  this.exprAllowed = allowed;
	};

	// This file contains Unicode properties extracted from the ECMAScript
	// specification. The lists are extracted like so:
	// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)

	// #table-binary-unicode-properties
	var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
	var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
	var ecma11BinaryProperties = ecma10BinaryProperties;
	var unicodeBinaryProperties = {
	  9: ecma9BinaryProperties,
	  10: ecma10BinaryProperties,
	  11: ecma11BinaryProperties
	};

	// #table-unicode-general-category-values
	var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";

	// #table-unicode-script-values
	var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
	var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
	var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
	var unicodeScriptValues = {
	  9: ecma9ScriptValues,
	  10: ecma10ScriptValues,
	  11: ecma11ScriptValues
	};

	var data = {};
	function buildUnicodeData(ecmaVersion) {
	  var d = data[ecmaVersion] = {
	    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
	    nonBinary: {
	      General_Category: wordsRegexp(unicodeGeneralCategoryValues),
	      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
	    }
	  };
	  d.nonBinary.Script_Extensions = d.nonBinary.Script;

	  d.nonBinary.gc = d.nonBinary.General_Category;
	  d.nonBinary.sc = d.nonBinary.Script;
	  d.nonBinary.scx = d.nonBinary.Script_Extensions;
	}
	buildUnicodeData(9);
	buildUnicodeData(10);
	buildUnicodeData(11);

	var pp$8 = Parser$1.prototype;

	var RegExpValidationState = function RegExpValidationState(parser) {
	  this.parser = parser;
	  this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
	  this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
	  this.source = "";
	  this.flags = "";
	  this.start = 0;
	  this.switchU = false;
	  this.switchN = false;
	  this.pos = 0;
	  this.lastIntValue = 0;
	  this.lastStringValue = "";
	  this.lastAssertionIsQuantifiable = false;
	  this.numCapturingParens = 0;
	  this.maxBackReference = 0;
	  this.groupNames = [];
	  this.backReferenceNames = [];
	};

	RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {
	  var unicode = flags.indexOf("u") !== -1;
	  this.start = start | 0;
	  this.source = pattern + "";
	  this.flags = flags;
	  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
	  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
	};

	RegExpValidationState.prototype.raise = function raise (message) {
	  this.parser.raiseRecoverable(this.start, ("Invalid regular expression: /" + (this.source) + "/: " + message));
	};

	// If u flag is given, this returns the code point at the index (it combines a surrogate pair).
	// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
	RegExpValidationState.prototype.at = function at (i, forceU) {
	    if ( forceU === void 0 ) forceU = false;

	  var s = this.source;
	  var l = s.length;
	  if (i >= l) {
	    return -1
	  }
	  var c = s.charCodeAt(i);
	  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
	    return c
	  }
	  var next = s.charCodeAt(i + 1);
	  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c
	};

	RegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {
	    if ( forceU === void 0 ) forceU = false;

	  var s = this.source;
	  var l = s.length;
	  if (i >= l) {
	    return l
	  }
	  var c = s.charCodeAt(i), next;
	  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||
	      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {
	    return i + 1
	  }
	  return i + 2
	};

	RegExpValidationState.prototype.current = function current (forceU) {
	    if ( forceU === void 0 ) forceU = false;

	  return this.at(this.pos, forceU)
	};

	RegExpValidationState.prototype.lookahead = function lookahead (forceU) {
	    if ( forceU === void 0 ) forceU = false;

	  return this.at(this.nextIndex(this.pos, forceU), forceU)
	};

	RegExpValidationState.prototype.advance = function advance (forceU) {
	    if ( forceU === void 0 ) forceU = false;

	  this.pos = this.nextIndex(this.pos, forceU);
	};

	RegExpValidationState.prototype.eat = function eat (ch, forceU) {
	    if ( forceU === void 0 ) forceU = false;

	  if (this.current(forceU) === ch) {
	    this.advance(forceU);
	    return true
	  }
	  return false
	};

	function codePointToString(ch) {
	  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }
	  ch -= 0x10000;
	  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)
	}

	/**
	 * Validate the flags part of a given RegExpLiteral.
	 *
	 * @param {RegExpValidationState} state The state to validate RegExp.
	 * @returns {void}
	 */
	pp$8.validateRegExpFlags = function(state) {
	  var validFlags = state.validFlags;
	  var flags = state.flags;

	  for (var i = 0; i < flags.length; i++) {
	    var flag = flags.charAt(i);
	    if (validFlags.indexOf(flag) === -1) {
	      this.raise(state.start, "Invalid regular expression flag");
	    }
	    if (flags.indexOf(flag, i + 1) > -1) {
	      this.raise(state.start, "Duplicate regular expression flag");
	    }
	  }
	};

	/**
	 * Validate the pattern part of a given RegExpLiteral.
	 *
	 * @param {RegExpValidationState} state The state to validate RegExp.
	 * @returns {void}
	 */
	pp$8.validateRegExpPattern = function(state) {
	  this.regexp_pattern(state);

	  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
	  // parsing contains a |GroupName|, reparse with the goal symbol
	  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
	  // exception if _P_ did not conform to the grammar, if any elements of _P_
	  // were not matched by the parse, or if any Early Error conditions exist.
	  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
	    state.switchN = true;
	    this.regexp_pattern(state);
	  }
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern
	pp$8.regexp_pattern = function(state) {
	  state.pos = 0;
	  state.lastIntValue = 0;
	  state.lastStringValue = "";
	  state.lastAssertionIsQuantifiable = false;
	  state.numCapturingParens = 0;
	  state.maxBackReference = 0;
	  state.groupNames.length = 0;
	  state.backReferenceNames.length = 0;

	  this.regexp_disjunction(state);

	  if (state.pos !== state.source.length) {
	    // Make the same messages as V8.
	    if (state.eat(0x29 /* ) */)) {
	      state.raise("Unmatched ')'");
	    }
	    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {
	      state.raise("Lone quantifier brackets");
	    }
	  }
	  if (state.maxBackReference > state.numCapturingParens) {
	    state.raise("Invalid escape");
	  }
	  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
	    var name = list[i];

	    if (state.groupNames.indexOf(name) === -1) {
	      state.raise("Invalid named capture referenced");
	    }
	  }
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction
	pp$8.regexp_disjunction = function(state) {
	  this.regexp_alternative(state);
	  while (state.eat(0x7C /* | */)) {
	    this.regexp_alternative(state);
	  }

	  // Make the same message as V8.
	  if (this.regexp_eatQuantifier(state, true)) {
	    state.raise("Nothing to repeat");
	  }
	  if (state.eat(0x7B /* { */)) {
	    state.raise("Lone quantifier brackets");
	  }
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative
	pp$8.regexp_alternative = function(state) {
	  while (state.pos < state.source.length && this.regexp_eatTerm(state))
	    { }
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term
	pp$8.regexp_eatTerm = function(state) {
	  if (this.regexp_eatAssertion(state)) {
	    // Handle `QuantifiableAssertion Quantifier` alternative.
	    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
	    // is a QuantifiableAssertion.
	    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
	      // Make the same message as V8.
	      if (state.switchU) {
	        state.raise("Invalid quantifier");
	      }
	    }
	    return true
	  }

	  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
	    this.regexp_eatQuantifier(state);
	    return true
	  }

	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion
	pp$8.regexp_eatAssertion = function(state) {
	  var start = state.pos;
	  state.lastAssertionIsQuantifiable = false;

	  // ^, $
	  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {
	    return true
	  }

	  // \b \B
	  if (state.eat(0x5C /* \ */)) {
	    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {
	      return true
	    }
	    state.pos = start;
	  }

	  // Lookahead / Lookbehind
	  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {
	    var lookbehind = false;
	    if (this.options.ecmaVersion >= 9) {
	      lookbehind = state.eat(0x3C /* < */);
	    }
	    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {
	      this.regexp_disjunction(state);
	      if (!state.eat(0x29 /* ) */)) {
	        state.raise("Unterminated group");
	      }
	      state.lastAssertionIsQuantifiable = !lookbehind;
	      return true
	    }
	  }

	  state.pos = start;
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier
	pp$8.regexp_eatQuantifier = function(state, noError) {
	  if ( noError === void 0 ) noError = false;

	  if (this.regexp_eatQuantifierPrefix(state, noError)) {
	    state.eat(0x3F /* ? */);
	    return true
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix
	pp$8.regexp_eatQuantifierPrefix = function(state, noError) {
	  return (
	    state.eat(0x2A /* * */) ||
	    state.eat(0x2B /* + */) ||
	    state.eat(0x3F /* ? */) ||
	    this.regexp_eatBracedQuantifier(state, noError)
	  )
	};
	pp$8.regexp_eatBracedQuantifier = function(state, noError) {
	  var start = state.pos;
	  if (state.eat(0x7B /* { */)) {
	    var min = 0, max = -1;
	    if (this.regexp_eatDecimalDigits(state)) {
	      min = state.lastIntValue;
	      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {
	        max = state.lastIntValue;
	      }
	      if (state.eat(0x7D /* } */)) {
	        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
	        if (max !== -1 && max < min && !noError) {
	          state.raise("numbers out of order in {} quantifier");
	        }
	        return true
	      }
	    }
	    if (state.switchU && !noError) {
	      state.raise("Incomplete quantifier");
	    }
	    state.pos = start;
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom
	pp$8.regexp_eatAtom = function(state) {
	  return (
	    this.regexp_eatPatternCharacters(state) ||
	    state.eat(0x2E /* . */) ||
	    this.regexp_eatReverseSolidusAtomEscape(state) ||
	    this.regexp_eatCharacterClass(state) ||
	    this.regexp_eatUncapturingGroup(state) ||
	    this.regexp_eatCapturingGroup(state)
	  )
	};
	pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {
	  var start = state.pos;
	  if (state.eat(0x5C /* \ */)) {
	    if (this.regexp_eatAtomEscape(state)) {
	      return true
	    }
	    state.pos = start;
	  }
	  return false
	};
	pp$8.regexp_eatUncapturingGroup = function(state) {
	  var start = state.pos;
	  if (state.eat(0x28 /* ( */)) {
	    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {
	      this.regexp_disjunction(state);
	      if (state.eat(0x29 /* ) */)) {
	        return true
	      }
	      state.raise("Unterminated group");
	    }
	    state.pos = start;
	  }
	  return false
	};
	pp$8.regexp_eatCapturingGroup = function(state) {
	  if (state.eat(0x28 /* ( */)) {
	    if (this.options.ecmaVersion >= 9) {
	      this.regexp_groupSpecifier(state);
	    } else if (state.current() === 0x3F /* ? */) {
	      state.raise("Invalid group");
	    }
	    this.regexp_disjunction(state);
	    if (state.eat(0x29 /* ) */)) {
	      state.numCapturingParens += 1;
	      return true
	    }
	    state.raise("Unterminated group");
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom
	pp$8.regexp_eatExtendedAtom = function(state) {
	  return (
	    state.eat(0x2E /* . */) ||
	    this.regexp_eatReverseSolidusAtomEscape(state) ||
	    this.regexp_eatCharacterClass(state) ||
	    this.regexp_eatUncapturingGroup(state) ||
	    this.regexp_eatCapturingGroup(state) ||
	    this.regexp_eatInvalidBracedQuantifier(state) ||
	    this.regexp_eatExtendedPatternCharacter(state)
	  )
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier
	pp$8.regexp_eatInvalidBracedQuantifier = function(state) {
	  if (this.regexp_eatBracedQuantifier(state, true)) {
	    state.raise("Nothing to repeat");
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter
	pp$8.regexp_eatSyntaxCharacter = function(state) {
	  var ch = state.current();
	  if (isSyntaxCharacter(ch)) {
	    state.lastIntValue = ch;
	    state.advance();
	    return true
	  }
	  return false
	};
	function isSyntaxCharacter(ch) {
	  return (
	    ch === 0x24 /* $ */ ||
	    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||
	    ch === 0x2E /* . */ ||
	    ch === 0x3F /* ? */ ||
	    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||
	    ch >= 0x7B /* { */ && ch <= 0x7D /* } */
	  )
	}

	// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
	// But eat eager.
	pp$8.regexp_eatPatternCharacters = function(state) {
	  var start = state.pos;
	  var ch = 0;
	  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
	    state.advance();
	  }
	  return state.pos !== start
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter
	pp$8.regexp_eatExtendedPatternCharacter = function(state) {
	  var ch = state.current();
	  if (
	    ch !== -1 &&
	    ch !== 0x24 /* $ */ &&
	    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&
	    ch !== 0x2E /* . */ &&
	    ch !== 0x3F /* ? */ &&
	    ch !== 0x5B /* [ */ &&
	    ch !== 0x5E /* ^ */ &&
	    ch !== 0x7C /* | */
	  ) {
	    state.advance();
	    return true
	  }
	  return false
	};

	// GroupSpecifier ::
	//   [empty]
	//   `?` GroupName
	pp$8.regexp_groupSpecifier = function(state) {
	  if (state.eat(0x3F /* ? */)) {
	    if (this.regexp_eatGroupName(state)) {
	      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
	        state.raise("Duplicate capture group name");
	      }
	      state.groupNames.push(state.lastStringValue);
	      return
	    }
	    state.raise("Invalid group");
	  }
	};

	// GroupName ::
	//   `<` RegExpIdentifierName `>`
	// Note: this updates `state.lastStringValue` property with the eaten name.
	pp$8.regexp_eatGroupName = function(state) {
	  state.lastStringValue = "";
	  if (state.eat(0x3C /* < */)) {
	    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {
	      return true
	    }
	    state.raise("Invalid capture group name");
	  }
	  return false
	};

	// RegExpIdentifierName ::
	//   RegExpIdentifierStart
	//   RegExpIdentifierName RegExpIdentifierPart
	// Note: this updates `state.lastStringValue` property with the eaten name.
	pp$8.regexp_eatRegExpIdentifierName = function(state) {
	  state.lastStringValue = "";
	  if (this.regexp_eatRegExpIdentifierStart(state)) {
	    state.lastStringValue += codePointToString(state.lastIntValue);
	    while (this.regexp_eatRegExpIdentifierPart(state)) {
	      state.lastStringValue += codePointToString(state.lastIntValue);
	    }
	    return true
	  }
	  return false
	};

	// RegExpIdentifierStart ::
	//   UnicodeIDStart
	//   `$`
	//   `_`
	//   `\` RegExpUnicodeEscapeSequence[+U]
	pp$8.regexp_eatRegExpIdentifierStart = function(state) {
	  var start = state.pos;
	  var forceU = this.options.ecmaVersion >= 11;
	  var ch = state.current(forceU);
	  state.advance(forceU);

	  if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
	    ch = state.lastIntValue;
	  }
	  if (isRegExpIdentifierStart(ch)) {
	    state.lastIntValue = ch;
	    return true
	  }

	  state.pos = start;
	  return false
	};
	function isRegExpIdentifierStart(ch) {
	  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */
	}

	// RegExpIdentifierPart ::
	//   UnicodeIDContinue
	//   `$`
	//   `_`
	//   `\` RegExpUnicodeEscapeSequence[+U]
	//   <ZWNJ>
	//   <ZWJ>
	pp$8.regexp_eatRegExpIdentifierPart = function(state) {
	  var start = state.pos;
	  var forceU = this.options.ecmaVersion >= 11;
	  var ch = state.current(forceU);
	  state.advance(forceU);

	  if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
	    ch = state.lastIntValue;
	  }
	  if (isRegExpIdentifierPart(ch)) {
	    state.lastIntValue = ch;
	    return true
	  }

	  state.pos = start;
	  return false
	};
	function isRegExpIdentifierPart(ch) {
	  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */
	}

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape
	pp$8.regexp_eatAtomEscape = function(state) {
	  if (
	    this.regexp_eatBackReference(state) ||
	    this.regexp_eatCharacterClassEscape(state) ||
	    this.regexp_eatCharacterEscape(state) ||
	    (state.switchN && this.regexp_eatKGroupName(state))
	  ) {
	    return true
	  }
	  if (state.switchU) {
	    // Make the same message as V8.
	    if (state.current() === 0x63 /* c */) {
	      state.raise("Invalid unicode escape");
	    }
	    state.raise("Invalid escape");
	  }
	  return false
	};
	pp$8.regexp_eatBackReference = function(state) {
	  var start = state.pos;
	  if (this.regexp_eatDecimalEscape(state)) {
	    var n = state.lastIntValue;
	    if (state.switchU) {
	      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
	      if (n > state.maxBackReference) {
	        state.maxBackReference = n;
	      }
	      return true
	    }
	    if (n <= state.numCapturingParens) {
	      return true
	    }
	    state.pos = start;
	  }
	  return false
	};
	pp$8.regexp_eatKGroupName = function(state) {
	  if (state.eat(0x6B /* k */)) {
	    if (this.regexp_eatGroupName(state)) {
	      state.backReferenceNames.push(state.lastStringValue);
	      return true
	    }
	    state.raise("Invalid named reference");
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape
	pp$8.regexp_eatCharacterEscape = function(state) {
	  return (
	    this.regexp_eatControlEscape(state) ||
	    this.regexp_eatCControlLetter(state) ||
	    this.regexp_eatZero(state) ||
	    this.regexp_eatHexEscapeSequence(state) ||
	    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||
	    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||
	    this.regexp_eatIdentityEscape(state)
	  )
	};
	pp$8.regexp_eatCControlLetter = function(state) {
	  var start = state.pos;
	  if (state.eat(0x63 /* c */)) {
	    if (this.regexp_eatControlLetter(state)) {
	      return true
	    }
	    state.pos = start;
	  }
	  return false
	};
	pp$8.regexp_eatZero = function(state) {
	  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {
	    state.lastIntValue = 0;
	    state.advance();
	    return true
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape
	pp$8.regexp_eatControlEscape = function(state) {
	  var ch = state.current();
	  if (ch === 0x74 /* t */) {
	    state.lastIntValue = 0x09; /* \t */
	    state.advance();
	    return true
	  }
	  if (ch === 0x6E /* n */) {
	    state.lastIntValue = 0x0A; /* \n */
	    state.advance();
	    return true
	  }
	  if (ch === 0x76 /* v */) {
	    state.lastIntValue = 0x0B; /* \v */
	    state.advance();
	    return true
	  }
	  if (ch === 0x66 /* f */) {
	    state.lastIntValue = 0x0C; /* \f */
	    state.advance();
	    return true
	  }
	  if (ch === 0x72 /* r */) {
	    state.lastIntValue = 0x0D; /* \r */
	    state.advance();
	    return true
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter
	pp$8.regexp_eatControlLetter = function(state) {
	  var ch = state.current();
	  if (isControlLetter(ch)) {
	    state.lastIntValue = ch % 0x20;
	    state.advance();
	    return true
	  }
	  return false
	};
	function isControlLetter(ch) {
	  return (
	    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||
	    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)
	  )
	}

	// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence
	pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
	  if ( forceU === void 0 ) forceU = false;

	  var start = state.pos;
	  var switchU = forceU || state.switchU;

	  if (state.eat(0x75 /* u */)) {
	    if (this.regexp_eatFixedHexDigits(state, 4)) {
	      var lead = state.lastIntValue;
	      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {
	        var leadSurrogateEnd = state.pos;
	        if (state.eat(0x5C /* \ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {
	          var trail = state.lastIntValue;
	          if (trail >= 0xDC00 && trail <= 0xDFFF) {
	            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
	            return true
	          }
	        }
	        state.pos = leadSurrogateEnd;
	        state.lastIntValue = lead;
	      }
	      return true
	    }
	    if (
	      switchU &&
	      state.eat(0x7B /* { */) &&
	      this.regexp_eatHexDigits(state) &&
	      state.eat(0x7D /* } */) &&
	      isValidUnicode(state.lastIntValue)
	    ) {
	      return true
	    }
	    if (switchU) {
	      state.raise("Invalid unicode escape");
	    }
	    state.pos = start;
	  }

	  return false
	};
	function isValidUnicode(ch) {
	  return ch >= 0 && ch <= 0x10FFFF
	}

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape
	pp$8.regexp_eatIdentityEscape = function(state) {
	  if (state.switchU) {
	    if (this.regexp_eatSyntaxCharacter(state)) {
	      return true
	    }
	    if (state.eat(0x2F /* / */)) {
	      state.lastIntValue = 0x2F; /* / */
	      return true
	    }
	    return false
	  }

	  var ch = state.current();
	  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {
	    state.lastIntValue = ch;
	    state.advance();
	    return true
	  }

	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape
	pp$8.regexp_eatDecimalEscape = function(state) {
	  state.lastIntValue = 0;
	  var ch = state.current();
	  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {
	    do {
	      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
	      state.advance();
	    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)
	    return true
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape
	pp$8.regexp_eatCharacterClassEscape = function(state) {
	  var ch = state.current();

	  if (isCharacterClassEscape(ch)) {
	    state.lastIntValue = -1;
	    state.advance();
	    return true
	  }

	  if (
	    state.switchU &&
	    this.options.ecmaVersion >= 9 &&
	    (ch === 0x50 /* P */ || ch === 0x70 /* p */)
	  ) {
	    state.lastIntValue = -1;
	    state.advance();
	    if (
	      state.eat(0x7B /* { */) &&
	      this.regexp_eatUnicodePropertyValueExpression(state) &&
	      state.eat(0x7D /* } */)
	    ) {
	      return true
	    }
	    state.raise("Invalid property name");
	  }

	  return false
	};
	function isCharacterClassEscape(ch) {
	  return (
	    ch === 0x64 /* d */ ||
	    ch === 0x44 /* D */ ||
	    ch === 0x73 /* s */ ||
	    ch === 0x53 /* S */ ||
	    ch === 0x77 /* w */ ||
	    ch === 0x57 /* W */
	  )
	}

	// UnicodePropertyValueExpression ::
	//   UnicodePropertyName `=` UnicodePropertyValue
	//   LoneUnicodePropertyNameOrValue
	pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {
	  var start = state.pos;

	  // UnicodePropertyName `=` UnicodePropertyValue
	  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {
	    var name = state.lastStringValue;
	    if (this.regexp_eatUnicodePropertyValue(state)) {
	      var value = state.lastStringValue;
	      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
	      return true
	    }
	  }
	  state.pos = start;

	  // LoneUnicodePropertyNameOrValue
	  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
	    var nameOrValue = state.lastStringValue;
	    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
	    return true
	  }
	  return false
	};
	pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
	  if (!has$1(state.unicodeProperties.nonBinary, name))
	    { state.raise("Invalid property name"); }
	  if (!state.unicodeProperties.nonBinary[name].test(value))
	    { state.raise("Invalid property value"); }
	};
	pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
	  if (!state.unicodeProperties.binary.test(nameOrValue))
	    { state.raise("Invalid property name"); }
	};

	// UnicodePropertyName ::
	//   UnicodePropertyNameCharacters
	pp$8.regexp_eatUnicodePropertyName = function(state) {
	  var ch = 0;
	  state.lastStringValue = "";
	  while (isUnicodePropertyNameCharacter(ch = state.current())) {
	    state.lastStringValue += codePointToString(ch);
	    state.advance();
	  }
	  return state.lastStringValue !== ""
	};
	function isUnicodePropertyNameCharacter(ch) {
	  return isControlLetter(ch) || ch === 0x5F /* _ */
	}

	// UnicodePropertyValue ::
	//   UnicodePropertyValueCharacters
	pp$8.regexp_eatUnicodePropertyValue = function(state) {
	  var ch = 0;
	  state.lastStringValue = "";
	  while (isUnicodePropertyValueCharacter(ch = state.current())) {
	    state.lastStringValue += codePointToString(ch);
	    state.advance();
	  }
	  return state.lastStringValue !== ""
	};
	function isUnicodePropertyValueCharacter(ch) {
	  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)
	}

	// LoneUnicodePropertyNameOrValue ::
	//   UnicodePropertyValueCharacters
	pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
	  return this.regexp_eatUnicodePropertyValue(state)
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass
	pp$8.regexp_eatCharacterClass = function(state) {
	  if (state.eat(0x5B /* [ */)) {
	    state.eat(0x5E /* ^ */);
	    this.regexp_classRanges(state);
	    if (state.eat(0x5D /* ] */)) {
	      return true
	    }
	    // Unreachable since it threw "unterminated regular expression" error before.
	    state.raise("Unterminated character class");
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
	// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
	// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash
	pp$8.regexp_classRanges = function(state) {
	  while (this.regexp_eatClassAtom(state)) {
	    var left = state.lastIntValue;
	    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {
	      var right = state.lastIntValue;
	      if (state.switchU && (left === -1 || right === -1)) {
	        state.raise("Invalid character class");
	      }
	      if (left !== -1 && right !== -1 && left > right) {
	        state.raise("Range out of order in character class");
	      }
	    }
	  }
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
	// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash
	pp$8.regexp_eatClassAtom = function(state) {
	  var start = state.pos;

	  if (state.eat(0x5C /* \ */)) {
	    if (this.regexp_eatClassEscape(state)) {
	      return true
	    }
	    if (state.switchU) {
	      // Make the same message as V8.
	      var ch$1 = state.current();
	      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {
	        state.raise("Invalid class escape");
	      }
	      state.raise("Invalid escape");
	    }
	    state.pos = start;
	  }

	  var ch = state.current();
	  if (ch !== 0x5D /* ] */) {
	    state.lastIntValue = ch;
	    state.advance();
	    return true
	  }

	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape
	pp$8.regexp_eatClassEscape = function(state) {
	  var start = state.pos;

	  if (state.eat(0x62 /* b */)) {
	    state.lastIntValue = 0x08; /* <BS> */
	    return true
	  }

	  if (state.switchU && state.eat(0x2D /* - */)) {
	    state.lastIntValue = 0x2D; /* - */
	    return true
	  }

	  if (!state.switchU && state.eat(0x63 /* c */)) {
	    if (this.regexp_eatClassControlLetter(state)) {
	      return true
	    }
	    state.pos = start;
	  }

	  return (
	    this.regexp_eatCharacterClassEscape(state) ||
	    this.regexp_eatCharacterEscape(state)
	  )
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter
	pp$8.regexp_eatClassControlLetter = function(state) {
	  var ch = state.current();
	  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {
	    state.lastIntValue = ch % 0x20;
	    state.advance();
	    return true
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
	pp$8.regexp_eatHexEscapeSequence = function(state) {
	  var start = state.pos;
	  if (state.eat(0x78 /* x */)) {
	    if (this.regexp_eatFixedHexDigits(state, 2)) {
	      return true
	    }
	    if (state.switchU) {
	      state.raise("Invalid escape");
	    }
	    state.pos = start;
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits
	pp$8.regexp_eatDecimalDigits = function(state) {
	  var start = state.pos;
	  var ch = 0;
	  state.lastIntValue = 0;
	  while (isDecimalDigit(ch = state.current())) {
	    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
	    state.advance();
	  }
	  return state.pos !== start
	};
	function isDecimalDigit(ch) {
	  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */
	}

	// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits
	pp$8.regexp_eatHexDigits = function(state) {
	  var start = state.pos;
	  var ch = 0;
	  state.lastIntValue = 0;
	  while (isHexDigit(ch = state.current())) {
	    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
	    state.advance();
	  }
	  return state.pos !== start
	};
	function isHexDigit(ch) {
	  return (
	    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||
	    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||
	    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)
	  )
	}
	function hexToInt(ch) {
	  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {
	    return 10 + (ch - 0x41 /* A */)
	  }
	  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {
	    return 10 + (ch - 0x61 /* a */)
	  }
	  return ch - 0x30 /* 0 */
	}

	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
	// Allows only 0-377(octal) i.e. 0-255(decimal).
	pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {
	  if (this.regexp_eatOctalDigit(state)) {
	    var n1 = state.lastIntValue;
	    if (this.regexp_eatOctalDigit(state)) {
	      var n2 = state.lastIntValue;
	      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
	        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
	      } else {
	        state.lastIntValue = n1 * 8 + n2;
	      }
	    } else {
	      state.lastIntValue = n1;
	    }
	    return true
	  }
	  return false
	};

	// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit
	pp$8.regexp_eatOctalDigit = function(state) {
	  var ch = state.current();
	  if (isOctalDigit(ch)) {
	    state.lastIntValue = ch - 0x30; /* 0 */
	    state.advance();
	    return true
	  }
	  state.lastIntValue = 0;
	  return false
	};
	function isOctalDigit(ch) {
	  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */
	}

	// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
	// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
	// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
	pp$8.regexp_eatFixedHexDigits = function(state, length) {
	  var start = state.pos;
	  state.lastIntValue = 0;
	  for (var i = 0; i < length; ++i) {
	    var ch = state.current();
	    if (!isHexDigit(ch)) {
	      state.pos = start;
	      return false
	    }
	    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
	    state.advance();
	  }
	  return true
	};

	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.

	var Token$1 = function Token(p) {
	  this.type = p.type;
	  this.value = p.value;
	  this.start = p.start;
	  this.end = p.end;
	  if (p.options.locations)
	    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }
	  if (p.options.ranges)
	    { this.range = [p.start, p.end]; }
	};

	// ## Tokenizer

	var pp$9 = Parser$1.prototype;

	// Move to the next token

	pp$9.next = function(ignoreEscapeSequenceInKeyword) {
	  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)
	    { this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword); }
	  if (this.options.onToken)
	    { this.options.onToken(new Token$1(this)); }

	  this.lastTokEnd = this.end;
	  this.lastTokStart = this.start;
	  this.lastTokEndLoc = this.endLoc;
	  this.lastTokStartLoc = this.startLoc;
	  this.nextToken();
	};

	pp$9.getToken = function() {
	  this.next();
	  return new Token$1(this)
	};

	// If we're in an ES6 environment, make parsers iterable
	if (typeof Symbol !== "undefined")
	  { pp$9[Symbol.iterator] = function() {
	    var this$1 = this;

	    return {
	      next: function () {
	        var token = this$1.getToken();
	        return {
	          done: token.type === types$1.eof,
	          value: token
	        }
	      }
	    }
	  }; }

	// Toggle strict mode. Re-reads the next number or string to please
	// pedantic tests (`"use strict"; 010;` should fail).

	pp$9.curContext = function() {
	  return this.context[this.context.length - 1]
	};

	// Read a single token, updating the parser object's token-related
	// properties.

	pp$9.nextToken = function() {
	  var curContext = this.curContext();
	  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }

	  this.start = this.pos;
	  if (this.options.locations) { this.startLoc = this.curPosition(); }
	  if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }

	  if (curContext.override) { return curContext.override(this) }
	  else { this.readToken(this.fullCharCodeAtPos()); }
	};

	pp$9.readToken = function(code) {
	  // Identifier or keyword. '\uXXXX' sequences are allowed in
	  // identifiers, so '\' also dispatches to that.
	  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
	    { return this.readWord() }

	  return this.getTokenFromCode(code)
	};

	pp$9.fullCharCodeAtPos = function() {
	  var code = this.input.charCodeAt(this.pos);
	  if (code <= 0xd7ff || code >= 0xe000) { return code }
	  var next = this.input.charCodeAt(this.pos + 1);
	  return (code << 10) + next - 0x35fdc00
	};

	pp$9.skipBlockComment = function() {
	  var startLoc = this.options.onComment && this.curPosition();
	  var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
	  if (end === -1) { this.raise(this.pos - 2, "Unterminated comment"); }
	  this.pos = end + 2;
	  if (this.options.locations) {
	    lineBreakG.lastIndex = start;
	    var match;
	    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
	      ++this.curLine;
	      this.lineStart = match.index + match[0].length;
	    }
	  }
	  if (this.options.onComment)
	    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
	                           startLoc, this.curPosition()); }
	};

	pp$9.skipLineComment = function(startSkip) {
	  var start = this.pos;
	  var startLoc = this.options.onComment && this.curPosition();
	  var ch = this.input.charCodeAt(this.pos += startSkip);
	  while (this.pos < this.input.length && !isNewLine(ch)) {
	    ch = this.input.charCodeAt(++this.pos);
	  }
	  if (this.options.onComment)
	    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
	                           startLoc, this.curPosition()); }
	};

	// Called at the start of the parse and after every token. Skips
	// whitespace and comments, and.

	pp$9.skipSpace = function() {
	  loop: while (this.pos < this.input.length) {
	    var ch = this.input.charCodeAt(this.pos);
	    switch (ch) {
	    case 32: case 160: // ' '
	      ++this.pos;
	      break
	    case 13:
	      if (this.input.charCodeAt(this.pos + 1) === 10) {
	        ++this.pos;
	      }
	    case 10: case 8232: case 8233:
	      ++this.pos;
	      if (this.options.locations) {
	        ++this.curLine;
	        this.lineStart = this.pos;
	      }
	      break
	    case 47: // '/'
	      switch (this.input.charCodeAt(this.pos + 1)) {
	      case 42: // '*'
	        this.skipBlockComment();
	        break
	      case 47:
	        this.skipLineComment(2);
	        break
	      default:
	        break loop
	      }
	      break
	    default:
	      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	        ++this.pos;
	      } else {
	        break loop
	      }
	    }
	  }
	};

	// Called at the end of every token. Sets `end`, `val`, and
	// maintains `context` and `exprAllowed`, and skips the space after
	// the token, so that the next one's `start` will point at the
	// right position.

	pp$9.finishToken = function(type, val) {
	  this.end = this.pos;
	  if (this.options.locations) { this.endLoc = this.curPosition(); }
	  var prevType = this.type;
	  this.type = type;
	  this.value = val;

	  this.updateContext(prevType);
	};

	// ### Token reading

	// This is the function that is called to fetch the next token. It
	// is somewhat obscure, because it works in character codes rather
	// than characters, and because operator parsing has been inlined
	// into it.
	//
	// All in the name of speed.
	//
	pp$9.readToken_dot = function() {
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next >= 48 && next <= 57) { return this.readNumber(true) }
	  var next2 = this.input.charCodeAt(this.pos + 2);
	  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
	    this.pos += 3;
	    return this.finishToken(types$1.ellipsis)
	  } else {
	    ++this.pos;
	    return this.finishToken(types$1.dot)
	  }
	};

	pp$9.readToken_slash = function() { // '/'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }
	  if (next === 61) { return this.finishOp(types$1.assign, 2) }
	  return this.finishOp(types$1.slash, 1)
	};

	pp$9.readToken_mult_modulo_exp = function(code) { // '%*'
	  var next = this.input.charCodeAt(this.pos + 1);
	  var size = 1;
	  var tokentype = code === 42 ? types$1.star : types$1.modulo;

	  // exponentiation operator ** and **=
	  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
	    ++size;
	    tokentype = types$1.starstar;
	    next = this.input.charCodeAt(this.pos + 2);
	  }

	  if (next === 61) { return this.finishOp(types$1.assign, size + 1) }
	  return this.finishOp(tokentype, size)
	};

	pp$9.readToken_pipe_amp = function(code) { // '|&'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next === code) { return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2) }
	  if (next === 61) { return this.finishOp(types$1.assign, 2) }
	  return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)
	};

	pp$9.readToken_caret = function() { // '^'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next === 61) { return this.finishOp(types$1.assign, 2) }
	  return this.finishOp(types$1.bitwiseXOR, 1)
	};

	pp$9.readToken_plus_min = function(code) { // '+-'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next === code) {
	    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&
	        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
	      // A `-->` line comment
	      this.skipLineComment(3);
	      this.skipSpace();
	      return this.nextToken()
	    }
	    return this.finishOp(types$1.incDec, 2)
	  }
	  if (next === 61) { return this.finishOp(types$1.assign, 2) }
	  return this.finishOp(types$1.plusMin, 1)
	};

	pp$9.readToken_lt_gt = function(code) { // '<>'
	  var next = this.input.charCodeAt(this.pos + 1);
	  var size = 1;
	  if (next === code) {
	    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
	    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }
	    return this.finishOp(types$1.bitShift, size)
	  }
	  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&
	      this.input.charCodeAt(this.pos + 3) === 45) {
	    // `<!--`, an XML-style comment that should be interpreted as a line comment
	    this.skipLineComment(4);
	    this.skipSpace();
	    return this.nextToken()
	  }
	  if (next === 61) { size = 2; }
	  return this.finishOp(types$1.relational, size)
	};

	pp$9.readToken_eq_excl = function(code) { // '=!'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }
	  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'
	    this.pos += 2;
	    return this.finishToken(types$1.arrow)
	  }
	  return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)
	};

	pp$9.readToken_question = function() { // '?'
	  if (this.options.ecmaVersion >= 11) {
	    var next = this.input.charCodeAt(this.pos + 1);
	    if (next === 46) {
	      var next2 = this.input.charCodeAt(this.pos + 2);
	      if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }
	    }
	    if (next === 63) { return this.finishOp(types$1.coalesce, 2) }
	  }
	  return this.finishOp(types$1.question, 1)
	};

	pp$9.getTokenFromCode = function(code) {
	  switch (code) {
	  // The interpretation of a dot depends on whether it is followed
	  // by a digit or another two dots.
	  case 46: // '.'
	    return this.readToken_dot()

	  // Punctuation tokens.
	  case 40: ++this.pos; return this.finishToken(types$1.parenL)
	  case 41: ++this.pos; return this.finishToken(types$1.parenR)
	  case 59: ++this.pos; return this.finishToken(types$1.semi)
	  case 44: ++this.pos; return this.finishToken(types$1.comma)
	  case 91: ++this.pos; return this.finishToken(types$1.bracketL)
	  case 93: ++this.pos; return this.finishToken(types$1.bracketR)
	  case 123: ++this.pos; return this.finishToken(types$1.braceL)
	  case 125: ++this.pos; return this.finishToken(types$1.braceR)
	  case 58: ++this.pos; return this.finishToken(types$1.colon)

	  case 96: // '`'
	    if (this.options.ecmaVersion < 6) { break }
	    ++this.pos;
	    return this.finishToken(types$1.backQuote)

	  case 48: // '0'
	    var next = this.input.charCodeAt(this.pos + 1);
	    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number
	    if (this.options.ecmaVersion >= 6) {
	      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number
	      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number
	    }

	  // Anything else beginning with a digit is an integer, octal
	  // number, or float.
	  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
	    return this.readNumber(false)

	  // Quotes produce strings.
	  case 34: case 39: // '"', "'"
	    return this.readString(code)

	  // Operators are parsed inline in tiny state machines. '=' (61) is
	  // often referred to. `finishOp` simply skips the amount of
	  // characters it is given as second argument, and returns a token
	  // of the type given by its first argument.

	  case 47: // '/'
	    return this.readToken_slash()

	  case 37: case 42: // '%*'
	    return this.readToken_mult_modulo_exp(code)

	  case 124: case 38: // '|&'
	    return this.readToken_pipe_amp(code)

	  case 94: // '^'
	    return this.readToken_caret()

	  case 43: case 45: // '+-'
	    return this.readToken_plus_min(code)

	  case 60: case 62: // '<>'
	    return this.readToken_lt_gt(code)

	  case 61: case 33: // '=!'
	    return this.readToken_eq_excl(code)

	  case 63: // '?'
	    return this.readToken_question()

	  case 126: // '~'
	    return this.finishOp(types$1.prefix, 1)
	  }

	  this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
	};

	pp$9.finishOp = function(type, size) {
	  var str = this.input.slice(this.pos, this.pos + size);
	  this.pos += size;
	  return this.finishToken(type, str)
	};

	pp$9.readRegexp = function() {
	  var escaped, inClass, start = this.pos;
	  for (;;) {
	    if (this.pos >= this.input.length) { this.raise(start, "Unterminated regular expression"); }
	    var ch = this.input.charAt(this.pos);
	    if (lineBreak.test(ch)) { this.raise(start, "Unterminated regular expression"); }
	    if (!escaped) {
	      if (ch === "[") { inClass = true; }
	      else if (ch === "]" && inClass) { inClass = false; }
	      else if (ch === "/" && !inClass) { break }
	      escaped = ch === "\\";
	    } else { escaped = false; }
	    ++this.pos;
	  }
	  var pattern = this.input.slice(start, this.pos);
	  ++this.pos;
	  var flagsStart = this.pos;
	  var flags = this.readWord1();
	  if (this.containsEsc) { this.unexpected(flagsStart); }

	  // Validate pattern
	  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
	  state.reset(start, pattern, flags);
	  this.validateRegExpFlags(state);
	  this.validateRegExpPattern(state);

	  // Create Literal#value property value.
	  var value = null;
	  try {
	    value = new RegExp(pattern, flags);
	  } catch (e) {
	    // ESTree requires null if it failed to instantiate RegExp object.
	    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
	  }

	  return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})
	};

	// Read an integer in the given radix. Return null if zero digits
	// were read, the integer value otherwise. When `len` is given, this
	// will return `null` unless the integer has exactly `len` digits.

	pp$9.readInt = function(radix, len) {
	  var start = this.pos, total = 0;
	  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	    var code = this.input.charCodeAt(this.pos), val = (void 0);
	    if (code >= 97) { val = code - 97 + 10; } // a
	    else if (code >= 65) { val = code - 65 + 10; } // A
	    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9
	    else { val = Infinity; }
	    if (val >= radix) { break }
	    ++this.pos;
	    total = total * radix + val;
	  }
	  if (this.pos === start || len != null && this.pos - start !== len) { return null }

	  return total
	};

	pp$9.readRadixNumber = function(radix) {
	  var start = this.pos;
	  this.pos += 2; // 0x
	  var val = this.readInt(radix);
	  if (val == null) { this.raise(this.start + 2, "Expected number in radix " + radix); }
	  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
	    val = typeof BigInt !== "undefined" ? BigInt(this.input.slice(start, this.pos)) : null;
	    ++this.pos;
	  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
	  return this.finishToken(types$1.num, val)
	};

	// Read an integer, octal integer, or floating-point number.

	pp$9.readNumber = function(startsWithDot) {
	  var start = this.pos;
	  if (!startsWithDot && this.readInt(10) === null) { this.raise(start, "Invalid number"); }
	  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
	  if (octal && this.strict) { this.raise(start, "Invalid number"); }
	  var next = this.input.charCodeAt(this.pos);
	  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
	    var str$1 = this.input.slice(start, this.pos);
	    var val$1 = typeof BigInt !== "undefined" ? BigInt(str$1) : null;
	    ++this.pos;
	    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
	    return this.finishToken(types$1.num, val$1)
	  }
	  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }
	  if (next === 46 && !octal) { // '.'
	    ++this.pos;
	    this.readInt(10);
	    next = this.input.charCodeAt(this.pos);
	  }
	  if ((next === 69 || next === 101) && !octal) { // 'eE'
	    next = this.input.charCodeAt(++this.pos);
	    if (next === 43 || next === 45) { ++this.pos; } // '+-'
	    if (this.readInt(10) === null) { this.raise(start, "Invalid number"); }
	  }
	  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }

	  var str = this.input.slice(start, this.pos);
	  var val = octal ? parseInt(str, 8) : parseFloat(str);
	  return this.finishToken(types$1.num, val)
	};

	// Read a string value, interpreting backslash-escapes.

	pp$9.readCodePoint = function() {
	  var ch = this.input.charCodeAt(this.pos), code;

	  if (ch === 123) { // '{'
	    if (this.options.ecmaVersion < 6) { this.unexpected(); }
	    var codePos = ++this.pos;
	    code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
	    ++this.pos;
	    if (code > 0x10FFFF) { this.invalidStringToken(codePos, "Code point out of bounds"); }
	  } else {
	    code = this.readHexChar(4);
	  }
	  return code
	};

	function codePointToString$1(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) { return String.fromCharCode(code) }
	  code -= 0x10000;
	  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
	}

	pp$9.readString = function(quote) {
	  var out = "", chunkStart = ++this.pos;
	  for (;;) {
	    if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated string constant"); }
	    var ch = this.input.charCodeAt(this.pos);
	    if (ch === quote) { break }
	    if (ch === 92) { // '\'
	      out += this.input.slice(chunkStart, this.pos);
	      out += this.readEscapedChar(false);
	      chunkStart = this.pos;
	    } else {
	      if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, "Unterminated string constant"); }
	      ++this.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.pos++);
	  return this.finishToken(types$1.string, out)
	};

	// Reads template string tokens.

	var INVALID_TEMPLATE_ESCAPE_ERROR = {};

	pp$9.tryReadTemplateToken = function() {
	  this.inTemplateElement = true;
	  try {
	    this.readTmplToken();
	  } catch (err) {
	    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
	      this.readInvalidTemplateToken();
	    } else {
	      throw err
	    }
	  }

	  this.inTemplateElement = false;
	};

	pp$9.invalidStringToken = function(position, message) {
	  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
	    throw INVALID_TEMPLATE_ESCAPE_ERROR
	  } else {
	    this.raise(position, message);
	  }
	};

	pp$9.readTmplToken = function() {
	  var out = "", chunkStart = this.pos;
	  for (;;) {
	    if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated template"); }
	    var ch = this.input.charCodeAt(this.pos);
	    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'
	      if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {
	        if (ch === 36) {
	          this.pos += 2;
	          return this.finishToken(types$1.dollarBraceL)
	        } else {
	          ++this.pos;
	          return this.finishToken(types$1.backQuote)
	        }
	      }
	      out += this.input.slice(chunkStart, this.pos);
	      return this.finishToken(types$1.template, out)
	    }
	    if (ch === 92) { // '\'
	      out += this.input.slice(chunkStart, this.pos);
	      out += this.readEscapedChar(true);
	      chunkStart = this.pos;
	    } else if (isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.pos);
	      ++this.pos;
	      switch (ch) {
	      case 13:
	        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }
	      case 10:
	        out += "\n";
	        break
	      default:
	        out += String.fromCharCode(ch);
	        break
	      }
	      if (this.options.locations) {
	        ++this.curLine;
	        this.lineStart = this.pos;
	      }
	      chunkStart = this.pos;
	    } else {
	      ++this.pos;
	    }
	  }
	};

	// Reads a template token to search for the end, without validating any escape sequences
	pp$9.readInvalidTemplateToken = function() {
	  for (; this.pos < this.input.length; this.pos++) {
	    switch (this.input[this.pos]) {
	    case "\\":
	      ++this.pos;
	      break

	    case "$":
	      if (this.input[this.pos + 1] !== "{") {
	        break
	      }
	    // falls through

	    case "`":
	      return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))

	    // no default
	    }
	  }
	  this.raise(this.start, "Unterminated template");
	};

	// Used to read escaped characters

	pp$9.readEscapedChar = function(inTemplate) {
	  var ch = this.input.charCodeAt(++this.pos);
	  ++this.pos;
	  switch (ch) {
	  case 110: return "\n" // 'n' -> '\n'
	  case 114: return "\r" // 'r' -> '\r'
	  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
	  case 117: return codePointToString$1(this.readCodePoint()) // 'u'
	  case 116: return "\t" // 't' -> '\t'
	  case 98: return "\b" // 'b' -> '\b'
	  case 118: return "\u000b" // 'v' -> '\u000b'
	  case 102: return "\f" // 'f' -> '\f'
	  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\r\n'
	  case 10: // ' \n'
	    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }
	    return ""
	  case 56:
	  case 57:
	    if (inTemplate) {
	      var codePos = this.pos - 1;

	      this.invalidStringToken(
	        codePos,
	        "Invalid escape sequence in template string"
	      );

	      return null
	    }
	  default:
	    if (ch >= 48 && ch <= 55) {
	      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
	      var octal = parseInt(octalStr, 8);
	      if (octal > 255) {
	        octalStr = octalStr.slice(0, -1);
	        octal = parseInt(octalStr, 8);
	      }
	      this.pos += octalStr.length - 1;
	      ch = this.input.charCodeAt(this.pos);
	      if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
	        this.invalidStringToken(
	          this.pos - 1 - octalStr.length,
	          inTemplate
	            ? "Octal literal in template string"
	            : "Octal literal in strict mode"
	        );
	      }
	      return String.fromCharCode(octal)
	    }
	    if (isNewLine(ch)) {
	      // Unicode new line characters after \ get removed from output in both
	      // template literals and strings
	      return ""
	    }
	    return String.fromCharCode(ch)
	  }
	};

	// Used to read character escape sequences ('\x', '\u', '\U').

	pp$9.readHexChar = function(len) {
	  var codePos = this.pos;
	  var n = this.readInt(16, len);
	  if (n === null) { this.invalidStringToken(codePos, "Bad character escape sequence"); }
	  return n
	};

	// Read an identifier, and return it as a string. Sets `this.containsEsc`
	// to whether the word contained a '\u' escape.
	//
	// Incrementally adds only escaped chars, adding other chunks as-is
	// as a micro-optimization.

	pp$9.readWord1 = function() {
	  this.containsEsc = false;
	  var word = "", first = true, chunkStart = this.pos;
	  var astral = this.options.ecmaVersion >= 6;
	  while (this.pos < this.input.length) {
	    var ch = this.fullCharCodeAtPos();
	    if (isIdentifierChar(ch, astral)) {
	      this.pos += ch <= 0xffff ? 1 : 2;
	    } else if (ch === 92) { // "\"
	      this.containsEsc = true;
	      word += this.input.slice(chunkStart, this.pos);
	      var escStart = this.pos;
	      if (this.input.charCodeAt(++this.pos) !== 117) // "u"
	        { this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"); }
	      ++this.pos;
	      var esc = this.readCodePoint();
	      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
	        { this.invalidStringToken(escStart, "Invalid Unicode escape"); }
	      word += codePointToString$1(esc);
	      chunkStart = this.pos;
	    } else {
	      break
	    }
	    first = false;
	  }
	  return word + this.input.slice(chunkStart, this.pos)
	};

	// Read an identifier or keyword token. Will check for reserved
	// words when necessary.

	pp$9.readWord = function() {
	  var word = this.readWord1();
	  var type = types$1.name;
	  if (this.keywords.test(word)) {
	    type = keywords$1[word];
	  }
	  return this.finishToken(type, word)
	};

	// Acorn is a tiny, fast JavaScript parser written in JavaScript.

	var version = "7.3.1";

	Parser$1.acorn = {
	  Parser: Parser$1,
	  version: version,
	  defaultOptions: defaultOptions,
	  Position: Position,
	  SourceLocation: SourceLocation,
	  getLineInfo: getLineInfo,
	  Node: Node$1,
	  TokenType: TokenType,
	  tokTypes: types$1,
	  keywordTypes: keywords$1,
	  TokContext: TokContext,
	  tokContexts: types$1$1,
	  isIdentifierChar: isIdentifierChar,
	  isIdentifierStart: isIdentifierStart,
	  Token: Token$1,
	  isNewLine: isNewLine,
	  lineBreak: lineBreak,
	  lineBreakG: lineBreakG,
	  nonASCIIwhitespace: nonASCIIwhitespace
	};

	// Acorn is organized as a tokenizer and a recursive-descent parser.
	// The `tokenizer` export provides an interface to the tokenizer.

	function tokenizer(input, options) {
	  return Parser$1.tokenizer(input, options)
	}

	var CommentOption;
	(function (CommentOption) {
	    CommentOption[CommentOption["Toggle"] = 0] = "Toggle";
	    CommentOption[CommentOption["OnlyComment"] = 1] = "OnlyComment";
	    CommentOption[CommentOption["OnlyUncomment"] = 2] = "OnlyUncomment";
	})(CommentOption || (CommentOption = {}));

	const baseTheme$6 = EditorView.baseTheme({
	    "panel.gotoLine": {
	        padding: "2px 6px 4px",
	        "& label": { fontSize: "80%" }
	    }
	});

	const tooltipPlugin = ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        view.scrollDOM.addEventListener("scroll", this.onscroll = this.onscroll.bind(this));
	        this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
	        this.sources = view.state.facet(showTooltip);
	        this.tooltips = this.sources.map(s => this.createTooltip(s));
	    }
	    update(update) {
	        let sources = update.state.facet(showTooltip);
	        if (sources == this.sources) {
	            for (let t of this.tooltips)
	                if (t.update)
	                    t.update(update);
	        }
	        else {
	            let tooltips = [];
	            for (let i = 0; i < sources.length; i++) {
	                let source = sources[i], known = this.sources.indexOf(source);
	                if (known < 0) {
	                    tooltips[i] = this.createTooltip(source);
	                }
	                else {
	                    let tooltip = tooltips[i] = this.tooltips[known];
	                    if (tooltip.update)
	                        tooltip.update(update);
	                }
	            }
	            for (let t of this.tooltips)
	                if (tooltips.indexOf(t) < 0)
	                    t.dom.remove();
	            this.sources = sources;
	            this.tooltips = tooltips;
	            if (this.tooltips.length)
	                this.view.requestMeasure(this.measureReq);
	        }
	        if (update.docChanged && this.tooltips.length)
	            this.view.requestMeasure(this.measureReq);
	    }
	    createTooltip(source) {
	        let tooltip = source(this.view);
	        tooltip.dom.className = themeClass("tooltip" + (tooltip.style ? "." + tooltip.style : ""));
	        this.view.dom.appendChild(tooltip.dom);
	        if (tooltip.mount)
	            tooltip.mount(this.view);
	        return tooltip;
	    }
	    destroy() {
	        this.view.scrollDOM.removeEventListener("scroll", this.onscroll);
	        for (let { dom } of this.tooltips)
	            dom.remove();
	    }
	    readMeasure() {
	        return {
	            editor: this.view.dom.getBoundingClientRect(),
	            pos: this.tooltips.map(tooltip => this.view.coordsAtPos(tooltip.pos)),
	            size: this.tooltips.map(({ dom }) => dom.getBoundingClientRect()),
	            innerWidth: window.innerWidth,
	            innerHeight: window.innerHeight
	        };
	    }
	    writeMeasure(measured) {
	        let { editor } = measured;
	        for (let i = 0; i < this.tooltips.length; i++) {
	            let tooltip = this.tooltips[i], pos = measured.pos[i], size = measured.size[i];
	            // Hide tooltips that are outside of the editor.
	            if (!pos || pos.bottom <= editor.top || pos.top >= editor.bottom || pos.right <= editor.left || pos.left >= editor.right) {
	                tooltip.dom.style.top = "-10000px";
	                continue;
	            }
	            let width = size.right - size.left, height = size.bottom - size.top;
	            let left = this.view.textDirection == Direction.LTR ? Math.min(pos.left, measured.innerWidth - width)
	                : Math.max(0, pos.left - width);
	            let above = !!tooltip.above;
	            if (!tooltip.strictSide &&
	                (above ? pos.top - (size.bottom - size.top) < 0 : pos.bottom + (size.bottom - size.top) > measured.innerHeight))
	                above = !above;
	            tooltip.dom.style.top = ((above ? pos.top - height : pos.bottom) - editor.top) + "px";
	            tooltip.dom.style.left = (left - editor.left) + "px";
	        }
	    }
	    onscroll() {
	        if (this.tooltips.length)
	            this.view.requestMeasure(this.measureReq);
	    }
	});
	const baseTheme$7 = EditorView.baseTheme({
	    tooltip: {
	        position: "absolute",
	        border: "1px solid silver",
	        backgroundColor: "#f5f5f5",
	        zIndex: 100
	    }
	});
	/// Supporting extension for displaying tooltips. Allows
	/// [`showTooltip`](#tooltip.showTooltip) to be used to define
	/// tooltips.
	function tooltips() {
	    return [tooltipPlugin, baseTheme$7];
	}
	/// Behavior by which an extension can provide a tooltip to be shown.
	const showTooltip = Facet.define();

	class SelectedDiagnostic {
	    constructor(from, to, diagnostic) {
	        this.from = from;
	        this.to = to;
	        this.diagnostic = diagnostic;
	    }
	}
	class LintState {
	    constructor(diagnostics, panel, selected) {
	        this.diagnostics = diagnostics;
	        this.panel = panel;
	        this.selected = selected;
	    }
	}
	function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
	    let found = null;
	    diagnostics.between(after, diagnostics.length, (from, to, { spec }) => {
	        if (diagnostic && spec.diagnostic != diagnostic)
	            return;
	        found = new SelectedDiagnostic(from, to, spec.diagnostic);
	        return false;
	    });
	    return found;
	}
	const setDiagnosticsEffect = StateEffect.define();
	const togglePanel$1 = StateEffect.define();
	const movePanelSelection = StateEffect.define();
	const lintState = StateField.define({
	    create() {
	        return new LintState(Decoration.none, null, null);
	    },
	    update(value, tr) {
	        if (tr.docChanged) {
	            let mapped = value.diagnostics.map(tr.changes), selected = null;
	            if (value.selected) {
	                let selPos = tr.changes.mapPos(value.selected.from, 1);
	                selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
	            }
	            value = new LintState(mapped, value.panel, selected);
	        }
	        for (let effect of tr.effects) {
	            if (effect.is(setDiagnosticsEffect)) {
	                let ranges = Decoration.set(effect.value.map((d) => {
	                    return d.from < d.to
	                        ? Decoration.mark({
	                            attributes: { class: themeClass("lintRange." + d.severity) },
	                            diagnostic: d
	                        }).range(d.from, d.to)
	                        : Decoration.widget({
	                            widget: new DiagnosticWidget(d),
	                            diagnostic: d
	                        }).range(d.from);
	                }));
	                value = new LintState(ranges, value.panel, findDiagnostic(ranges));
	            }
	            else if (effect.is(togglePanel$1)) {
	                value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
	            }
	            else if (effect.is(movePanelSelection)) {
	                value = new LintState(value.diagnostics, value.panel, effect.value);
	            }
	        }
	        return value;
	    },
	    provide: [showPanel.nFrom(s => s.panel ? [s.panel] : []),
	        EditorView.decorations.from(s => s.diagnostics)]
	});
	const activeMark = Decoration.mark({ class: themeClass("lintRange.active") });
	/// Command to close the lint panel, when open.
	const closeLintPanel = (view) => {
	    let field = view.state.field(lintState, false);
	    if (!field || !field.panel)
	        return false;
	    view.dispatch(view.state.update({ effects: togglePanel$1.of(false) }));
	    return true;
	};
	function renderDiagnostic(view, diagnostic) {
	    let dom = document.createElement("li");
	    dom.textContent = diagnostic.message;
	    dom.className = themeClass("diagnostic." + diagnostic.severity);
	    if (diagnostic.actions)
	        for (let action of diagnostic.actions) {
	            let button = dom.appendChild(document.createElement("button"));
	            button.className = themeClass("diagnosticAction");
	            button.textContent = action.name;
	            button.onclick = button.onmousedown = e => {
	                e.preventDefault();
	                let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
	                if (found)
	                    action.apply(view, found.from, found.to);
	            };
	        }
	    // FIXME render source?
	    return dom;
	}
	class DiagnosticWidget extends WidgetType {
	    toDOM() {
	        let elt = document.createElement("span");
	        elt.className = themeClass("lintPoint." + this.value.severity);
	        return elt;
	    }
	}
	class PanelItem {
	    constructor(view, diagnostic) {
	        this.diagnostic = diagnostic;
	        this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
	        this.dom = renderDiagnostic(view, diagnostic);
	        this.dom.setAttribute("role", "option");
	    }
	}
	class LintPanel {
	    constructor(view) {
	        this.view = view;
	        this.items = [];
	        this.dom = document.createElement("div");
	        this.list = this.dom.appendChild(document.createElement("ul"));
	        this.list.tabIndex = 0;
	        this.list.setAttribute("role", "listbox");
	        this.list.setAttribute("aria-label", this.view.state.phrase("Diagnostics"));
	        this.list.addEventListener("keydown", event => {
	            if (event.keyCode == 27) { // Escape
	                event.preventDefault();
	                closeLintPanel(this.view);
	                this.view.focus();
	            }
	            else if (event.keyCode == 38) { // ArrowUp
	                event.preventDefault();
	                this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
	            }
	            else if (event.keyCode == 40) { // ArrowDown
	                event.preventDefault();
	                this.moveSelection((this.selectedIndex + 1) % this.items.length);
	            }
	            else if (event.keyCode == 36) { // Home
	                event.preventDefault();
	                this.moveSelection(0);
	            }
	            else if (event.keyCode == 35) { // End
	                event.preventDefault();
	                this.moveSelection(this.items.length - 1);
	            }
	            else if (event.keyCode == 13) {
	                event.preventDefault();
	                this.view.focus();
	            } // FIXME PageDown/PageUp
	        });
	        this.list.addEventListener("click", event => {
	            for (let i = 0; i < this.items.length; i++) {
	                if (this.items[i].dom.contains(event.target))
	                    this.moveSelection(i);
	            }
	        });
	        let close = this.dom.appendChild(document.createElement("button"));
	        close.setAttribute("name", "close");
	        close.setAttribute("aria-label", this.view.state.phrase("close"));
	        close.textContent = "×";
	        close.addEventListener("click", () => closeLintPanel(this.view));
	        this.update();
	    }
	    get selectedIndex() {
	        let selected = this.view.state.field(lintState).selected;
	        if (!selected)
	            return -1;
	        for (let i = 0; i < this.items.length; i++)
	            if (this.items[i].diagnostic == selected.diagnostic)
	                return i;
	        return -1;
	    }
	    update() {
	        let { diagnostics, selected } = this.view.state.field(lintState);
	        let i = 0, needsSync = false, newSelectedItem = null;
	        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
	            let found = -1, item;
	            for (let j = i; j < this.items.length; j++)
	                if (this.items[j].diagnostic == spec.diagnostic) {
	                    found = j;
	                    break;
	                }
	            if (found < 0) {
	                item = new PanelItem(this.view, spec.diagnostic);
	                this.items.splice(i, 0, item);
	                needsSync = true;
	            }
	            else {
	                item = this.items[found];
	                if (found > i) {
	                    this.items.splice(i, found - i);
	                    needsSync = true;
	                }
	            }
	            if (selected && item.diagnostic == selected.diagnostic) {
	                if (!item.dom.hasAttribute("aria-selected")) {
	                    item.dom.setAttribute("aria-selected", "true");
	                    newSelectedItem = item;
	                }
	            }
	            else if (item.dom.hasAttribute("aria-selected")) {
	                item.dom.removeAttribute("aria-selected");
	            }
	            i++;
	        });
	        while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
	            needsSync = true;
	            this.items.pop();
	        }
	        if (this.items.length == 0) {
	            this.items.push(new PanelItem(this.view, {
	                from: -1, to: -1,
	                severity: "info",
	                message: this.view.state.phrase("No diagnostics")
	            }));
	            needsSync = true;
	        }
	        if (newSelectedItem) {
	            this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
	            this.view.requestMeasure({
	                key: this,
	                read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
	                write: ({ sel, panel }) => {
	                    if (sel.top < panel.top)
	                        this.list.scrollTop -= panel.top - sel.top;
	                    else if (sel.bottom > panel.bottom)
	                        this.list.scrollTop += sel.bottom - panel.bottom;
	                }
	            });
	        }
	        else if (!this.items.length) {
	            this.list.removeAttribute("aria-activedescendant");
	        }
	        if (needsSync)
	            this.sync();
	    }
	    sync() {
	        let domPos = this.list.firstChild;
	        function rm() {
	            let prev = domPos;
	            domPos = prev.nextSibling;
	            prev.remove();
	        }
	        for (let item of this.items) {
	            if (item.dom.parentNode == this.list) {
	                while (domPos != item.dom)
	                    rm();
	                domPos = item.dom.nextSibling;
	            }
	            else {
	                this.list.insertBefore(item.dom, domPos);
	            }
	        }
	        while (domPos)
	            rm();
	        if (!this.list.firstChild)
	            this.list.appendChild(renderDiagnostic(this.view, {
	                severity: "info",
	                message: this.view.state.phrase("No diagnostics")
	            }));
	    }
	    moveSelection(selectedIndex) {
	        // FIXME make actions accessible
	        if (this.items.length == 0)
	            return;
	        let field = this.view.state.field(lintState);
	        let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
	        if (!selection)
	            return;
	        this.view.dispatch(this.view.state.update({
	            selection: { anchor: selection.from, head: selection.to },
	            scrollIntoView: true,
	            effects: movePanelSelection.of(selection)
	        }));
	    }
	    get style() { return "lint"; }
	    static open(view) { return new LintPanel(view); }
	}
	function underline(color) {
	    let svg = `<svg xmlns="http://www.w3.org/2000/svg" width="6" height="3">
    <path d="m0 3 l2 -2 l1 0 l2 2 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>
  </svg>`;
	    return `url('data:image/svg+xml;base64,${btoa(svg)}')`;
	}
	const baseTheme$8 = EditorView.baseTheme({
	    diagnostic: {
	        padding: "3px 6px 3px 8px",
	        marginLeft: "-1px",
	        display: "block"
	    },
	    "diagnostic.error": { borderLeft: "5px solid #d11" },
	    "diagnostic.warning": { borderLeft: "5px solid orange" },
	    "diagnostic.info": { borderLeft: "5px solid #999" },
	    diagnosticAction: {
	        font: "inherit",
	        border: "none",
	        padding: "2px 4px",
	        backgroundColor: "#444",
	        color: "white",
	        borderRadius: "3px",
	        marginLeft: "8px"
	    },
	    lintRange: {
	        backgroundPosition: "left bottom",
	        backgroundRepeat: "repeat-x"
	    },
	    "lintRange.error": { backgroundImage: underline("#d11") },
	    "lintRange.warning": { backgroundImage: underline("orange") },
	    "lintRange.info": { backgroundImage: underline("#999") },
	    "lintRange.active": { backgroundColor: "#fec" },
	    lintPoint: {
	        position: "relative",
	        "&:after": {
	            content: '""',
	            position: "absolute",
	            bottom: 0,
	            left: "-2px",
	            borderLeft: "3px solid transparent",
	            borderRight: "3px solid transparent",
	            borderBottom: "4px solid #d11"
	        }
	    },
	    "lintPoint.warning": {
	        "&:after": { borderBottomColor: "orange" }
	    },
	    "lintPoint.info": {
	        "&:after": { borderBottomColor: "#999" }
	    },
	    "panel.lint": {
	        position: "relative",
	        "& ul": {
	            maxHeight: "100px",
	            overflowY: "auto",
	            "& [aria-selected]": {
	                backgroundColor: "#ddd"
	            },
	            "&:focus [aria-selected]": {
	                background_fallback: "#bdf",
	                backgroundColor: "Highlight",
	                color_fallback: "white",
	                color: "HighlightText"
	            },
	            padding: 0,
	            margin: 0
	        },
	        "& [name=close]": {
	            position: "absolute",
	            top: "0",
	            right: "2px",
	            background: "inherit",
	            border: "none",
	            font: "inherit",
	            padding: 0,
	            margin: 0
	        }
	    },
	    "tooltip.lint": {
	        padding: 0,
	        margin: 0
	    }
	});

	/// Denotes how to
	/// [filter](#autocomplete.autocomplete^config.filterType)
	/// completions.
	var FilterType;
	(function (FilterType) {
	    /// Only show completions that start with the currently typed text.
	    FilterType[FilterType["Start"] = 0] = "Start";
	    /// Show completions that have the typed text anywhere in their
	    /// content.
	    FilterType[FilterType["Fuzzy"] = 1] = "Fuzzy";
	})(FilterType || (FilterType = {}));
	class AutocompleteContext {
	    /// @internal
	    constructor(explicit, filterType) {
	        this.explicit = explicit;
	        this.filterType = filterType;
	    }
	    filter(completion, text) {
	        if (this.filterType == FilterType.Start)
	            return completion.length > text.length && completion.slice(0, text.length) == text;
	        else
	            return completion.length > text.length && completion.indexOf(text) > -1;
	    }
	}
	function retrieveCompletions(state, pos, context) {
	    let found = state.languageDataAt("autocomplete", pos);
	    function next(i) {
	        if (i == found.length)
	            return Promise.resolve([]);
	        return Promise.resolve(found[i](state, pos, context)).then(result => result.length ? result : next(i + 1));
	    }
	    return next(0);
	}
	const autocompleteConfig = Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            override: null,
	            filterType: FilterType.Start
	        });
	    }
	});
	/// Returns an extension that enables autocompletion.
	function autocomplete(config = {}) {
	    return [
	        activeCompletion,
	        autocompleteConfig.of(config),
	        autocompletePlugin,
	        style$1,
	        tooltips(),
	        Precedence.Override.set(keymap([
	            { key: "ArrowDown", run: moveCompletion("down") },
	            { key: "ArrowUp", run: moveCompletion("up") },
	            { key: "Enter", run: acceptCompletion },
	            { key: "Escape", run: closeCompletion }
	        ]))
	    ];
	}
	function moveCompletion(dir) {
	    return (view) => {
	        let active = view.state.field(activeCompletion);
	        if (!(active instanceof ActiveCompletion))
	            return false;
	        let selected = (active.selected + (dir == "up" ? active.options.length - 1 : 1)) % active.options.length;
	        view.dispatch(view.state.update({ effects: selectCompletion.of(selected) }));
	        return true;
	    };
	}
	function acceptCompletion(view) {
	    let active = view.state.field(activeCompletion);
	    if (!(active instanceof ActiveCompletion))
	        return false;
	    applyCompletion(view, active.options[active.selected]);
	    return true;
	}
	function applyCompletion(view, option) {
	    let apply = option.apply || option.label;
	    // FIXME make sure option.start/end still point at the current
	    // doc, or keep a mapping in an active completion
	    if (typeof apply == "string") {
	        view.dispatch(view.state.update({
	            changes: { from: option.start, to: option.end, insert: apply },
	            selection: { anchor: option.start + apply.length }
	        }));
	    }
	    else {
	        apply(view);
	    }
	}
	function closeCompletion(view) {
	    let active = view.state.field(activeCompletion);
	    if (active == null)
	        return false;
	    view.dispatch(view.state.update({ effects: toggleCompletion.of(false) }));
	    return true;
	}
	const openCompletion = StateEffect.define();
	const toggleCompletion = StateEffect.define();
	const selectCompletion = StateEffect.define();
	const activeCompletion = StateField.define({
	    create() { return null; },
	    update(value, tr) {
	        let event = tr.annotation(Transaction.userEvent);
	        if (event == "input" || event == "delete" && value)
	            value = "pending";
	        else if (tr.docChanged || tr.selection)
	            value = null;
	        for (let effect of tr.effects) {
	            if (effect.is(openCompletion))
	                value = new ActiveCompletion(effect.value, 0);
	            else if (effect.is(toggleCompletion))
	                value = effect.value ? "pendingExplicit" : null;
	            else if (effect.is(selectCompletion) && value instanceof ActiveCompletion)
	                value = new ActiveCompletion(value.options, effect.value, value.id, value.tooltip);
	        }
	        return value;
	    },
	    provide: [
	        showTooltip.nFrom(active => active instanceof ActiveCompletion ? active.tooltip : none$6),
	        EditorView.contentAttributes.from(active => active instanceof ActiveCompletion ? active.attrs : baseAttrs)
	    ]
	});
	const baseAttrs = { "aria-autocomplete": "list" }, none$6 = [];
	class ActiveCompletion {
	    constructor(options, selected, id = "cm-ac-" + Math.floor(Math.random() * 1679616).toString(36), tooltip = [completionTooltip()]) {
	        this.options = options;
	        this.selected = selected;
	        this.id = id;
	        this.tooltip = tooltip;
	        this.attrs = {
	            "aria-autocomplete": "list",
	            "aria-activedescendant": this.id + "-" + this.selected,
	            "aria-owns": this.id
	        };
	    }
	}
	function createListBox(completion) {
	    const ul = document.createElement("ul");
	    ul.id = completion.id;
	    ul.setAttribute("role", "listbox");
	    ul.setAttribute("aria-expanded", "true");
	    for (let i = 0; i < completion.options.length; i++) {
	        const li = ul.appendChild(document.createElement("li"));
	        li.id = completion.id + "-" + i;
	        li.innerText = completion.options[i].label;
	        li.setAttribute("role", "option");
	    }
	    return ul;
	}
	// We allocate a new function instance every time the completion
	// changes to force redrawing/repositioning of the tooltip
	function completionTooltip() {
	    return (view) => {
	        let active = view.state.field(activeCompletion);
	        let list = createListBox(active);
	        list.addEventListener("click", (e) => {
	            let index = 0, dom = e.target;
	            for (;;) {
	                dom = dom.previousSibling;
	                if (!dom)
	                    break;
	                index++;
	            }
	            let active = view.state.field(activeCompletion);
	            if (active instanceof ActiveCompletion && index < active.options.length)
	                applyCompletion(view, active.options[index]);
	        });
	        function updateSel(view) {
	            let cur = view.state.field(activeCompletion);
	            if (cur instanceof ActiveCompletion)
	                updateSelectedOption(list, cur.selected);
	        }
	        return {
	            dom: list,
	            mount: updateSel,
	            update(update) {
	                if (update.state.field(activeCompletion) != update.prevState.field(activeCompletion))
	                    updateSel(update.view);
	            },
	            pos: active.options.reduce((m, o) => Math.min(m, o.start), 1e9),
	            style: "autocomplete"
	        };
	    };
	}
	function updateSelectedOption(list, selected) {
	    let set = null;
	    for (let opt = list.firstChild, i = 0; opt; opt = opt.nextSibling, i++) {
	        if (i == selected) {
	            if (!opt.hasAttribute("aria-selected")) {
	                opt.setAttribute("aria-selected", "true");
	                set = opt;
	            }
	        }
	        else {
	            if (opt.hasAttribute("aria-selected"))
	                opt.removeAttribute("aria-selected");
	        }
	    }
	    if (set)
	        scrollIntoView(list, set);
	}
	function scrollIntoView(container, element) {
	    let parent = container.getBoundingClientRect();
	    let self = element.getBoundingClientRect();
	    if (self.top < parent.top)
	        container.scrollTop -= parent.top - self.top;
	    else if (self.bottom > parent.bottom)
	        container.scrollTop += self.bottom - parent.bottom;
	}
	const DebounceTime = 100;
	const autocompletePlugin = ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.stateVersion = 0;
	        this.debounce = -1;
	    }
	    update(update) {
	        if (!update.docChanged && !update.selectionSet &&
	            update.prevState.field(activeCompletion) == update.state.field(activeCompletion))
	            return;
	        this.stateVersion++;
	        if (this.debounce > -1)
	            clearTimeout(this.debounce);
	        let active = update.state.field(activeCompletion);
	        this.debounce = active == "pending" || active == "pendingExplicit"
	            ? setTimeout(() => this.startUpdate(active == "pendingExplicit"), DebounceTime) : -1;
	    }
	    startUpdate(explicit) {
	        this.debounce = -1;
	        let version = this.stateVersion, state = this.view.state, pos = state.selection.primary.head;
	        let config = state.facet(autocompleteConfig);
	        let context = new AutocompleteContext(explicit, config.filterType);
	        (config.override ? Promise.resolve(config.override(state, pos, context)) : retrieveCompletions(state, pos, context))
	            .then(result => {
	            if (this.stateVersion != version || result.length == 0)
	                return;
	            this.view.dispatch(this.view.state.update({ effects: openCompletion.of(result) }));
	        })
	            .catch(e => logException(this.view.state, e));
	    }
	});
	const style$1 = EditorView.baseTheme({
	    "tooltip.autocomplete": {
	        fontFamily: "monospace",
	        overflowY: "auto",
	        maxHeight: "10em",
	        listStyle: "none",
	        margin: 0,
	        padding: 0,
	        "& > li": {
	            cursor: "pointer",
	            padding: "1px 1em 1px 3px",
	            lineHeight: 1.2
	        },
	        "& > li[aria-selected]": {
	            background_fallback: "#bdf",
	            backgroundColor: "Highlight",
	            color_fallback: "white",
	            color: "HighlightText"
	        }
	    }
	});

	const getCompletions = (host) => (state, pos, context) => {
	  console.log ('on getCompletions');
	  let text = state.doc.text.join ('\n');

	  // getToken
	  let tokens;
	  try {
	    tokens = [...tokenizer (text)];
	  } catch (e) {
	    // On some situations tokenizer is not
	    // able to parse string. Its not a problem,
	    // as just there are no completions then.
	    return []
	  }

	  let last_token = last$1 (tokens);

	  if (last_token !== undefined
	   && last_token.type.label === 'name'
	   && last_token.value.length === 1) ;

	  //if (last_token !== undefined 
	  // && (last_token.type.label === '.' 
	  // || (last_token.type.label === 'name'
	  //  && last_token.value.length === 1))) {
	  //  // Update completion context
	  //  if (last_token.type.label === '.') {
	  //    // Add one level of completion to context
	  //  }
	  //  console.log ('updating completion context')
	  //}

	  return []
	  //if (last_token.type.label === 'name') {
	  //  // TODO: Check if previous token is '.'
	  //  return map ((v) => ({ label: v, start: pos - last_token.value.length, end: pos }), filter (startsWith (last_token.value)) (keys (window)))
	  //} else if (last_token.type.label === '.') {
	  //  let pre_last_token = last (init (tokens))

	  //  return map ((v) => ({ label: v, start: pos - last_token.value.length, end: pos }), filter (startsWith (pre_last_token.value)) (keys (window)))
	  //} 
	};

	const Block = {
	  index: 0,
	  uuid: '',
	  doc: {
	    get: (host) => 
	      host.editor.state !== undefined ?
	        host.editor.state.doc.text
	        : '',
	    set: (host, value, lastValue) => value
	  },
	  multiline: false,
	  result: {
	    get: ({ render }) => render ().querySelector ('.result'),
	    set: (host, value, lastValue) => {
	      host.result.innerHTML = value;
	    }
	  },
	  completion_context: [],
	  editor: {
	    get: ({ render }, lastValue) =>
	      lastValue !== undefined ?
	        lastValue
	        : render ().querySelector ('.editor'),
	    set: (host, value, lastValue) => value,
	    connect: (host, key, invalidate) => {
	      let editor = new EditorView ({
	        state: EditorState.create ({ 
	          doc: host.doc,
	          extensions: [
	            javascript (),
	            autocomplete ({ override: getCompletions () }),
	            bracketMatching (),
	            history (),
	            lineNumbers ({
	              formatNumber: (lineNo) =>
	                lineNo === 1 ? '' + host.index : '…'
	            }),
	            foldGutter (),
	            specialChars (),
	            highlightActiveLine (),
	            highlightSelectionMatches (),
	            oneDark,
	            keymap(customKeymap (host))
	          ]
	        })
	      });

	      host.editor.appendChild (editor.dom);
	      host.editor = editor;
	      host.editor.focus ();
	    }
	  },
	  render: render (
	    () => html`
      <div class="editor"></div>
      <div class="result"></div>
      <div class="view"></div>
    `,
	    { shadowRoot: false })
	};

	define ('e-block', Block);

	const ref$1 = 
	  (query) => 
	    ({ render }) => 
	      is (Function, render) ? 
	        render ().querySelector (query) 
	        : null;

	const forward =
	  (element, host, evt) =>
	    not (isNil (element)) ?
	      element.addEventListener (evt, (e) => dispatch (host, evt))
	      : null;

	const styles = `
h2 {
  font-family: sans-serif;
}
`;

	const SaveBlock = {
	  init: {
	    connect: (host, key, invalidate) => {
	      let dialog = ref$1 ('dialog') (host);
	      forward (dialog, host, 'close');
	      dialog.showModal ();
	      console.log (host.blockText);
	    }
	  },
	  block: '',
	  logged: false,
	  render: ({ block, logged }) => html`
    <dialog>
      <h2>Save current block to Gist</h2>
      ${!logged && html`not logged`}
      ${logged && html`logged`}
    </dialog>
  `.style (styles)
	};

	define ('e-save-block', SaveBlock);

	const insertAfter = curry((predicate, element, list) =>
	  insert (add (1) (findIndex (predicate) (list)))
	         (element)
	         (list));

	const deleteBlock = (host, evt) => {
	  if (!propEq ('uuid') (evt.target.uuid) (head (host.blocks))) {
	    if (!propEq ('uuid') (evt.target.uuid) (last (host.blocks))) {
	      focusAdjacentBlock (1) (host, evt);
	    } else {
	      focusAdjacentBlock (-1) (host, evt);
	    }
	    host.blocks = filter ((b) => b.uuid !== evt.target.uuid)
	                         (host.blocks);
	  } else {
	    evt.target.result = '';
	  }
	};

	const createBlock = (host, evt) => {
	  let new_block = {
	    uuid: v4 (),
	    doc: '',
	    result: '',
	    multiline: false
	  };

	  if (host === undefined) {
	    return new_block
	  } else {
	    host.blocks = insertAfter (propEq ('uuid') (evt.target.uuid))
	                              (new_block)
	                              (host.blocks);
	  }
	};

	const createBlockIfLast = (host, evt) =>
	  propEq ('uuid') (evt.target.uuid) (last (host.blocks)) ?
	    createBlock  (host, evt)
	    : null;

	const focusAdjacentBlock = (d) => (host, evt) => {
	  let bs = document.getElementsByTagName ('e-block');
	  let index = 
	    add (d) 
	        (findIndex (propEq ('uuid') (evt.target.uuid)) (bs));
	  index >= 0 && index < length (bs) ?
	    bs [index].editor.focus ()  
	    : null;
	};

	const scrollToEnd = (host, evt) => {
	  if (!propEq ('uuid') (evt.target.uuid) (last (host.blocks))) {
	    host.scrollTop = host.scrollHeight;
	  }
	};

	const App = {
	  saveBlock: false,
	  blocks: [ createBlock () ],
	  render: render (
	    ({ saveBlock, blocks, console }) => html`
      <div id="app-container">
        ${addIndex (map$1) ((block, index) => html`
            <e-block doc=${block.doc} 
                     index=${index}
                     uuid=${block.uuid}
                     data-uuid=${block.uuid}
                     oncreateblock=${createBlock}
                     oncreateblockiflast=${createBlockIfLast}
                     ondeleteblock=${deleteBlock}
                     onnextblock=${focusAdjacentBlock (1)}
                     onprevblock=${focusAdjacentBlock (-1)}
                     onscrolltoend=${scrollToEnd}
                     onsaveblock=${(host) => { host.saveBlock = true; }}>
            </e-block>
          `.key (block.uuid),
          blocks )}
        <div id="preview" class="hidden"></div>
      </div>
      ${saveBlock && html`
      <e-save-block onclose="${(h, e) => {h.saveBlock = false; }}" 
                    block="let a = 5" />
      `}
    `,
	    { shadowRoot: false })
	};

	define ('e-app', App);

	const octokit = new Octokit$1 ({ auth: token });

	exports.RMidi = main;
	exports.hybrids = index$3;
	exports.octokit = octokit;
	exports.ramda = index;
	exports.rxjs = index$1;
	exports.rxjs_operators = index$2;
	exports.tone = Tone$2;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bundle.js.map
